// Code generated by ent, DO NOT EDIT.

package unittechnique

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the unittechnique type in the database.
	Label = "unit_technique"
	// FieldUnitID holds the string denoting the unit_id field in the database.
	FieldUnitID = "unit_id"
	// FieldTechniqueID holds the string denoting the technique_id field in the database.
	FieldTechniqueID = "technique_id"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// EdgeUnit holds the string denoting the unit edge name in mutations.
	EdgeUnit = "unit"
	// EdgeTechnique holds the string denoting the technique edge name in mutations.
	EdgeTechnique = "technique"
	// UnitFieldID holds the string denoting the ID field of the Unit.
	UnitFieldID = "id"
	// TechniqueFieldID holds the string denoting the ID field of the Technique.
	TechniqueFieldID = "id"
	// Table holds the table name of the unittechnique in the database.
	Table = "unit_techniques"
	// UnitTable is the table that holds the unit relation/edge.
	UnitTable = "unit_techniques"
	// UnitInverseTable is the table name for the Unit entity.
	// It exists in this package in order to avoid circular dependency with the "unit" package.
	UnitInverseTable = "units"
	// UnitColumn is the table column denoting the unit relation/edge.
	UnitColumn = "unit_id"
	// TechniqueTable is the table that holds the technique relation/edge.
	TechniqueTable = "unit_techniques"
	// TechniqueInverseTable is the table name for the Technique entity.
	// It exists in this package in order to avoid circular dependency with the "technique" package.
	TechniqueInverseTable = "techniques"
	// TechniqueColumn is the table column denoting the technique relation/edge.
	TechniqueColumn = "technique_id"
)

// Columns holds all SQL columns for unittechnique fields.
var Columns = []string{
	FieldUnitID,
	FieldTechniqueID,
	FieldPosition,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UnitTechnique queries.
type OrderOption func(*sql.Selector)

// ByUnitID orders the results by the unit_id field.
func ByUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitID, opts...).ToFunc()
}

// ByTechniqueID orders the results by the technique_id field.
func ByTechniqueID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTechniqueID, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByUnitField orders the results by unit field.
func ByUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByTechniqueField orders the results by technique field.
func ByTechniqueField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTechniqueStep(), sql.OrderByField(field, opts...))
	}
}
func newUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UnitColumn),
		sqlgraph.To(UnitInverseTable, UnitFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UnitTable, UnitColumn),
	)
}
func newTechniqueStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, TechniqueColumn),
		sqlgraph.To(TechniqueInverseTable, TechniqueFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TechniqueTable, TechniqueColumn),
	)
}
