// Code generated by ent, DO NOT EDIT.

package unittechnique

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/predicate"
)

// UnitID applies equality check predicate on the "unit_id" field. It's identical to UnitIDEQ.
func UnitID(v gqlid.UnitID) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldEQ(FieldUnitID, v))
}

// TechniqueID applies equality check predicate on the "technique_id" field. It's identical to TechniqueIDEQ.
func TechniqueID(v gqlid.TechniqueID) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldEQ(FieldTechniqueID, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v int64) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldEQ(FieldPosition, v))
}

// UnitIDEQ applies the EQ predicate on the "unit_id" field.
func UnitIDEQ(v gqlid.UnitID) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldEQ(FieldUnitID, v))
}

// UnitIDNEQ applies the NEQ predicate on the "unit_id" field.
func UnitIDNEQ(v gqlid.UnitID) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldNEQ(FieldUnitID, v))
}

// UnitIDIn applies the In predicate on the "unit_id" field.
func UnitIDIn(vs ...gqlid.UnitID) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldIn(FieldUnitID, vs...))
}

// UnitIDNotIn applies the NotIn predicate on the "unit_id" field.
func UnitIDNotIn(vs ...gqlid.UnitID) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldNotIn(FieldUnitID, vs...))
}

// TechniqueIDEQ applies the EQ predicate on the "technique_id" field.
func TechniqueIDEQ(v gqlid.TechniqueID) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldEQ(FieldTechniqueID, v))
}

// TechniqueIDNEQ applies the NEQ predicate on the "technique_id" field.
func TechniqueIDNEQ(v gqlid.TechniqueID) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldNEQ(FieldTechniqueID, v))
}

// TechniqueIDIn applies the In predicate on the "technique_id" field.
func TechniqueIDIn(vs ...gqlid.TechniqueID) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldIn(FieldTechniqueID, vs...))
}

// TechniqueIDNotIn applies the NotIn predicate on the "technique_id" field.
func TechniqueIDNotIn(vs ...gqlid.TechniqueID) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldNotIn(FieldTechniqueID, vs...))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v int64) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v int64) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...int64) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...int64) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v int64) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v int64) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v int64) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v int64) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.FieldLTE(FieldPosition, v))
}

// HasUnit applies the HasEdge predicate on the "unit" edge.
func HasUnit() predicate.UnitTechnique {
	return predicate.UnitTechnique(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UnitColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UnitTable, UnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUnitWith applies the HasEdge predicate on the "unit" edge with a given conditions (other predicates).
func HasUnitWith(preds ...predicate.Unit) predicate.UnitTechnique {
	return predicate.UnitTechnique(func(s *sql.Selector) {
		step := newUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTechnique applies the HasEdge predicate on the "technique" edge.
func HasTechnique() predicate.UnitTechnique {
	return predicate.UnitTechnique(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TechniqueColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, TechniqueTable, TechniqueColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTechniqueWith applies the HasEdge predicate on the "technique" edge with a given conditions (other predicates).
func HasTechniqueWith(preds ...predicate.Technique) predicate.UnitTechnique {
	return predicate.UnitTechnique(func(s *sql.Selector) {
		step := newTechniqueStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UnitTechnique) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UnitTechnique) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UnitTechnique) predicate.UnitTechnique {
	return predicate.UnitTechnique(sql.NotPredicates(p))
}
