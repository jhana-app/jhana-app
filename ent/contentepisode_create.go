// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/content"
	"github.com/jhana-app/jhana-app/ent/contentepisode"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/property"
)

// ContentEpisodeCreate is the builder for creating a ContentEpisode entity.
type ContentEpisodeCreate struct {
	config
	mutation *ContentEpisodeMutation
	hooks    []Hook
}

// SetContentID sets the "content_id" field.
func (cec *ContentEpisodeCreate) SetContentID(gi gqlid.ContentID) *ContentEpisodeCreate {
	cec.mutation.SetContentID(gi)
	return cec
}

// SetType sets the "type" field.
func (cec *ContentEpisodeCreate) SetType(pt property.ContentType) *ContentEpisodeCreate {
	cec.mutation.SetType(pt)
	return cec
}

// SetTitle sets the "title" field.
func (cec *ContentEpisodeCreate) SetTitle(s string) *ContentEpisodeCreate {
	cec.mutation.SetTitle(s)
	return cec
}

// SetSubtitle sets the "subtitle" field.
func (cec *ContentEpisodeCreate) SetSubtitle(s string) *ContentEpisodeCreate {
	cec.mutation.SetSubtitle(s)
	return cec
}

// SetDescription sets the "description" field.
func (cec *ContentEpisodeCreate) SetDescription(s string) *ContentEpisodeCreate {
	cec.mutation.SetDescription(s)
	return cec
}

// SetDuration sets the "duration" field.
func (cec *ContentEpisodeCreate) SetDuration(i int) *ContentEpisodeCreate {
	cec.mutation.SetDuration(i)
	return cec
}

// SetStreamURL sets the "streamURL" field.
func (cec *ContentEpisodeCreate) SetStreamURL(s string) *ContentEpisodeCreate {
	cec.mutation.SetStreamURL(s)
	return cec
}

// SetDownloadURL sets the "downloadURL" field.
func (cec *ContentEpisodeCreate) SetDownloadURL(s string) *ContentEpisodeCreate {
	cec.mutation.SetDownloadURL(s)
	return cec
}

// SetSource sets the "source" field.
func (cec *ContentEpisodeCreate) SetSource(s string) *ContentEpisodeCreate {
	cec.mutation.SetSource(s)
	return cec
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (cec *ContentEpisodeCreate) SetNillableSource(s *string) *ContentEpisodeCreate {
	if s != nil {
		cec.SetSource(*s)
	}
	return cec
}

// SetSourceURL sets the "sourceURL" field.
func (cec *ContentEpisodeCreate) SetSourceURL(s string) *ContentEpisodeCreate {
	cec.mutation.SetSourceURL(s)
	return cec
}

// SetNillableSourceURL sets the "sourceURL" field if the given value is not nil.
func (cec *ContentEpisodeCreate) SetNillableSourceURL(s *string) *ContentEpisodeCreate {
	if s != nil {
		cec.SetSourceURL(*s)
	}
	return cec
}

// SetLicence sets the "licence" field.
func (cec *ContentEpisodeCreate) SetLicence(s string) *ContentEpisodeCreate {
	cec.mutation.SetLicence(s)
	return cec
}

// SetNillableLicence sets the "licence" field if the given value is not nil.
func (cec *ContentEpisodeCreate) SetNillableLicence(s *string) *ContentEpisodeCreate {
	if s != nil {
		cec.SetLicence(*s)
	}
	return cec
}

// SetLicenceURL sets the "licenceURL" field.
func (cec *ContentEpisodeCreate) SetLicenceURL(s string) *ContentEpisodeCreate {
	cec.mutation.SetLicenceURL(s)
	return cec
}

// SetNillableLicenceURL sets the "licenceURL" field if the given value is not nil.
func (cec *ContentEpisodeCreate) SetNillableLicenceURL(s *string) *ContentEpisodeCreate {
	if s != nil {
		cec.SetLicenceURL(*s)
	}
	return cec
}

// SetIsHidden sets the "isHidden" field.
func (cec *ContentEpisodeCreate) SetIsHidden(b bool) *ContentEpisodeCreate {
	cec.mutation.SetIsHidden(b)
	return cec
}

// SetNillableIsHidden sets the "isHidden" field if the given value is not nil.
func (cec *ContentEpisodeCreate) SetNillableIsHidden(b *bool) *ContentEpisodeCreate {
	if b != nil {
		cec.SetIsHidden(*b)
	}
	return cec
}

// SetOrder sets the "order" field.
func (cec *ContentEpisodeCreate) SetOrder(i int) *ContentEpisodeCreate {
	cec.mutation.SetOrder(i)
	return cec
}

// SetID sets the "id" field.
func (cec *ContentEpisodeCreate) SetID(gei gqlid.ContentEpisodeID) *ContentEpisodeCreate {
	cec.mutation.SetID(gei)
	return cec
}

// SetContent sets the "content" edge to the Content entity.
func (cec *ContentEpisodeCreate) SetContent(c *Content) *ContentEpisodeCreate {
	return cec.SetContentID(c.ID)
}

// Mutation returns the ContentEpisodeMutation object of the builder.
func (cec *ContentEpisodeCreate) Mutation() *ContentEpisodeMutation {
	return cec.mutation
}

// Save creates the ContentEpisode in the database.
func (cec *ContentEpisodeCreate) Save(ctx context.Context) (*ContentEpisode, error) {
	cec.defaults()
	return withHooks(ctx, cec.sqlSave, cec.mutation, cec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cec *ContentEpisodeCreate) SaveX(ctx context.Context) *ContentEpisode {
	v, err := cec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cec *ContentEpisodeCreate) Exec(ctx context.Context) error {
	_, err := cec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cec *ContentEpisodeCreate) ExecX(ctx context.Context) {
	if err := cec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cec *ContentEpisodeCreate) defaults() {
	if _, ok := cec.mutation.Source(); !ok {
		v := contentepisode.DefaultSource
		cec.mutation.SetSource(v)
	}
	if _, ok := cec.mutation.SourceURL(); !ok {
		v := contentepisode.DefaultSourceURL
		cec.mutation.SetSourceURL(v)
	}
	if _, ok := cec.mutation.Licence(); !ok {
		v := contentepisode.DefaultLicence
		cec.mutation.SetLicence(v)
	}
	if _, ok := cec.mutation.LicenceURL(); !ok {
		v := contentepisode.DefaultLicenceURL
		cec.mutation.SetLicenceURL(v)
	}
	if _, ok := cec.mutation.IsHidden(); !ok {
		v := contentepisode.DefaultIsHidden
		cec.mutation.SetIsHidden(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cec *ContentEpisodeCreate) check() error {
	if _, ok := cec.mutation.ContentID(); !ok {
		return &ValidationError{Name: "content_id", err: errors.New(`ent: missing required field "ContentEpisode.content_id"`)}
	}
	if _, ok := cec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ContentEpisode.type"`)}
	}
	if v, ok := cec.mutation.GetType(); ok {
		if err := contentepisode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.type": %w`, err)}
		}
	}
	if _, ok := cec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ContentEpisode.title"`)}
	}
	if v, ok := cec.mutation.Title(); ok {
		if err := contentepisode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.title": %w`, err)}
		}
	}
	if _, ok := cec.mutation.Subtitle(); !ok {
		return &ValidationError{Name: "subtitle", err: errors.New(`ent: missing required field "ContentEpisode.subtitle"`)}
	}
	if v, ok := cec.mutation.Subtitle(); ok {
		if err := contentepisode.SubtitleValidator(v); err != nil {
			return &ValidationError{Name: "subtitle", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.subtitle": %w`, err)}
		}
	}
	if _, ok := cec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ContentEpisode.description"`)}
	}
	if v, ok := cec.mutation.Description(); ok {
		if err := contentepisode.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.description": %w`, err)}
		}
	}
	if _, ok := cec.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "ContentEpisode.duration"`)}
	}
	if v, ok := cec.mutation.Duration(); ok {
		if err := contentepisode.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.duration": %w`, err)}
		}
	}
	if _, ok := cec.mutation.StreamURL(); !ok {
		return &ValidationError{Name: "streamURL", err: errors.New(`ent: missing required field "ContentEpisode.streamURL"`)}
	}
	if _, ok := cec.mutation.DownloadURL(); !ok {
		return &ValidationError{Name: "downloadURL", err: errors.New(`ent: missing required field "ContentEpisode.downloadURL"`)}
	}
	if _, ok := cec.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "ContentEpisode.source"`)}
	}
	if _, ok := cec.mutation.SourceURL(); !ok {
		return &ValidationError{Name: "sourceURL", err: errors.New(`ent: missing required field "ContentEpisode.sourceURL"`)}
	}
	if _, ok := cec.mutation.Licence(); !ok {
		return &ValidationError{Name: "licence", err: errors.New(`ent: missing required field "ContentEpisode.licence"`)}
	}
	if _, ok := cec.mutation.LicenceURL(); !ok {
		return &ValidationError{Name: "licenceURL", err: errors.New(`ent: missing required field "ContentEpisode.licenceURL"`)}
	}
	if _, ok := cec.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "isHidden", err: errors.New(`ent: missing required field "ContentEpisode.isHidden"`)}
	}
	if _, ok := cec.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "ContentEpisode.order"`)}
	}
	if v, ok := cec.mutation.Order(); ok {
		if err := contentepisode.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.order": %w`, err)}
		}
	}
	if _, ok := cec.mutation.ContentID(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required edge "ContentEpisode.content"`)}
	}
	return nil
}

func (cec *ContentEpisodeCreate) sqlSave(ctx context.Context) (*ContentEpisode, error) {
	if err := cec.check(); err != nil {
		return nil, err
	}
	_node, _spec := cec.createSpec()
	if err := sqlgraph.CreateNode(ctx, cec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gqlid.ContentEpisodeID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cec.mutation.id = &_node.ID
	cec.mutation.done = true
	return _node, nil
}

func (cec *ContentEpisodeCreate) createSpec() (*ContentEpisode, *sqlgraph.CreateSpec) {
	var (
		_node = &ContentEpisode{config: cec.config}
		_spec = sqlgraph.NewCreateSpec(contentepisode.Table, sqlgraph.NewFieldSpec(contentepisode.FieldID, field.TypeInt64))
	)
	if id, ok := cec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cec.mutation.GetType(); ok {
		_spec.SetField(contentepisode.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cec.mutation.Title(); ok {
		_spec.SetField(contentepisode.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cec.mutation.Subtitle(); ok {
		_spec.SetField(contentepisode.FieldSubtitle, field.TypeString, value)
		_node.Subtitle = value
	}
	if value, ok := cec.mutation.Description(); ok {
		_spec.SetField(contentepisode.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cec.mutation.Duration(); ok {
		_spec.SetField(contentepisode.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := cec.mutation.StreamURL(); ok {
		_spec.SetField(contentepisode.FieldStreamURL, field.TypeString, value)
		_node.StreamURL = value
	}
	if value, ok := cec.mutation.DownloadURL(); ok {
		_spec.SetField(contentepisode.FieldDownloadURL, field.TypeString, value)
		_node.DownloadURL = value
	}
	if value, ok := cec.mutation.Source(); ok {
		_spec.SetField(contentepisode.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := cec.mutation.SourceURL(); ok {
		_spec.SetField(contentepisode.FieldSourceURL, field.TypeString, value)
		_node.SourceURL = value
	}
	if value, ok := cec.mutation.Licence(); ok {
		_spec.SetField(contentepisode.FieldLicence, field.TypeString, value)
		_node.Licence = value
	}
	if value, ok := cec.mutation.LicenceURL(); ok {
		_spec.SetField(contentepisode.FieldLicenceURL, field.TypeString, value)
		_node.LicenceURL = value
	}
	if value, ok := cec.mutation.IsHidden(); ok {
		_spec.SetField(contentepisode.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := cec.mutation.Order(); ok {
		_spec.SetField(contentepisode.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := cec.mutation.ContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contentepisode.ContentTable,
			Columns: []string{contentepisode.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(content.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ContentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContentEpisodeCreateBulk is the builder for creating many ContentEpisode entities in bulk.
type ContentEpisodeCreateBulk struct {
	config
	err      error
	builders []*ContentEpisodeCreate
}

// Save creates the ContentEpisode entities in the database.
func (cecb *ContentEpisodeCreateBulk) Save(ctx context.Context) ([]*ContentEpisode, error) {
	if cecb.err != nil {
		return nil, cecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cecb.builders))
	nodes := make([]*ContentEpisode, len(cecb.builders))
	mutators := make([]Mutator, len(cecb.builders))
	for i := range cecb.builders {
		func(i int, root context.Context) {
			builder := cecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContentEpisodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					if err := nodes[i].ID.Scan(specs[i].ID.Value); err != nil {
						return nil, err
					}
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cecb *ContentEpisodeCreateBulk) SaveX(ctx context.Context) []*ContentEpisode {
	v, err := cecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cecb *ContentEpisodeCreateBulk) Exec(ctx context.Context) error {
	_, err := cecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecb *ContentEpisodeCreateBulk) ExecX(ctx context.Context) {
	if err := cecb.Exec(ctx); err != nil {
		panic(err)
	}
}
