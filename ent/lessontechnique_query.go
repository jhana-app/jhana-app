// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/lessontechnique"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/technique"
)

// LessonTechniqueQuery is the builder for querying LessonTechnique entities.
type LessonTechniqueQuery struct {
	config
	ctx           *QueryContext
	order         []lessontechnique.OrderOption
	inters        []Interceptor
	predicates    []predicate.LessonTechnique
	withLesson    *LessonQuery
	withTechnique *TechniqueQuery
	loadTotal     []func(context.Context, []*LessonTechnique) error
	modifiers     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LessonTechniqueQuery builder.
func (ltq *LessonTechniqueQuery) Where(ps ...predicate.LessonTechnique) *LessonTechniqueQuery {
	ltq.predicates = append(ltq.predicates, ps...)
	return ltq
}

// Limit the number of records to be returned by this query.
func (ltq *LessonTechniqueQuery) Limit(limit int) *LessonTechniqueQuery {
	ltq.ctx.Limit = &limit
	return ltq
}

// Offset to start from.
func (ltq *LessonTechniqueQuery) Offset(offset int) *LessonTechniqueQuery {
	ltq.ctx.Offset = &offset
	return ltq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ltq *LessonTechniqueQuery) Unique(unique bool) *LessonTechniqueQuery {
	ltq.ctx.Unique = &unique
	return ltq
}

// Order specifies how the records should be ordered.
func (ltq *LessonTechniqueQuery) Order(o ...lessontechnique.OrderOption) *LessonTechniqueQuery {
	ltq.order = append(ltq.order, o...)
	return ltq
}

// QueryLesson chains the current query on the "lesson" edge.
func (ltq *LessonTechniqueQuery) QueryLesson() *LessonQuery {
	query := (&LessonClient{config: ltq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ltq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ltq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessontechnique.Table, lessontechnique.LessonColumn, selector),
			sqlgraph.To(lesson.Table, lesson.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lessontechnique.LessonTable, lessontechnique.LessonColumn),
		)
		fromU = sqlgraph.SetNeighbors(ltq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTechnique chains the current query on the "technique" edge.
func (ltq *LessonTechniqueQuery) QueryTechnique() *TechniqueQuery {
	query := (&TechniqueClient{config: ltq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ltq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ltq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessontechnique.Table, lessontechnique.TechniqueColumn, selector),
			sqlgraph.To(technique.Table, technique.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lessontechnique.TechniqueTable, lessontechnique.TechniqueColumn),
		)
		fromU = sqlgraph.SetNeighbors(ltq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LessonTechnique entity from the query.
// Returns a *NotFoundError when no LessonTechnique was found.
func (ltq *LessonTechniqueQuery) First(ctx context.Context) (*LessonTechnique, error) {
	nodes, err := ltq.Limit(1).All(setContextOp(ctx, ltq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lessontechnique.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ltq *LessonTechniqueQuery) FirstX(ctx context.Context) *LessonTechnique {
	node, err := ltq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single LessonTechnique entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LessonTechnique entity is found.
// Returns a *NotFoundError when no LessonTechnique entities are found.
func (ltq *LessonTechniqueQuery) Only(ctx context.Context) (*LessonTechnique, error) {
	nodes, err := ltq.Limit(2).All(setContextOp(ctx, ltq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lessontechnique.Label}
	default:
		return nil, &NotSingularError{lessontechnique.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ltq *LessonTechniqueQuery) OnlyX(ctx context.Context) *LessonTechnique {
	node, err := ltq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of LessonTechniques.
func (ltq *LessonTechniqueQuery) All(ctx context.Context) ([]*LessonTechnique, error) {
	ctx = setContextOp(ctx, ltq.ctx, "All")
	if err := ltq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LessonTechnique, *LessonTechniqueQuery]()
	return withInterceptors[[]*LessonTechnique](ctx, ltq, qr, ltq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ltq *LessonTechniqueQuery) AllX(ctx context.Context) []*LessonTechnique {
	nodes, err := ltq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (ltq *LessonTechniqueQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ltq.ctx, "Count")
	if err := ltq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ltq, querierCount[*LessonTechniqueQuery](), ltq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ltq *LessonTechniqueQuery) CountX(ctx context.Context) int {
	count, err := ltq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ltq *LessonTechniqueQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ltq.ctx, "Exist")
	switch _, err := ltq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ltq *LessonTechniqueQuery) ExistX(ctx context.Context) bool {
	exist, err := ltq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LessonTechniqueQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ltq *LessonTechniqueQuery) Clone() *LessonTechniqueQuery {
	if ltq == nil {
		return nil
	}
	return &LessonTechniqueQuery{
		config:        ltq.config,
		ctx:           ltq.ctx.Clone(),
		order:         append([]lessontechnique.OrderOption{}, ltq.order...),
		inters:        append([]Interceptor{}, ltq.inters...),
		predicates:    append([]predicate.LessonTechnique{}, ltq.predicates...),
		withLesson:    ltq.withLesson.Clone(),
		withTechnique: ltq.withTechnique.Clone(),
		// clone intermediate query.
		sql:  ltq.sql.Clone(),
		path: ltq.path,
	}
}

// WithLesson tells the query-builder to eager-load the nodes that are connected to
// the "lesson" edge. The optional arguments are used to configure the query builder of the edge.
func (ltq *LessonTechniqueQuery) WithLesson(opts ...func(*LessonQuery)) *LessonTechniqueQuery {
	query := (&LessonClient{config: ltq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ltq.withLesson = query
	return ltq
}

// WithTechnique tells the query-builder to eager-load the nodes that are connected to
// the "technique" edge. The optional arguments are used to configure the query builder of the edge.
func (ltq *LessonTechniqueQuery) WithTechnique(opts ...func(*TechniqueQuery)) *LessonTechniqueQuery {
	query := (&TechniqueClient{config: ltq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ltq.withTechnique = query
	return ltq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LessonID gqlid.LessonID `json:"lesson_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LessonTechnique.Query().
//		GroupBy(lessontechnique.FieldLessonID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ltq *LessonTechniqueQuery) GroupBy(field string, fields ...string) *LessonTechniqueGroupBy {
	ltq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LessonTechniqueGroupBy{build: ltq}
	grbuild.flds = &ltq.ctx.Fields
	grbuild.label = lessontechnique.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LessonID gqlid.LessonID `json:"lesson_id,omitempty"`
//	}
//
//	client.LessonTechnique.Query().
//		Select(lessontechnique.FieldLessonID).
//		Scan(ctx, &v)
func (ltq *LessonTechniqueQuery) Select(fields ...string) *LessonTechniqueSelect {
	ltq.ctx.Fields = append(ltq.ctx.Fields, fields...)
	sbuild := &LessonTechniqueSelect{LessonTechniqueQuery: ltq}
	sbuild.label = lessontechnique.Label
	sbuild.flds, sbuild.scan = &ltq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LessonTechniqueSelect configured with the given aggregations.
func (ltq *LessonTechniqueQuery) Aggregate(fns ...AggregateFunc) *LessonTechniqueSelect {
	return ltq.Select().Aggregate(fns...)
}

func (ltq *LessonTechniqueQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ltq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ltq); err != nil {
				return err
			}
		}
	}
	for _, f := range ltq.ctx.Fields {
		if !lessontechnique.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ltq.path != nil {
		prev, err := ltq.path(ctx)
		if err != nil {
			return err
		}
		ltq.sql = prev
	}
	return nil
}

func (ltq *LessonTechniqueQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LessonTechnique, error) {
	var (
		nodes       = []*LessonTechnique{}
		_spec       = ltq.querySpec()
		loadedTypes = [2]bool{
			ltq.withLesson != nil,
			ltq.withTechnique != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LessonTechnique).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LessonTechnique{config: ltq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ltq.modifiers) > 0 {
		_spec.Modifiers = ltq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ltq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ltq.withLesson; query != nil {
		if err := ltq.loadLesson(ctx, query, nodes, nil,
			func(n *LessonTechnique, e *Lesson) { n.Edges.Lesson = e }); err != nil {
			return nil, err
		}
	}
	if query := ltq.withTechnique; query != nil {
		if err := ltq.loadTechnique(ctx, query, nodes, nil,
			func(n *LessonTechnique, e *Technique) { n.Edges.Technique = e }); err != nil {
			return nil, err
		}
	}
	for i := range ltq.loadTotal {
		if err := ltq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ltq *LessonTechniqueQuery) loadLesson(ctx context.Context, query *LessonQuery, nodes []*LessonTechnique, init func(*LessonTechnique), assign func(*LessonTechnique, *Lesson)) error {
	ids := make([]gqlid.LessonID, 0, len(nodes))
	nodeids := make(map[gqlid.LessonID][]*LessonTechnique)
	for i := range nodes {
		fk := nodes[i].LessonID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(lesson.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "lesson_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ltq *LessonTechniqueQuery) loadTechnique(ctx context.Context, query *TechniqueQuery, nodes []*LessonTechnique, init func(*LessonTechnique), assign func(*LessonTechnique, *Technique)) error {
	ids := make([]gqlid.TechniqueID, 0, len(nodes))
	nodeids := make(map[gqlid.TechniqueID][]*LessonTechnique)
	for i := range nodes {
		fk := nodes[i].TechniqueID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(technique.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "technique_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ltq *LessonTechniqueQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ltq.querySpec()
	if len(ltq.modifiers) > 0 {
		_spec.Modifiers = ltq.modifiers
	}
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, ltq.driver, _spec)
}

func (ltq *LessonTechniqueQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lessontechnique.Table, lessontechnique.Columns, nil)
	_spec.From = ltq.sql
	if unique := ltq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ltq.path != nil {
		_spec.Unique = true
	}
	if fields := ltq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if ltq.withLesson != nil {
			_spec.Node.AddColumnOnce(lessontechnique.FieldLessonID)
		}
		if ltq.withTechnique != nil {
			_spec.Node.AddColumnOnce(lessontechnique.FieldTechniqueID)
		}
	}
	if ps := ltq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ltq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ltq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ltq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ltq *LessonTechniqueQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ltq.driver.Dialect())
	t1 := builder.Table(lessontechnique.Table)
	columns := ltq.ctx.Fields
	if len(columns) == 0 {
		columns = lessontechnique.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ltq.sql != nil {
		selector = ltq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ltq.ctx.Unique != nil && *ltq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ltq.modifiers {
		m(selector)
	}
	for _, p := range ltq.predicates {
		p(selector)
	}
	for _, p := range ltq.order {
		p(selector)
	}
	if offset := ltq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ltq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ltq *LessonTechniqueQuery) Modify(modifiers ...func(s *sql.Selector)) *LessonTechniqueSelect {
	ltq.modifiers = append(ltq.modifiers, modifiers...)
	return ltq.Select()
}

// LessonTechniqueGroupBy is the group-by builder for LessonTechnique entities.
type LessonTechniqueGroupBy struct {
	selector
	build *LessonTechniqueQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ltgb *LessonTechniqueGroupBy) Aggregate(fns ...AggregateFunc) *LessonTechniqueGroupBy {
	ltgb.fns = append(ltgb.fns, fns...)
	return ltgb
}

// Scan applies the selector query and scans the result into the given value.
func (ltgb *LessonTechniqueGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ltgb.build.ctx, "GroupBy")
	if err := ltgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonTechniqueQuery, *LessonTechniqueGroupBy](ctx, ltgb.build, ltgb, ltgb.build.inters, v)
}

func (ltgb *LessonTechniqueGroupBy) sqlScan(ctx context.Context, root *LessonTechniqueQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ltgb.fns))
	for _, fn := range ltgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ltgb.flds)+len(ltgb.fns))
		for _, f := range *ltgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ltgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ltgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LessonTechniqueSelect is the builder for selecting fields of LessonTechnique entities.
type LessonTechniqueSelect struct {
	*LessonTechniqueQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lts *LessonTechniqueSelect) Aggregate(fns ...AggregateFunc) *LessonTechniqueSelect {
	lts.fns = append(lts.fns, fns...)
	return lts
}

// Scan applies the selector query and scans the result into the given value.
func (lts *LessonTechniqueSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lts.ctx, "Select")
	if err := lts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonTechniqueQuery, *LessonTechniqueSelect](ctx, lts.LessonTechniqueQuery, lts, lts.inters, v)
}

func (lts *LessonTechniqueSelect) sqlScan(ctx context.Context, root *LessonTechniqueQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lts.fns))
	for _, fn := range lts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (lts *LessonTechniqueSelect) Modify(modifiers ...func(s *sql.Selector)) *LessonTechniqueSelect {
	lts.modifiers = append(lts.modifiers, modifiers...)
	return lts
}
