// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/lessontechnique"
	"github.com/jhana-app/jhana-app/ent/predicate"
)

// LessonTechniqueUpdate is the builder for updating LessonTechnique entities.
type LessonTechniqueUpdate struct {
	config
	hooks     []Hook
	mutation  *LessonTechniqueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LessonTechniqueUpdate builder.
func (ltu *LessonTechniqueUpdate) Where(ps ...predicate.LessonTechnique) *LessonTechniqueUpdate {
	ltu.mutation.Where(ps...)
	return ltu
}

// Mutation returns the LessonTechniqueMutation object of the builder.
func (ltu *LessonTechniqueUpdate) Mutation() *LessonTechniqueMutation {
	return ltu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltu *LessonTechniqueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ltu.sqlSave, ltu.mutation, ltu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltu *LessonTechniqueUpdate) SaveX(ctx context.Context) int {
	affected, err := ltu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltu *LessonTechniqueUpdate) Exec(ctx context.Context) error {
	_, err := ltu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltu *LessonTechniqueUpdate) ExecX(ctx context.Context) {
	if err := ltu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltu *LessonTechniqueUpdate) check() error {
	if _, ok := ltu.mutation.LessonID(); ltu.mutation.LessonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LessonTechnique.lesson"`)
	}
	if _, ok := ltu.mutation.TechniqueID(); ltu.mutation.TechniqueCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LessonTechnique.technique"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ltu *LessonTechniqueUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LessonTechniqueUpdate {
	ltu.modifiers = append(ltu.modifiers, modifiers...)
	return ltu
}

func (ltu *LessonTechniqueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ltu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessontechnique.Table, lessontechnique.Columns, sqlgraph.NewFieldSpec(lessontechnique.FieldLessonID, field.TypeInt64), sqlgraph.NewFieldSpec(lessontechnique.FieldTechniqueID, field.TypeInt64))
	if ps := ltu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.AddModifiers(ltu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ltu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessontechnique.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ltu.mutation.done = true
	return n, nil
}

// LessonTechniqueUpdateOne is the builder for updating a single LessonTechnique entity.
type LessonTechniqueUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LessonTechniqueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Mutation returns the LessonTechniqueMutation object of the builder.
func (ltuo *LessonTechniqueUpdateOne) Mutation() *LessonTechniqueMutation {
	return ltuo.mutation
}

// Where appends a list predicates to the LessonTechniqueUpdate builder.
func (ltuo *LessonTechniqueUpdateOne) Where(ps ...predicate.LessonTechnique) *LessonTechniqueUpdateOne {
	ltuo.mutation.Where(ps...)
	return ltuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltuo *LessonTechniqueUpdateOne) Select(field string, fields ...string) *LessonTechniqueUpdateOne {
	ltuo.fields = append([]string{field}, fields...)
	return ltuo
}

// Save executes the query and returns the updated LessonTechnique entity.
func (ltuo *LessonTechniqueUpdateOne) Save(ctx context.Context) (*LessonTechnique, error) {
	return withHooks(ctx, ltuo.sqlSave, ltuo.mutation, ltuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltuo *LessonTechniqueUpdateOne) SaveX(ctx context.Context) *LessonTechnique {
	node, err := ltuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltuo *LessonTechniqueUpdateOne) Exec(ctx context.Context) error {
	_, err := ltuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltuo *LessonTechniqueUpdateOne) ExecX(ctx context.Context) {
	if err := ltuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltuo *LessonTechniqueUpdateOne) check() error {
	if _, ok := ltuo.mutation.LessonID(); ltuo.mutation.LessonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LessonTechnique.lesson"`)
	}
	if _, ok := ltuo.mutation.TechniqueID(); ltuo.mutation.TechniqueCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LessonTechnique.technique"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ltuo *LessonTechniqueUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LessonTechniqueUpdateOne {
	ltuo.modifiers = append(ltuo.modifiers, modifiers...)
	return ltuo
}

func (ltuo *LessonTechniqueUpdateOne) sqlSave(ctx context.Context) (_node *LessonTechnique, err error) {
	if err := ltuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessontechnique.Table, lessontechnique.Columns, sqlgraph.NewFieldSpec(lessontechnique.FieldLessonID, field.TypeInt64), sqlgraph.NewFieldSpec(lessontechnique.FieldTechniqueID, field.TypeInt64))
	if id, ok := ltuo.mutation.LessonID(); !ok {
		return nil, &ValidationError{Name: "lesson_id", err: errors.New(`ent: missing "LessonTechnique.lesson_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ltuo.mutation.TechniqueID(); !ok {
		return nil, &ValidationError{Name: "technique_id", err: errors.New(`ent: missing "LessonTechnique.technique_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ltuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !lessontechnique.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ltuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.AddModifiers(ltuo.modifiers...)
	_node = &LessonTechnique{config: ltuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessontechnique.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ltuo.mutation.done = true
	return _node, nil
}
