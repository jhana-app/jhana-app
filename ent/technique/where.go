// Code generated by ent, DO NOT EDIT.

package technique

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id gqlid.TechniqueID) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gqlid.TechniqueID) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gqlid.TechniqueID) predicate.Technique {
	return predicate.Technique(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gqlid.TechniqueID) predicate.Technique {
	return predicate.Technique(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gqlid.TechniqueID) predicate.Technique {
	return predicate.Technique(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gqlid.TechniqueID) predicate.Technique {
	return predicate.Technique(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gqlid.TechniqueID) predicate.Technique {
	return predicate.Technique(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gqlid.TechniqueID) predicate.Technique {
	return predicate.Technique(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gqlid.TechniqueID) predicate.Technique {
	return predicate.Technique(sql.FieldLTE(FieldID, id))
}

// UnitID applies equality check predicate on the "unit_id" field. It's identical to UnitIDEQ.
func UnitID(v gqlid.UnitID) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldUnitID, v))
}

// IconImage applies equality check predicate on the "iconImage" field. It's identical to IconImageEQ.
func IconImage(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldIconImage, v))
}

// CoverImage applies equality check predicate on the "coverImage" field. It's identical to CoverImageEQ.
func CoverImage(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldCoverImage, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldTitle, v))
}

// Subtitle applies equality check predicate on the "subtitle" field. It's identical to SubtitleEQ.
func Subtitle(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldSubtitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldDescription, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldOrder, v))
}

// UnitIDEQ applies the EQ predicate on the "unit_id" field.
func UnitIDEQ(v gqlid.UnitID) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldUnitID, v))
}

// UnitIDNEQ applies the NEQ predicate on the "unit_id" field.
func UnitIDNEQ(v gqlid.UnitID) predicate.Technique {
	return predicate.Technique(sql.FieldNEQ(FieldUnitID, v))
}

// UnitIDIn applies the In predicate on the "unit_id" field.
func UnitIDIn(vs ...gqlid.UnitID) predicate.Technique {
	return predicate.Technique(sql.FieldIn(FieldUnitID, vs...))
}

// UnitIDNotIn applies the NotIn predicate on the "unit_id" field.
func UnitIDNotIn(vs ...gqlid.UnitID) predicate.Technique {
	return predicate.Technique(sql.FieldNotIn(FieldUnitID, vs...))
}

// IconImageEQ applies the EQ predicate on the "iconImage" field.
func IconImageEQ(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldIconImage, v))
}

// IconImageNEQ applies the NEQ predicate on the "iconImage" field.
func IconImageNEQ(v string) predicate.Technique {
	return predicate.Technique(sql.FieldNEQ(FieldIconImage, v))
}

// IconImageIn applies the In predicate on the "iconImage" field.
func IconImageIn(vs ...string) predicate.Technique {
	return predicate.Technique(sql.FieldIn(FieldIconImage, vs...))
}

// IconImageNotIn applies the NotIn predicate on the "iconImage" field.
func IconImageNotIn(vs ...string) predicate.Technique {
	return predicate.Technique(sql.FieldNotIn(FieldIconImage, vs...))
}

// IconImageGT applies the GT predicate on the "iconImage" field.
func IconImageGT(v string) predicate.Technique {
	return predicate.Technique(sql.FieldGT(FieldIconImage, v))
}

// IconImageGTE applies the GTE predicate on the "iconImage" field.
func IconImageGTE(v string) predicate.Technique {
	return predicate.Technique(sql.FieldGTE(FieldIconImage, v))
}

// IconImageLT applies the LT predicate on the "iconImage" field.
func IconImageLT(v string) predicate.Technique {
	return predicate.Technique(sql.FieldLT(FieldIconImage, v))
}

// IconImageLTE applies the LTE predicate on the "iconImage" field.
func IconImageLTE(v string) predicate.Technique {
	return predicate.Technique(sql.FieldLTE(FieldIconImage, v))
}

// IconImageContains applies the Contains predicate on the "iconImage" field.
func IconImageContains(v string) predicate.Technique {
	return predicate.Technique(sql.FieldContains(FieldIconImage, v))
}

// IconImageHasPrefix applies the HasPrefix predicate on the "iconImage" field.
func IconImageHasPrefix(v string) predicate.Technique {
	return predicate.Technique(sql.FieldHasPrefix(FieldIconImage, v))
}

// IconImageHasSuffix applies the HasSuffix predicate on the "iconImage" field.
func IconImageHasSuffix(v string) predicate.Technique {
	return predicate.Technique(sql.FieldHasSuffix(FieldIconImage, v))
}

// IconImageEqualFold applies the EqualFold predicate on the "iconImage" field.
func IconImageEqualFold(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEqualFold(FieldIconImage, v))
}

// IconImageContainsFold applies the ContainsFold predicate on the "iconImage" field.
func IconImageContainsFold(v string) predicate.Technique {
	return predicate.Technique(sql.FieldContainsFold(FieldIconImage, v))
}

// CoverImageEQ applies the EQ predicate on the "coverImage" field.
func CoverImageEQ(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldCoverImage, v))
}

// CoverImageNEQ applies the NEQ predicate on the "coverImage" field.
func CoverImageNEQ(v string) predicate.Technique {
	return predicate.Technique(sql.FieldNEQ(FieldCoverImage, v))
}

// CoverImageIn applies the In predicate on the "coverImage" field.
func CoverImageIn(vs ...string) predicate.Technique {
	return predicate.Technique(sql.FieldIn(FieldCoverImage, vs...))
}

// CoverImageNotIn applies the NotIn predicate on the "coverImage" field.
func CoverImageNotIn(vs ...string) predicate.Technique {
	return predicate.Technique(sql.FieldNotIn(FieldCoverImage, vs...))
}

// CoverImageGT applies the GT predicate on the "coverImage" field.
func CoverImageGT(v string) predicate.Technique {
	return predicate.Technique(sql.FieldGT(FieldCoverImage, v))
}

// CoverImageGTE applies the GTE predicate on the "coverImage" field.
func CoverImageGTE(v string) predicate.Technique {
	return predicate.Technique(sql.FieldGTE(FieldCoverImage, v))
}

// CoverImageLT applies the LT predicate on the "coverImage" field.
func CoverImageLT(v string) predicate.Technique {
	return predicate.Technique(sql.FieldLT(FieldCoverImage, v))
}

// CoverImageLTE applies the LTE predicate on the "coverImage" field.
func CoverImageLTE(v string) predicate.Technique {
	return predicate.Technique(sql.FieldLTE(FieldCoverImage, v))
}

// CoverImageContains applies the Contains predicate on the "coverImage" field.
func CoverImageContains(v string) predicate.Technique {
	return predicate.Technique(sql.FieldContains(FieldCoverImage, v))
}

// CoverImageHasPrefix applies the HasPrefix predicate on the "coverImage" field.
func CoverImageHasPrefix(v string) predicate.Technique {
	return predicate.Technique(sql.FieldHasPrefix(FieldCoverImage, v))
}

// CoverImageHasSuffix applies the HasSuffix predicate on the "coverImage" field.
func CoverImageHasSuffix(v string) predicate.Technique {
	return predicate.Technique(sql.FieldHasSuffix(FieldCoverImage, v))
}

// CoverImageEqualFold applies the EqualFold predicate on the "coverImage" field.
func CoverImageEqualFold(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEqualFold(FieldCoverImage, v))
}

// CoverImageContainsFold applies the ContainsFold predicate on the "coverImage" field.
func CoverImageContainsFold(v string) predicate.Technique {
	return predicate.Technique(sql.FieldContainsFold(FieldCoverImage, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Technique {
	return predicate.Technique(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Technique {
	return predicate.Technique(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Technique {
	return predicate.Technique(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Technique {
	return predicate.Technique(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Technique {
	return predicate.Technique(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Technique {
	return predicate.Technique(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Technique {
	return predicate.Technique(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Technique {
	return predicate.Technique(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Technique {
	return predicate.Technique(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Technique {
	return predicate.Technique(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Technique {
	return predicate.Technique(sql.FieldContainsFold(FieldTitle, v))
}

// SubtitleEQ applies the EQ predicate on the "subtitle" field.
func SubtitleEQ(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldSubtitle, v))
}

// SubtitleNEQ applies the NEQ predicate on the "subtitle" field.
func SubtitleNEQ(v string) predicate.Technique {
	return predicate.Technique(sql.FieldNEQ(FieldSubtitle, v))
}

// SubtitleIn applies the In predicate on the "subtitle" field.
func SubtitleIn(vs ...string) predicate.Technique {
	return predicate.Technique(sql.FieldIn(FieldSubtitle, vs...))
}

// SubtitleNotIn applies the NotIn predicate on the "subtitle" field.
func SubtitleNotIn(vs ...string) predicate.Technique {
	return predicate.Technique(sql.FieldNotIn(FieldSubtitle, vs...))
}

// SubtitleGT applies the GT predicate on the "subtitle" field.
func SubtitleGT(v string) predicate.Technique {
	return predicate.Technique(sql.FieldGT(FieldSubtitle, v))
}

// SubtitleGTE applies the GTE predicate on the "subtitle" field.
func SubtitleGTE(v string) predicate.Technique {
	return predicate.Technique(sql.FieldGTE(FieldSubtitle, v))
}

// SubtitleLT applies the LT predicate on the "subtitle" field.
func SubtitleLT(v string) predicate.Technique {
	return predicate.Technique(sql.FieldLT(FieldSubtitle, v))
}

// SubtitleLTE applies the LTE predicate on the "subtitle" field.
func SubtitleLTE(v string) predicate.Technique {
	return predicate.Technique(sql.FieldLTE(FieldSubtitle, v))
}

// SubtitleContains applies the Contains predicate on the "subtitle" field.
func SubtitleContains(v string) predicate.Technique {
	return predicate.Technique(sql.FieldContains(FieldSubtitle, v))
}

// SubtitleHasPrefix applies the HasPrefix predicate on the "subtitle" field.
func SubtitleHasPrefix(v string) predicate.Technique {
	return predicate.Technique(sql.FieldHasPrefix(FieldSubtitle, v))
}

// SubtitleHasSuffix applies the HasSuffix predicate on the "subtitle" field.
func SubtitleHasSuffix(v string) predicate.Technique {
	return predicate.Technique(sql.FieldHasSuffix(FieldSubtitle, v))
}

// SubtitleEqualFold applies the EqualFold predicate on the "subtitle" field.
func SubtitleEqualFold(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEqualFold(FieldSubtitle, v))
}

// SubtitleContainsFold applies the ContainsFold predicate on the "subtitle" field.
func SubtitleContainsFold(v string) predicate.Technique {
	return predicate.Technique(sql.FieldContainsFold(FieldSubtitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Technique {
	return predicate.Technique(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Technique {
	return predicate.Technique(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Technique {
	return predicate.Technique(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Technique {
	return predicate.Technique(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Technique {
	return predicate.Technique(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Technique {
	return predicate.Technique(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Technique {
	return predicate.Technique(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Technique {
	return predicate.Technique(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Technique {
	return predicate.Technique(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Technique {
	return predicate.Technique(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Technique {
	return predicate.Technique(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Technique {
	return predicate.Technique(sql.FieldContainsFold(FieldDescription, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.Technique {
	return predicate.Technique(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.Technique {
	return predicate.Technique(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.Technique {
	return predicate.Technique(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.Technique {
	return predicate.Technique(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.Technique {
	return predicate.Technique(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.Technique {
	return predicate.Technique(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.Technique {
	return predicate.Technique(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.Technique {
	return predicate.Technique(sql.FieldLTE(FieldOrder, v))
}

// HasUnit applies the HasEdge predicate on the "unit" edge.
func HasUnit() predicate.Technique {
	return predicate.Technique(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UnitTable, UnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUnitWith applies the HasEdge predicate on the "unit" edge with a given conditions (other predicates).
func HasUnitWith(preds ...predicate.Unit) predicate.Technique {
	return predicate.Technique(func(s *sql.Selector) {
		step := newUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLessons applies the HasEdge predicate on the "lessons" edge.
func HasLessons() predicate.Technique {
	return predicate.Technique(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LessonsTable, LessonsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonsWith applies the HasEdge predicate on the "lessons" edge with a given conditions (other predicates).
func HasLessonsWith(preds ...predicate.Lesson) predicate.Technique {
	return predicate.Technique(func(s *sql.Selector) {
		step := newLessonsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTechniques applies the HasEdge predicate on the "techniques" edge.
func HasTechniques() predicate.Technique {
	return predicate.Technique(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TechniquesTable, TechniquesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTechniquesWith applies the HasEdge predicate on the "techniques" edge with a given conditions (other predicates).
func HasTechniquesWith(preds ...predicate.Unit) predicate.Technique {
	return predicate.Technique(func(s *sql.Selector) {
		step := newTechniquesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLessonTechniques applies the HasEdge predicate on the "lessonTechniques" edge.
func HasLessonTechniques() predicate.Technique {
	return predicate.Technique(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, LessonTechniquesTable, LessonTechniquesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonTechniquesWith applies the HasEdge predicate on the "lessonTechniques" edge with a given conditions (other predicates).
func HasLessonTechniquesWith(preds ...predicate.LessonTechnique) predicate.Technique {
	return predicate.Technique(func(s *sql.Selector) {
		step := newLessonTechniquesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUnitTechniques applies the HasEdge predicate on the "unitTechniques" edge.
func HasUnitTechniques() predicate.Technique {
	return predicate.Technique(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UnitTechniquesTable, UnitTechniquesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUnitTechniquesWith applies the HasEdge predicate on the "unitTechniques" edge with a given conditions (other predicates).
func HasUnitTechniquesWith(preds ...predicate.UnitTechnique) predicate.Technique {
	return predicate.Technique(func(s *sql.Selector) {
		step := newUnitTechniquesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Technique) predicate.Technique {
	return predicate.Technique(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Technique) predicate.Technique {
	return predicate.Technique(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Technique) predicate.Technique {
	return predicate.Technique(sql.NotPredicates(p))
}
