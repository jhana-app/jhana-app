// Code generated by ent, DO NOT EDIT.

package technique

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the technique type in the database.
	Label = "technique"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUnitID holds the string denoting the unit_id field in the database.
	FieldUnitID = "unit_id"
	// FieldIconImage holds the string denoting the iconimage field in the database.
	FieldIconImage = "icon_image"
	// FieldCoverImage holds the string denoting the coverimage field in the database.
	FieldCoverImage = "cover_image"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSubtitle holds the string denoting the subtitle field in the database.
	FieldSubtitle = "subtitle"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeUnit holds the string denoting the unit edge name in mutations.
	EdgeUnit = "unit"
	// EdgeLessons holds the string denoting the lessons edge name in mutations.
	EdgeLessons = "lessons"
	// EdgeTechniques holds the string denoting the techniques edge name in mutations.
	EdgeTechniques = "techniques"
	// EdgeLessonTechniques holds the string denoting the lessontechniques edge name in mutations.
	EdgeLessonTechniques = "lessonTechniques"
	// EdgeUnitTechniques holds the string denoting the unittechniques edge name in mutations.
	EdgeUnitTechniques = "unitTechniques"
	// Table holds the table name of the technique in the database.
	Table = "techniques"
	// UnitTable is the table that holds the unit relation/edge.
	UnitTable = "techniques"
	// UnitInverseTable is the table name for the Unit entity.
	// It exists in this package in order to avoid circular dependency with the "unit" package.
	UnitInverseTable = "units"
	// UnitColumn is the table column denoting the unit relation/edge.
	UnitColumn = "unit_id"
	// LessonsTable is the table that holds the lessons relation/edge. The primary key declared below.
	LessonsTable = "lesson_techniques"
	// LessonsInverseTable is the table name for the Lesson entity.
	// It exists in this package in order to avoid circular dependency with the "lesson" package.
	LessonsInverseTable = "lessons"
	// TechniquesTable is the table that holds the techniques relation/edge. The primary key declared below.
	TechniquesTable = "unit_techniques"
	// TechniquesInverseTable is the table name for the Unit entity.
	// It exists in this package in order to avoid circular dependency with the "unit" package.
	TechniquesInverseTable = "units"
	// LessonTechniquesTable is the table that holds the lessonTechniques relation/edge.
	LessonTechniquesTable = "lesson_techniques"
	// LessonTechniquesInverseTable is the table name for the LessonTechnique entity.
	// It exists in this package in order to avoid circular dependency with the "lessontechnique" package.
	LessonTechniquesInverseTable = "lesson_techniques"
	// LessonTechniquesColumn is the table column denoting the lessonTechniques relation/edge.
	LessonTechniquesColumn = "technique_id"
	// UnitTechniquesTable is the table that holds the unitTechniques relation/edge.
	UnitTechniquesTable = "unit_techniques"
	// UnitTechniquesInverseTable is the table name for the UnitTechnique entity.
	// It exists in this package in order to avoid circular dependency with the "unittechnique" package.
	UnitTechniquesInverseTable = "unit_techniques"
	// UnitTechniquesColumn is the table column denoting the unitTechniques relation/edge.
	UnitTechniquesColumn = "technique_id"
)

// Columns holds all SQL columns for technique fields.
var Columns = []string{
	FieldID,
	FieldUnitID,
	FieldIconImage,
	FieldCoverImage,
	FieldTitle,
	FieldSubtitle,
	FieldDescription,
	FieldOrder,
}

var (
	// LessonsPrimaryKey and LessonsColumn2 are the table columns denoting the
	// primary key for the lessons relation (M2M).
	LessonsPrimaryKey = []string{"lesson_id", "technique_id"}
	// TechniquesPrimaryKey and TechniquesColumn2 are the table columns denoting the
	// primary key for the techniques relation (M2M).
	TechniquesPrimaryKey = []string{"unit_id", "technique_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IconImageValidator is a validator for the "iconImage" field. It is called by the builders before save.
	IconImageValidator func(string) error
	// CoverImageValidator is a validator for the "coverImage" field. It is called by the builders before save.
	CoverImageValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// SubtitleValidator is a validator for the "subtitle" field. It is called by the builders before save.
	SubtitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// OrderValidator is a validator for the "order" field. It is called by the builders before save.
	OrderValidator func(int) error
)

// OrderOption defines the ordering options for the Technique queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUnitID orders the results by the unit_id field.
func ByUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitID, opts...).ToFunc()
}

// ByIconImage orders the results by the iconImage field.
func ByIconImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIconImage, opts...).ToFunc()
}

// ByCoverImage orders the results by the coverImage field.
func ByCoverImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverImage, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySubtitle orders the results by the subtitle field.
func BySubtitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByUnitField orders the results by unit field.
func ByUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByLessonsCount orders the results by lessons count.
func ByLessonsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonsStep(), opts...)
	}
}

// ByLessons orders the results by lessons terms.
func ByLessons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTechniquesCount orders the results by techniques count.
func ByTechniquesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTechniquesStep(), opts...)
	}
}

// ByTechniques orders the results by techniques terms.
func ByTechniques(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTechniquesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLessonTechniquesCount orders the results by lessonTechniques count.
func ByLessonTechniquesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonTechniquesStep(), opts...)
	}
}

// ByLessonTechniques orders the results by lessonTechniques terms.
func ByLessonTechniques(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonTechniquesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUnitTechniquesCount orders the results by unitTechniques count.
func ByUnitTechniquesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUnitTechniquesStep(), opts...)
	}
}

// ByUnitTechniques orders the results by unitTechniques terms.
func ByUnitTechniques(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUnitTechniquesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UnitTable, UnitColumn),
	)
}
func newLessonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LessonsTable, LessonsPrimaryKey...),
	)
}
func newTechniquesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TechniquesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TechniquesTable, TechniquesPrimaryKey...),
	)
}
func newLessonTechniquesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonTechniquesInverseTable, LessonTechniquesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, LessonTechniquesTable, LessonTechniquesColumn),
	)
}
func newUnitTechniquesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UnitTechniquesInverseTable, UnitTechniquesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UnitTechniquesTable, UnitTechniquesColumn),
	)
}
