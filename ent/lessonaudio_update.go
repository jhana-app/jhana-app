// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/lessonaudio"
	"github.com/jhana-app/jhana-app/ent/predicate"
)

// LessonAudioUpdate is the builder for updating LessonAudio entities.
type LessonAudioUpdate struct {
	config
	hooks     []Hook
	mutation  *LessonAudioMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LessonAudioUpdate builder.
func (lau *LessonAudioUpdate) Where(ps ...predicate.LessonAudio) *LessonAudioUpdate {
	lau.mutation.Where(ps...)
	return lau
}

// SetAudioURL sets the "audioURL" field.
func (lau *LessonAudioUpdate) SetAudioURL(s string) *LessonAudioUpdate {
	lau.mutation.SetAudioURL(s)
	return lau
}

// SetNillableAudioURL sets the "audioURL" field if the given value is not nil.
func (lau *LessonAudioUpdate) SetNillableAudioURL(s *string) *LessonAudioUpdate {
	if s != nil {
		lau.SetAudioURL(*s)
	}
	return lau
}

// SetDuration sets the "duration" field.
func (lau *LessonAudioUpdate) SetDuration(i int) *LessonAudioUpdate {
	lau.mutation.ResetDuration()
	lau.mutation.SetDuration(i)
	return lau
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (lau *LessonAudioUpdate) SetNillableDuration(i *int) *LessonAudioUpdate {
	if i != nil {
		lau.SetDuration(*i)
	}
	return lau
}

// AddDuration adds i to the "duration" field.
func (lau *LessonAudioUpdate) AddDuration(i int) *LessonAudioUpdate {
	lau.mutation.AddDuration(i)
	return lau
}

// Mutation returns the LessonAudioMutation object of the builder.
func (lau *LessonAudioUpdate) Mutation() *LessonAudioMutation {
	return lau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lau *LessonAudioUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lau.sqlSave, lau.mutation, lau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lau *LessonAudioUpdate) SaveX(ctx context.Context) int {
	affected, err := lau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lau *LessonAudioUpdate) Exec(ctx context.Context) error {
	_, err := lau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lau *LessonAudioUpdate) ExecX(ctx context.Context) {
	if err := lau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lau *LessonAudioUpdate) check() error {
	if v, ok := lau.mutation.Duration(); ok {
		if err := lessonaudio.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "LessonAudio.duration": %w`, err)}
		}
	}
	if _, ok := lau.mutation.LessonID(); lau.mutation.LessonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LessonAudio.lesson"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lau *LessonAudioUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LessonAudioUpdate {
	lau.modifiers = append(lau.modifiers, modifiers...)
	return lau
}

func (lau *LessonAudioUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonaudio.Table, lessonaudio.Columns, sqlgraph.NewFieldSpec(lessonaudio.FieldID, field.TypeInt64))
	if ps := lau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lau.mutation.AudioURL(); ok {
		_spec.SetField(lessonaudio.FieldAudioURL, field.TypeString, value)
	}
	if value, ok := lau.mutation.Duration(); ok {
		_spec.SetField(lessonaudio.FieldDuration, field.TypeInt, value)
	}
	if value, ok := lau.mutation.AddedDuration(); ok {
		_spec.AddField(lessonaudio.FieldDuration, field.TypeInt, value)
	}
	_spec.AddModifiers(lau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonaudio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lau.mutation.done = true
	return n, nil
}

// LessonAudioUpdateOne is the builder for updating a single LessonAudio entity.
type LessonAudioUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LessonAudioMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAudioURL sets the "audioURL" field.
func (lauo *LessonAudioUpdateOne) SetAudioURL(s string) *LessonAudioUpdateOne {
	lauo.mutation.SetAudioURL(s)
	return lauo
}

// SetNillableAudioURL sets the "audioURL" field if the given value is not nil.
func (lauo *LessonAudioUpdateOne) SetNillableAudioURL(s *string) *LessonAudioUpdateOne {
	if s != nil {
		lauo.SetAudioURL(*s)
	}
	return lauo
}

// SetDuration sets the "duration" field.
func (lauo *LessonAudioUpdateOne) SetDuration(i int) *LessonAudioUpdateOne {
	lauo.mutation.ResetDuration()
	lauo.mutation.SetDuration(i)
	return lauo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (lauo *LessonAudioUpdateOne) SetNillableDuration(i *int) *LessonAudioUpdateOne {
	if i != nil {
		lauo.SetDuration(*i)
	}
	return lauo
}

// AddDuration adds i to the "duration" field.
func (lauo *LessonAudioUpdateOne) AddDuration(i int) *LessonAudioUpdateOne {
	lauo.mutation.AddDuration(i)
	return lauo
}

// Mutation returns the LessonAudioMutation object of the builder.
func (lauo *LessonAudioUpdateOne) Mutation() *LessonAudioMutation {
	return lauo.mutation
}

// Where appends a list predicates to the LessonAudioUpdate builder.
func (lauo *LessonAudioUpdateOne) Where(ps ...predicate.LessonAudio) *LessonAudioUpdateOne {
	lauo.mutation.Where(ps...)
	return lauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lauo *LessonAudioUpdateOne) Select(field string, fields ...string) *LessonAudioUpdateOne {
	lauo.fields = append([]string{field}, fields...)
	return lauo
}

// Save executes the query and returns the updated LessonAudio entity.
func (lauo *LessonAudioUpdateOne) Save(ctx context.Context) (*LessonAudio, error) {
	return withHooks(ctx, lauo.sqlSave, lauo.mutation, lauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lauo *LessonAudioUpdateOne) SaveX(ctx context.Context) *LessonAudio {
	node, err := lauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lauo *LessonAudioUpdateOne) Exec(ctx context.Context) error {
	_, err := lauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lauo *LessonAudioUpdateOne) ExecX(ctx context.Context) {
	if err := lauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lauo *LessonAudioUpdateOne) check() error {
	if v, ok := lauo.mutation.Duration(); ok {
		if err := lessonaudio.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "LessonAudio.duration": %w`, err)}
		}
	}
	if _, ok := lauo.mutation.LessonID(); lauo.mutation.LessonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LessonAudio.lesson"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lauo *LessonAudioUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LessonAudioUpdateOne {
	lauo.modifiers = append(lauo.modifiers, modifiers...)
	return lauo
}

func (lauo *LessonAudioUpdateOne) sqlSave(ctx context.Context) (_node *LessonAudio, err error) {
	if err := lauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonaudio.Table, lessonaudio.Columns, sqlgraph.NewFieldSpec(lessonaudio.FieldID, field.TypeInt64))
	id, ok := lauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LessonAudio.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonaudio.FieldID)
		for _, f := range fields {
			if !lessonaudio.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lessonaudio.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lauo.mutation.AudioURL(); ok {
		_spec.SetField(lessonaudio.FieldAudioURL, field.TypeString, value)
	}
	if value, ok := lauo.mutation.Duration(); ok {
		_spec.SetField(lessonaudio.FieldDuration, field.TypeInt, value)
	}
	if value, ok := lauo.mutation.AddedDuration(); ok {
		_spec.AddField(lessonaudio.FieldDuration, field.TypeInt, value)
	}
	_spec.AddModifiers(lauo.modifiers...)
	_node = &LessonAudio{config: lauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonaudio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lauo.mutation.done = true
	return _node, nil
}
