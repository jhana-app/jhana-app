// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/lessonaudio"
	"github.com/jhana-app/jhana-app/ent/property"
	"github.com/jhana-app/jhana-app/ent/technique"
	"github.com/jhana-app/jhana-app/ent/unit"
)

// LessonCreate is the builder for creating a Lesson entity.
type LessonCreate struct {
	config
	mutation *LessonMutation
	hooks    []Hook
}

// SetUnitID sets the "unit_id" field.
func (lc *LessonCreate) SetUnitID(gi gqlid.UnitID) *LessonCreate {
	lc.mutation.SetUnitID(gi)
	return lc
}

// SetType sets the "type" field.
func (lc *LessonCreate) SetType(pt property.LessonType) *LessonCreate {
	lc.mutation.SetType(pt)
	return lc
}

// SetIconImage sets the "iconImage" field.
func (lc *LessonCreate) SetIconImage(s string) *LessonCreate {
	lc.mutation.SetIconImage(s)
	return lc
}

// SetCoverImage sets the "coverImage" field.
func (lc *LessonCreate) SetCoverImage(s string) *LessonCreate {
	lc.mutation.SetCoverImage(s)
	return lc
}

// SetTitle sets the "title" field.
func (lc *LessonCreate) SetTitle(s string) *LessonCreate {
	lc.mutation.SetTitle(s)
	return lc
}

// SetDescription sets the "description" field.
func (lc *LessonCreate) SetDescription(s string) *LessonCreate {
	lc.mutation.SetDescription(s)
	return lc
}

// SetOrder sets the "order" field.
func (lc *LessonCreate) SetOrder(i int) *LessonCreate {
	lc.mutation.SetOrder(i)
	return lc
}

// SetID sets the "id" field.
func (lc *LessonCreate) SetID(gi gqlid.LessonID) *LessonCreate {
	lc.mutation.SetID(gi)
	return lc
}

// SetUnit sets the "unit" edge to the Unit entity.
func (lc *LessonCreate) SetUnit(u *Unit) *LessonCreate {
	return lc.SetUnitID(u.ID)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (lc *LessonCreate) AddTechniqueIDs(ids ...gqlid.TechniqueID) *LessonCreate {
	lc.mutation.AddTechniqueIDs(ids...)
	return lc
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (lc *LessonCreate) AddTechniques(t ...*Technique) *LessonCreate {
	ids := make([]gqlid.TechniqueID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lc.AddTechniqueIDs(ids...)
}

// AddAudioIDs adds the "audios" edge to the LessonAudio entity by IDs.
func (lc *LessonCreate) AddAudioIDs(ids ...gqlid.LessonAudioID) *LessonCreate {
	lc.mutation.AddAudioIDs(ids...)
	return lc
}

// AddAudios adds the "audios" edges to the LessonAudio entity.
func (lc *LessonCreate) AddAudios(l ...*LessonAudio) *LessonCreate {
	ids := make([]gqlid.LessonAudioID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lc.AddAudioIDs(ids...)
}

// Mutation returns the LessonMutation object of the builder.
func (lc *LessonCreate) Mutation() *LessonMutation {
	return lc.mutation
}

// Save creates the Lesson in the database.
func (lc *LessonCreate) Save(ctx context.Context) (*Lesson, error) {
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LessonCreate) SaveX(ctx context.Context) *Lesson {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LessonCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LessonCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LessonCreate) check() error {
	if _, ok := lc.mutation.UnitID(); !ok {
		return &ValidationError{Name: "unit_id", err: errors.New(`ent: missing required field "Lesson.unit_id"`)}
	}
	if _, ok := lc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Lesson.type"`)}
	}
	if v, ok := lc.mutation.GetType(); ok {
		if err := lesson.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Lesson.type": %w`, err)}
		}
	}
	if _, ok := lc.mutation.IconImage(); !ok {
		return &ValidationError{Name: "iconImage", err: errors.New(`ent: missing required field "Lesson.iconImage"`)}
	}
	if v, ok := lc.mutation.IconImage(); ok {
		if err := lesson.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Lesson.iconImage": %w`, err)}
		}
	}
	if _, ok := lc.mutation.CoverImage(); !ok {
		return &ValidationError{Name: "coverImage", err: errors.New(`ent: missing required field "Lesson.coverImage"`)}
	}
	if v, ok := lc.mutation.CoverImage(); ok {
		if err := lesson.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Lesson.coverImage": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Lesson.title"`)}
	}
	if v, ok := lc.mutation.Title(); ok {
		if err := lesson.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Lesson.title": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Lesson.description"`)}
	}
	if v, ok := lc.mutation.Description(); ok {
		if err := lesson.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Lesson.description": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Lesson.order"`)}
	}
	if v, ok := lc.mutation.Order(); ok {
		if err := lesson.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Lesson.order": %w`, err)}
		}
	}
	if _, ok := lc.mutation.UnitID(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required edge "Lesson.unit"`)}
	}
	return nil
}

func (lc *LessonCreate) sqlSave(ctx context.Context) (*Lesson, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gqlid.LessonID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LessonCreate) createSpec() (*Lesson, *sqlgraph.CreateSpec) {
	var (
		_node = &Lesson{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(lesson.Table, sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.GetType(); ok {
		_spec.SetField(lesson.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := lc.mutation.IconImage(); ok {
		_spec.SetField(lesson.FieldIconImage, field.TypeString, value)
		_node.IconImage = value
	}
	if value, ok := lc.mutation.CoverImage(); ok {
		_spec.SetField(lesson.FieldCoverImage, field.TypeString, value)
		_node.CoverImage = value
	}
	if value, ok := lc.mutation.Title(); ok {
		_spec.SetField(lesson.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := lc.mutation.Description(); ok {
		_spec.SetField(lesson.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := lc.mutation.Order(); ok {
		_spec.SetField(lesson.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := lc.mutation.UnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lesson.UnitTable,
			Columns: []string{lesson.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lesson.TechniquesTable,
			Columns: lesson.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.AudiosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lesson.AudiosTable,
			Columns: []string{lesson.AudiosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonaudio.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonCreateBulk is the builder for creating many Lesson entities in bulk.
type LessonCreateBulk struct {
	config
	err      error
	builders []*LessonCreate
}

// Save creates the Lesson entities in the database.
func (lcb *LessonCreateBulk) Save(ctx context.Context) ([]*Lesson, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lesson, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					if err := nodes[i].ID.Scan(specs[i].ID.Value); err != nil {
						return nil, err
					}
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LessonCreateBulk) SaveX(ctx context.Context) []*Lesson {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LessonCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LessonCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
