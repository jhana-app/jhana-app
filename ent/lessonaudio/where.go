// Code generated by ent, DO NOT EDIT.

package lessonaudio

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id gqlid.LessonAudioID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gqlid.LessonAudioID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gqlid.LessonAudioID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gqlid.LessonAudioID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gqlid.LessonAudioID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gqlid.LessonAudioID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gqlid.LessonAudioID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gqlid.LessonAudioID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gqlid.LessonAudioID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldLTE(FieldID, id))
}

// LessonID applies equality check predicate on the "lesson_id" field. It's identical to LessonIDEQ.
func LessonID(v gqlid.LessonID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldEQ(FieldLessonID, v))
}

// AudioURL applies equality check predicate on the "audioURL" field. It's identical to AudioURLEQ.
func AudioURL(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldEQ(FieldAudioURL, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldEQ(FieldDuration, v))
}

// LessonIDEQ applies the EQ predicate on the "lesson_id" field.
func LessonIDEQ(v gqlid.LessonID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldEQ(FieldLessonID, v))
}

// LessonIDNEQ applies the NEQ predicate on the "lesson_id" field.
func LessonIDNEQ(v gqlid.LessonID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldNEQ(FieldLessonID, v))
}

// LessonIDIn applies the In predicate on the "lesson_id" field.
func LessonIDIn(vs ...gqlid.LessonID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldIn(FieldLessonID, vs...))
}

// LessonIDNotIn applies the NotIn predicate on the "lesson_id" field.
func LessonIDNotIn(vs ...gqlid.LessonID) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldNotIn(FieldLessonID, vs...))
}

// AudioURLEQ applies the EQ predicate on the "audioURL" field.
func AudioURLEQ(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldEQ(FieldAudioURL, v))
}

// AudioURLNEQ applies the NEQ predicate on the "audioURL" field.
func AudioURLNEQ(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldNEQ(FieldAudioURL, v))
}

// AudioURLIn applies the In predicate on the "audioURL" field.
func AudioURLIn(vs ...string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldIn(FieldAudioURL, vs...))
}

// AudioURLNotIn applies the NotIn predicate on the "audioURL" field.
func AudioURLNotIn(vs ...string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldNotIn(FieldAudioURL, vs...))
}

// AudioURLGT applies the GT predicate on the "audioURL" field.
func AudioURLGT(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldGT(FieldAudioURL, v))
}

// AudioURLGTE applies the GTE predicate on the "audioURL" field.
func AudioURLGTE(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldGTE(FieldAudioURL, v))
}

// AudioURLLT applies the LT predicate on the "audioURL" field.
func AudioURLLT(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldLT(FieldAudioURL, v))
}

// AudioURLLTE applies the LTE predicate on the "audioURL" field.
func AudioURLLTE(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldLTE(FieldAudioURL, v))
}

// AudioURLContains applies the Contains predicate on the "audioURL" field.
func AudioURLContains(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldContains(FieldAudioURL, v))
}

// AudioURLHasPrefix applies the HasPrefix predicate on the "audioURL" field.
func AudioURLHasPrefix(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldHasPrefix(FieldAudioURL, v))
}

// AudioURLHasSuffix applies the HasSuffix predicate on the "audioURL" field.
func AudioURLHasSuffix(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldHasSuffix(FieldAudioURL, v))
}

// AudioURLEqualFold applies the EqualFold predicate on the "audioURL" field.
func AudioURLEqualFold(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldEqualFold(FieldAudioURL, v))
}

// AudioURLContainsFold applies the ContainsFold predicate on the "audioURL" field.
func AudioURLContainsFold(v string) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldContainsFold(FieldAudioURL, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.LessonAudio {
	return predicate.LessonAudio(sql.FieldLTE(FieldDuration, v))
}

// HasLesson applies the HasEdge predicate on the "lesson" edge.
func HasLesson() predicate.LessonAudio {
	return predicate.LessonAudio(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LessonTable, LessonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonWith applies the HasEdge predicate on the "lesson" edge with a given conditions (other predicates).
func HasLessonWith(preds ...predicate.Lesson) predicate.LessonAudio {
	return predicate.LessonAudio(func(s *sql.Selector) {
		step := newLessonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LessonAudio) predicate.LessonAudio {
	return predicate.LessonAudio(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LessonAudio) predicate.LessonAudio {
	return predicate.LessonAudio(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LessonAudio) predicate.LessonAudio {
	return predicate.LessonAudio(sql.NotPredicates(p))
}
