// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/course"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/unit"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks     []Hook
	mutation  *CourseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CourseUpdate builder.
func (cu *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetIconImage sets the "iconImage" field.
func (cu *CourseUpdate) SetIconImage(s string) *CourseUpdate {
	cu.mutation.SetIconImage(s)
	return cu
}

// SetNillableIconImage sets the "iconImage" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableIconImage(s *string) *CourseUpdate {
	if s != nil {
		cu.SetIconImage(*s)
	}
	return cu
}

// SetCoverImage sets the "coverImage" field.
func (cu *CourseUpdate) SetCoverImage(s string) *CourseUpdate {
	cu.mutation.SetCoverImage(s)
	return cu
}

// SetNillableCoverImage sets the "coverImage" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableCoverImage(s *string) *CourseUpdate {
	if s != nil {
		cu.SetCoverImage(*s)
	}
	return cu
}

// SetTitle sets the "title" field.
func (cu *CourseUpdate) SetTitle(s string) *CourseUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableTitle(s *string) *CourseUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CourseUpdate) SetDescription(s string) *CourseUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableDescription(s *string) *CourseUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// SetColor sets the "color" field.
func (cu *CourseUpdate) SetColor(s string) *CourseUpdate {
	cu.mutation.SetColor(s)
	return cu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableColor(s *string) *CourseUpdate {
	if s != nil {
		cu.SetColor(*s)
	}
	return cu
}

// SetActive sets the "active" field.
func (cu *CourseUpdate) SetActive(b bool) *CourseUpdate {
	cu.mutation.SetActive(b)
	return cu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableActive(b *bool) *CourseUpdate {
	if b != nil {
		cu.SetActive(*b)
	}
	return cu
}

// SetOrder sets the "order" field.
func (cu *CourseUpdate) SetOrder(i int) *CourseUpdate {
	cu.mutation.ResetOrder()
	cu.mutation.SetOrder(i)
	return cu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableOrder(i *int) *CourseUpdate {
	if i != nil {
		cu.SetOrder(*i)
	}
	return cu
}

// AddOrder adds i to the "order" field.
func (cu *CourseUpdate) AddOrder(i int) *CourseUpdate {
	cu.mutation.AddOrder(i)
	return cu
}

// AddUnitIDs adds the "units" edge to the Unit entity by IDs.
func (cu *CourseUpdate) AddUnitIDs(ids ...gqlid.UnitID) *CourseUpdate {
	cu.mutation.AddUnitIDs(ids...)
	return cu
}

// AddUnits adds the "units" edges to the Unit entity.
func (cu *CourseUpdate) AddUnits(u ...*Unit) *CourseUpdate {
	ids := make([]gqlid.UnitID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUnitIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cu *CourseUpdate) Mutation() *CourseMutation {
	return cu.mutation
}

// ClearUnits clears all "units" edges to the Unit entity.
func (cu *CourseUpdate) ClearUnits() *CourseUpdate {
	cu.mutation.ClearUnits()
	return cu
}

// RemoveUnitIDs removes the "units" edge to Unit entities by IDs.
func (cu *CourseUpdate) RemoveUnitIDs(ids ...gqlid.UnitID) *CourseUpdate {
	cu.mutation.RemoveUnitIDs(ids...)
	return cu
}

// RemoveUnits removes "units" edges to Unit entities.
func (cu *CourseUpdate) RemoveUnits(u ...*Unit) *CourseUpdate {
	ids := make([]gqlid.UnitID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUnitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CourseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CourseUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CourseUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CourseUpdate) check() error {
	if v, ok := cu.mutation.IconImage(); ok {
		if err := course.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Course.iconImage": %w`, err)}
		}
	}
	if v, ok := cu.mutation.CoverImage(); ok {
		if err := course.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Course.coverImage": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Title(); ok {
		if err := course.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Course.title": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Description(); ok {
		if err := course.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Course.description": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Color(); ok {
		if err := course.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Course.color": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Order(); ok {
		if err := course.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Course.order": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CourseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CourseUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.IconImage(); ok {
		_spec.SetField(course.FieldIconImage, field.TypeString, value)
	}
	if value, ok := cu.mutation.CoverImage(); ok {
		_spec.SetField(course.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(course.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.Color(); ok {
		_spec.SetField(course.FieldColor, field.TypeString, value)
	}
	if value, ok := cu.mutation.Active(); ok {
		_spec.SetField(course.FieldActive, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Order(); ok {
		_spec.SetField(course.FieldOrder, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedOrder(); ok {
		_spec.AddField(course.FieldOrder, field.TypeInt, value)
	}
	if cu.mutation.UnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   course.UnitsTable,
			Columns: []string{course.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUnitsIDs(); len(nodes) > 0 && !cu.mutation.UnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   course.UnitsTable,
			Columns: []string{course.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   course.UnitsTable,
			Columns: []string{course.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CourseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIconImage sets the "iconImage" field.
func (cuo *CourseUpdateOne) SetIconImage(s string) *CourseUpdateOne {
	cuo.mutation.SetIconImage(s)
	return cuo
}

// SetNillableIconImage sets the "iconImage" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableIconImage(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetIconImage(*s)
	}
	return cuo
}

// SetCoverImage sets the "coverImage" field.
func (cuo *CourseUpdateOne) SetCoverImage(s string) *CourseUpdateOne {
	cuo.mutation.SetCoverImage(s)
	return cuo
}

// SetNillableCoverImage sets the "coverImage" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCoverImage(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetCoverImage(*s)
	}
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *CourseUpdateOne) SetTitle(s string) *CourseUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableTitle(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CourseUpdateOne) SetDescription(s string) *CourseUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableDescription(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// SetColor sets the "color" field.
func (cuo *CourseUpdateOne) SetColor(s string) *CourseUpdateOne {
	cuo.mutation.SetColor(s)
	return cuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableColor(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetColor(*s)
	}
	return cuo
}

// SetActive sets the "active" field.
func (cuo *CourseUpdateOne) SetActive(b bool) *CourseUpdateOne {
	cuo.mutation.SetActive(b)
	return cuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableActive(b *bool) *CourseUpdateOne {
	if b != nil {
		cuo.SetActive(*b)
	}
	return cuo
}

// SetOrder sets the "order" field.
func (cuo *CourseUpdateOne) SetOrder(i int) *CourseUpdateOne {
	cuo.mutation.ResetOrder()
	cuo.mutation.SetOrder(i)
	return cuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableOrder(i *int) *CourseUpdateOne {
	if i != nil {
		cuo.SetOrder(*i)
	}
	return cuo
}

// AddOrder adds i to the "order" field.
func (cuo *CourseUpdateOne) AddOrder(i int) *CourseUpdateOne {
	cuo.mutation.AddOrder(i)
	return cuo
}

// AddUnitIDs adds the "units" edge to the Unit entity by IDs.
func (cuo *CourseUpdateOne) AddUnitIDs(ids ...gqlid.UnitID) *CourseUpdateOne {
	cuo.mutation.AddUnitIDs(ids...)
	return cuo
}

// AddUnits adds the "units" edges to the Unit entity.
func (cuo *CourseUpdateOne) AddUnits(u ...*Unit) *CourseUpdateOne {
	ids := make([]gqlid.UnitID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUnitIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cuo *CourseUpdateOne) Mutation() *CourseMutation {
	return cuo.mutation
}

// ClearUnits clears all "units" edges to the Unit entity.
func (cuo *CourseUpdateOne) ClearUnits() *CourseUpdateOne {
	cuo.mutation.ClearUnits()
	return cuo
}

// RemoveUnitIDs removes the "units" edge to Unit entities by IDs.
func (cuo *CourseUpdateOne) RemoveUnitIDs(ids ...gqlid.UnitID) *CourseUpdateOne {
	cuo.mutation.RemoveUnitIDs(ids...)
	return cuo
}

// RemoveUnits removes "units" edges to Unit entities.
func (cuo *CourseUpdateOne) RemoveUnits(u ...*Unit) *CourseUpdateOne {
	ids := make([]gqlid.UnitID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUnitIDs(ids...)
}

// Where appends a list predicates to the CourseUpdate builder.
func (cuo *CourseUpdateOne) Where(ps ...predicate.Course) *CourseUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CourseUpdateOne) Select(field string, fields ...string) *CourseUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Course entity.
func (cuo *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CourseUpdateOne) check() error {
	if v, ok := cuo.mutation.IconImage(); ok {
		if err := course.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Course.iconImage": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.CoverImage(); ok {
		if err := course.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Course.coverImage": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Title(); ok {
		if err := course.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Course.title": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Description(); ok {
		if err := course.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Course.description": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Color(); ok {
		if err := course.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Course.color": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Order(); ok {
		if err := course.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Course.order": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CourseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CourseUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CourseUpdateOne) sqlSave(ctx context.Context) (_node *Course, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Course.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, course.FieldID)
		for _, f := range fields {
			if !course.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != course.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.IconImage(); ok {
		_spec.SetField(course.FieldIconImage, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CoverImage(); ok {
		_spec.SetField(course.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(course.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Color(); ok {
		_spec.SetField(course.FieldColor, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Active(); ok {
		_spec.SetField(course.FieldActive, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Order(); ok {
		_spec.SetField(course.FieldOrder, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedOrder(); ok {
		_spec.AddField(course.FieldOrder, field.TypeInt, value)
	}
	if cuo.mutation.UnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   course.UnitsTable,
			Columns: []string{course.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUnitsIDs(); len(nodes) > 0 && !cuo.mutation.UnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   course.UnitsTable,
			Columns: []string{course.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   course.UnitsTable,
			Columns: []string{course.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Course{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
