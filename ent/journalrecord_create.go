// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/journalrecord"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/user"
)

// JournalRecordCreate is the builder for creating a JournalRecord entity.
type JournalRecordCreate struct {
	config
	mutation *JournalRecordMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (jrc *JournalRecordCreate) SetUserID(gi gqlid.UserID) *JournalRecordCreate {
	jrc.mutation.SetUserID(gi)
	return jrc
}

// SetLessonID sets the "lesson_id" field.
func (jrc *JournalRecordCreate) SetLessonID(gi gqlid.LessonID) *JournalRecordCreate {
	jrc.mutation.SetLessonID(gi)
	return jrc
}

// SetNillableLessonID sets the "lesson_id" field if the given value is not nil.
func (jrc *JournalRecordCreate) SetNillableLessonID(gi *gqlid.LessonID) *JournalRecordCreate {
	if gi != nil {
		jrc.SetLessonID(*gi)
	}
	return jrc
}

// SetDateTime sets the "dateTime" field.
func (jrc *JournalRecordCreate) SetDateTime(t time.Time) *JournalRecordCreate {
	jrc.mutation.SetDateTime(t)
	return jrc
}

// SetDuration sets the "duration" field.
func (jrc *JournalRecordCreate) SetDuration(i int) *JournalRecordCreate {
	jrc.mutation.SetDuration(i)
	return jrc
}

// SetNote sets the "note" field.
func (jrc *JournalRecordCreate) SetNote(s string) *JournalRecordCreate {
	jrc.mutation.SetNote(s)
	return jrc
}

// SetCreatedAt sets the "createdAt" field.
func (jrc *JournalRecordCreate) SetCreatedAt(t time.Time) *JournalRecordCreate {
	jrc.mutation.SetCreatedAt(t)
	return jrc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (jrc *JournalRecordCreate) SetNillableCreatedAt(t *time.Time) *JournalRecordCreate {
	if t != nil {
		jrc.SetCreatedAt(*t)
	}
	return jrc
}

// SetUpdatedAt sets the "updatedAt" field.
func (jrc *JournalRecordCreate) SetUpdatedAt(t time.Time) *JournalRecordCreate {
	jrc.mutation.SetUpdatedAt(t)
	return jrc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (jrc *JournalRecordCreate) SetNillableUpdatedAt(t *time.Time) *JournalRecordCreate {
	if t != nil {
		jrc.SetUpdatedAt(*t)
	}
	return jrc
}

// SetID sets the "id" field.
func (jrc *JournalRecordCreate) SetID(gri gqlid.JournalRecordID) *JournalRecordCreate {
	jrc.mutation.SetID(gri)
	return jrc
}

// SetUser sets the "user" edge to the User entity.
func (jrc *JournalRecordCreate) SetUser(u *User) *JournalRecordCreate {
	return jrc.SetUserID(u.ID)
}

// SetLesson sets the "lesson" edge to the Lesson entity.
func (jrc *JournalRecordCreate) SetLesson(l *Lesson) *JournalRecordCreate {
	return jrc.SetLessonID(l.ID)
}

// Mutation returns the JournalRecordMutation object of the builder.
func (jrc *JournalRecordCreate) Mutation() *JournalRecordMutation {
	return jrc.mutation
}

// Save creates the JournalRecord in the database.
func (jrc *JournalRecordCreate) Save(ctx context.Context) (*JournalRecord, error) {
	jrc.defaults()
	return withHooks(ctx, jrc.sqlSave, jrc.mutation, jrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jrc *JournalRecordCreate) SaveX(ctx context.Context) *JournalRecord {
	v, err := jrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrc *JournalRecordCreate) Exec(ctx context.Context) error {
	_, err := jrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrc *JournalRecordCreate) ExecX(ctx context.Context) {
	if err := jrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jrc *JournalRecordCreate) defaults() {
	if _, ok := jrc.mutation.CreatedAt(); !ok {
		v := journalrecord.DefaultCreatedAt()
		jrc.mutation.SetCreatedAt(v)
	}
	if _, ok := jrc.mutation.UpdatedAt(); !ok {
		v := journalrecord.DefaultUpdatedAt()
		jrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jrc *JournalRecordCreate) check() error {
	if _, ok := jrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "JournalRecord.user_id"`)}
	}
	if _, ok := jrc.mutation.DateTime(); !ok {
		return &ValidationError{Name: "dateTime", err: errors.New(`ent: missing required field "JournalRecord.dateTime"`)}
	}
	if _, ok := jrc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "JournalRecord.duration"`)}
	}
	if _, ok := jrc.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "JournalRecord.note"`)}
	}
	if _, ok := jrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "JournalRecord.createdAt"`)}
	}
	if _, ok := jrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "JournalRecord.updatedAt"`)}
	}
	if _, ok := jrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "JournalRecord.user"`)}
	}
	return nil
}

func (jrc *JournalRecordCreate) sqlSave(ctx context.Context) (*JournalRecord, error) {
	if err := jrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gqlid.JournalRecordID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jrc.mutation.id = &_node.ID
	jrc.mutation.done = true
	return _node, nil
}

func (jrc *JournalRecordCreate) createSpec() (*JournalRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &JournalRecord{config: jrc.config}
		_spec = sqlgraph.NewCreateSpec(journalrecord.Table, sqlgraph.NewFieldSpec(journalrecord.FieldID, field.TypeInt64))
	)
	if id, ok := jrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jrc.mutation.DateTime(); ok {
		_spec.SetField(journalrecord.FieldDateTime, field.TypeTime, value)
		_node.DateTime = value
	}
	if value, ok := jrc.mutation.Duration(); ok {
		_spec.SetField(journalrecord.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := jrc.mutation.Note(); ok {
		_spec.SetField(journalrecord.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := jrc.mutation.CreatedAt(); ok {
		_spec.SetField(journalrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jrc.mutation.UpdatedAt(); ok {
		_spec.SetField(journalrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   journalrecord.UserTable,
			Columns: []string{journalrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.LessonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   journalrecord.LessonTable,
			Columns: []string{journalrecord.LessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JournalRecordCreateBulk is the builder for creating many JournalRecord entities in bulk.
type JournalRecordCreateBulk struct {
	config
	err      error
	builders []*JournalRecordCreate
}

// Save creates the JournalRecord entities in the database.
func (jrcb *JournalRecordCreateBulk) Save(ctx context.Context) ([]*JournalRecord, error) {
	if jrcb.err != nil {
		return nil, jrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jrcb.builders))
	nodes := make([]*JournalRecord, len(jrcb.builders))
	mutators := make([]Mutator, len(jrcb.builders))
	for i := range jrcb.builders {
		func(i int, root context.Context) {
			builder := jrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JournalRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					if err := nodes[i].ID.Scan(specs[i].ID.Value); err != nil {
						return nil, err
					}
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jrcb *JournalRecordCreateBulk) SaveX(ctx context.Context) []*JournalRecord {
	v, err := jrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrcb *JournalRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := jrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrcb *JournalRecordCreateBulk) ExecX(ctx context.Context) {
	if err := jrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
