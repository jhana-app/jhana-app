// Code generated by ent, DO NOT EDIT.

package journalrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id gqlid.JournalRecordID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gqlid.JournalRecordID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gqlid.JournalRecordID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gqlid.JournalRecordID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gqlid.JournalRecordID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gqlid.JournalRecordID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gqlid.JournalRecordID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gqlid.JournalRecordID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gqlid.JournalRecordID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v gqlid.UserID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldUserID, v))
}

// LessonID applies equality check predicate on the "lesson_id" field. It's identical to LessonIDEQ.
func LessonID(v gqlid.LessonID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldLessonID, v))
}

// DateTime applies equality check predicate on the "dateTime" field. It's identical to DateTimeEQ.
func DateTime(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldDateTime, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldDuration, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldNote, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v gqlid.UserID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v gqlid.UserID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...gqlid.UserID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...gqlid.UserID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// LessonIDEQ applies the EQ predicate on the "lesson_id" field.
func LessonIDEQ(v gqlid.LessonID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldLessonID, v))
}

// LessonIDNEQ applies the NEQ predicate on the "lesson_id" field.
func LessonIDNEQ(v gqlid.LessonID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNEQ(FieldLessonID, v))
}

// LessonIDIn applies the In predicate on the "lesson_id" field.
func LessonIDIn(vs ...gqlid.LessonID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldIn(FieldLessonID, vs...))
}

// LessonIDNotIn applies the NotIn predicate on the "lesson_id" field.
func LessonIDNotIn(vs ...gqlid.LessonID) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNotIn(FieldLessonID, vs...))
}

// LessonIDIsNil applies the IsNil predicate on the "lesson_id" field.
func LessonIDIsNil() predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldIsNull(FieldLessonID))
}

// LessonIDNotNil applies the NotNil predicate on the "lesson_id" field.
func LessonIDNotNil() predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNotNull(FieldLessonID))
}

// DateTimeEQ applies the EQ predicate on the "dateTime" field.
func DateTimeEQ(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldDateTime, v))
}

// DateTimeNEQ applies the NEQ predicate on the "dateTime" field.
func DateTimeNEQ(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNEQ(FieldDateTime, v))
}

// DateTimeIn applies the In predicate on the "dateTime" field.
func DateTimeIn(vs ...time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldIn(FieldDateTime, vs...))
}

// DateTimeNotIn applies the NotIn predicate on the "dateTime" field.
func DateTimeNotIn(vs ...time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNotIn(FieldDateTime, vs...))
}

// DateTimeGT applies the GT predicate on the "dateTime" field.
func DateTimeGT(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGT(FieldDateTime, v))
}

// DateTimeGTE applies the GTE predicate on the "dateTime" field.
func DateTimeGTE(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGTE(FieldDateTime, v))
}

// DateTimeLT applies the LT predicate on the "dateTime" field.
func DateTimeLT(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLT(FieldDateTime, v))
}

// DateTimeLTE applies the LTE predicate on the "dateTime" field.
func DateTimeLTE(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLTE(FieldDateTime, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLTE(FieldDuration, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldHasSuffix(FieldNote, v))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldContainsFold(FieldNote, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.JournalRecord {
	return predicate.JournalRecord(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.JournalRecord {
	return predicate.JournalRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.JournalRecord {
	return predicate.JournalRecord(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLesson applies the HasEdge predicate on the "lesson" edge.
func HasLesson() predicate.JournalRecord {
	return predicate.JournalRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LessonTable, LessonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonWith applies the HasEdge predicate on the "lesson" edge with a given conditions (other predicates).
func HasLessonWith(preds ...predicate.Lesson) predicate.JournalRecord {
	return predicate.JournalRecord(func(s *sql.Selector) {
		step := newLessonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JournalRecord) predicate.JournalRecord {
	return predicate.JournalRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JournalRecord) predicate.JournalRecord {
	return predicate.JournalRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JournalRecord) predicate.JournalRecord {
	return predicate.JournalRecord(sql.NotPredicates(p))
}
