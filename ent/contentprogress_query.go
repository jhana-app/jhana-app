// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/content"
	"github.com/jhana-app/jhana-app/ent/contentepisode"
	"github.com/jhana-app/jhana-app/ent/contentprogress"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/user"
)

// ContentProgressQuery is the builder for querying ContentProgress entities.
type ContentProgressQuery struct {
	config
	ctx         *QueryContext
	order       []contentprogress.OrderOption
	inters      []Interceptor
	predicates  []predicate.ContentProgress
	withUser    *UserQuery
	withContent *ContentQuery
	withEpisode *ContentEpisodeQuery
	loadTotal   []func(context.Context, []*ContentProgress) error
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ContentProgressQuery builder.
func (cpq *ContentProgressQuery) Where(ps ...predicate.ContentProgress) *ContentProgressQuery {
	cpq.predicates = append(cpq.predicates, ps...)
	return cpq
}

// Limit the number of records to be returned by this query.
func (cpq *ContentProgressQuery) Limit(limit int) *ContentProgressQuery {
	cpq.ctx.Limit = &limit
	return cpq
}

// Offset to start from.
func (cpq *ContentProgressQuery) Offset(offset int) *ContentProgressQuery {
	cpq.ctx.Offset = &offset
	return cpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cpq *ContentProgressQuery) Unique(unique bool) *ContentProgressQuery {
	cpq.ctx.Unique = &unique
	return cpq
}

// Order specifies how the records should be ordered.
func (cpq *ContentProgressQuery) Order(o ...contentprogress.OrderOption) *ContentProgressQuery {
	cpq.order = append(cpq.order, o...)
	return cpq
}

// QueryUser chains the current query on the "user" edge.
func (cpq *ContentProgressQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: cpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contentprogress.Table, contentprogress.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, contentprogress.UserTable, contentprogress.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContent chains the current query on the "content" edge.
func (cpq *ContentProgressQuery) QueryContent() *ContentQuery {
	query := (&ContentClient{config: cpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contentprogress.Table, contentprogress.FieldID, selector),
			sqlgraph.To(content.Table, content.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, contentprogress.ContentTable, contentprogress.ContentColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEpisode chains the current query on the "episode" edge.
func (cpq *ContentProgressQuery) QueryEpisode() *ContentEpisodeQuery {
	query := (&ContentEpisodeClient{config: cpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contentprogress.Table, contentprogress.FieldID, selector),
			sqlgraph.To(contentepisode.Table, contentepisode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, contentprogress.EpisodeTable, contentprogress.EpisodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ContentProgress entity from the query.
// Returns a *NotFoundError when no ContentProgress was found.
func (cpq *ContentProgressQuery) First(ctx context.Context) (*ContentProgress, error) {
	nodes, err := cpq.Limit(1).All(setContextOp(ctx, cpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{contentprogress.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cpq *ContentProgressQuery) FirstX(ctx context.Context) *ContentProgress {
	node, err := cpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ContentProgress ID from the query.
// Returns a *NotFoundError when no ContentProgress ID was found.
func (cpq *ContentProgressQuery) FirstID(ctx context.Context) (id gqlid.ContentProgressID, err error) {
	var ids []gqlid.ContentProgressID
	if ids, err = cpq.Limit(1).IDs(setContextOp(ctx, cpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{contentprogress.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cpq *ContentProgressQuery) FirstIDX(ctx context.Context) gqlid.ContentProgressID {
	id, err := cpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ContentProgress entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ContentProgress entity is found.
// Returns a *NotFoundError when no ContentProgress entities are found.
func (cpq *ContentProgressQuery) Only(ctx context.Context) (*ContentProgress, error) {
	nodes, err := cpq.Limit(2).All(setContextOp(ctx, cpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{contentprogress.Label}
	default:
		return nil, &NotSingularError{contentprogress.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cpq *ContentProgressQuery) OnlyX(ctx context.Context) *ContentProgress {
	node, err := cpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ContentProgress ID in the query.
// Returns a *NotSingularError when more than one ContentProgress ID is found.
// Returns a *NotFoundError when no entities are found.
func (cpq *ContentProgressQuery) OnlyID(ctx context.Context) (id gqlid.ContentProgressID, err error) {
	var ids []gqlid.ContentProgressID
	if ids, err = cpq.Limit(2).IDs(setContextOp(ctx, cpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{contentprogress.Label}
	default:
		err = &NotSingularError{contentprogress.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cpq *ContentProgressQuery) OnlyIDX(ctx context.Context) gqlid.ContentProgressID {
	id, err := cpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ContentProgresses.
func (cpq *ContentProgressQuery) All(ctx context.Context) ([]*ContentProgress, error) {
	ctx = setContextOp(ctx, cpq.ctx, "All")
	if err := cpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ContentProgress, *ContentProgressQuery]()
	return withInterceptors[[]*ContentProgress](ctx, cpq, qr, cpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cpq *ContentProgressQuery) AllX(ctx context.Context) []*ContentProgress {
	nodes, err := cpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ContentProgress IDs.
func (cpq *ContentProgressQuery) IDs(ctx context.Context) (ids []gqlid.ContentProgressID, err error) {
	if cpq.ctx.Unique == nil && cpq.path != nil {
		cpq.Unique(true)
	}
	ctx = setContextOp(ctx, cpq.ctx, "IDs")
	if err = cpq.Select(contentprogress.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cpq *ContentProgressQuery) IDsX(ctx context.Context) []gqlid.ContentProgressID {
	ids, err := cpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cpq *ContentProgressQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cpq.ctx, "Count")
	if err := cpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cpq, querierCount[*ContentProgressQuery](), cpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cpq *ContentProgressQuery) CountX(ctx context.Context) int {
	count, err := cpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cpq *ContentProgressQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cpq.ctx, "Exist")
	switch _, err := cpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cpq *ContentProgressQuery) ExistX(ctx context.Context) bool {
	exist, err := cpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ContentProgressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cpq *ContentProgressQuery) Clone() *ContentProgressQuery {
	if cpq == nil {
		return nil
	}
	return &ContentProgressQuery{
		config:      cpq.config,
		ctx:         cpq.ctx.Clone(),
		order:       append([]contentprogress.OrderOption{}, cpq.order...),
		inters:      append([]Interceptor{}, cpq.inters...),
		predicates:  append([]predicate.ContentProgress{}, cpq.predicates...),
		withUser:    cpq.withUser.Clone(),
		withContent: cpq.withContent.Clone(),
		withEpisode: cpq.withEpisode.Clone(),
		// clone intermediate query.
		sql:  cpq.sql.Clone(),
		path: cpq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (cpq *ContentProgressQuery) WithUser(opts ...func(*UserQuery)) *ContentProgressQuery {
	query := (&UserClient{config: cpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cpq.withUser = query
	return cpq
}

// WithContent tells the query-builder to eager-load the nodes that are connected to
// the "content" edge. The optional arguments are used to configure the query builder of the edge.
func (cpq *ContentProgressQuery) WithContent(opts ...func(*ContentQuery)) *ContentProgressQuery {
	query := (&ContentClient{config: cpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cpq.withContent = query
	return cpq
}

// WithEpisode tells the query-builder to eager-load the nodes that are connected to
// the "episode" edge. The optional arguments are used to configure the query builder of the edge.
func (cpq *ContentProgressQuery) WithEpisode(opts ...func(*ContentEpisodeQuery)) *ContentProgressQuery {
	query := (&ContentEpisodeClient{config: cpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cpq.withEpisode = query
	return cpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID gqlid.UserID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ContentProgress.Query().
//		GroupBy(contentprogress.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cpq *ContentProgressQuery) GroupBy(field string, fields ...string) *ContentProgressGroupBy {
	cpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ContentProgressGroupBy{build: cpq}
	grbuild.flds = &cpq.ctx.Fields
	grbuild.label = contentprogress.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID gqlid.UserID `json:"user_id,omitempty"`
//	}
//
//	client.ContentProgress.Query().
//		Select(contentprogress.FieldUserID).
//		Scan(ctx, &v)
func (cpq *ContentProgressQuery) Select(fields ...string) *ContentProgressSelect {
	cpq.ctx.Fields = append(cpq.ctx.Fields, fields...)
	sbuild := &ContentProgressSelect{ContentProgressQuery: cpq}
	sbuild.label = contentprogress.Label
	sbuild.flds, sbuild.scan = &cpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ContentProgressSelect configured with the given aggregations.
func (cpq *ContentProgressQuery) Aggregate(fns ...AggregateFunc) *ContentProgressSelect {
	return cpq.Select().Aggregate(fns...)
}

func (cpq *ContentProgressQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cpq); err != nil {
				return err
			}
		}
	}
	for _, f := range cpq.ctx.Fields {
		if !contentprogress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cpq.path != nil {
		prev, err := cpq.path(ctx)
		if err != nil {
			return err
		}
		cpq.sql = prev
	}
	return nil
}

func (cpq *ContentProgressQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ContentProgress, error) {
	var (
		nodes       = []*ContentProgress{}
		_spec       = cpq.querySpec()
		loadedTypes = [3]bool{
			cpq.withUser != nil,
			cpq.withContent != nil,
			cpq.withEpisode != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ContentProgress).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ContentProgress{config: cpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cpq.modifiers) > 0 {
		_spec.Modifiers = cpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cpq.withUser; query != nil {
		if err := cpq.loadUser(ctx, query, nodes, nil,
			func(n *ContentProgress, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := cpq.withContent; query != nil {
		if err := cpq.loadContent(ctx, query, nodes, nil,
			func(n *ContentProgress, e *Content) { n.Edges.Content = e }); err != nil {
			return nil, err
		}
	}
	if query := cpq.withEpisode; query != nil {
		if err := cpq.loadEpisode(ctx, query, nodes, nil,
			func(n *ContentProgress, e *ContentEpisode) { n.Edges.Episode = e }); err != nil {
			return nil, err
		}
	}
	for i := range cpq.loadTotal {
		if err := cpq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cpq *ContentProgressQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ContentProgress, init func(*ContentProgress), assign func(*ContentProgress, *User)) error {
	ids := make([]gqlid.UserID, 0, len(nodes))
	nodeids := make(map[gqlid.UserID][]*ContentProgress)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cpq *ContentProgressQuery) loadContent(ctx context.Context, query *ContentQuery, nodes []*ContentProgress, init func(*ContentProgress), assign func(*ContentProgress, *Content)) error {
	ids := make([]gqlid.ContentID, 0, len(nodes))
	nodeids := make(map[gqlid.ContentID][]*ContentProgress)
	for i := range nodes {
		fk := nodes[i].ContentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(content.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "content_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cpq *ContentProgressQuery) loadEpisode(ctx context.Context, query *ContentEpisodeQuery, nodes []*ContentProgress, init func(*ContentProgress), assign func(*ContentProgress, *ContentEpisode)) error {
	ids := make([]gqlid.ContentEpisodeID, 0, len(nodes))
	nodeids := make(map[gqlid.ContentEpisodeID][]*ContentProgress)
	for i := range nodes {
		fk := nodes[i].EpisodeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(contentepisode.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "episode_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cpq *ContentProgressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cpq.querySpec()
	if len(cpq.modifiers) > 0 {
		_spec.Modifiers = cpq.modifiers
	}
	_spec.Node.Columns = cpq.ctx.Fields
	if len(cpq.ctx.Fields) > 0 {
		_spec.Unique = cpq.ctx.Unique != nil && *cpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cpq.driver, _spec)
}

func (cpq *ContentProgressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(contentprogress.Table, contentprogress.Columns, sqlgraph.NewFieldSpec(contentprogress.FieldID, field.TypeInt64))
	_spec.From = cpq.sql
	if unique := cpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cpq.path != nil {
		_spec.Unique = true
	}
	if fields := cpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contentprogress.FieldID)
		for i := range fields {
			if fields[i] != contentprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cpq.withUser != nil {
			_spec.Node.AddColumnOnce(contentprogress.FieldUserID)
		}
		if cpq.withContent != nil {
			_spec.Node.AddColumnOnce(contentprogress.FieldContentID)
		}
		if cpq.withEpisode != nil {
			_spec.Node.AddColumnOnce(contentprogress.FieldEpisodeID)
		}
	}
	if ps := cpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cpq *ContentProgressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cpq.driver.Dialect())
	t1 := builder.Table(contentprogress.Table)
	columns := cpq.ctx.Fields
	if len(columns) == 0 {
		columns = contentprogress.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cpq.sql != nil {
		selector = cpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cpq.ctx.Unique != nil && *cpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range cpq.modifiers {
		m(selector)
	}
	for _, p := range cpq.predicates {
		p(selector)
	}
	for _, p := range cpq.order {
		p(selector)
	}
	if offset := cpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cpq *ContentProgressQuery) Modify(modifiers ...func(s *sql.Selector)) *ContentProgressSelect {
	cpq.modifiers = append(cpq.modifiers, modifiers...)
	return cpq.Select()
}

// ContentProgressGroupBy is the group-by builder for ContentProgress entities.
type ContentProgressGroupBy struct {
	selector
	build *ContentProgressQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cpgb *ContentProgressGroupBy) Aggregate(fns ...AggregateFunc) *ContentProgressGroupBy {
	cpgb.fns = append(cpgb.fns, fns...)
	return cpgb
}

// Scan applies the selector query and scans the result into the given value.
func (cpgb *ContentProgressGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cpgb.build.ctx, "GroupBy")
	if err := cpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContentProgressQuery, *ContentProgressGroupBy](ctx, cpgb.build, cpgb, cpgb.build.inters, v)
}

func (cpgb *ContentProgressGroupBy) sqlScan(ctx context.Context, root *ContentProgressQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cpgb.fns))
	for _, fn := range cpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cpgb.flds)+len(cpgb.fns))
		for _, f := range *cpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ContentProgressSelect is the builder for selecting fields of ContentProgress entities.
type ContentProgressSelect struct {
	*ContentProgressQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cps *ContentProgressSelect) Aggregate(fns ...AggregateFunc) *ContentProgressSelect {
	cps.fns = append(cps.fns, fns...)
	return cps
}

// Scan applies the selector query and scans the result into the given value.
func (cps *ContentProgressSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cps.ctx, "Select")
	if err := cps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContentProgressQuery, *ContentProgressSelect](ctx, cps.ContentProgressQuery, cps, cps.inters, v)
}

func (cps *ContentProgressSelect) sqlScan(ctx context.Context, root *ContentProgressQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cps.fns))
	for _, fn := range cps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cps *ContentProgressSelect) Modify(modifiers ...func(s *sql.Selector)) *ContentProgressSelect {
	cps.modifiers = append(cps.modifiers, modifiers...)
	return cps
}
