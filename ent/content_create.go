// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/content"
	"github.com/jhana-app/jhana-app/ent/contentepisode"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/property"
)

// ContentCreate is the builder for creating a Content entity.
type ContentCreate struct {
	config
	mutation *ContentMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (cc *ContentCreate) SetType(pt property.ContentType) *ContentCreate {
	cc.mutation.SetType(pt)
	return cc
}

// SetIconImage sets the "iconImage" field.
func (cc *ContentCreate) SetIconImage(s string) *ContentCreate {
	cc.mutation.SetIconImage(s)
	return cc
}

// SetCoverImage sets the "coverImage" field.
func (cc *ContentCreate) SetCoverImage(s string) *ContentCreate {
	cc.mutation.SetCoverImage(s)
	return cc
}

// SetTitle sets the "title" field.
func (cc *ContentCreate) SetTitle(s string) *ContentCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetSubtitle sets the "subtitle" field.
func (cc *ContentCreate) SetSubtitle(s string) *ContentCreate {
	cc.mutation.SetSubtitle(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ContentCreate) SetDescription(s string) *ContentCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetSource sets the "source" field.
func (cc *ContentCreate) SetSource(s string) *ContentCreate {
	cc.mutation.SetSource(s)
	return cc
}

// SetSourceURL sets the "sourceURL" field.
func (cc *ContentCreate) SetSourceURL(s string) *ContentCreate {
	cc.mutation.SetSourceURL(s)
	return cc
}

// SetLicence sets the "licence" field.
func (cc *ContentCreate) SetLicence(s string) *ContentCreate {
	cc.mutation.SetLicence(s)
	return cc
}

// SetLicenceURL sets the "licenceURL" field.
func (cc *ContentCreate) SetLicenceURL(s string) *ContentCreate {
	cc.mutation.SetLicenceURL(s)
	return cc
}

// SetIsHidden sets the "isHidden" field.
func (cc *ContentCreate) SetIsHidden(b bool) *ContentCreate {
	cc.mutation.SetIsHidden(b)
	return cc
}

// SetNillableIsHidden sets the "isHidden" field if the given value is not nil.
func (cc *ContentCreate) SetNillableIsHidden(b *bool) *ContentCreate {
	if b != nil {
		cc.SetIsHidden(*b)
	}
	return cc
}

// SetOrder sets the "order" field.
func (cc *ContentCreate) SetOrder(i int) *ContentCreate {
	cc.mutation.SetOrder(i)
	return cc
}

// SetEpisodesCount sets the "episodesCount" field.
func (cc *ContentCreate) SetEpisodesCount(i int) *ContentCreate {
	cc.mutation.SetEpisodesCount(i)
	return cc
}

// SetID sets the "id" field.
func (cc *ContentCreate) SetID(gi gqlid.ContentID) *ContentCreate {
	cc.mutation.SetID(gi)
	return cc
}

// AddEpisodeIDs adds the "episodes" edge to the ContentEpisode entity by IDs.
func (cc *ContentCreate) AddEpisodeIDs(ids ...gqlid.ContentEpisodeID) *ContentCreate {
	cc.mutation.AddEpisodeIDs(ids...)
	return cc
}

// AddEpisodes adds the "episodes" edges to the ContentEpisode entity.
func (cc *ContentCreate) AddEpisodes(c ...*ContentEpisode) *ContentCreate {
	ids := make([]gqlid.ContentEpisodeID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddEpisodeIDs(ids...)
}

// Mutation returns the ContentMutation object of the builder.
func (cc *ContentCreate) Mutation() *ContentMutation {
	return cc.mutation
}

// Save creates the Content in the database.
func (cc *ContentCreate) Save(ctx context.Context) (*Content, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContentCreate) SaveX(ctx context.Context) *Content {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContentCreate) defaults() {
	if _, ok := cc.mutation.IsHidden(); !ok {
		v := content.DefaultIsHidden
		cc.mutation.SetIsHidden(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContentCreate) check() error {
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Content.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := content.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Content.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.IconImage(); !ok {
		return &ValidationError{Name: "iconImage", err: errors.New(`ent: missing required field "Content.iconImage"`)}
	}
	if v, ok := cc.mutation.IconImage(); ok {
		if err := content.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Content.iconImage": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CoverImage(); !ok {
		return &ValidationError{Name: "coverImage", err: errors.New(`ent: missing required field "Content.coverImage"`)}
	}
	if v, ok := cc.mutation.CoverImage(); ok {
		if err := content.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Content.coverImage": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Content.title"`)}
	}
	if v, ok := cc.mutation.Title(); ok {
		if err := content.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Content.title": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Subtitle(); !ok {
		return &ValidationError{Name: "subtitle", err: errors.New(`ent: missing required field "Content.subtitle"`)}
	}
	if v, ok := cc.mutation.Subtitle(); ok {
		if err := content.SubtitleValidator(v); err != nil {
			return &ValidationError{Name: "subtitle", err: fmt.Errorf(`ent: validator failed for field "Content.subtitle": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Content.description"`)}
	}
	if v, ok := cc.mutation.Description(); ok {
		if err := content.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Content.description": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "Content.source"`)}
	}
	if _, ok := cc.mutation.SourceURL(); !ok {
		return &ValidationError{Name: "sourceURL", err: errors.New(`ent: missing required field "Content.sourceURL"`)}
	}
	if _, ok := cc.mutation.Licence(); !ok {
		return &ValidationError{Name: "licence", err: errors.New(`ent: missing required field "Content.licence"`)}
	}
	if _, ok := cc.mutation.LicenceURL(); !ok {
		return &ValidationError{Name: "licenceURL", err: errors.New(`ent: missing required field "Content.licenceURL"`)}
	}
	if _, ok := cc.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "isHidden", err: errors.New(`ent: missing required field "Content.isHidden"`)}
	}
	if _, ok := cc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Content.order"`)}
	}
	if v, ok := cc.mutation.Order(); ok {
		if err := content.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Content.order": %w`, err)}
		}
	}
	if _, ok := cc.mutation.EpisodesCount(); !ok {
		return &ValidationError{Name: "episodesCount", err: errors.New(`ent: missing required field "Content.episodesCount"`)}
	}
	if v, ok := cc.mutation.EpisodesCount(); ok {
		if err := content.EpisodesCountValidator(v); err != nil {
			return &ValidationError{Name: "episodesCount", err: fmt.Errorf(`ent: validator failed for field "Content.episodesCount": %w`, err)}
		}
	}
	return nil
}

func (cc *ContentCreate) sqlSave(ctx context.Context) (*Content, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gqlid.ContentID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContentCreate) createSpec() (*Content, *sqlgraph.CreateSpec) {
	var (
		_node = &Content{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(content.Table, sqlgraph.NewFieldSpec(content.FieldID, field.TypeInt64))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(content.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.IconImage(); ok {
		_spec.SetField(content.FieldIconImage, field.TypeString, value)
		_node.IconImage = value
	}
	if value, ok := cc.mutation.CoverImage(); ok {
		_spec.SetField(content.FieldCoverImage, field.TypeString, value)
		_node.CoverImage = value
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(content.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Subtitle(); ok {
		_spec.SetField(content.FieldSubtitle, field.TypeString, value)
		_node.Subtitle = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(content.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Source(); ok {
		_spec.SetField(content.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := cc.mutation.SourceURL(); ok {
		_spec.SetField(content.FieldSourceURL, field.TypeString, value)
		_node.SourceURL = value
	}
	if value, ok := cc.mutation.Licence(); ok {
		_spec.SetField(content.FieldLicence, field.TypeString, value)
		_node.Licence = value
	}
	if value, ok := cc.mutation.LicenceURL(); ok {
		_spec.SetField(content.FieldLicenceURL, field.TypeString, value)
		_node.LicenceURL = value
	}
	if value, ok := cc.mutation.IsHidden(); ok {
		_spec.SetField(content.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := cc.mutation.Order(); ok {
		_spec.SetField(content.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := cc.mutation.EpisodesCount(); ok {
		_spec.SetField(content.FieldEpisodesCount, field.TypeInt, value)
		_node.EpisodesCount = value
	}
	if nodes := cc.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   content.EpisodesTable,
			Columns: []string{content.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentepisode.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContentCreateBulk is the builder for creating many Content entities in bulk.
type ContentCreateBulk struct {
	config
	err      error
	builders []*ContentCreate
}

// Save creates the Content entities in the database.
func (ccb *ContentCreateBulk) Save(ctx context.Context) ([]*Content, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Content, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					if err := nodes[i].ID.Scan(specs[i].ID.Value); err != nil {
						return nil, err
					}
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContentCreateBulk) SaveX(ctx context.Context) []*Content {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
