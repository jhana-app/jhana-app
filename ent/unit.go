// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jhana-app/jhana-app/ent/course"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/unit"
)

// Unit is the model entity for the Unit schema.
type Unit struct {
	config `json:"-"`
	// ID of the ent.
	ID gqlid.UnitID `json:"id,omitempty"`
	// CourseID holds the value of the "course_id" field.
	CourseID gqlid.CourseID `json:"course_id,omitempty"`
	// IconImage holds the value of the "iconImage" field.
	IconImage string `json:"iconImage,omitempty"`
	// CoverImage holds the value of the "coverImage" field.
	CoverImage string `json:"coverImage,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Subtitle holds the value of the "subtitle" field.
	Subtitle string `json:"subtitle,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Mastering holds the value of the "mastering" field.
	Mastering string `json:"mastering,omitempty"`
	// Days holds the value of the "days" field.
	Days int `json:"days,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UnitQuery when eager-loading is set.
	Edges        UnitEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UnitEdges holds the relations/edges for other nodes in the graph.
type UnitEdges struct {
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// Lessons holds the value of the lessons edge.
	Lessons []*Lesson `json:"lessons,omitempty"`
	// Techniques holds the value of the techniques edge.
	Techniques []*Technique `json:"techniques,omitempty"`
	// UnitTechniques holds the value of the unitTechniques edge.
	UnitTechniques []*UnitTechnique `json:"unitTechniques,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedLessons        map[string][]*Lesson
	namedTechniques     map[string][]*Technique
	namedUnitTechniques map[string][]*UnitTechnique
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UnitEdges) CourseOrErr() (*Course, error) {
	if e.Course != nil {
		return e.Course, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: course.Label}
	}
	return nil, &NotLoadedError{edge: "course"}
}

// LessonsOrErr returns the Lessons value or an error if the edge
// was not loaded in eager-loading.
func (e UnitEdges) LessonsOrErr() ([]*Lesson, error) {
	if e.loadedTypes[1] {
		return e.Lessons, nil
	}
	return nil, &NotLoadedError{edge: "lessons"}
}

// TechniquesOrErr returns the Techniques value or an error if the edge
// was not loaded in eager-loading.
func (e UnitEdges) TechniquesOrErr() ([]*Technique, error) {
	if e.loadedTypes[2] {
		return e.Techniques, nil
	}
	return nil, &NotLoadedError{edge: "techniques"}
}

// UnitTechniquesOrErr returns the UnitTechniques value or an error if the edge
// was not loaded in eager-loading.
func (e UnitEdges) UnitTechniquesOrErr() ([]*UnitTechnique, error) {
	if e.loadedTypes[3] {
		return e.UnitTechniques, nil
	}
	return nil, &NotLoadedError{edge: "unitTechniques"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Unit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case unit.FieldCourseID:
			values[i] = new(gqlid.CourseID)
		case unit.FieldID:
			values[i] = new(gqlid.UnitID)
		case unit.FieldDays, unit.FieldOrder:
			values[i] = new(sql.NullInt64)
		case unit.FieldIconImage, unit.FieldCoverImage, unit.FieldTitle, unit.FieldSubtitle, unit.FieldDescription, unit.FieldMastering, unit.FieldColor:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Unit fields.
func (u *Unit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case unit.FieldID:
			if value, ok := values[i].(*gqlid.UnitID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case unit.FieldCourseID:
			if value, ok := values[i].(*gqlid.CourseID); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value != nil {
				u.CourseID = *value
			}
		case unit.FieldIconImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iconImage", values[i])
			} else if value.Valid {
				u.IconImage = value.String
			}
		case unit.FieldCoverImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coverImage", values[i])
			} else if value.Valid {
				u.CoverImage = value.String
			}
		case unit.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				u.Title = value.String
			}
		case unit.FieldSubtitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subtitle", values[i])
			} else if value.Valid {
				u.Subtitle = value.String
			}
		case unit.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				u.Description = value.String
			}
		case unit.FieldMastering:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mastering", values[i])
			} else if value.Valid {
				u.Mastering = value.String
			}
		case unit.FieldDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days", values[i])
			} else if value.Valid {
				u.Days = int(value.Int64)
			}
		case unit.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				u.Color = value.String
			}
		case unit.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				u.Order = int(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Unit.
// This includes values selected through modifiers, order, etc.
func (u *Unit) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryCourse queries the "course" edge of the Unit entity.
func (u *Unit) QueryCourse() *CourseQuery {
	return NewUnitClient(u.config).QueryCourse(u)
}

// QueryLessons queries the "lessons" edge of the Unit entity.
func (u *Unit) QueryLessons() *LessonQuery {
	return NewUnitClient(u.config).QueryLessons(u)
}

// QueryTechniques queries the "techniques" edge of the Unit entity.
func (u *Unit) QueryTechniques() *TechniqueQuery {
	return NewUnitClient(u.config).QueryTechniques(u)
}

// QueryUnitTechniques queries the "unitTechniques" edge of the Unit entity.
func (u *Unit) QueryUnitTechniques() *UnitTechniqueQuery {
	return NewUnitClient(u.config).QueryUnitTechniques(u)
}

// Update returns a builder for updating this Unit.
// Note that you need to call Unit.Unwrap() before calling this method if this Unit
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Unit) Update() *UnitUpdateOne {
	return NewUnitClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the Unit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Unit) Unwrap() *Unit {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Unit is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Unit) String() string {
	var builder strings.Builder
	builder.WriteString("Unit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("course_id=")
	builder.WriteString(fmt.Sprintf("%v", u.CourseID))
	builder.WriteString(", ")
	builder.WriteString("iconImage=")
	builder.WriteString(u.IconImage)
	builder.WriteString(", ")
	builder.WriteString("coverImage=")
	builder.WriteString(u.CoverImage)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(u.Title)
	builder.WriteString(", ")
	builder.WriteString("subtitle=")
	builder.WriteString(u.Subtitle)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(u.Description)
	builder.WriteString(", ")
	builder.WriteString("mastering=")
	builder.WriteString(u.Mastering)
	builder.WriteString(", ")
	builder.WriteString("days=")
	builder.WriteString(fmt.Sprintf("%v", u.Days))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(u.Color)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", u.Order))
	builder.WriteByte(')')
	return builder.String()
}

// NamedLessons returns the Lessons named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *Unit) NamedLessons(name string) ([]*Lesson, error) {
	if u.Edges.namedLessons == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedLessons[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *Unit) appendNamedLessons(name string, edges ...*Lesson) {
	if u.Edges.namedLessons == nil {
		u.Edges.namedLessons = make(map[string][]*Lesson)
	}
	if len(edges) == 0 {
		u.Edges.namedLessons[name] = []*Lesson{}
	} else {
		u.Edges.namedLessons[name] = append(u.Edges.namedLessons[name], edges...)
	}
}

// NamedTechniques returns the Techniques named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *Unit) NamedTechniques(name string) ([]*Technique, error) {
	if u.Edges.namedTechniques == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedTechniques[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *Unit) appendNamedTechniques(name string, edges ...*Technique) {
	if u.Edges.namedTechniques == nil {
		u.Edges.namedTechniques = make(map[string][]*Technique)
	}
	if len(edges) == 0 {
		u.Edges.namedTechniques[name] = []*Technique{}
	} else {
		u.Edges.namedTechniques[name] = append(u.Edges.namedTechniques[name], edges...)
	}
}

// NamedUnitTechniques returns the UnitTechniques named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *Unit) NamedUnitTechniques(name string) ([]*UnitTechnique, error) {
	if u.Edges.namedUnitTechniques == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedUnitTechniques[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *Unit) appendNamedUnitTechniques(name string, edges ...*UnitTechnique) {
	if u.Edges.namedUnitTechniques == nil {
		u.Edges.namedUnitTechniques = make(map[string][]*UnitTechnique)
	}
	if len(edges) == 0 {
		u.Edges.namedUnitTechniques[name] = []*UnitTechnique{}
	} else {
		u.Edges.namedUnitTechniques[name] = append(u.Edges.namedUnitTechniques[name], edges...)
	}
}

// Units is a parsable slice of Unit.
type Units []*Unit
