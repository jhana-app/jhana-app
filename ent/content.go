// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jhana-app/jhana-app/ent/content"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/property"
)

// Content is the model entity for the Content schema.
type Content struct {
	config `json:"-"`
	// ID of the ent.
	ID gqlid.ContentID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type property.ContentType `json:"type,omitempty"`
	// IconImage holds the value of the "iconImage" field.
	IconImage string `json:"iconImage,omitempty"`
	// CoverImage holds the value of the "coverImage" field.
	CoverImage string `json:"coverImage,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Subtitle holds the value of the "subtitle" field.
	Subtitle string `json:"subtitle,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// SourceURL holds the value of the "sourceURL" field.
	SourceURL string `json:"sourceURL,omitempty"`
	// Licence holds the value of the "licence" field.
	Licence string `json:"licence,omitempty"`
	// LicenceURL holds the value of the "licenceURL" field.
	LicenceURL string `json:"licenceURL,omitempty"`
	// IsHidden holds the value of the "isHidden" field.
	IsHidden bool `json:"isHidden,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// EpisodesCount holds the value of the "episodesCount" field.
	EpisodesCount int `json:"episodesCount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContentQuery when eager-loading is set.
	Edges        ContentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ContentEdges holds the relations/edges for other nodes in the graph.
type ContentEdges struct {
	// Episodes holds the value of the episodes edge.
	Episodes []*ContentEpisode `json:"episodes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedEpisodes map[string][]*ContentEpisode
}

// EpisodesOrErr returns the Episodes value or an error if the edge
// was not loaded in eager-loading.
func (e ContentEdges) EpisodesOrErr() ([]*ContentEpisode, error) {
	if e.loadedTypes[0] {
		return e.Episodes, nil
	}
	return nil, &NotLoadedError{edge: "episodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Content) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case content.FieldID:
			values[i] = new(gqlid.ContentID)
		case content.FieldIsHidden:
			values[i] = new(sql.NullBool)
		case content.FieldOrder, content.FieldEpisodesCount:
			values[i] = new(sql.NullInt64)
		case content.FieldType, content.FieldIconImage, content.FieldCoverImage, content.FieldTitle, content.FieldSubtitle, content.FieldDescription, content.FieldSource, content.FieldSourceURL, content.FieldLicence, content.FieldLicenceURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Content fields.
func (c *Content) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case content.FieldID:
			if value, ok := values[i].(*gqlid.ContentID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case content.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = property.ContentType(value.String)
			}
		case content.FieldIconImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iconImage", values[i])
			} else if value.Valid {
				c.IconImage = value.String
			}
		case content.FieldCoverImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coverImage", values[i])
			} else if value.Valid {
				c.CoverImage = value.String
			}
		case content.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case content.FieldSubtitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subtitle", values[i])
			} else if value.Valid {
				c.Subtitle = value.String
			}
		case content.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case content.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				c.Source = value.String
			}
		case content.FieldSourceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sourceURL", values[i])
			} else if value.Valid {
				c.SourceURL = value.String
			}
		case content.FieldLicence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field licence", values[i])
			} else if value.Valid {
				c.Licence = value.String
			}
		case content.FieldLicenceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field licenceURL", values[i])
			} else if value.Valid {
				c.LicenceURL = value.String
			}
		case content.FieldIsHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isHidden", values[i])
			} else if value.Valid {
				c.IsHidden = value.Bool
			}
		case content.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				c.Order = int(value.Int64)
			}
		case content.FieldEpisodesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field episodesCount", values[i])
			} else if value.Valid {
				c.EpisodesCount = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Content.
// This includes values selected through modifiers, order, etc.
func (c *Content) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryEpisodes queries the "episodes" edge of the Content entity.
func (c *Content) QueryEpisodes() *ContentEpisodeQuery {
	return NewContentClient(c.config).QueryEpisodes(c)
}

// Update returns a builder for updating this Content.
// Note that you need to call Content.Unwrap() before calling this method if this Content
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Content) Update() *ContentUpdateOne {
	return NewContentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Content entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Content) Unwrap() *Content {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Content is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Content) String() string {
	var builder strings.Builder
	builder.WriteString("Content(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("iconImage=")
	builder.WriteString(c.IconImage)
	builder.WriteString(", ")
	builder.WriteString("coverImage=")
	builder.WriteString(c.CoverImage)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(c.Title)
	builder.WriteString(", ")
	builder.WriteString("subtitle=")
	builder.WriteString(c.Subtitle)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(c.Source)
	builder.WriteString(", ")
	builder.WriteString("sourceURL=")
	builder.WriteString(c.SourceURL)
	builder.WriteString(", ")
	builder.WriteString("licence=")
	builder.WriteString(c.Licence)
	builder.WriteString(", ")
	builder.WriteString("licenceURL=")
	builder.WriteString(c.LicenceURL)
	builder.WriteString(", ")
	builder.WriteString("isHidden=")
	builder.WriteString(fmt.Sprintf("%v", c.IsHidden))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", c.Order))
	builder.WriteString(", ")
	builder.WriteString("episodesCount=")
	builder.WriteString(fmt.Sprintf("%v", c.EpisodesCount))
	builder.WriteByte(')')
	return builder.String()
}

// NamedEpisodes returns the Episodes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Content) NamedEpisodes(name string) ([]*ContentEpisode, error) {
	if c.Edges.namedEpisodes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedEpisodes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Content) appendNamedEpisodes(name string, edges ...*ContentEpisode) {
	if c.Edges.namedEpisodes == nil {
		c.Edges.namedEpisodes = make(map[string][]*ContentEpisode)
	}
	if len(edges) == 0 {
		c.Edges.namedEpisodes[name] = []*ContentEpisode{}
	} else {
		c.Edges.namedEpisodes[name] = append(c.Edges.namedEpisodes[name], edges...)
	}
}

// Contents is a parsable slice of Content.
type Contents []*Content
