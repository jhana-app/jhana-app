// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/unittechnique"
)

// UnitTechniqueUpdate is the builder for updating UnitTechnique entities.
type UnitTechniqueUpdate struct {
	config
	hooks     []Hook
	mutation  *UnitTechniqueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UnitTechniqueUpdate builder.
func (utu *UnitTechniqueUpdate) Where(ps ...predicate.UnitTechnique) *UnitTechniqueUpdate {
	utu.mutation.Where(ps...)
	return utu
}

// Mutation returns the UnitTechniqueMutation object of the builder.
func (utu *UnitTechniqueUpdate) Mutation() *UnitTechniqueMutation {
	return utu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utu *UnitTechniqueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utu.sqlSave, utu.mutation, utu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utu *UnitTechniqueUpdate) SaveX(ctx context.Context) int {
	affected, err := utu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utu *UnitTechniqueUpdate) Exec(ctx context.Context) error {
	_, err := utu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utu *UnitTechniqueUpdate) ExecX(ctx context.Context) {
	if err := utu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utu *UnitTechniqueUpdate) check() error {
	if _, ok := utu.mutation.UnitID(); utu.mutation.UnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UnitTechnique.unit"`)
	}
	if _, ok := utu.mutation.TechniqueID(); utu.mutation.TechniqueCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UnitTechnique.technique"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (utu *UnitTechniqueUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UnitTechniqueUpdate {
	utu.modifiers = append(utu.modifiers, modifiers...)
	return utu
}

func (utu *UnitTechniqueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := utu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(unittechnique.Table, unittechnique.Columns, sqlgraph.NewFieldSpec(unittechnique.FieldUnitID, field.TypeInt64), sqlgraph.NewFieldSpec(unittechnique.FieldTechniqueID, field.TypeInt64))
	if ps := utu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.AddModifiers(utu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, utu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unittechnique.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utu.mutation.done = true
	return n, nil
}

// UnitTechniqueUpdateOne is the builder for updating a single UnitTechnique entity.
type UnitTechniqueUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UnitTechniqueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Mutation returns the UnitTechniqueMutation object of the builder.
func (utuo *UnitTechniqueUpdateOne) Mutation() *UnitTechniqueMutation {
	return utuo.mutation
}

// Where appends a list predicates to the UnitTechniqueUpdate builder.
func (utuo *UnitTechniqueUpdateOne) Where(ps ...predicate.UnitTechnique) *UnitTechniqueUpdateOne {
	utuo.mutation.Where(ps...)
	return utuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utuo *UnitTechniqueUpdateOne) Select(field string, fields ...string) *UnitTechniqueUpdateOne {
	utuo.fields = append([]string{field}, fields...)
	return utuo
}

// Save executes the query and returns the updated UnitTechnique entity.
func (utuo *UnitTechniqueUpdateOne) Save(ctx context.Context) (*UnitTechnique, error) {
	return withHooks(ctx, utuo.sqlSave, utuo.mutation, utuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utuo *UnitTechniqueUpdateOne) SaveX(ctx context.Context) *UnitTechnique {
	node, err := utuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utuo *UnitTechniqueUpdateOne) Exec(ctx context.Context) error {
	_, err := utuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utuo *UnitTechniqueUpdateOne) ExecX(ctx context.Context) {
	if err := utuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utuo *UnitTechniqueUpdateOne) check() error {
	if _, ok := utuo.mutation.UnitID(); utuo.mutation.UnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UnitTechnique.unit"`)
	}
	if _, ok := utuo.mutation.TechniqueID(); utuo.mutation.TechniqueCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UnitTechnique.technique"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (utuo *UnitTechniqueUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UnitTechniqueUpdateOne {
	utuo.modifiers = append(utuo.modifiers, modifiers...)
	return utuo
}

func (utuo *UnitTechniqueUpdateOne) sqlSave(ctx context.Context) (_node *UnitTechnique, err error) {
	if err := utuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(unittechnique.Table, unittechnique.Columns, sqlgraph.NewFieldSpec(unittechnique.FieldUnitID, field.TypeInt64), sqlgraph.NewFieldSpec(unittechnique.FieldTechniqueID, field.TypeInt64))
	if id, ok := utuo.mutation.UnitID(); !ok {
		return nil, &ValidationError{Name: "unit_id", err: errors.New(`ent: missing "UnitTechnique.unit_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := utuo.mutation.TechniqueID(); !ok {
		return nil, &ValidationError{Name: "technique_id", err: errors.New(`ent: missing "UnitTechnique.technique_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := utuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !unittechnique.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := utuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.AddModifiers(utuo.modifiers...)
	_node = &UnitTechnique{config: utuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unittechnique.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utuo.mutation.done = true
	return _node, nil
}
