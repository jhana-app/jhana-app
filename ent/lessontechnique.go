// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/lessontechnique"
	"github.com/jhana-app/jhana-app/ent/technique"
)

// LessonTechnique is the model entity for the LessonTechnique schema.
type LessonTechnique struct {
	config `json:"-"`
	// LessonID holds the value of the "lesson_id" field.
	LessonID gqlid.LessonID `json:"lesson_id,omitempty"`
	// TechniqueID holds the value of the "technique_id" field.
	TechniqueID gqlid.TechniqueID `json:"technique_id,omitempty"`
	// Order holds the value of the "order" field.
	Order int64 `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonTechniqueQuery when eager-loading is set.
	Edges        LessonTechniqueEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonTechniqueEdges holds the relations/edges for other nodes in the graph.
type LessonTechniqueEdges struct {
	// Lesson holds the value of the lesson edge.
	Lesson *Lesson `json:"lesson,omitempty"`
	// Technique holds the value of the technique edge.
	Technique *Technique `json:"technique,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// LessonOrErr returns the Lesson value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonTechniqueEdges) LessonOrErr() (*Lesson, error) {
	if e.Lesson != nil {
		return e.Lesson, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lesson.Label}
	}
	return nil, &NotLoadedError{edge: "lesson"}
}

// TechniqueOrErr returns the Technique value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonTechniqueEdges) TechniqueOrErr() (*Technique, error) {
	if e.Technique != nil {
		return e.Technique, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: technique.Label}
	}
	return nil, &NotLoadedError{edge: "technique"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LessonTechnique) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lessontechnique.FieldLessonID:
			values[i] = new(gqlid.LessonID)
		case lessontechnique.FieldTechniqueID:
			values[i] = new(gqlid.TechniqueID)
		case lessontechnique.FieldOrder:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LessonTechnique fields.
func (lt *LessonTechnique) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lessontechnique.FieldLessonID:
			if value, ok := values[i].(*gqlid.LessonID); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_id", values[i])
			} else if value != nil {
				lt.LessonID = *value
			}
		case lessontechnique.FieldTechniqueID:
			if value, ok := values[i].(*gqlid.TechniqueID); !ok {
				return fmt.Errorf("unexpected type %T for field technique_id", values[i])
			} else if value != nil {
				lt.TechniqueID = *value
			}
		case lessontechnique.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				lt.Order = value.Int64
			}
		default:
			lt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LessonTechnique.
// This includes values selected through modifiers, order, etc.
func (lt *LessonTechnique) Value(name string) (ent.Value, error) {
	return lt.selectValues.Get(name)
}

// QueryLesson queries the "lesson" edge of the LessonTechnique entity.
func (lt *LessonTechnique) QueryLesson() *LessonQuery {
	return NewLessonTechniqueClient(lt.config).QueryLesson(lt)
}

// QueryTechnique queries the "technique" edge of the LessonTechnique entity.
func (lt *LessonTechnique) QueryTechnique() *TechniqueQuery {
	return NewLessonTechniqueClient(lt.config).QueryTechnique(lt)
}

// Update returns a builder for updating this LessonTechnique.
// Note that you need to call LessonTechnique.Unwrap() before calling this method if this LessonTechnique
// was returned from a transaction, and the transaction was committed or rolled back.
func (lt *LessonTechnique) Update() *LessonTechniqueUpdateOne {
	return NewLessonTechniqueClient(lt.config).UpdateOne(lt)
}

// Unwrap unwraps the LessonTechnique entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lt *LessonTechnique) Unwrap() *LessonTechnique {
	_tx, ok := lt.config.driver.(*txDriver)
	if !ok {
		panic("ent: LessonTechnique is not a transactional entity")
	}
	lt.config.driver = _tx.drv
	return lt
}

// String implements the fmt.Stringer.
func (lt *LessonTechnique) String() string {
	var builder strings.Builder
	builder.WriteString("LessonTechnique(")
	builder.WriteString("lesson_id=")
	builder.WriteString(fmt.Sprintf("%v", lt.LessonID))
	builder.WriteString(", ")
	builder.WriteString("technique_id=")
	builder.WriteString(fmt.Sprintf("%v", lt.TechniqueID))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", lt.Order))
	builder.WriteByte(')')
	return builder.String()
}

// LessonTechniques is a parsable slice of LessonTechnique.
type LessonTechniques []*LessonTechnique
