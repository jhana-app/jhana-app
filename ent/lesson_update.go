// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/lessonaudio"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/property"
	"github.com/jhana-app/jhana-app/ent/technique"
)

// LessonUpdate is the builder for updating Lesson entities.
type LessonUpdate struct {
	config
	hooks     []Hook
	mutation  *LessonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LessonUpdate builder.
func (lu *LessonUpdate) Where(ps ...predicate.Lesson) *LessonUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetType sets the "type" field.
func (lu *LessonUpdate) SetType(pt property.LessonType) *LessonUpdate {
	lu.mutation.SetType(pt)
	return lu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableType(pt *property.LessonType) *LessonUpdate {
	if pt != nil {
		lu.SetType(*pt)
	}
	return lu
}

// SetIconImage sets the "iconImage" field.
func (lu *LessonUpdate) SetIconImage(s string) *LessonUpdate {
	lu.mutation.SetIconImage(s)
	return lu
}

// SetNillableIconImage sets the "iconImage" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableIconImage(s *string) *LessonUpdate {
	if s != nil {
		lu.SetIconImage(*s)
	}
	return lu
}

// SetCoverImage sets the "coverImage" field.
func (lu *LessonUpdate) SetCoverImage(s string) *LessonUpdate {
	lu.mutation.SetCoverImage(s)
	return lu
}

// SetNillableCoverImage sets the "coverImage" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableCoverImage(s *string) *LessonUpdate {
	if s != nil {
		lu.SetCoverImage(*s)
	}
	return lu
}

// SetTitle sets the "title" field.
func (lu *LessonUpdate) SetTitle(s string) *LessonUpdate {
	lu.mutation.SetTitle(s)
	return lu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableTitle(s *string) *LessonUpdate {
	if s != nil {
		lu.SetTitle(*s)
	}
	return lu
}

// SetDescription sets the "description" field.
func (lu *LessonUpdate) SetDescription(s string) *LessonUpdate {
	lu.mutation.SetDescription(s)
	return lu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableDescription(s *string) *LessonUpdate {
	if s != nil {
		lu.SetDescription(*s)
	}
	return lu
}

// SetOrder sets the "order" field.
func (lu *LessonUpdate) SetOrder(i int) *LessonUpdate {
	lu.mutation.ResetOrder()
	lu.mutation.SetOrder(i)
	return lu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableOrder(i *int) *LessonUpdate {
	if i != nil {
		lu.SetOrder(*i)
	}
	return lu
}

// AddOrder adds i to the "order" field.
func (lu *LessonUpdate) AddOrder(i int) *LessonUpdate {
	lu.mutation.AddOrder(i)
	return lu
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (lu *LessonUpdate) AddTechniqueIDs(ids ...gqlid.TechniqueID) *LessonUpdate {
	lu.mutation.AddTechniqueIDs(ids...)
	return lu
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (lu *LessonUpdate) AddTechniques(t ...*Technique) *LessonUpdate {
	ids := make([]gqlid.TechniqueID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lu.AddTechniqueIDs(ids...)
}

// AddAudioIDs adds the "audios" edge to the LessonAudio entity by IDs.
func (lu *LessonUpdate) AddAudioIDs(ids ...gqlid.LessonAudioID) *LessonUpdate {
	lu.mutation.AddAudioIDs(ids...)
	return lu
}

// AddAudios adds the "audios" edges to the LessonAudio entity.
func (lu *LessonUpdate) AddAudios(l ...*LessonAudio) *LessonUpdate {
	ids := make([]gqlid.LessonAudioID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddAudioIDs(ids...)
}

// Mutation returns the LessonMutation object of the builder.
func (lu *LessonUpdate) Mutation() *LessonMutation {
	return lu.mutation
}

// ClearTechniques clears all "techniques" edges to the Technique entity.
func (lu *LessonUpdate) ClearTechniques() *LessonUpdate {
	lu.mutation.ClearTechniques()
	return lu
}

// RemoveTechniqueIDs removes the "techniques" edge to Technique entities by IDs.
func (lu *LessonUpdate) RemoveTechniqueIDs(ids ...gqlid.TechniqueID) *LessonUpdate {
	lu.mutation.RemoveTechniqueIDs(ids...)
	return lu
}

// RemoveTechniques removes "techniques" edges to Technique entities.
func (lu *LessonUpdate) RemoveTechniques(t ...*Technique) *LessonUpdate {
	ids := make([]gqlid.TechniqueID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lu.RemoveTechniqueIDs(ids...)
}

// ClearAudios clears all "audios" edges to the LessonAudio entity.
func (lu *LessonUpdate) ClearAudios() *LessonUpdate {
	lu.mutation.ClearAudios()
	return lu
}

// RemoveAudioIDs removes the "audios" edge to LessonAudio entities by IDs.
func (lu *LessonUpdate) RemoveAudioIDs(ids ...gqlid.LessonAudioID) *LessonUpdate {
	lu.mutation.RemoveAudioIDs(ids...)
	return lu
}

// RemoveAudios removes "audios" edges to LessonAudio entities.
func (lu *LessonUpdate) RemoveAudios(l ...*LessonAudio) *LessonUpdate {
	ids := make([]gqlid.LessonAudioID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveAudioIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LessonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LessonUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LessonUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LessonUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LessonUpdate) check() error {
	if v, ok := lu.mutation.GetType(); ok {
		if err := lesson.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Lesson.type": %w`, err)}
		}
	}
	if v, ok := lu.mutation.IconImage(); ok {
		if err := lesson.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Lesson.iconImage": %w`, err)}
		}
	}
	if v, ok := lu.mutation.CoverImage(); ok {
		if err := lesson.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Lesson.coverImage": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Title(); ok {
		if err := lesson.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Lesson.title": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Description(); ok {
		if err := lesson.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Lesson.description": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Order(); ok {
		if err := lesson.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Lesson.order": %w`, err)}
		}
	}
	if _, ok := lu.mutation.UnitID(); lu.mutation.UnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Lesson.unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lu *LessonUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LessonUpdate {
	lu.modifiers = append(lu.modifiers, modifiers...)
	return lu
}

func (lu *LessonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lesson.Table, lesson.Columns, sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.GetType(); ok {
		_spec.SetField(lesson.FieldType, field.TypeEnum, value)
	}
	if value, ok := lu.mutation.IconImage(); ok {
		_spec.SetField(lesson.FieldIconImage, field.TypeString, value)
	}
	if value, ok := lu.mutation.CoverImage(); ok {
		_spec.SetField(lesson.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := lu.mutation.Title(); ok {
		_spec.SetField(lesson.FieldTitle, field.TypeString, value)
	}
	if value, ok := lu.mutation.Description(); ok {
		_spec.SetField(lesson.FieldDescription, field.TypeString, value)
	}
	if value, ok := lu.mutation.Order(); ok {
		_spec.SetField(lesson.FieldOrder, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedOrder(); ok {
		_spec.AddField(lesson.FieldOrder, field.TypeInt, value)
	}
	if lu.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lesson.TechniquesTable,
			Columns: lesson.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !lu.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lesson.TechniquesTable,
			Columns: lesson.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lesson.TechniquesTable,
			Columns: lesson.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.AudiosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lesson.AudiosTable,
			Columns: []string{lesson.AudiosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonaudio.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedAudiosIDs(); len(nodes) > 0 && !lu.mutation.AudiosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lesson.AudiosTable,
			Columns: []string{lesson.AudiosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonaudio.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.AudiosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lesson.AudiosTable,
			Columns: []string{lesson.AudiosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonaudio.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lesson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LessonUpdateOne is the builder for updating a single Lesson entity.
type LessonUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LessonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetType sets the "type" field.
func (luo *LessonUpdateOne) SetType(pt property.LessonType) *LessonUpdateOne {
	luo.mutation.SetType(pt)
	return luo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableType(pt *property.LessonType) *LessonUpdateOne {
	if pt != nil {
		luo.SetType(*pt)
	}
	return luo
}

// SetIconImage sets the "iconImage" field.
func (luo *LessonUpdateOne) SetIconImage(s string) *LessonUpdateOne {
	luo.mutation.SetIconImage(s)
	return luo
}

// SetNillableIconImage sets the "iconImage" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableIconImage(s *string) *LessonUpdateOne {
	if s != nil {
		luo.SetIconImage(*s)
	}
	return luo
}

// SetCoverImage sets the "coverImage" field.
func (luo *LessonUpdateOne) SetCoverImage(s string) *LessonUpdateOne {
	luo.mutation.SetCoverImage(s)
	return luo
}

// SetNillableCoverImage sets the "coverImage" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableCoverImage(s *string) *LessonUpdateOne {
	if s != nil {
		luo.SetCoverImage(*s)
	}
	return luo
}

// SetTitle sets the "title" field.
func (luo *LessonUpdateOne) SetTitle(s string) *LessonUpdateOne {
	luo.mutation.SetTitle(s)
	return luo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableTitle(s *string) *LessonUpdateOne {
	if s != nil {
		luo.SetTitle(*s)
	}
	return luo
}

// SetDescription sets the "description" field.
func (luo *LessonUpdateOne) SetDescription(s string) *LessonUpdateOne {
	luo.mutation.SetDescription(s)
	return luo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableDescription(s *string) *LessonUpdateOne {
	if s != nil {
		luo.SetDescription(*s)
	}
	return luo
}

// SetOrder sets the "order" field.
func (luo *LessonUpdateOne) SetOrder(i int) *LessonUpdateOne {
	luo.mutation.ResetOrder()
	luo.mutation.SetOrder(i)
	return luo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableOrder(i *int) *LessonUpdateOne {
	if i != nil {
		luo.SetOrder(*i)
	}
	return luo
}

// AddOrder adds i to the "order" field.
func (luo *LessonUpdateOne) AddOrder(i int) *LessonUpdateOne {
	luo.mutation.AddOrder(i)
	return luo
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (luo *LessonUpdateOne) AddTechniqueIDs(ids ...gqlid.TechniqueID) *LessonUpdateOne {
	luo.mutation.AddTechniqueIDs(ids...)
	return luo
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (luo *LessonUpdateOne) AddTechniques(t ...*Technique) *LessonUpdateOne {
	ids := make([]gqlid.TechniqueID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luo.AddTechniqueIDs(ids...)
}

// AddAudioIDs adds the "audios" edge to the LessonAudio entity by IDs.
func (luo *LessonUpdateOne) AddAudioIDs(ids ...gqlid.LessonAudioID) *LessonUpdateOne {
	luo.mutation.AddAudioIDs(ids...)
	return luo
}

// AddAudios adds the "audios" edges to the LessonAudio entity.
func (luo *LessonUpdateOne) AddAudios(l ...*LessonAudio) *LessonUpdateOne {
	ids := make([]gqlid.LessonAudioID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddAudioIDs(ids...)
}

// Mutation returns the LessonMutation object of the builder.
func (luo *LessonUpdateOne) Mutation() *LessonMutation {
	return luo.mutation
}

// ClearTechniques clears all "techniques" edges to the Technique entity.
func (luo *LessonUpdateOne) ClearTechniques() *LessonUpdateOne {
	luo.mutation.ClearTechniques()
	return luo
}

// RemoveTechniqueIDs removes the "techniques" edge to Technique entities by IDs.
func (luo *LessonUpdateOne) RemoveTechniqueIDs(ids ...gqlid.TechniqueID) *LessonUpdateOne {
	luo.mutation.RemoveTechniqueIDs(ids...)
	return luo
}

// RemoveTechniques removes "techniques" edges to Technique entities.
func (luo *LessonUpdateOne) RemoveTechniques(t ...*Technique) *LessonUpdateOne {
	ids := make([]gqlid.TechniqueID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luo.RemoveTechniqueIDs(ids...)
}

// ClearAudios clears all "audios" edges to the LessonAudio entity.
func (luo *LessonUpdateOne) ClearAudios() *LessonUpdateOne {
	luo.mutation.ClearAudios()
	return luo
}

// RemoveAudioIDs removes the "audios" edge to LessonAudio entities by IDs.
func (luo *LessonUpdateOne) RemoveAudioIDs(ids ...gqlid.LessonAudioID) *LessonUpdateOne {
	luo.mutation.RemoveAudioIDs(ids...)
	return luo
}

// RemoveAudios removes "audios" edges to LessonAudio entities.
func (luo *LessonUpdateOne) RemoveAudios(l ...*LessonAudio) *LessonUpdateOne {
	ids := make([]gqlid.LessonAudioID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveAudioIDs(ids...)
}

// Where appends a list predicates to the LessonUpdate builder.
func (luo *LessonUpdateOne) Where(ps ...predicate.Lesson) *LessonUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LessonUpdateOne) Select(field string, fields ...string) *LessonUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lesson entity.
func (luo *LessonUpdateOne) Save(ctx context.Context) (*Lesson, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LessonUpdateOne) SaveX(ctx context.Context) *Lesson {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LessonUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LessonUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LessonUpdateOne) check() error {
	if v, ok := luo.mutation.GetType(); ok {
		if err := lesson.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Lesson.type": %w`, err)}
		}
	}
	if v, ok := luo.mutation.IconImage(); ok {
		if err := lesson.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Lesson.iconImage": %w`, err)}
		}
	}
	if v, ok := luo.mutation.CoverImage(); ok {
		if err := lesson.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Lesson.coverImage": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Title(); ok {
		if err := lesson.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Lesson.title": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Description(); ok {
		if err := lesson.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Lesson.description": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Order(); ok {
		if err := lesson.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Lesson.order": %w`, err)}
		}
	}
	if _, ok := luo.mutation.UnitID(); luo.mutation.UnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Lesson.unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (luo *LessonUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LessonUpdateOne {
	luo.modifiers = append(luo.modifiers, modifiers...)
	return luo
}

func (luo *LessonUpdateOne) sqlSave(ctx context.Context) (_node *Lesson, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lesson.Table, lesson.Columns, sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lesson.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lesson.FieldID)
		for _, f := range fields {
			if !lesson.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lesson.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.GetType(); ok {
		_spec.SetField(lesson.FieldType, field.TypeEnum, value)
	}
	if value, ok := luo.mutation.IconImage(); ok {
		_spec.SetField(lesson.FieldIconImage, field.TypeString, value)
	}
	if value, ok := luo.mutation.CoverImage(); ok {
		_spec.SetField(lesson.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := luo.mutation.Title(); ok {
		_spec.SetField(lesson.FieldTitle, field.TypeString, value)
	}
	if value, ok := luo.mutation.Description(); ok {
		_spec.SetField(lesson.FieldDescription, field.TypeString, value)
	}
	if value, ok := luo.mutation.Order(); ok {
		_spec.SetField(lesson.FieldOrder, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedOrder(); ok {
		_spec.AddField(lesson.FieldOrder, field.TypeInt, value)
	}
	if luo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lesson.TechniquesTable,
			Columns: lesson.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !luo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lesson.TechniquesTable,
			Columns: lesson.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lesson.TechniquesTable,
			Columns: lesson.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.AudiosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lesson.AudiosTable,
			Columns: []string{lesson.AudiosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonaudio.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedAudiosIDs(); len(nodes) > 0 && !luo.mutation.AudiosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lesson.AudiosTable,
			Columns: []string{lesson.AudiosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonaudio.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.AudiosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lesson.AudiosTable,
			Columns: []string{lesson.AudiosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonaudio.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(luo.modifiers...)
	_node = &Lesson{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lesson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
