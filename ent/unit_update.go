// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/technique"
	"github.com/jhana-app/jhana-app/ent/unit"
)

// UnitUpdate is the builder for updating Unit entities.
type UnitUpdate struct {
	config
	hooks     []Hook
	mutation  *UnitMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UnitUpdate builder.
func (uu *UnitUpdate) Where(ps ...predicate.Unit) *UnitUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetIconImage sets the "iconImage" field.
func (uu *UnitUpdate) SetIconImage(s string) *UnitUpdate {
	uu.mutation.SetIconImage(s)
	return uu
}

// SetNillableIconImage sets the "iconImage" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableIconImage(s *string) *UnitUpdate {
	if s != nil {
		uu.SetIconImage(*s)
	}
	return uu
}

// SetCoverImage sets the "coverImage" field.
func (uu *UnitUpdate) SetCoverImage(s string) *UnitUpdate {
	uu.mutation.SetCoverImage(s)
	return uu
}

// SetNillableCoverImage sets the "coverImage" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableCoverImage(s *string) *UnitUpdate {
	if s != nil {
		uu.SetCoverImage(*s)
	}
	return uu
}

// SetTitle sets the "title" field.
func (uu *UnitUpdate) SetTitle(s string) *UnitUpdate {
	uu.mutation.SetTitle(s)
	return uu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableTitle(s *string) *UnitUpdate {
	if s != nil {
		uu.SetTitle(*s)
	}
	return uu
}

// SetSubtitle sets the "subtitle" field.
func (uu *UnitUpdate) SetSubtitle(s string) *UnitUpdate {
	uu.mutation.SetSubtitle(s)
	return uu
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableSubtitle(s *string) *UnitUpdate {
	if s != nil {
		uu.SetSubtitle(*s)
	}
	return uu
}

// SetDescription sets the "description" field.
func (uu *UnitUpdate) SetDescription(s string) *UnitUpdate {
	uu.mutation.SetDescription(s)
	return uu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableDescription(s *string) *UnitUpdate {
	if s != nil {
		uu.SetDescription(*s)
	}
	return uu
}

// SetMastering sets the "mastering" field.
func (uu *UnitUpdate) SetMastering(s string) *UnitUpdate {
	uu.mutation.SetMastering(s)
	return uu
}

// SetNillableMastering sets the "mastering" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableMastering(s *string) *UnitUpdate {
	if s != nil {
		uu.SetMastering(*s)
	}
	return uu
}

// SetDays sets the "days" field.
func (uu *UnitUpdate) SetDays(i int) *UnitUpdate {
	uu.mutation.ResetDays()
	uu.mutation.SetDays(i)
	return uu
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableDays(i *int) *UnitUpdate {
	if i != nil {
		uu.SetDays(*i)
	}
	return uu
}

// AddDays adds i to the "days" field.
func (uu *UnitUpdate) AddDays(i int) *UnitUpdate {
	uu.mutation.AddDays(i)
	return uu
}

// SetColor sets the "color" field.
func (uu *UnitUpdate) SetColor(s string) *UnitUpdate {
	uu.mutation.SetColor(s)
	return uu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableColor(s *string) *UnitUpdate {
	if s != nil {
		uu.SetColor(*s)
	}
	return uu
}

// SetOrder sets the "order" field.
func (uu *UnitUpdate) SetOrder(i int) *UnitUpdate {
	uu.mutation.ResetOrder()
	uu.mutation.SetOrder(i)
	return uu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableOrder(i *int) *UnitUpdate {
	if i != nil {
		uu.SetOrder(*i)
	}
	return uu
}

// AddOrder adds i to the "order" field.
func (uu *UnitUpdate) AddOrder(i int) *UnitUpdate {
	uu.mutation.AddOrder(i)
	return uu
}

// AddLessonIDs adds the "lessons" edge to the Lesson entity by IDs.
func (uu *UnitUpdate) AddLessonIDs(ids ...gqlid.LessonID) *UnitUpdate {
	uu.mutation.AddLessonIDs(ids...)
	return uu
}

// AddLessons adds the "lessons" edges to the Lesson entity.
func (uu *UnitUpdate) AddLessons(l ...*Lesson) *UnitUpdate {
	ids := make([]gqlid.LessonID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.AddLessonIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (uu *UnitUpdate) AddTechniqueIDs(ids ...gqlid.TechniqueID) *UnitUpdate {
	uu.mutation.AddTechniqueIDs(ids...)
	return uu
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (uu *UnitUpdate) AddTechniques(t ...*Technique) *UnitUpdate {
	ids := make([]gqlid.TechniqueID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTechniqueIDs(ids...)
}

// Mutation returns the UnitMutation object of the builder.
func (uu *UnitUpdate) Mutation() *UnitMutation {
	return uu.mutation
}

// ClearLessons clears all "lessons" edges to the Lesson entity.
func (uu *UnitUpdate) ClearLessons() *UnitUpdate {
	uu.mutation.ClearLessons()
	return uu
}

// RemoveLessonIDs removes the "lessons" edge to Lesson entities by IDs.
func (uu *UnitUpdate) RemoveLessonIDs(ids ...gqlid.LessonID) *UnitUpdate {
	uu.mutation.RemoveLessonIDs(ids...)
	return uu
}

// RemoveLessons removes "lessons" edges to Lesson entities.
func (uu *UnitUpdate) RemoveLessons(l ...*Lesson) *UnitUpdate {
	ids := make([]gqlid.LessonID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.RemoveLessonIDs(ids...)
}

// ClearTechniques clears all "techniques" edges to the Technique entity.
func (uu *UnitUpdate) ClearTechniques() *UnitUpdate {
	uu.mutation.ClearTechniques()
	return uu
}

// RemoveTechniqueIDs removes the "techniques" edge to Technique entities by IDs.
func (uu *UnitUpdate) RemoveTechniqueIDs(ids ...gqlid.TechniqueID) *UnitUpdate {
	uu.mutation.RemoveTechniqueIDs(ids...)
	return uu
}

// RemoveTechniques removes "techniques" edges to Technique entities.
func (uu *UnitUpdate) RemoveTechniques(t ...*Technique) *UnitUpdate {
	ids := make([]gqlid.TechniqueID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTechniqueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UnitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UnitUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UnitUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UnitUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UnitUpdate) check() error {
	if v, ok := uu.mutation.IconImage(); ok {
		if err := unit.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Unit.iconImage": %w`, err)}
		}
	}
	if v, ok := uu.mutation.CoverImage(); ok {
		if err := unit.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Unit.coverImage": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Title(); ok {
		if err := unit.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Unit.title": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Subtitle(); ok {
		if err := unit.SubtitleValidator(v); err != nil {
			return &ValidationError{Name: "subtitle", err: fmt.Errorf(`ent: validator failed for field "Unit.subtitle": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Description(); ok {
		if err := unit.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Unit.description": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Mastering(); ok {
		if err := unit.MasteringValidator(v); err != nil {
			return &ValidationError{Name: "mastering", err: fmt.Errorf(`ent: validator failed for field "Unit.mastering": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Days(); ok {
		if err := unit.DaysValidator(v); err != nil {
			return &ValidationError{Name: "days", err: fmt.Errorf(`ent: validator failed for field "Unit.days": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Color(); ok {
		if err := unit.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Unit.color": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Order(); ok {
		if err := unit.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Unit.order": %w`, err)}
		}
	}
	if _, ok := uu.mutation.CourseID(); uu.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Unit.course"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UnitUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UnitUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UnitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(unit.Table, unit.Columns, sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.IconImage(); ok {
		_spec.SetField(unit.FieldIconImage, field.TypeString, value)
	}
	if value, ok := uu.mutation.CoverImage(); ok {
		_spec.SetField(unit.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := uu.mutation.Title(); ok {
		_spec.SetField(unit.FieldTitle, field.TypeString, value)
	}
	if value, ok := uu.mutation.Subtitle(); ok {
		_spec.SetField(unit.FieldSubtitle, field.TypeString, value)
	}
	if value, ok := uu.mutation.Description(); ok {
		_spec.SetField(unit.FieldDescription, field.TypeString, value)
	}
	if value, ok := uu.mutation.Mastering(); ok {
		_spec.SetField(unit.FieldMastering, field.TypeString, value)
	}
	if value, ok := uu.mutation.Days(); ok {
		_spec.SetField(unit.FieldDays, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedDays(); ok {
		_spec.AddField(unit.FieldDays, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Color(); ok {
		_spec.SetField(unit.FieldColor, field.TypeString, value)
	}
	if value, ok := uu.mutation.Order(); ok {
		_spec.SetField(unit.FieldOrder, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedOrder(); ok {
		_spec.AddField(unit.FieldOrder, field.TypeInt, value)
	}
	if uu.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   unit.LessonsTable,
			Columns: []string{unit.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLessonsIDs(); len(nodes) > 0 && !uu.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   unit.LessonsTable,
			Columns: []string{unit.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   unit.LessonsTable,
			Columns: []string{unit.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   unit.TechniquesTable,
			Columns: unit.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !uu.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   unit.TechniquesTable,
			Columns: unit.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   unit.TechniquesTable,
			Columns: unit.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UnitUpdateOne is the builder for updating a single Unit entity.
type UnitUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UnitMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIconImage sets the "iconImage" field.
func (uuo *UnitUpdateOne) SetIconImage(s string) *UnitUpdateOne {
	uuo.mutation.SetIconImage(s)
	return uuo
}

// SetNillableIconImage sets the "iconImage" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableIconImage(s *string) *UnitUpdateOne {
	if s != nil {
		uuo.SetIconImage(*s)
	}
	return uuo
}

// SetCoverImage sets the "coverImage" field.
func (uuo *UnitUpdateOne) SetCoverImage(s string) *UnitUpdateOne {
	uuo.mutation.SetCoverImage(s)
	return uuo
}

// SetNillableCoverImage sets the "coverImage" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableCoverImage(s *string) *UnitUpdateOne {
	if s != nil {
		uuo.SetCoverImage(*s)
	}
	return uuo
}

// SetTitle sets the "title" field.
func (uuo *UnitUpdateOne) SetTitle(s string) *UnitUpdateOne {
	uuo.mutation.SetTitle(s)
	return uuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableTitle(s *string) *UnitUpdateOne {
	if s != nil {
		uuo.SetTitle(*s)
	}
	return uuo
}

// SetSubtitle sets the "subtitle" field.
func (uuo *UnitUpdateOne) SetSubtitle(s string) *UnitUpdateOne {
	uuo.mutation.SetSubtitle(s)
	return uuo
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableSubtitle(s *string) *UnitUpdateOne {
	if s != nil {
		uuo.SetSubtitle(*s)
	}
	return uuo
}

// SetDescription sets the "description" field.
func (uuo *UnitUpdateOne) SetDescription(s string) *UnitUpdateOne {
	uuo.mutation.SetDescription(s)
	return uuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableDescription(s *string) *UnitUpdateOne {
	if s != nil {
		uuo.SetDescription(*s)
	}
	return uuo
}

// SetMastering sets the "mastering" field.
func (uuo *UnitUpdateOne) SetMastering(s string) *UnitUpdateOne {
	uuo.mutation.SetMastering(s)
	return uuo
}

// SetNillableMastering sets the "mastering" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableMastering(s *string) *UnitUpdateOne {
	if s != nil {
		uuo.SetMastering(*s)
	}
	return uuo
}

// SetDays sets the "days" field.
func (uuo *UnitUpdateOne) SetDays(i int) *UnitUpdateOne {
	uuo.mutation.ResetDays()
	uuo.mutation.SetDays(i)
	return uuo
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableDays(i *int) *UnitUpdateOne {
	if i != nil {
		uuo.SetDays(*i)
	}
	return uuo
}

// AddDays adds i to the "days" field.
func (uuo *UnitUpdateOne) AddDays(i int) *UnitUpdateOne {
	uuo.mutation.AddDays(i)
	return uuo
}

// SetColor sets the "color" field.
func (uuo *UnitUpdateOne) SetColor(s string) *UnitUpdateOne {
	uuo.mutation.SetColor(s)
	return uuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableColor(s *string) *UnitUpdateOne {
	if s != nil {
		uuo.SetColor(*s)
	}
	return uuo
}

// SetOrder sets the "order" field.
func (uuo *UnitUpdateOne) SetOrder(i int) *UnitUpdateOne {
	uuo.mutation.ResetOrder()
	uuo.mutation.SetOrder(i)
	return uuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableOrder(i *int) *UnitUpdateOne {
	if i != nil {
		uuo.SetOrder(*i)
	}
	return uuo
}

// AddOrder adds i to the "order" field.
func (uuo *UnitUpdateOne) AddOrder(i int) *UnitUpdateOne {
	uuo.mutation.AddOrder(i)
	return uuo
}

// AddLessonIDs adds the "lessons" edge to the Lesson entity by IDs.
func (uuo *UnitUpdateOne) AddLessonIDs(ids ...gqlid.LessonID) *UnitUpdateOne {
	uuo.mutation.AddLessonIDs(ids...)
	return uuo
}

// AddLessons adds the "lessons" edges to the Lesson entity.
func (uuo *UnitUpdateOne) AddLessons(l ...*Lesson) *UnitUpdateOne {
	ids := make([]gqlid.LessonID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.AddLessonIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (uuo *UnitUpdateOne) AddTechniqueIDs(ids ...gqlid.TechniqueID) *UnitUpdateOne {
	uuo.mutation.AddTechniqueIDs(ids...)
	return uuo
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (uuo *UnitUpdateOne) AddTechniques(t ...*Technique) *UnitUpdateOne {
	ids := make([]gqlid.TechniqueID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTechniqueIDs(ids...)
}

// Mutation returns the UnitMutation object of the builder.
func (uuo *UnitUpdateOne) Mutation() *UnitMutation {
	return uuo.mutation
}

// ClearLessons clears all "lessons" edges to the Lesson entity.
func (uuo *UnitUpdateOne) ClearLessons() *UnitUpdateOne {
	uuo.mutation.ClearLessons()
	return uuo
}

// RemoveLessonIDs removes the "lessons" edge to Lesson entities by IDs.
func (uuo *UnitUpdateOne) RemoveLessonIDs(ids ...gqlid.LessonID) *UnitUpdateOne {
	uuo.mutation.RemoveLessonIDs(ids...)
	return uuo
}

// RemoveLessons removes "lessons" edges to Lesson entities.
func (uuo *UnitUpdateOne) RemoveLessons(l ...*Lesson) *UnitUpdateOne {
	ids := make([]gqlid.LessonID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.RemoveLessonIDs(ids...)
}

// ClearTechniques clears all "techniques" edges to the Technique entity.
func (uuo *UnitUpdateOne) ClearTechniques() *UnitUpdateOne {
	uuo.mutation.ClearTechniques()
	return uuo
}

// RemoveTechniqueIDs removes the "techniques" edge to Technique entities by IDs.
func (uuo *UnitUpdateOne) RemoveTechniqueIDs(ids ...gqlid.TechniqueID) *UnitUpdateOne {
	uuo.mutation.RemoveTechniqueIDs(ids...)
	return uuo
}

// RemoveTechniques removes "techniques" edges to Technique entities.
func (uuo *UnitUpdateOne) RemoveTechniques(t ...*Technique) *UnitUpdateOne {
	ids := make([]gqlid.TechniqueID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTechniqueIDs(ids...)
}

// Where appends a list predicates to the UnitUpdate builder.
func (uuo *UnitUpdateOne) Where(ps ...predicate.Unit) *UnitUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UnitUpdateOne) Select(field string, fields ...string) *UnitUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Unit entity.
func (uuo *UnitUpdateOne) Save(ctx context.Context) (*Unit, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UnitUpdateOne) SaveX(ctx context.Context) *Unit {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UnitUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UnitUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UnitUpdateOne) check() error {
	if v, ok := uuo.mutation.IconImage(); ok {
		if err := unit.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Unit.iconImage": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.CoverImage(); ok {
		if err := unit.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Unit.coverImage": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Title(); ok {
		if err := unit.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Unit.title": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Subtitle(); ok {
		if err := unit.SubtitleValidator(v); err != nil {
			return &ValidationError{Name: "subtitle", err: fmt.Errorf(`ent: validator failed for field "Unit.subtitle": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Description(); ok {
		if err := unit.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Unit.description": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Mastering(); ok {
		if err := unit.MasteringValidator(v); err != nil {
			return &ValidationError{Name: "mastering", err: fmt.Errorf(`ent: validator failed for field "Unit.mastering": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Days(); ok {
		if err := unit.DaysValidator(v); err != nil {
			return &ValidationError{Name: "days", err: fmt.Errorf(`ent: validator failed for field "Unit.days": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Color(); ok {
		if err := unit.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Unit.color": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Order(); ok {
		if err := unit.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Unit.order": %w`, err)}
		}
	}
	if _, ok := uuo.mutation.CourseID(); uuo.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Unit.course"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UnitUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UnitUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UnitUpdateOne) sqlSave(ctx context.Context) (_node *Unit, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(unit.Table, unit.Columns, sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Unit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, unit.FieldID)
		for _, f := range fields {
			if !unit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != unit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.IconImage(); ok {
		_spec.SetField(unit.FieldIconImage, field.TypeString, value)
	}
	if value, ok := uuo.mutation.CoverImage(); ok {
		_spec.SetField(unit.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Title(); ok {
		_spec.SetField(unit.FieldTitle, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Subtitle(); ok {
		_spec.SetField(unit.FieldSubtitle, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Description(); ok {
		_spec.SetField(unit.FieldDescription, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Mastering(); ok {
		_spec.SetField(unit.FieldMastering, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Days(); ok {
		_spec.SetField(unit.FieldDays, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedDays(); ok {
		_spec.AddField(unit.FieldDays, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Color(); ok {
		_spec.SetField(unit.FieldColor, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Order(); ok {
		_spec.SetField(unit.FieldOrder, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedOrder(); ok {
		_spec.AddField(unit.FieldOrder, field.TypeInt, value)
	}
	if uuo.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   unit.LessonsTable,
			Columns: []string{unit.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLessonsIDs(); len(nodes) > 0 && !uuo.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   unit.LessonsTable,
			Columns: []string{unit.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   unit.LessonsTable,
			Columns: []string{unit.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   unit.TechniquesTable,
			Columns: unit.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !uuo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   unit.TechniquesTable,
			Columns: unit.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   unit.TechniquesTable,
			Columns: unit.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &Unit{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
