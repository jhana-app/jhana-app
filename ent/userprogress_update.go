// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/userprogress"
)

// UserProgressUpdate is the builder for updating UserProgress entities.
type UserProgressUpdate struct {
	config
	hooks     []Hook
	mutation  *UserProgressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserProgressUpdate builder.
func (upu *UserProgressUpdate) Where(ps ...predicate.UserProgress) *UserProgressUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetIsLast sets the "isLast" field.
func (upu *UserProgressUpdate) SetIsLast(b bool) *UserProgressUpdate {
	upu.mutation.SetIsLast(b)
	return upu
}

// SetNillableIsLast sets the "isLast" field if the given value is not nil.
func (upu *UserProgressUpdate) SetNillableIsLast(b *bool) *UserProgressUpdate {
	if b != nil {
		upu.SetIsLast(*b)
	}
	return upu
}

// SetIsNext sets the "isNext" field.
func (upu *UserProgressUpdate) SetIsNext(b bool) *UserProgressUpdate {
	upu.mutation.SetIsNext(b)
	return upu
}

// SetNillableIsNext sets the "isNext" field if the given value is not nil.
func (upu *UserProgressUpdate) SetNillableIsNext(b *bool) *UserProgressUpdate {
	if b != nil {
		upu.SetIsNext(*b)
	}
	return upu
}

// SetProgress sets the "progress" field.
func (upu *UserProgressUpdate) SetProgress(i int64) *UserProgressUpdate {
	upu.mutation.ResetProgress()
	upu.mutation.SetProgress(i)
	return upu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (upu *UserProgressUpdate) SetNillableProgress(i *int64) *UserProgressUpdate {
	if i != nil {
		upu.SetProgress(*i)
	}
	return upu
}

// AddProgress adds i to the "progress" field.
func (upu *UserProgressUpdate) AddProgress(i int64) *UserProgressUpdate {
	upu.mutation.AddProgress(i)
	return upu
}

// SetFinishedAt sets the "finishedAt" field.
func (upu *UserProgressUpdate) SetFinishedAt(t time.Time) *UserProgressUpdate {
	upu.mutation.SetFinishedAt(t)
	return upu
}

// SetNillableFinishedAt sets the "finishedAt" field if the given value is not nil.
func (upu *UserProgressUpdate) SetNillableFinishedAt(t *time.Time) *UserProgressUpdate {
	if t != nil {
		upu.SetFinishedAt(*t)
	}
	return upu
}

// ClearFinishedAt clears the value of the "finishedAt" field.
func (upu *UserProgressUpdate) ClearFinishedAt() *UserProgressUpdate {
	upu.mutation.ClearFinishedAt()
	return upu
}

// SetUpdatedAt sets the "updatedAt" field.
func (upu *UserProgressUpdate) SetUpdatedAt(t time.Time) *UserProgressUpdate {
	upu.mutation.SetUpdatedAt(t)
	return upu
}

// Mutation returns the UserProgressMutation object of the builder.
func (upu *UserProgressUpdate) Mutation() *UserProgressMutation {
	return upu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserProgressUpdate) Save(ctx context.Context) (int, error) {
	upu.defaults()
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserProgressUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserProgressUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserProgressUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upu *UserProgressUpdate) defaults() {
	if _, ok := upu.mutation.UpdatedAt(); !ok {
		v := userprogress.UpdateDefaultUpdatedAt()
		upu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserProgressUpdate) check() error {
	if _, ok := upu.mutation.UserID(); upu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserProgress.user"`)
	}
	if _, ok := upu.mutation.CourseID(); upu.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserProgress.course"`)
	}
	if _, ok := upu.mutation.UnitID(); upu.mutation.UnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserProgress.unit"`)
	}
	if _, ok := upu.mutation.LessonID(); upu.mutation.LessonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserProgress.lesson"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upu *UserProgressUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserProgressUpdate {
	upu.modifiers = append(upu.modifiers, modifiers...)
	return upu
}

func (upu *UserProgressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userprogress.Table, userprogress.Columns, sqlgraph.NewFieldSpec(userprogress.FieldID, field.TypeInt64))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.IsLast(); ok {
		_spec.SetField(userprogress.FieldIsLast, field.TypeBool, value)
	}
	if value, ok := upu.mutation.IsNext(); ok {
		_spec.SetField(userprogress.FieldIsNext, field.TypeBool, value)
	}
	if value, ok := upu.mutation.Progress(); ok {
		_spec.SetField(userprogress.FieldProgress, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.AddedProgress(); ok {
		_spec.AddField(userprogress.FieldProgress, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.FinishedAt(); ok {
		_spec.SetField(userprogress.FieldFinishedAt, field.TypeTime, value)
	}
	if upu.mutation.FinishedAtCleared() {
		_spec.ClearField(userprogress.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := upu.mutation.UpdatedAt(); ok {
		_spec.SetField(userprogress.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(upu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserProgressUpdateOne is the builder for updating a single UserProgress entity.
type UserProgressUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserProgressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIsLast sets the "isLast" field.
func (upuo *UserProgressUpdateOne) SetIsLast(b bool) *UserProgressUpdateOne {
	upuo.mutation.SetIsLast(b)
	return upuo
}

// SetNillableIsLast sets the "isLast" field if the given value is not nil.
func (upuo *UserProgressUpdateOne) SetNillableIsLast(b *bool) *UserProgressUpdateOne {
	if b != nil {
		upuo.SetIsLast(*b)
	}
	return upuo
}

// SetIsNext sets the "isNext" field.
func (upuo *UserProgressUpdateOne) SetIsNext(b bool) *UserProgressUpdateOne {
	upuo.mutation.SetIsNext(b)
	return upuo
}

// SetNillableIsNext sets the "isNext" field if the given value is not nil.
func (upuo *UserProgressUpdateOne) SetNillableIsNext(b *bool) *UserProgressUpdateOne {
	if b != nil {
		upuo.SetIsNext(*b)
	}
	return upuo
}

// SetProgress sets the "progress" field.
func (upuo *UserProgressUpdateOne) SetProgress(i int64) *UserProgressUpdateOne {
	upuo.mutation.ResetProgress()
	upuo.mutation.SetProgress(i)
	return upuo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (upuo *UserProgressUpdateOne) SetNillableProgress(i *int64) *UserProgressUpdateOne {
	if i != nil {
		upuo.SetProgress(*i)
	}
	return upuo
}

// AddProgress adds i to the "progress" field.
func (upuo *UserProgressUpdateOne) AddProgress(i int64) *UserProgressUpdateOne {
	upuo.mutation.AddProgress(i)
	return upuo
}

// SetFinishedAt sets the "finishedAt" field.
func (upuo *UserProgressUpdateOne) SetFinishedAt(t time.Time) *UserProgressUpdateOne {
	upuo.mutation.SetFinishedAt(t)
	return upuo
}

// SetNillableFinishedAt sets the "finishedAt" field if the given value is not nil.
func (upuo *UserProgressUpdateOne) SetNillableFinishedAt(t *time.Time) *UserProgressUpdateOne {
	if t != nil {
		upuo.SetFinishedAt(*t)
	}
	return upuo
}

// ClearFinishedAt clears the value of the "finishedAt" field.
func (upuo *UserProgressUpdateOne) ClearFinishedAt() *UserProgressUpdateOne {
	upuo.mutation.ClearFinishedAt()
	return upuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (upuo *UserProgressUpdateOne) SetUpdatedAt(t time.Time) *UserProgressUpdateOne {
	upuo.mutation.SetUpdatedAt(t)
	return upuo
}

// Mutation returns the UserProgressMutation object of the builder.
func (upuo *UserProgressUpdateOne) Mutation() *UserProgressMutation {
	return upuo.mutation
}

// Where appends a list predicates to the UserProgressUpdate builder.
func (upuo *UserProgressUpdateOne) Where(ps ...predicate.UserProgress) *UserProgressUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserProgressUpdateOne) Select(field string, fields ...string) *UserProgressUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserProgress entity.
func (upuo *UserProgressUpdateOne) Save(ctx context.Context) (*UserProgress, error) {
	upuo.defaults()
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserProgressUpdateOne) SaveX(ctx context.Context) *UserProgress {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserProgressUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserProgressUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upuo *UserProgressUpdateOne) defaults() {
	if _, ok := upuo.mutation.UpdatedAt(); !ok {
		v := userprogress.UpdateDefaultUpdatedAt()
		upuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserProgressUpdateOne) check() error {
	if _, ok := upuo.mutation.UserID(); upuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserProgress.user"`)
	}
	if _, ok := upuo.mutation.CourseID(); upuo.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserProgress.course"`)
	}
	if _, ok := upuo.mutation.UnitID(); upuo.mutation.UnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserProgress.unit"`)
	}
	if _, ok := upuo.mutation.LessonID(); upuo.mutation.LessonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserProgress.lesson"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upuo *UserProgressUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserProgressUpdateOne {
	upuo.modifiers = append(upuo.modifiers, modifiers...)
	return upuo
}

func (upuo *UserProgressUpdateOne) sqlSave(ctx context.Context) (_node *UserProgress, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userprogress.Table, userprogress.Columns, sqlgraph.NewFieldSpec(userprogress.FieldID, field.TypeInt64))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserProgress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userprogress.FieldID)
		for _, f := range fields {
			if !userprogress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.IsLast(); ok {
		_spec.SetField(userprogress.FieldIsLast, field.TypeBool, value)
	}
	if value, ok := upuo.mutation.IsNext(); ok {
		_spec.SetField(userprogress.FieldIsNext, field.TypeBool, value)
	}
	if value, ok := upuo.mutation.Progress(); ok {
		_spec.SetField(userprogress.FieldProgress, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.AddedProgress(); ok {
		_spec.AddField(userprogress.FieldProgress, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.FinishedAt(); ok {
		_spec.SetField(userprogress.FieldFinishedAt, field.TypeTime, value)
	}
	if upuo.mutation.FinishedAtCleared() {
		_spec.ClearField(userprogress.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := upuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userprogress.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(upuo.modifiers...)
	_node = &UserProgress{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
