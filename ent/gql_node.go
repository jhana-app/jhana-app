// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bytes"
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"github.com/jhana-app/jhana-app/ent/content"
	"github.com/jhana-app/jhana-app/ent/contentepisode"
	"github.com/jhana-app/jhana-app/ent/contentprogress"
	"github.com/jhana-app/jhana-app/ent/course"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/journalrecord"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/lessonaudio"
	"github.com/jhana-app/jhana-app/ent/technique"
	"github.com/jhana-app/jhana-app/ent/unit"
	"github.com/jhana-app/jhana-app/ent/user"
	"github.com/jhana-app/jhana-app/ent/userprogress"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
	IsNode()
}

var contentImplementors = []string{"Content", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Content) IsNode() {}

func (c Content) marshalID() string {
	var buf bytes.Buffer
	c.ID.MarshalGQL(&buf)
	return buf.String()
}

var contentepisodeImplementors = []string{"ContentEpisode", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ContentEpisode) IsNode() {}

func (ce ContentEpisode) marshalID() string {
	var buf bytes.Buffer
	ce.ID.MarshalGQL(&buf)
	return buf.String()
}

var contentprogressImplementors = []string{"ContentProgress", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ContentProgress) IsNode() {}

func (cp ContentProgress) marshalID() string {
	var buf bytes.Buffer
	cp.ID.MarshalGQL(&buf)
	return buf.String()
}

var courseImplementors = []string{"Course", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Course) IsNode() {}

func (c Course) marshalID() string {
	var buf bytes.Buffer
	c.ID.MarshalGQL(&buf)
	return buf.String()
}

var journalrecordImplementors = []string{"JournalRecord", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*JournalRecord) IsNode() {}

func (jr JournalRecord) marshalID() string {
	var buf bytes.Buffer
	jr.ID.MarshalGQL(&buf)
	return buf.String()
}

var lessonImplementors = []string{"Lesson", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Lesson) IsNode() {}

func (l Lesson) marshalID() string {
	var buf bytes.Buffer
	l.ID.MarshalGQL(&buf)
	return buf.String()
}

var lessonaudioImplementors = []string{"LessonAudio", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*LessonAudio) IsNode() {}

func (la LessonAudio) marshalID() string {
	var buf bytes.Buffer
	la.ID.MarshalGQL(&buf)
	return buf.String()
}

var techniqueImplementors = []string{"Technique", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Technique) IsNode() {}

func (t Technique) marshalID() string {
	var buf bytes.Buffer
	t.ID.MarshalGQL(&buf)
	return buf.String()
}

var unitImplementors = []string{"Unit", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Unit) IsNode() {}

func (u Unit) marshalID() string {
	var buf bytes.Buffer
	u.ID.MarshalGQL(&buf)
	return buf.String()
}

var userImplementors = []string{"User", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*User) IsNode() {}

func (u User) marshalID() string {
	var buf bytes.Buffer
	u.ID.MarshalGQL(&buf)
	return buf.String()
}

var userprogressImplementors = []string{"UserProgress", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*UserProgress) IsNode() {}

func (up UserProgress) marshalID() string {
	var buf bytes.Buffer
	up.ID.MarshalGQL(&buf)
	return buf.String()
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, string) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, string) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, string) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id string) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id string, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id string) (Noder, error) {
	switch table {
	case content.Table:
		var uid gqlid.ContentID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Content.Query().
			Where(content.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, contentImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case contentepisode.Table:
		var uid gqlid.ContentEpisodeID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ContentEpisode.Query().
			Where(contentepisode.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, contentepisodeImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case contentprogress.Table:
		var uid gqlid.ContentProgressID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ContentProgress.Query().
			Where(contentprogress.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, contentprogressImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case course.Table:
		var uid gqlid.CourseID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Course.Query().
			Where(course.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, courseImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case journalrecord.Table:
		var uid gqlid.JournalRecordID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.JournalRecord.Query().
			Where(journalrecord.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, journalrecordImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case lesson.Table:
		var uid gqlid.LessonID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Lesson.Query().
			Where(lesson.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, lessonImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case lessonaudio.Table:
		var uid gqlid.LessonAudioID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.LessonAudio.Query().
			Where(lessonaudio.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, lessonaudioImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case technique.Table:
		var uid gqlid.TechniqueID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Technique.Query().
			Where(technique.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, techniqueImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case unit.Table:
		var uid gqlid.UnitID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Unit.Query().
			Where(unit.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, unitImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case user.Table:
		var uid gqlid.UserID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.User.Query().
			Where(user.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, userImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case userprogress.Table:
		var uid gqlid.UserProgressID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.UserProgress.Query().
			Where(userprogress.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, userprogressImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []string, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]string)
	id2idx := make(map[string][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []string) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[string][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case content.Table:
		uids := make([]gqlid.ContentID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.Content.Query().
			Where(content.IDIn(uids...))
		query, err := query.CollectFields(ctx, contentImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	case contentepisode.Table:
		uids := make([]gqlid.ContentEpisodeID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.ContentEpisode.Query().
			Where(contentepisode.IDIn(uids...))
		query, err := query.CollectFields(ctx, contentepisodeImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	case contentprogress.Table:
		uids := make([]gqlid.ContentProgressID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.ContentProgress.Query().
			Where(contentprogress.IDIn(uids...))
		query, err := query.CollectFields(ctx, contentprogressImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	case course.Table:
		uids := make([]gqlid.CourseID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.Course.Query().
			Where(course.IDIn(uids...))
		query, err := query.CollectFields(ctx, courseImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	case journalrecord.Table:
		uids := make([]gqlid.JournalRecordID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.JournalRecord.Query().
			Where(journalrecord.IDIn(uids...))
		query, err := query.CollectFields(ctx, journalrecordImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	case lesson.Table:
		uids := make([]gqlid.LessonID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.Lesson.Query().
			Where(lesson.IDIn(uids...))
		query, err := query.CollectFields(ctx, lessonImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	case lessonaudio.Table:
		uids := make([]gqlid.LessonAudioID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.LessonAudio.Query().
			Where(lessonaudio.IDIn(uids...))
		query, err := query.CollectFields(ctx, lessonaudioImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	case technique.Table:
		uids := make([]gqlid.TechniqueID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.Technique.Query().
			Where(technique.IDIn(uids...))
		query, err := query.CollectFields(ctx, techniqueImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	case unit.Table:
		uids := make([]gqlid.UnitID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.Unit.Query().
			Where(unit.IDIn(uids...))
		query, err := query.CollectFields(ctx, unitImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	case user.Table:
		uids := make([]gqlid.UserID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.User.Query().
			Where(user.IDIn(uids...))
		query, err := query.CollectFields(ctx, userImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	case userprogress.Table:
		uids := make([]gqlid.UserProgressID, len(ids))
		for i, id := range ids {
			if err := uids[i].UnmarshalGQL(id); err != nil {
				return nil, err
			}
		}
		query := c.UserProgress.Query().
			Where(userprogress.IDIn(uids...))
		query, err := query.CollectFields(ctx, userprogressImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.marshalID()] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}
