// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/lessonaudio"
)

// LessonAudio is the model entity for the LessonAudio schema.
type LessonAudio struct {
	config `json:"-"`
	// ID of the ent.
	ID gqlid.LessonAudioID `json:"id,omitempty"`
	// LessonID holds the value of the "lesson_id" field.
	LessonID gqlid.LessonID `json:"lesson_id,omitempty"`
	// AudioURL holds the value of the "audioURL" field.
	AudioURL string `json:"audioURL,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonAudioQuery when eager-loading is set.
	Edges        LessonAudioEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonAudioEdges holds the relations/edges for other nodes in the graph.
type LessonAudioEdges struct {
	// Lesson holds the value of the lesson edge.
	Lesson *Lesson `json:"lesson,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// LessonOrErr returns the Lesson value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonAudioEdges) LessonOrErr() (*Lesson, error) {
	if e.Lesson != nil {
		return e.Lesson, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lesson.Label}
	}
	return nil, &NotLoadedError{edge: "lesson"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LessonAudio) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lessonaudio.FieldID:
			values[i] = new(gqlid.LessonAudioID)
		case lessonaudio.FieldLessonID:
			values[i] = new(gqlid.LessonID)
		case lessonaudio.FieldDuration:
			values[i] = new(sql.NullInt64)
		case lessonaudio.FieldAudioURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LessonAudio fields.
func (la *LessonAudio) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lessonaudio.FieldID:
			if value, ok := values[i].(*gqlid.LessonAudioID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				la.ID = *value
			}
		case lessonaudio.FieldLessonID:
			if value, ok := values[i].(*gqlid.LessonID); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_id", values[i])
			} else if value != nil {
				la.LessonID = *value
			}
		case lessonaudio.FieldAudioURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field audioURL", values[i])
			} else if value.Valid {
				la.AudioURL = value.String
			}
		case lessonaudio.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				la.Duration = int(value.Int64)
			}
		default:
			la.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LessonAudio.
// This includes values selected through modifiers, order, etc.
func (la *LessonAudio) Value(name string) (ent.Value, error) {
	return la.selectValues.Get(name)
}

// QueryLesson queries the "lesson" edge of the LessonAudio entity.
func (la *LessonAudio) QueryLesson() *LessonQuery {
	return NewLessonAudioClient(la.config).QueryLesson(la)
}

// Update returns a builder for updating this LessonAudio.
// Note that you need to call LessonAudio.Unwrap() before calling this method if this LessonAudio
// was returned from a transaction, and the transaction was committed or rolled back.
func (la *LessonAudio) Update() *LessonAudioUpdateOne {
	return NewLessonAudioClient(la.config).UpdateOne(la)
}

// Unwrap unwraps the LessonAudio entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (la *LessonAudio) Unwrap() *LessonAudio {
	_tx, ok := la.config.driver.(*txDriver)
	if !ok {
		panic("ent: LessonAudio is not a transactional entity")
	}
	la.config.driver = _tx.drv
	return la
}

// String implements the fmt.Stringer.
func (la *LessonAudio) String() string {
	var builder strings.Builder
	builder.WriteString("LessonAudio(")
	builder.WriteString(fmt.Sprintf("id=%v, ", la.ID))
	builder.WriteString("lesson_id=")
	builder.WriteString(fmt.Sprintf("%v", la.LessonID))
	builder.WriteString(", ")
	builder.WriteString("audioURL=")
	builder.WriteString(la.AudioURL)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", la.Duration))
	builder.WriteByte(')')
	return builder.String()
}

// LessonAudios is a parsable slice of LessonAudio.
type LessonAudios []*LessonAudio
