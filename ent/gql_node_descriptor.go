// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"

	"github.com/jhana-app/jhana-app/ent/content"
	"github.com/jhana-app/jhana-app/ent/contentepisode"
	"github.com/jhana-app/jhana-app/ent/course"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/unit"
	"github.com/jhana-app/jhana-app/ent/user"
)

// Node in the graph.
type Node struct {
	ID     string   `json:"id,omitempty"`     // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string   `json:"type,omitempty"` // edge type.
	Name string   `json:"name,omitempty"` // edge name.
	IDs  []string `json:"ids,omitempty"`  // node ids (where this edge point to).
}

// Node implements Noder interface
func (c *Content) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.marshalID(),
		Type:   "Content",
		Fields: make([]*Field, 13),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(c.Type); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "property.ContentType",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.IconImage); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "iconImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.CoverImage); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "coverImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Title); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Subtitle); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "subtitle",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Description); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Source); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "source",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.SourceURL); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "sourceURL",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Licence); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "licence",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.LicenceURL); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "licenceURL",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.IsHidden); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "bool",
		Name:  "isHidden",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Order); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "int",
		Name:  "order",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.EpisodesCount); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "int",
		Name:  "episodesCount",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "ContentEpisode",
		Name: "episodes",
	}
	err = c.QueryEpisodes().
		Select(contentepisode.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (ce *ContentEpisode) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ce.marshalID(),
		Type:   "ContentEpisode",
		Fields: make([]*Field, 14),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ce.ContentID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "gqlid.ContentID",
		Name:  "content_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.Type); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "property.ContentType",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.Title); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.Subtitle); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "subtitle",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.Description); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.Duration); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "duration",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.StreamURL); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "streamURL",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.DownloadURL); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "downloadURL",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.Source); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "source",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.SourceURL); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "sourceURL",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.Licence); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "string",
		Name:  "licence",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.LicenceURL); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "string",
		Name:  "licenceURL",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.IsHidden); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "bool",
		Name:  "isHidden",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ce.Order); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "int",
		Name:  "order",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Content",
		Name: "content",
	}
	err = ce.QueryContent().
		Select(content.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (cp *ContentProgress) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     cp.marshalID(),
		Type:   "ContentProgress",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(cp.UserID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "gqlid.UserID",
		Name:  "user_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cp.ContentID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "gqlid.ContentID",
		Name:  "content_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cp.EpisodeID); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "gqlid.ContentEpisodeID",
		Name:  "episode_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cp.ContentType); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "property.ContentType",
		Name:  "content_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cp.Progress); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int64",
		Name:  "progress",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cp.FinishedAt); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "finishedAt",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cp.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "time.Time",
		Name:  "createdAt",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cp.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "time.Time",
		Name:  "updatedAt",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "user",
	}
	err = cp.QueryUser().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Content",
		Name: "content",
	}
	err = cp.QueryContent().
		Select(content.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ContentEpisode",
		Name: "episode",
	}
	err = cp.QueryEpisode().
		Select(contentepisode.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (c *Course) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.marshalID(),
		Type:   "Course",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(c.IconImage); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "iconImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.CoverImage); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "coverImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Title); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Color); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "color",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Active); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "active",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Order); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "order",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Unit",
		Name: "units",
	}
	err = c.QueryUnits().
		Select(unit.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (jr *JournalRecord) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     jr.marshalID(),
		Type:   "JournalRecord",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(jr.UserID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "gqlid.UserID",
		Name:  "user_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(jr.LessonID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "gqlid.LessonID",
		Name:  "lesson_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(jr.DateTime); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "dateTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(jr.Duration); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "duration",
		Value: string(buf),
	}
	if buf, err = json.Marshal(jr.Note); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "note",
		Value: string(buf),
	}
	if buf, err = json.Marshal(jr.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "createdAt",
		Value: string(buf),
	}
	if buf, err = json.Marshal(jr.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "time.Time",
		Name:  "updatedAt",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "user",
	}
	err = jr.QueryUser().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Lesson",
		Name: "lesson",
	}
	err = jr.QueryLesson().
		Select(lesson.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (l *Lesson) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     l.marshalID(),
		Type:   "Lesson",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(l.UnitID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "gqlid.UnitID",
		Name:  "unit_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Type); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "property.LessonType",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.IconImage); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "iconImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.CoverImage); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "coverImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Title); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Description); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Order); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "order",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Unit",
		Name: "unit",
	}
	err = l.QueryUnit().
		Select(unit.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (la *LessonAudio) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     la.marshalID(),
		Type:   "LessonAudio",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(la.LessonID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "gqlid.LessonID",
		Name:  "lesson_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(la.AudioURL); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "audioURL",
		Value: string(buf),
	}
	if buf, err = json.Marshal(la.Duration); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int",
		Name:  "duration",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Lesson",
		Name: "lesson",
	}
	err = la.QueryLesson().
		Select(lesson.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (t *Technique) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.marshalID(),
		Type:   "Technique",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(t.UnitID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "gqlid.UnitID",
		Name:  "unit_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.IconImage); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "iconImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.CoverImage); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "coverImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Title); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Subtitle); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "subtitle",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Description); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Order); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "order",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Unit",
		Name: "unit",
	}
	err = t.QueryUnit().
		Select(unit.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Lesson",
		Name: "lessons",
	}
	err = t.QueryLessons().
		Select(lesson.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Unit",
		Name: "techniques",
	}
	err = t.QueryTechniques().
		Select(unit.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (u *Unit) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     u.marshalID(),
		Type:   "Unit",
		Fields: make([]*Field, 10),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(u.CourseID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "gqlid.CourseID",
		Name:  "course_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.IconImage); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "iconImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.CoverImage); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "coverImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Title); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Subtitle); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "subtitle",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Description); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Mastering); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "mastering",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Days); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "int",
		Name:  "days",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Color); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "color",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Order); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "int",
		Name:  "order",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Course",
		Name: "course",
	}
	err = u.QueryCourse().
		Select(course.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Lesson",
		Name: "lessons",
	}
	err = u.QueryLessons().
		Select(lesson.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (u *User) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     u.marshalID(),
		Type:   "User",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(u.FirebaseUid); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "firebaseUid",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.DisplayName); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "displayName",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "createdAt",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updatedAt",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.AuthMethod); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "property.AuthMethod",
		Name:  "auth_method",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Email); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.EmailVerified); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "email_verified",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Password); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "password",
		Value: string(buf),
	}
	return node, nil
}

// Node implements Noder interface
func (up *UserProgress) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     up.marshalID(),
		Type:   "UserProgress",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(up.UserID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "gqlid.UserID",
		Name:  "user_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(up.CourseID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "gqlid.CourseID",
		Name:  "course_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(up.UnitID); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "gqlid.UnitID",
		Name:  "unit_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(up.LessonID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "gqlid.LessonID",
		Name:  "lesson_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(up.LessonType); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "property.LessonType",
		Name:  "lesson_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(up.IsLast); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "isLast",
		Value: string(buf),
	}
	if buf, err = json.Marshal(up.IsNext); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "isNext",
		Value: string(buf),
	}
	if buf, err = json.Marshal(up.Progress); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "int64",
		Name:  "progress",
		Value: string(buf),
	}
	if buf, err = json.Marshal(up.FinishedAt); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "time.Time",
		Name:  "finishedAt",
		Value: string(buf),
	}
	if buf, err = json.Marshal(up.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "time.Time",
		Name:  "createdAt",
		Value: string(buf),
	}
	if buf, err = json.Marshal(up.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "time.Time",
		Name:  "updatedAt",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "user",
	}
	err = up.QueryUser().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Course",
		Name: "course",
	}
	err = up.QueryCourse().
		Select(course.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Unit",
		Name: "unit",
	}
	err = up.QueryUnit().
		Select(unit.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Lesson",
		Name: "lesson",
	}
	err = up.QueryLesson().
		Select(lesson.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node returns the node with given global ID.
//
// This API helpful in case you want to build
// an administrator tool to browser all types in system.
func (c *Client) Node(ctx context.Context, id string) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}
