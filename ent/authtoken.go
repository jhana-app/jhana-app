// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jhana-app/jhana-app/ent/authtoken"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/user"
)

// AuthToken is the model entity for the AuthToken schema.
type AuthToken struct {
	config `json:"-"`
	// ID of the ent.
	ID gqlid.AuthTokenID `json:"id,omitempty"`
	// JwtID holds the value of the "jwt_id" field.
	JwtID string `json:"-"`
	// UserID holds the value of the "user_id" field.
	UserID gqlid.UserID `json:"user_id,omitempty"`
	// IssuedAt holds the value of the "issued_at" field.
	IssuedAt time.Time `json:"issued_at,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthTokenQuery when eager-loading is set.
	Edges        AuthTokenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthTokenEdges holds the relations/edges for other nodes in the graph.
type AuthTokenEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthTokenEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authtoken.FieldID:
			values[i] = new(gqlid.AuthTokenID)
		case authtoken.FieldUserID:
			values[i] = new(gqlid.UserID)
		case authtoken.FieldJwtID:
			values[i] = new(sql.NullString)
		case authtoken.FieldIssuedAt, authtoken.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthToken fields.
func (at *AuthToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authtoken.FieldID:
			if value, ok := values[i].(*gqlid.AuthTokenID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				at.ID = *value
			}
		case authtoken.FieldJwtID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jwt_id", values[i])
			} else if value.Valid {
				at.JwtID = value.String
			}
		case authtoken.FieldUserID:
			if value, ok := values[i].(*gqlid.UserID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				at.UserID = *value
			}
		case authtoken.FieldIssuedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field issued_at", values[i])
			} else if value.Valid {
				at.IssuedAt = value.Time
			}
		case authtoken.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				at.ExpiresAt = value.Time
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthToken.
// This includes values selected through modifiers, order, etc.
func (at *AuthToken) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the AuthToken entity.
func (at *AuthToken) QueryUser() *UserQuery {
	return NewAuthTokenClient(at.config).QueryUser(at)
}

// Update returns a builder for updating this AuthToken.
// Note that you need to call AuthToken.Unwrap() before calling this method if this AuthToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AuthToken) Update() *AuthTokenUpdateOne {
	return NewAuthTokenClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AuthToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AuthToken) Unwrap() *AuthToken {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthToken is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AuthToken) String() string {
	var builder strings.Builder
	builder.WriteString("AuthToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("jwt_id=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", at.UserID))
	builder.WriteString(", ")
	builder.WriteString("issued_at=")
	builder.WriteString(at.IssuedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(at.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuthTokens is a parsable slice of AuthToken.
type AuthTokens []*AuthToken
