// Code generated by ent, DO NOT EDIT.

package contentepisode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/property"
)

// ID filters vertices based on their ID field.
func ID(id gqlid.ContentEpisodeID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gqlid.ContentEpisodeID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gqlid.ContentEpisodeID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gqlid.ContentEpisodeID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gqlid.ContentEpisodeID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gqlid.ContentEpisodeID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gqlid.ContentEpisodeID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gqlid.ContentEpisodeID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gqlid.ContentEpisodeID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldID, id))
}

// ContentID applies equality check predicate on the "content_id" field. It's identical to ContentIDEQ.
func ContentID(v gqlid.ContentID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldContentID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldTitle, v))
}

// Subtitle applies equality check predicate on the "subtitle" field. It's identical to SubtitleEQ.
func Subtitle(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldSubtitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldDescription, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldDuration, v))
}

// StreamURL applies equality check predicate on the "streamURL" field. It's identical to StreamURLEQ.
func StreamURL(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldStreamURL, v))
}

// DownloadURL applies equality check predicate on the "downloadURL" field. It's identical to DownloadURLEQ.
func DownloadURL(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldDownloadURL, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldSource, v))
}

// SourceURL applies equality check predicate on the "sourceURL" field. It's identical to SourceURLEQ.
func SourceURL(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldSourceURL, v))
}

// Licence applies equality check predicate on the "licence" field. It's identical to LicenceEQ.
func Licence(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldLicence, v))
}

// LicenceURL applies equality check predicate on the "licenceURL" field. It's identical to LicenceURLEQ.
func LicenceURL(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldLicenceURL, v))
}

// IsHidden applies equality check predicate on the "isHidden" field. It's identical to IsHiddenEQ.
func IsHidden(v bool) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldIsHidden, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldOrder, v))
}

// ContentIDEQ applies the EQ predicate on the "content_id" field.
func ContentIDEQ(v gqlid.ContentID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldContentID, v))
}

// ContentIDNEQ applies the NEQ predicate on the "content_id" field.
func ContentIDNEQ(v gqlid.ContentID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldContentID, v))
}

// ContentIDIn applies the In predicate on the "content_id" field.
func ContentIDIn(vs ...gqlid.ContentID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldContentID, vs...))
}

// ContentIDNotIn applies the NotIn predicate on the "content_id" field.
func ContentIDNotIn(vs ...gqlid.ContentID) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldContentID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v property.ContentType) predicate.ContentEpisode {
	vc := v
	return predicate.ContentEpisode(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v property.ContentType) predicate.ContentEpisode {
	vc := v
	return predicate.ContentEpisode(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...property.ContentType) predicate.ContentEpisode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContentEpisode(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...property.ContentType) predicate.ContentEpisode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContentEpisode(sql.FieldNotIn(FieldType, v...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContainsFold(FieldTitle, v))
}

// SubtitleEQ applies the EQ predicate on the "subtitle" field.
func SubtitleEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldSubtitle, v))
}

// SubtitleNEQ applies the NEQ predicate on the "subtitle" field.
func SubtitleNEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldSubtitle, v))
}

// SubtitleIn applies the In predicate on the "subtitle" field.
func SubtitleIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldSubtitle, vs...))
}

// SubtitleNotIn applies the NotIn predicate on the "subtitle" field.
func SubtitleNotIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldSubtitle, vs...))
}

// SubtitleGT applies the GT predicate on the "subtitle" field.
func SubtitleGT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldSubtitle, v))
}

// SubtitleGTE applies the GTE predicate on the "subtitle" field.
func SubtitleGTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldSubtitle, v))
}

// SubtitleLT applies the LT predicate on the "subtitle" field.
func SubtitleLT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldSubtitle, v))
}

// SubtitleLTE applies the LTE predicate on the "subtitle" field.
func SubtitleLTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldSubtitle, v))
}

// SubtitleContains applies the Contains predicate on the "subtitle" field.
func SubtitleContains(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContains(FieldSubtitle, v))
}

// SubtitleHasPrefix applies the HasPrefix predicate on the "subtitle" field.
func SubtitleHasPrefix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasPrefix(FieldSubtitle, v))
}

// SubtitleHasSuffix applies the HasSuffix predicate on the "subtitle" field.
func SubtitleHasSuffix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasSuffix(FieldSubtitle, v))
}

// SubtitleEqualFold applies the EqualFold predicate on the "subtitle" field.
func SubtitleEqualFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEqualFold(FieldSubtitle, v))
}

// SubtitleContainsFold applies the ContainsFold predicate on the "subtitle" field.
func SubtitleContainsFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContainsFold(FieldSubtitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContainsFold(FieldDescription, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldDuration, v))
}

// StreamURLEQ applies the EQ predicate on the "streamURL" field.
func StreamURLEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldStreamURL, v))
}

// StreamURLNEQ applies the NEQ predicate on the "streamURL" field.
func StreamURLNEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldStreamURL, v))
}

// StreamURLIn applies the In predicate on the "streamURL" field.
func StreamURLIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldStreamURL, vs...))
}

// StreamURLNotIn applies the NotIn predicate on the "streamURL" field.
func StreamURLNotIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldStreamURL, vs...))
}

// StreamURLGT applies the GT predicate on the "streamURL" field.
func StreamURLGT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldStreamURL, v))
}

// StreamURLGTE applies the GTE predicate on the "streamURL" field.
func StreamURLGTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldStreamURL, v))
}

// StreamURLLT applies the LT predicate on the "streamURL" field.
func StreamURLLT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldStreamURL, v))
}

// StreamURLLTE applies the LTE predicate on the "streamURL" field.
func StreamURLLTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldStreamURL, v))
}

// StreamURLContains applies the Contains predicate on the "streamURL" field.
func StreamURLContains(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContains(FieldStreamURL, v))
}

// StreamURLHasPrefix applies the HasPrefix predicate on the "streamURL" field.
func StreamURLHasPrefix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasPrefix(FieldStreamURL, v))
}

// StreamURLHasSuffix applies the HasSuffix predicate on the "streamURL" field.
func StreamURLHasSuffix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasSuffix(FieldStreamURL, v))
}

// StreamURLEqualFold applies the EqualFold predicate on the "streamURL" field.
func StreamURLEqualFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEqualFold(FieldStreamURL, v))
}

// StreamURLContainsFold applies the ContainsFold predicate on the "streamURL" field.
func StreamURLContainsFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContainsFold(FieldStreamURL, v))
}

// DownloadURLEQ applies the EQ predicate on the "downloadURL" field.
func DownloadURLEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldDownloadURL, v))
}

// DownloadURLNEQ applies the NEQ predicate on the "downloadURL" field.
func DownloadURLNEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldDownloadURL, v))
}

// DownloadURLIn applies the In predicate on the "downloadURL" field.
func DownloadURLIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldDownloadURL, vs...))
}

// DownloadURLNotIn applies the NotIn predicate on the "downloadURL" field.
func DownloadURLNotIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldDownloadURL, vs...))
}

// DownloadURLGT applies the GT predicate on the "downloadURL" field.
func DownloadURLGT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldDownloadURL, v))
}

// DownloadURLGTE applies the GTE predicate on the "downloadURL" field.
func DownloadURLGTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldDownloadURL, v))
}

// DownloadURLLT applies the LT predicate on the "downloadURL" field.
func DownloadURLLT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldDownloadURL, v))
}

// DownloadURLLTE applies the LTE predicate on the "downloadURL" field.
func DownloadURLLTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldDownloadURL, v))
}

// DownloadURLContains applies the Contains predicate on the "downloadURL" field.
func DownloadURLContains(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContains(FieldDownloadURL, v))
}

// DownloadURLHasPrefix applies the HasPrefix predicate on the "downloadURL" field.
func DownloadURLHasPrefix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasPrefix(FieldDownloadURL, v))
}

// DownloadURLHasSuffix applies the HasSuffix predicate on the "downloadURL" field.
func DownloadURLHasSuffix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasSuffix(FieldDownloadURL, v))
}

// DownloadURLEqualFold applies the EqualFold predicate on the "downloadURL" field.
func DownloadURLEqualFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEqualFold(FieldDownloadURL, v))
}

// DownloadURLContainsFold applies the ContainsFold predicate on the "downloadURL" field.
func DownloadURLContainsFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContainsFold(FieldDownloadURL, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasSuffix(FieldSource, v))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContainsFold(FieldSource, v))
}

// SourceURLEQ applies the EQ predicate on the "sourceURL" field.
func SourceURLEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldSourceURL, v))
}

// SourceURLNEQ applies the NEQ predicate on the "sourceURL" field.
func SourceURLNEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldSourceURL, v))
}

// SourceURLIn applies the In predicate on the "sourceURL" field.
func SourceURLIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldSourceURL, vs...))
}

// SourceURLNotIn applies the NotIn predicate on the "sourceURL" field.
func SourceURLNotIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldSourceURL, vs...))
}

// SourceURLGT applies the GT predicate on the "sourceURL" field.
func SourceURLGT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldSourceURL, v))
}

// SourceURLGTE applies the GTE predicate on the "sourceURL" field.
func SourceURLGTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldSourceURL, v))
}

// SourceURLLT applies the LT predicate on the "sourceURL" field.
func SourceURLLT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldSourceURL, v))
}

// SourceURLLTE applies the LTE predicate on the "sourceURL" field.
func SourceURLLTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldSourceURL, v))
}

// SourceURLContains applies the Contains predicate on the "sourceURL" field.
func SourceURLContains(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContains(FieldSourceURL, v))
}

// SourceURLHasPrefix applies the HasPrefix predicate on the "sourceURL" field.
func SourceURLHasPrefix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasPrefix(FieldSourceURL, v))
}

// SourceURLHasSuffix applies the HasSuffix predicate on the "sourceURL" field.
func SourceURLHasSuffix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasSuffix(FieldSourceURL, v))
}

// SourceURLEqualFold applies the EqualFold predicate on the "sourceURL" field.
func SourceURLEqualFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEqualFold(FieldSourceURL, v))
}

// SourceURLContainsFold applies the ContainsFold predicate on the "sourceURL" field.
func SourceURLContainsFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContainsFold(FieldSourceURL, v))
}

// LicenceEQ applies the EQ predicate on the "licence" field.
func LicenceEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldLicence, v))
}

// LicenceNEQ applies the NEQ predicate on the "licence" field.
func LicenceNEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldLicence, v))
}

// LicenceIn applies the In predicate on the "licence" field.
func LicenceIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldLicence, vs...))
}

// LicenceNotIn applies the NotIn predicate on the "licence" field.
func LicenceNotIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldLicence, vs...))
}

// LicenceGT applies the GT predicate on the "licence" field.
func LicenceGT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldLicence, v))
}

// LicenceGTE applies the GTE predicate on the "licence" field.
func LicenceGTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldLicence, v))
}

// LicenceLT applies the LT predicate on the "licence" field.
func LicenceLT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldLicence, v))
}

// LicenceLTE applies the LTE predicate on the "licence" field.
func LicenceLTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldLicence, v))
}

// LicenceContains applies the Contains predicate on the "licence" field.
func LicenceContains(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContains(FieldLicence, v))
}

// LicenceHasPrefix applies the HasPrefix predicate on the "licence" field.
func LicenceHasPrefix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasPrefix(FieldLicence, v))
}

// LicenceHasSuffix applies the HasSuffix predicate on the "licence" field.
func LicenceHasSuffix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasSuffix(FieldLicence, v))
}

// LicenceEqualFold applies the EqualFold predicate on the "licence" field.
func LicenceEqualFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEqualFold(FieldLicence, v))
}

// LicenceContainsFold applies the ContainsFold predicate on the "licence" field.
func LicenceContainsFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContainsFold(FieldLicence, v))
}

// LicenceURLEQ applies the EQ predicate on the "licenceURL" field.
func LicenceURLEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldLicenceURL, v))
}

// LicenceURLNEQ applies the NEQ predicate on the "licenceURL" field.
func LicenceURLNEQ(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldLicenceURL, v))
}

// LicenceURLIn applies the In predicate on the "licenceURL" field.
func LicenceURLIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldLicenceURL, vs...))
}

// LicenceURLNotIn applies the NotIn predicate on the "licenceURL" field.
func LicenceURLNotIn(vs ...string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldLicenceURL, vs...))
}

// LicenceURLGT applies the GT predicate on the "licenceURL" field.
func LicenceURLGT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldLicenceURL, v))
}

// LicenceURLGTE applies the GTE predicate on the "licenceURL" field.
func LicenceURLGTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldLicenceURL, v))
}

// LicenceURLLT applies the LT predicate on the "licenceURL" field.
func LicenceURLLT(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldLicenceURL, v))
}

// LicenceURLLTE applies the LTE predicate on the "licenceURL" field.
func LicenceURLLTE(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldLicenceURL, v))
}

// LicenceURLContains applies the Contains predicate on the "licenceURL" field.
func LicenceURLContains(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContains(FieldLicenceURL, v))
}

// LicenceURLHasPrefix applies the HasPrefix predicate on the "licenceURL" field.
func LicenceURLHasPrefix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasPrefix(FieldLicenceURL, v))
}

// LicenceURLHasSuffix applies the HasSuffix predicate on the "licenceURL" field.
func LicenceURLHasSuffix(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldHasSuffix(FieldLicenceURL, v))
}

// LicenceURLEqualFold applies the EqualFold predicate on the "licenceURL" field.
func LicenceURLEqualFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEqualFold(FieldLicenceURL, v))
}

// LicenceURLContainsFold applies the ContainsFold predicate on the "licenceURL" field.
func LicenceURLContainsFold(v string) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldContainsFold(FieldLicenceURL, v))
}

// IsHiddenEQ applies the EQ predicate on the "isHidden" field.
func IsHiddenEQ(v bool) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldIsHidden, v))
}

// IsHiddenNEQ applies the NEQ predicate on the "isHidden" field.
func IsHiddenNEQ(v bool) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldIsHidden, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.FieldLTE(FieldOrder, v))
}

// HasContent applies the HasEdge predicate on the "content" edge.
func HasContent() predicate.ContentEpisode {
	return predicate.ContentEpisode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ContentTable, ContentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContentWith applies the HasEdge predicate on the "content" edge with a given conditions (other predicates).
func HasContentWith(preds ...predicate.Content) predicate.ContentEpisode {
	return predicate.ContentEpisode(func(s *sql.Selector) {
		step := newContentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContentEpisode) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContentEpisode) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContentEpisode) predicate.ContentEpisode {
	return predicate.ContentEpisode(sql.NotPredicates(p))
}
