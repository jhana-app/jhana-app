// Code generated by ent, DO NOT EDIT.

package contentepisode

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/jhana-app/jhana-app/ent/property"
)

const (
	// Label holds the string label denoting the contentepisode type in the database.
	Label = "content_episode"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContentID holds the string denoting the content_id field in the database.
	FieldContentID = "content_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSubtitle holds the string denoting the subtitle field in the database.
	FieldSubtitle = "subtitle"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldStreamURL holds the string denoting the streamurl field in the database.
	FieldStreamURL = "stream_url"
	// FieldDownloadURL holds the string denoting the downloadurl field in the database.
	FieldDownloadURL = "download_url"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldSourceURL holds the string denoting the sourceurl field in the database.
	FieldSourceURL = "source_url"
	// FieldLicence holds the string denoting the licence field in the database.
	FieldLicence = "licence"
	// FieldLicenceURL holds the string denoting the licenceurl field in the database.
	FieldLicenceURL = "licence_url"
	// FieldIsHidden holds the string denoting the ishidden field in the database.
	FieldIsHidden = "is_hidden"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeContent holds the string denoting the content edge name in mutations.
	EdgeContent = "content"
	// Table holds the table name of the contentepisode in the database.
	Table = "content_episodes"
	// ContentTable is the table that holds the content relation/edge.
	ContentTable = "content_episodes"
	// ContentInverseTable is the table name for the Content entity.
	// It exists in this package in order to avoid circular dependency with the "content" package.
	ContentInverseTable = "contents"
	// ContentColumn is the table column denoting the content relation/edge.
	ContentColumn = "content_id"
)

// Columns holds all SQL columns for contentepisode fields.
var Columns = []string{
	FieldID,
	FieldContentID,
	FieldType,
	FieldTitle,
	FieldSubtitle,
	FieldDescription,
	FieldDuration,
	FieldStreamURL,
	FieldDownloadURL,
	FieldSource,
	FieldSourceURL,
	FieldLicence,
	FieldLicenceURL,
	FieldIsHidden,
	FieldOrder,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// SubtitleValidator is a validator for the "subtitle" field. It is called by the builders before save.
	SubtitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DurationValidator is a validator for the "duration" field. It is called by the builders before save.
	DurationValidator func(int) error
	// DefaultSource holds the default value on creation for the "source" field.
	DefaultSource string
	// DefaultSourceURL holds the default value on creation for the "sourceURL" field.
	DefaultSourceURL string
	// DefaultLicence holds the default value on creation for the "licence" field.
	DefaultLicence string
	// DefaultLicenceURL holds the default value on creation for the "licenceURL" field.
	DefaultLicenceURL string
	// DefaultIsHidden holds the default value on creation for the "isHidden" field.
	DefaultIsHidden bool
	// OrderValidator is a validator for the "order" field. It is called by the builders before save.
	OrderValidator func(int) error
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type property.ContentType) error {
	switch _type {
	case "audio", "video", "text":
		return nil
	default:
		return fmt.Errorf("contentepisode: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the ContentEpisode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContentID orders the results by the content_id field.
func ByContentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySubtitle orders the results by the subtitle field.
func BySubtitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByStreamURL orders the results by the streamURL field.
func ByStreamURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreamURL, opts...).ToFunc()
}

// ByDownloadURL orders the results by the downloadURL field.
func ByDownloadURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadURL, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// BySourceURL orders the results by the sourceURL field.
func BySourceURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceURL, opts...).ToFunc()
}

// ByLicence orders the results by the licence field.
func ByLicence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicence, opts...).ToFunc()
}

// ByLicenceURL orders the results by the licenceURL field.
func ByLicenceURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenceURL, opts...).ToFunc()
}

// ByIsHidden orders the results by the isHidden field.
func ByIsHidden(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsHidden, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByContentField orders the results by content field.
func ByContentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentStep(), sql.OrderByField(field, opts...))
	}
}
func newContentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ContentTable, ContentColumn),
	)
}

var (
	// property.ContentType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*property.ContentType)(nil)
	// property.ContentType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*property.ContentType)(nil)
)
