// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/property"
	"github.com/jhana-app/jhana-app/ent/unit"
)

// Lesson is the model entity for the Lesson schema.
type Lesson struct {
	config `json:"-"`
	// ID of the ent.
	ID gqlid.LessonID `json:"id,omitempty"`
	// UnitID holds the value of the "unit_id" field.
	UnitID gqlid.UnitID `json:"unit_id,omitempty"`
	// Type holds the value of the "type" field.
	Type property.LessonType `json:"type,omitempty"`
	// IconImage holds the value of the "iconImage" field.
	IconImage string `json:"iconImage,omitempty"`
	// CoverImage holds the value of the "coverImage" field.
	CoverImage string `json:"coverImage,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonQuery when eager-loading is set.
	Edges        LessonEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonEdges holds the relations/edges for other nodes in the graph.
type LessonEdges struct {
	// Unit holds the value of the unit edge.
	Unit *Unit `json:"unit,omitempty"`
	// Techniques holds the value of the techniques edge.
	Techniques []*Technique `json:"techniques,omitempty"`
	// Audios holds the value of the audios edge.
	Audios []*LessonAudio `json:"audios,omitempty"`
	// LessonTechniques holds the value of the lessonTechniques edge.
	LessonTechniques []*LessonTechnique `json:"lessonTechniques,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedTechniques       map[string][]*Technique
	namedAudios           map[string][]*LessonAudio
	namedLessonTechniques map[string][]*LessonTechnique
}

// UnitOrErr returns the Unit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonEdges) UnitOrErr() (*Unit, error) {
	if e.Unit != nil {
		return e.Unit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: unit.Label}
	}
	return nil, &NotLoadedError{edge: "unit"}
}

// TechniquesOrErr returns the Techniques value or an error if the edge
// was not loaded in eager-loading.
func (e LessonEdges) TechniquesOrErr() ([]*Technique, error) {
	if e.loadedTypes[1] {
		return e.Techniques, nil
	}
	return nil, &NotLoadedError{edge: "techniques"}
}

// AudiosOrErr returns the Audios value or an error if the edge
// was not loaded in eager-loading.
func (e LessonEdges) AudiosOrErr() ([]*LessonAudio, error) {
	if e.loadedTypes[2] {
		return e.Audios, nil
	}
	return nil, &NotLoadedError{edge: "audios"}
}

// LessonTechniquesOrErr returns the LessonTechniques value or an error if the edge
// was not loaded in eager-loading.
func (e LessonEdges) LessonTechniquesOrErr() ([]*LessonTechnique, error) {
	if e.loadedTypes[3] {
		return e.LessonTechniques, nil
	}
	return nil, &NotLoadedError{edge: "lessonTechniques"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lesson) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lesson.FieldID:
			values[i] = new(gqlid.LessonID)
		case lesson.FieldUnitID:
			values[i] = new(gqlid.UnitID)
		case lesson.FieldOrder:
			values[i] = new(sql.NullInt64)
		case lesson.FieldType, lesson.FieldIconImage, lesson.FieldCoverImage, lesson.FieldTitle, lesson.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lesson fields.
func (l *Lesson) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lesson.FieldID:
			if value, ok := values[i].(*gqlid.LessonID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case lesson.FieldUnitID:
			if value, ok := values[i].(*gqlid.UnitID); !ok {
				return fmt.Errorf("unexpected type %T for field unit_id", values[i])
			} else if value != nil {
				l.UnitID = *value
			}
		case lesson.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				l.Type = property.LessonType(value.String)
			}
		case lesson.FieldIconImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iconImage", values[i])
			} else if value.Valid {
				l.IconImage = value.String
			}
		case lesson.FieldCoverImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coverImage", values[i])
			} else if value.Valid {
				l.CoverImage = value.String
			}
		case lesson.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				l.Title = value.String
			}
		case lesson.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				l.Description = value.String
			}
		case lesson.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				l.Order = int(value.Int64)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Lesson.
// This includes values selected through modifiers, order, etc.
func (l *Lesson) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryUnit queries the "unit" edge of the Lesson entity.
func (l *Lesson) QueryUnit() *UnitQuery {
	return NewLessonClient(l.config).QueryUnit(l)
}

// QueryTechniques queries the "techniques" edge of the Lesson entity.
func (l *Lesson) QueryTechniques() *TechniqueQuery {
	return NewLessonClient(l.config).QueryTechniques(l)
}

// QueryAudios queries the "audios" edge of the Lesson entity.
func (l *Lesson) QueryAudios() *LessonAudioQuery {
	return NewLessonClient(l.config).QueryAudios(l)
}

// QueryLessonTechniques queries the "lessonTechniques" edge of the Lesson entity.
func (l *Lesson) QueryLessonTechniques() *LessonTechniqueQuery {
	return NewLessonClient(l.config).QueryLessonTechniques(l)
}

// Update returns a builder for updating this Lesson.
// Note that you need to call Lesson.Unwrap() before calling this method if this Lesson
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lesson) Update() *LessonUpdateOne {
	return NewLessonClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Lesson entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lesson) Unwrap() *Lesson {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lesson is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lesson) String() string {
	var builder strings.Builder
	builder.WriteString("Lesson(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("unit_id=")
	builder.WriteString(fmt.Sprintf("%v", l.UnitID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", l.Type))
	builder.WriteString(", ")
	builder.WriteString("iconImage=")
	builder.WriteString(l.IconImage)
	builder.WriteString(", ")
	builder.WriteString("coverImage=")
	builder.WriteString(l.CoverImage)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(l.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(l.Description)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", l.Order))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTechniques returns the Techniques named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Lesson) NamedTechniques(name string) ([]*Technique, error) {
	if l.Edges.namedTechniques == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedTechniques[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Lesson) appendNamedTechniques(name string, edges ...*Technique) {
	if l.Edges.namedTechniques == nil {
		l.Edges.namedTechniques = make(map[string][]*Technique)
	}
	if len(edges) == 0 {
		l.Edges.namedTechniques[name] = []*Technique{}
	} else {
		l.Edges.namedTechniques[name] = append(l.Edges.namedTechniques[name], edges...)
	}
}

// NamedAudios returns the Audios named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Lesson) NamedAudios(name string) ([]*LessonAudio, error) {
	if l.Edges.namedAudios == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedAudios[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Lesson) appendNamedAudios(name string, edges ...*LessonAudio) {
	if l.Edges.namedAudios == nil {
		l.Edges.namedAudios = make(map[string][]*LessonAudio)
	}
	if len(edges) == 0 {
		l.Edges.namedAudios[name] = []*LessonAudio{}
	} else {
		l.Edges.namedAudios[name] = append(l.Edges.namedAudios[name], edges...)
	}
}

// NamedLessonTechniques returns the LessonTechniques named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Lesson) NamedLessonTechniques(name string) ([]*LessonTechnique, error) {
	if l.Edges.namedLessonTechniques == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedLessonTechniques[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Lesson) appendNamedLessonTechniques(name string, edges ...*LessonTechnique) {
	if l.Edges.namedLessonTechniques == nil {
		l.Edges.namedLessonTechniques = make(map[string][]*LessonTechnique)
	}
	if len(edges) == 0 {
		l.Edges.namedLessonTechniques[name] = []*LessonTechnique{}
	} else {
		l.Edges.namedLessonTechniques[name] = append(l.Edges.namedLessonTechniques[name], edges...)
	}
}

// Lessons is a parsable slice of Lesson.
type Lessons []*Lesson
