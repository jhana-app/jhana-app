// Code generated by ent, DO NOT EDIT.

package unit

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the unit type in the database.
	Label = "unit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCourseID holds the string denoting the course_id field in the database.
	FieldCourseID = "course_id"
	// FieldIconImage holds the string denoting the iconimage field in the database.
	FieldIconImage = "icon_image"
	// FieldCoverImage holds the string denoting the coverimage field in the database.
	FieldCoverImage = "cover_image"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSubtitle holds the string denoting the subtitle field in the database.
	FieldSubtitle = "subtitle"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldMastering holds the string denoting the mastering field in the database.
	FieldMastering = "mastering"
	// FieldDays holds the string denoting the days field in the database.
	FieldDays = "days"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeLessons holds the string denoting the lessons edge name in mutations.
	EdgeLessons = "lessons"
	// EdgeTechniques holds the string denoting the techniques edge name in mutations.
	EdgeTechniques = "techniques"
	// EdgeUnitTechniques holds the string denoting the unittechniques edge name in mutations.
	EdgeUnitTechniques = "unitTechniques"
	// Table holds the table name of the unit in the database.
	Table = "units"
	// CourseTable is the table that holds the course relation/edge.
	CourseTable = "units"
	// CourseInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseInverseTable = "courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "course_id"
	// LessonsTable is the table that holds the lessons relation/edge.
	LessonsTable = "lessons"
	// LessonsInverseTable is the table name for the Lesson entity.
	// It exists in this package in order to avoid circular dependency with the "lesson" package.
	LessonsInverseTable = "lessons"
	// LessonsColumn is the table column denoting the lessons relation/edge.
	LessonsColumn = "unit_id"
	// TechniquesTable is the table that holds the techniques relation/edge. The primary key declared below.
	TechniquesTable = "unit_techniques"
	// TechniquesInverseTable is the table name for the Technique entity.
	// It exists in this package in order to avoid circular dependency with the "technique" package.
	TechniquesInverseTable = "techniques"
	// UnitTechniquesTable is the table that holds the unitTechniques relation/edge.
	UnitTechniquesTable = "unit_techniques"
	// UnitTechniquesInverseTable is the table name for the UnitTechnique entity.
	// It exists in this package in order to avoid circular dependency with the "unittechnique" package.
	UnitTechniquesInverseTable = "unit_techniques"
	// UnitTechniquesColumn is the table column denoting the unitTechniques relation/edge.
	UnitTechniquesColumn = "unit_id"
)

// Columns holds all SQL columns for unit fields.
var Columns = []string{
	FieldID,
	FieldCourseID,
	FieldIconImage,
	FieldCoverImage,
	FieldTitle,
	FieldSubtitle,
	FieldDescription,
	FieldMastering,
	FieldDays,
	FieldColor,
	FieldOrder,
}

var (
	// TechniquesPrimaryKey and TechniquesColumn2 are the table columns denoting the
	// primary key for the techniques relation (M2M).
	TechniquesPrimaryKey = []string{"unit_id", "technique_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IconImageValidator is a validator for the "iconImage" field. It is called by the builders before save.
	IconImageValidator func(string) error
	// CoverImageValidator is a validator for the "coverImage" field. It is called by the builders before save.
	CoverImageValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// SubtitleValidator is a validator for the "subtitle" field. It is called by the builders before save.
	SubtitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// MasteringValidator is a validator for the "mastering" field. It is called by the builders before save.
	MasteringValidator func(string) error
	// DaysValidator is a validator for the "days" field. It is called by the builders before save.
	DaysValidator func(int) error
	// ColorValidator is a validator for the "color" field. It is called by the builders before save.
	ColorValidator func(string) error
	// OrderValidator is a validator for the "order" field. It is called by the builders before save.
	OrderValidator func(int) error
)

// OrderOption defines the ordering options for the Unit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCourseID orders the results by the course_id field.
func ByCourseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseID, opts...).ToFunc()
}

// ByIconImage orders the results by the iconImage field.
func ByIconImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIconImage, opts...).ToFunc()
}

// ByCoverImage orders the results by the coverImage field.
func ByCoverImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverImage, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySubtitle orders the results by the subtitle field.
func BySubtitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByMastering orders the results by the mastering field.
func ByMastering(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMastering, opts...).ToFunc()
}

// ByDays orders the results by the days field.
func ByDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDays, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByCourseField orders the results by course field.
func ByCourseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCourseStep(), sql.OrderByField(field, opts...))
	}
}

// ByLessonsCount orders the results by lessons count.
func ByLessonsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonsStep(), opts...)
	}
}

// ByLessons orders the results by lessons terms.
func ByLessons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTechniquesCount orders the results by techniques count.
func ByTechniquesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTechniquesStep(), opts...)
	}
}

// ByTechniques orders the results by techniques terms.
func ByTechniques(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTechniquesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUnitTechniquesCount orders the results by unitTechniques count.
func ByUnitTechniquesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUnitTechniquesStep(), opts...)
	}
}

// ByUnitTechniques orders the results by unitTechniques terms.
func ByUnitTechniques(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUnitTechniquesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCourseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CourseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CourseTable, CourseColumn),
	)
}
func newLessonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, LessonsTable, LessonsColumn),
	)
}
func newTechniquesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TechniquesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TechniquesTable, TechniquesPrimaryKey...),
	)
}
func newUnitTechniquesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UnitTechniquesInverseTable, UnitTechniquesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UnitTechniquesTable, UnitTechniquesColumn),
	)
}
