// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/course"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/technique"
	"github.com/jhana-app/jhana-app/ent/unit"
)

// UnitCreate is the builder for creating a Unit entity.
type UnitCreate struct {
	config
	mutation *UnitMutation
	hooks    []Hook
}

// SetCourseID sets the "course_id" field.
func (uc *UnitCreate) SetCourseID(gi gqlid.CourseID) *UnitCreate {
	uc.mutation.SetCourseID(gi)
	return uc
}

// SetIconImage sets the "iconImage" field.
func (uc *UnitCreate) SetIconImage(s string) *UnitCreate {
	uc.mutation.SetIconImage(s)
	return uc
}

// SetCoverImage sets the "coverImage" field.
func (uc *UnitCreate) SetCoverImage(s string) *UnitCreate {
	uc.mutation.SetCoverImage(s)
	return uc
}

// SetTitle sets the "title" field.
func (uc *UnitCreate) SetTitle(s string) *UnitCreate {
	uc.mutation.SetTitle(s)
	return uc
}

// SetSubtitle sets the "subtitle" field.
func (uc *UnitCreate) SetSubtitle(s string) *UnitCreate {
	uc.mutation.SetSubtitle(s)
	return uc
}

// SetDescription sets the "description" field.
func (uc *UnitCreate) SetDescription(s string) *UnitCreate {
	uc.mutation.SetDescription(s)
	return uc
}

// SetMastering sets the "mastering" field.
func (uc *UnitCreate) SetMastering(s string) *UnitCreate {
	uc.mutation.SetMastering(s)
	return uc
}

// SetDays sets the "days" field.
func (uc *UnitCreate) SetDays(i int) *UnitCreate {
	uc.mutation.SetDays(i)
	return uc
}

// SetColor sets the "color" field.
func (uc *UnitCreate) SetColor(s string) *UnitCreate {
	uc.mutation.SetColor(s)
	return uc
}

// SetOrder sets the "order" field.
func (uc *UnitCreate) SetOrder(i int) *UnitCreate {
	uc.mutation.SetOrder(i)
	return uc
}

// SetID sets the "id" field.
func (uc *UnitCreate) SetID(gi gqlid.UnitID) *UnitCreate {
	uc.mutation.SetID(gi)
	return uc
}

// SetCourse sets the "course" edge to the Course entity.
func (uc *UnitCreate) SetCourse(c *Course) *UnitCreate {
	return uc.SetCourseID(c.ID)
}

// AddLessonIDs adds the "lessons" edge to the Lesson entity by IDs.
func (uc *UnitCreate) AddLessonIDs(ids ...gqlid.LessonID) *UnitCreate {
	uc.mutation.AddLessonIDs(ids...)
	return uc
}

// AddLessons adds the "lessons" edges to the Lesson entity.
func (uc *UnitCreate) AddLessons(l ...*Lesson) *UnitCreate {
	ids := make([]gqlid.LessonID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uc.AddLessonIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (uc *UnitCreate) AddTechniqueIDs(ids ...gqlid.TechniqueID) *UnitCreate {
	uc.mutation.AddTechniqueIDs(ids...)
	return uc
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (uc *UnitCreate) AddTechniques(t ...*Technique) *UnitCreate {
	ids := make([]gqlid.TechniqueID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTechniqueIDs(ids...)
}

// Mutation returns the UnitMutation object of the builder.
func (uc *UnitCreate) Mutation() *UnitMutation {
	return uc.mutation
}

// Save creates the Unit in the database.
func (uc *UnitCreate) Save(ctx context.Context) (*Unit, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UnitCreate) SaveX(ctx context.Context) *Unit {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UnitCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UnitCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UnitCreate) check() error {
	if _, ok := uc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course_id", err: errors.New(`ent: missing required field "Unit.course_id"`)}
	}
	if _, ok := uc.mutation.IconImage(); !ok {
		return &ValidationError{Name: "iconImage", err: errors.New(`ent: missing required field "Unit.iconImage"`)}
	}
	if v, ok := uc.mutation.IconImage(); ok {
		if err := unit.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Unit.iconImage": %w`, err)}
		}
	}
	if _, ok := uc.mutation.CoverImage(); !ok {
		return &ValidationError{Name: "coverImage", err: errors.New(`ent: missing required field "Unit.coverImage"`)}
	}
	if v, ok := uc.mutation.CoverImage(); ok {
		if err := unit.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Unit.coverImage": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Unit.title"`)}
	}
	if v, ok := uc.mutation.Title(); ok {
		if err := unit.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Unit.title": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Subtitle(); !ok {
		return &ValidationError{Name: "subtitle", err: errors.New(`ent: missing required field "Unit.subtitle"`)}
	}
	if v, ok := uc.mutation.Subtitle(); ok {
		if err := unit.SubtitleValidator(v); err != nil {
			return &ValidationError{Name: "subtitle", err: fmt.Errorf(`ent: validator failed for field "Unit.subtitle": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Unit.description"`)}
	}
	if v, ok := uc.mutation.Description(); ok {
		if err := unit.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Unit.description": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Mastering(); !ok {
		return &ValidationError{Name: "mastering", err: errors.New(`ent: missing required field "Unit.mastering"`)}
	}
	if v, ok := uc.mutation.Mastering(); ok {
		if err := unit.MasteringValidator(v); err != nil {
			return &ValidationError{Name: "mastering", err: fmt.Errorf(`ent: validator failed for field "Unit.mastering": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Days(); !ok {
		return &ValidationError{Name: "days", err: errors.New(`ent: missing required field "Unit.days"`)}
	}
	if v, ok := uc.mutation.Days(); ok {
		if err := unit.DaysValidator(v); err != nil {
			return &ValidationError{Name: "days", err: fmt.Errorf(`ent: validator failed for field "Unit.days": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "Unit.color"`)}
	}
	if v, ok := uc.mutation.Color(); ok {
		if err := unit.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Unit.color": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Unit.order"`)}
	}
	if v, ok := uc.mutation.Order(); ok {
		if err := unit.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Unit.order": %w`, err)}
		}
	}
	if _, ok := uc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course", err: errors.New(`ent: missing required edge "Unit.course"`)}
	}
	return nil
}

func (uc *UnitCreate) sqlSave(ctx context.Context) (*Unit, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gqlid.UnitID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UnitCreate) createSpec() (*Unit, *sqlgraph.CreateSpec) {
	var (
		_node = &Unit{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(unit.Table, sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.IconImage(); ok {
		_spec.SetField(unit.FieldIconImage, field.TypeString, value)
		_node.IconImage = value
	}
	if value, ok := uc.mutation.CoverImage(); ok {
		_spec.SetField(unit.FieldCoverImage, field.TypeString, value)
		_node.CoverImage = value
	}
	if value, ok := uc.mutation.Title(); ok {
		_spec.SetField(unit.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := uc.mutation.Subtitle(); ok {
		_spec.SetField(unit.FieldSubtitle, field.TypeString, value)
		_node.Subtitle = value
	}
	if value, ok := uc.mutation.Description(); ok {
		_spec.SetField(unit.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := uc.mutation.Mastering(); ok {
		_spec.SetField(unit.FieldMastering, field.TypeString, value)
		_node.Mastering = value
	}
	if value, ok := uc.mutation.Days(); ok {
		_spec.SetField(unit.FieldDays, field.TypeInt, value)
		_node.Days = value
	}
	if value, ok := uc.mutation.Color(); ok {
		_spec.SetField(unit.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := uc.mutation.Order(); ok {
		_spec.SetField(unit.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := uc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   unit.CourseTable,
			Columns: []string{unit.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.LessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   unit.LessonsTable,
			Columns: []string{unit.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   unit.TechniquesTable,
			Columns: unit.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UnitCreateBulk is the builder for creating many Unit entities in bulk.
type UnitCreateBulk struct {
	config
	err      error
	builders []*UnitCreate
}

// Save creates the Unit entities in the database.
func (ucb *UnitCreateBulk) Save(ctx context.Context) ([]*Unit, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Unit, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UnitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					if err := nodes[i].ID.Scan(specs[i].ID.Value); err != nil {
						return nil, err
					}
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UnitCreateBulk) SaveX(ctx context.Context) []*Unit {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UnitCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UnitCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
