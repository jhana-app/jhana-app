// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/content"
	"github.com/jhana-app/jhana-app/ent/contentepisode"
	"github.com/jhana-app/jhana-app/ent/contentprogress"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/property"
	"github.com/jhana-app/jhana-app/ent/user"
)

// ContentProgressCreate is the builder for creating a ContentProgress entity.
type ContentProgressCreate struct {
	config
	mutation *ContentProgressMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (cpc *ContentProgressCreate) SetUserID(gi gqlid.UserID) *ContentProgressCreate {
	cpc.mutation.SetUserID(gi)
	return cpc
}

// SetContentID sets the "content_id" field.
func (cpc *ContentProgressCreate) SetContentID(gi gqlid.ContentID) *ContentProgressCreate {
	cpc.mutation.SetContentID(gi)
	return cpc
}

// SetEpisodeID sets the "episode_id" field.
func (cpc *ContentProgressCreate) SetEpisodeID(gei gqlid.ContentEpisodeID) *ContentProgressCreate {
	cpc.mutation.SetEpisodeID(gei)
	return cpc
}

// SetContentType sets the "content_type" field.
func (cpc *ContentProgressCreate) SetContentType(pt property.ContentType) *ContentProgressCreate {
	cpc.mutation.SetContentType(pt)
	return cpc
}

// SetProgress sets the "progress" field.
func (cpc *ContentProgressCreate) SetProgress(i int64) *ContentProgressCreate {
	cpc.mutation.SetProgress(i)
	return cpc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (cpc *ContentProgressCreate) SetNillableProgress(i *int64) *ContentProgressCreate {
	if i != nil {
		cpc.SetProgress(*i)
	}
	return cpc
}

// SetFinishedAt sets the "finishedAt" field.
func (cpc *ContentProgressCreate) SetFinishedAt(t time.Time) *ContentProgressCreate {
	cpc.mutation.SetFinishedAt(t)
	return cpc
}

// SetNillableFinishedAt sets the "finishedAt" field if the given value is not nil.
func (cpc *ContentProgressCreate) SetNillableFinishedAt(t *time.Time) *ContentProgressCreate {
	if t != nil {
		cpc.SetFinishedAt(*t)
	}
	return cpc
}

// SetCreatedAt sets the "createdAt" field.
func (cpc *ContentProgressCreate) SetCreatedAt(t time.Time) *ContentProgressCreate {
	cpc.mutation.SetCreatedAt(t)
	return cpc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cpc *ContentProgressCreate) SetNillableCreatedAt(t *time.Time) *ContentProgressCreate {
	if t != nil {
		cpc.SetCreatedAt(*t)
	}
	return cpc
}

// SetUpdatedAt sets the "updatedAt" field.
func (cpc *ContentProgressCreate) SetUpdatedAt(t time.Time) *ContentProgressCreate {
	cpc.mutation.SetUpdatedAt(t)
	return cpc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (cpc *ContentProgressCreate) SetNillableUpdatedAt(t *time.Time) *ContentProgressCreate {
	if t != nil {
		cpc.SetUpdatedAt(*t)
	}
	return cpc
}

// SetID sets the "id" field.
func (cpc *ContentProgressCreate) SetID(gpi gqlid.ContentProgressID) *ContentProgressCreate {
	cpc.mutation.SetID(gpi)
	return cpc
}

// SetUser sets the "user" edge to the User entity.
func (cpc *ContentProgressCreate) SetUser(u *User) *ContentProgressCreate {
	return cpc.SetUserID(u.ID)
}

// SetContent sets the "content" edge to the Content entity.
func (cpc *ContentProgressCreate) SetContent(c *Content) *ContentProgressCreate {
	return cpc.SetContentID(c.ID)
}

// SetEpisode sets the "episode" edge to the ContentEpisode entity.
func (cpc *ContentProgressCreate) SetEpisode(c *ContentEpisode) *ContentProgressCreate {
	return cpc.SetEpisodeID(c.ID)
}

// Mutation returns the ContentProgressMutation object of the builder.
func (cpc *ContentProgressCreate) Mutation() *ContentProgressMutation {
	return cpc.mutation
}

// Save creates the ContentProgress in the database.
func (cpc *ContentProgressCreate) Save(ctx context.Context) (*ContentProgress, error) {
	cpc.defaults()
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *ContentProgressCreate) SaveX(ctx context.Context) *ContentProgress {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *ContentProgressCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *ContentProgressCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *ContentProgressCreate) defaults() {
	if _, ok := cpc.mutation.Progress(); !ok {
		v := contentprogress.DefaultProgress
		cpc.mutation.SetProgress(v)
	}
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		v := contentprogress.DefaultCreatedAt()
		cpc.mutation.SetCreatedAt(v)
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		v := contentprogress.DefaultUpdatedAt()
		cpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *ContentProgressCreate) check() error {
	if _, ok := cpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ContentProgress.user_id"`)}
	}
	if _, ok := cpc.mutation.ContentID(); !ok {
		return &ValidationError{Name: "content_id", err: errors.New(`ent: missing required field "ContentProgress.content_id"`)}
	}
	if _, ok := cpc.mutation.EpisodeID(); !ok {
		return &ValidationError{Name: "episode_id", err: errors.New(`ent: missing required field "ContentProgress.episode_id"`)}
	}
	if _, ok := cpc.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`ent: missing required field "ContentProgress.content_type"`)}
	}
	if v, ok := cpc.mutation.ContentType(); ok {
		if err := contentprogress.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "ContentProgress.content_type": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "ContentProgress.progress"`)}
	}
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "ContentProgress.createdAt"`)}
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "ContentProgress.updatedAt"`)}
	}
	if _, ok := cpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ContentProgress.user"`)}
	}
	if _, ok := cpc.mutation.ContentID(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required edge "ContentProgress.content"`)}
	}
	if _, ok := cpc.mutation.EpisodeID(); !ok {
		return &ValidationError{Name: "episode", err: errors.New(`ent: missing required edge "ContentProgress.episode"`)}
	}
	return nil
}

func (cpc *ContentProgressCreate) sqlSave(ctx context.Context) (*ContentProgress, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gqlid.ContentProgressID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *ContentProgressCreate) createSpec() (*ContentProgress, *sqlgraph.CreateSpec) {
	var (
		_node = &ContentProgress{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(contentprogress.Table, sqlgraph.NewFieldSpec(contentprogress.FieldID, field.TypeInt64))
	)
	if id, ok := cpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cpc.mutation.ContentType(); ok {
		_spec.SetField(contentprogress.FieldContentType, field.TypeEnum, value)
		_node.ContentType = value
	}
	if value, ok := cpc.mutation.Progress(); ok {
		_spec.SetField(contentprogress.FieldProgress, field.TypeInt64, value)
		_node.Progress = value
	}
	if value, ok := cpc.mutation.FinishedAt(); ok {
		_spec.SetField(contentprogress.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := cpc.mutation.CreatedAt(); ok {
		_spec.SetField(contentprogress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cpc.mutation.UpdatedAt(); ok {
		_spec.SetField(contentprogress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contentprogress.UserTable,
			Columns: []string{contentprogress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.ContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contentprogress.ContentTable,
			Columns: []string{contentprogress.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(content.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ContentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.EpisodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contentprogress.EpisodeTable,
			Columns: []string{contentprogress.EpisodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentepisode.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EpisodeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContentProgressCreateBulk is the builder for creating many ContentProgress entities in bulk.
type ContentProgressCreateBulk struct {
	config
	err      error
	builders []*ContentProgressCreate
}

// Save creates the ContentProgress entities in the database.
func (cpcb *ContentProgressCreateBulk) Save(ctx context.Context) ([]*ContentProgress, error) {
	if cpcb.err != nil {
		return nil, cpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*ContentProgress, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContentProgressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					if err := nodes[i].ID.Scan(specs[i].ID.Value); err != nil {
						return nil, err
					}
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *ContentProgressCreateBulk) SaveX(ctx context.Context) []*ContentProgress {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *ContentProgressCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *ContentProgressCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
