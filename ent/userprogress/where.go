// Code generated by ent, DO NOT EDIT.

package userprogress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/property"
)

// ID filters vertices based on their ID field.
func ID(id gqlid.UserProgressID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gqlid.UserProgressID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gqlid.UserProgressID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gqlid.UserProgressID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gqlid.UserProgressID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gqlid.UserProgressID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gqlid.UserProgressID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gqlid.UserProgressID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gqlid.UserProgressID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v gqlid.UserID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldUserID, v))
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v gqlid.CourseID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldCourseID, v))
}

// UnitID applies equality check predicate on the "unit_id" field. It's identical to UnitIDEQ.
func UnitID(v gqlid.UnitID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldUnitID, v))
}

// LessonID applies equality check predicate on the "lesson_id" field. It's identical to LessonIDEQ.
func LessonID(v gqlid.LessonID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldLessonID, v))
}

// IsLast applies equality check predicate on the "isLast" field. It's identical to IsLastEQ.
func IsLast(v bool) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldIsLast, v))
}

// IsNext applies equality check predicate on the "isNext" field. It's identical to IsNextEQ.
func IsNext(v bool) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldIsNext, v))
}

// Progress applies equality check predicate on the "progress" field. It's identical to ProgressEQ.
func Progress(v int64) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldProgress, v))
}

// FinishedAt applies equality check predicate on the "finishedAt" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldFinishedAt, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v gqlid.UserID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v gqlid.UserID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...gqlid.UserID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...gqlid.UserID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNotIn(FieldUserID, vs...))
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v gqlid.CourseID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldCourseID, v))
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v gqlid.CourseID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldCourseID, v))
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...gqlid.CourseID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldIn(FieldCourseID, vs...))
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...gqlid.CourseID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNotIn(FieldCourseID, vs...))
}

// UnitIDEQ applies the EQ predicate on the "unit_id" field.
func UnitIDEQ(v gqlid.UnitID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldUnitID, v))
}

// UnitIDNEQ applies the NEQ predicate on the "unit_id" field.
func UnitIDNEQ(v gqlid.UnitID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldUnitID, v))
}

// UnitIDIn applies the In predicate on the "unit_id" field.
func UnitIDIn(vs ...gqlid.UnitID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldIn(FieldUnitID, vs...))
}

// UnitIDNotIn applies the NotIn predicate on the "unit_id" field.
func UnitIDNotIn(vs ...gqlid.UnitID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNotIn(FieldUnitID, vs...))
}

// LessonIDEQ applies the EQ predicate on the "lesson_id" field.
func LessonIDEQ(v gqlid.LessonID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldLessonID, v))
}

// LessonIDNEQ applies the NEQ predicate on the "lesson_id" field.
func LessonIDNEQ(v gqlid.LessonID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldLessonID, v))
}

// LessonIDIn applies the In predicate on the "lesson_id" field.
func LessonIDIn(vs ...gqlid.LessonID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldIn(FieldLessonID, vs...))
}

// LessonIDNotIn applies the NotIn predicate on the "lesson_id" field.
func LessonIDNotIn(vs ...gqlid.LessonID) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNotIn(FieldLessonID, vs...))
}

// LessonTypeEQ applies the EQ predicate on the "lesson_type" field.
func LessonTypeEQ(v property.LessonType) predicate.UserProgress {
	vc := v
	return predicate.UserProgress(sql.FieldEQ(FieldLessonType, vc))
}

// LessonTypeNEQ applies the NEQ predicate on the "lesson_type" field.
func LessonTypeNEQ(v property.LessonType) predicate.UserProgress {
	vc := v
	return predicate.UserProgress(sql.FieldNEQ(FieldLessonType, vc))
}

// LessonTypeIn applies the In predicate on the "lesson_type" field.
func LessonTypeIn(vs ...property.LessonType) predicate.UserProgress {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProgress(sql.FieldIn(FieldLessonType, v...))
}

// LessonTypeNotIn applies the NotIn predicate on the "lesson_type" field.
func LessonTypeNotIn(vs ...property.LessonType) predicate.UserProgress {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProgress(sql.FieldNotIn(FieldLessonType, v...))
}

// IsLastEQ applies the EQ predicate on the "isLast" field.
func IsLastEQ(v bool) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldIsLast, v))
}

// IsLastNEQ applies the NEQ predicate on the "isLast" field.
func IsLastNEQ(v bool) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldIsLast, v))
}

// IsNextEQ applies the EQ predicate on the "isNext" field.
func IsNextEQ(v bool) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldIsNext, v))
}

// IsNextNEQ applies the NEQ predicate on the "isNext" field.
func IsNextNEQ(v bool) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldIsNext, v))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v int64) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldProgress, v))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v int64) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldProgress, v))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...int64) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldIn(FieldProgress, vs...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...int64) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNotIn(FieldProgress, vs...))
}

// ProgressGT applies the GT predicate on the "progress" field.
func ProgressGT(v int64) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldGT(FieldProgress, v))
}

// ProgressGTE applies the GTE predicate on the "progress" field.
func ProgressGTE(v int64) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldGTE(FieldProgress, v))
}

// ProgressLT applies the LT predicate on the "progress" field.
func ProgressLT(v int64) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldLT(FieldProgress, v))
}

// ProgressLTE applies the LTE predicate on the "progress" field.
func ProgressLTE(v int64) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldLTE(FieldProgress, v))
}

// FinishedAtEQ applies the EQ predicate on the "finishedAt" field.
func FinishedAtEQ(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finishedAt" field.
func FinishedAtNEQ(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finishedAt" field.
func FinishedAtIn(vs ...time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finishedAt" field.
func FinishedAtNotIn(vs ...time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finishedAt" field.
func FinishedAtGT(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finishedAt" field.
func FinishedAtGTE(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finishedAt" field.
func FinishedAtLT(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finishedAt" field.
func FinishedAtLTE(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finishedAt" field.
func FinishedAtIsNil() predicate.UserProgress {
	return predicate.UserProgress(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finishedAt" field.
func FinishedAtNotNil() predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNotNull(FieldFinishedAt))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.UserProgress {
	return predicate.UserProgress(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserProgress {
	return predicate.UserProgress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserProgress {
	return predicate.UserProgress(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.UserProgress {
	return predicate.UserProgress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.Course) predicate.UserProgress {
	return predicate.UserProgress(func(s *sql.Selector) {
		step := newCourseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUnit applies the HasEdge predicate on the "unit" edge.
func HasUnit() predicate.UserProgress {
	return predicate.UserProgress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UnitTable, UnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUnitWith applies the HasEdge predicate on the "unit" edge with a given conditions (other predicates).
func HasUnitWith(preds ...predicate.Unit) predicate.UserProgress {
	return predicate.UserProgress(func(s *sql.Selector) {
		step := newUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLesson applies the HasEdge predicate on the "lesson" edge.
func HasLesson() predicate.UserProgress {
	return predicate.UserProgress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LessonTable, LessonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonWith applies the HasEdge predicate on the "lesson" edge with a given conditions (other predicates).
func HasLessonWith(preds ...predicate.Lesson) predicate.UserProgress {
	return predicate.UserProgress(func(s *sql.Selector) {
		step := newLessonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserProgress) predicate.UserProgress {
	return predicate.UserProgress(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserProgress) predicate.UserProgress {
	return predicate.UserProgress(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserProgress) predicate.UserProgress {
	return predicate.UserProgress(sql.NotPredicates(p))
}
