// Code generated by ent, DO NOT EDIT.

package userprogress

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/jhana-app/jhana-app/ent/property"
)

const (
	// Label holds the string label denoting the userprogress type in the database.
	Label = "user_progress"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCourseID holds the string denoting the course_id field in the database.
	FieldCourseID = "course_id"
	// FieldUnitID holds the string denoting the unit_id field in the database.
	FieldUnitID = "unit_id"
	// FieldLessonID holds the string denoting the lesson_id field in the database.
	FieldLessonID = "lesson_id"
	// FieldLessonType holds the string denoting the lesson_type field in the database.
	FieldLessonType = "lesson_type"
	// FieldIsLast holds the string denoting the islast field in the database.
	FieldIsLast = "is_last"
	// FieldIsNext holds the string denoting the isnext field in the database.
	FieldIsNext = "is_next"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldFinishedAt holds the string denoting the finishedat field in the database.
	FieldFinishedAt = "finished_at"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeUnit holds the string denoting the unit edge name in mutations.
	EdgeUnit = "unit"
	// EdgeLesson holds the string denoting the lesson edge name in mutations.
	EdgeLesson = "lesson"
	// Table holds the table name of the userprogress in the database.
	Table = "user_progresses"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_progresses"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// CourseTable is the table that holds the course relation/edge.
	CourseTable = "user_progresses"
	// CourseInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseInverseTable = "courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "course_id"
	// UnitTable is the table that holds the unit relation/edge.
	UnitTable = "user_progresses"
	// UnitInverseTable is the table name for the Unit entity.
	// It exists in this package in order to avoid circular dependency with the "unit" package.
	UnitInverseTable = "units"
	// UnitColumn is the table column denoting the unit relation/edge.
	UnitColumn = "unit_id"
	// LessonTable is the table that holds the lesson relation/edge.
	LessonTable = "user_progresses"
	// LessonInverseTable is the table name for the Lesson entity.
	// It exists in this package in order to avoid circular dependency with the "lesson" package.
	LessonInverseTable = "lessons"
	// LessonColumn is the table column denoting the lesson relation/edge.
	LessonColumn = "lesson_id"
)

// Columns holds all SQL columns for userprogress fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldCourseID,
	FieldUnitID,
	FieldLessonID,
	FieldLessonType,
	FieldIsLast,
	FieldIsNext,
	FieldProgress,
	FieldFinishedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultProgress holds the default value on creation for the "progress" field.
	DefaultProgress int64
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// LessonTypeValidator is a validator for the "lesson_type" field enum values. It is called by the builders before save.
func LessonTypeValidator(lt property.LessonType) error {
	switch lt {
	case "guided", "mastery":
		return nil
	default:
		return fmt.Errorf("userprogress: invalid enum value for lesson_type field: %q", lt)
	}
}

// OrderOption defines the ordering options for the UserProgress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCourseID orders the results by the course_id field.
func ByCourseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseID, opts...).ToFunc()
}

// ByUnitID orders the results by the unit_id field.
func ByUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitID, opts...).ToFunc()
}

// ByLessonID orders the results by the lesson_id field.
func ByLessonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonID, opts...).ToFunc()
}

// ByLessonType orders the results by the lesson_type field.
func ByLessonType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonType, opts...).ToFunc()
}

// ByIsLast orders the results by the isLast field.
func ByIsLast(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLast, opts...).ToFunc()
}

// ByIsNext orders the results by the isNext field.
func ByIsNext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsNext, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finishedAt field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCourseField orders the results by course field.
func ByCourseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCourseStep(), sql.OrderByField(field, opts...))
	}
}

// ByUnitField orders the results by unit field.
func ByUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByLessonField orders the results by lesson field.
func ByLessonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newCourseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CourseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CourseTable, CourseColumn),
	)
}
func newUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UnitTable, UnitColumn),
	)
}
func newLessonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LessonTable, LessonColumn),
	)
}

var (
	// property.LessonType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*property.LessonType)(nil)
	// property.LessonType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*property.LessonType)(nil)
)
