// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/jhana-app/jhana-app/ent/content"
	"github.com/jhana-app/jhana-app/ent/contentepisode"
	"github.com/jhana-app/jhana-app/ent/contentprogress"
	"github.com/jhana-app/jhana-app/ent/course"
	"github.com/jhana-app/jhana-app/ent/journalrecord"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/lessonaudio"
	"github.com/jhana-app/jhana-app/ent/technique"
	"github.com/jhana-app/jhana-app/ent/unit"
	"github.com/jhana-app/jhana-app/ent/user"
	"github.com/jhana-app/jhana-app/ent/userprogress"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[string]
	PageInfo       = entgql.PageInfo[string]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ContentEdge is the edge representation of Content.
type ContentEdge struct {
	Node   *Content `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ContentConnection is the connection containing edges to Content.
type ContentConnection struct {
	Edges      []*ContentEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *ContentConnection) build(nodes []*Content, pager *contentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Content
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Content {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Content {
			return nodes[i]
		}
	}
	c.Edges = make([]*ContentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ContentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ContentPaginateOption enables pagination customization.
type ContentPaginateOption func(*contentPager) error

// WithContentOrder configures pagination ordering.
func WithContentOrder(order *ContentOrder) ContentPaginateOption {
	if order == nil {
		order = DefaultContentOrder
	}
	o := *order
	return func(pager *contentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultContentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithContentFilter configures pagination filter.
func WithContentFilter(filter func(*ContentQuery) (*ContentQuery, error)) ContentPaginateOption {
	return func(pager *contentPager) error {
		if filter == nil {
			return errors.New("ContentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type contentPager struct {
	reverse bool
	order   *ContentOrder
	filter  func(*ContentQuery) (*ContentQuery, error)
}

func newContentPager(opts []ContentPaginateOption, reverse bool) (*contentPager, error) {
	pager := &contentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultContentOrder
	}
	return pager, nil
}

func (p *contentPager) applyFilter(query *ContentQuery) (*ContentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *contentPager) toCursor(c *Content) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *contentPager) applyCursors(query *ContentQuery, after, before *Cursor) (*ContentQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultContentOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *contentPager) applyOrder(query *ContentQuery) *ContentQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultContentOrder.Field {
		query = query.Order(DefaultContentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *contentPager) orderExpr(query *ContentQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultContentOrder.Field {
			b.Comma().Ident(DefaultContentOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Content.
func (c *ContentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ContentPaginateOption,
) (*ContentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newContentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &ContentConnection{Edges: []*ContentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ContentOrderFieldOrder orders Content by order.
	ContentOrderFieldOrder = &ContentOrderField{
		Value: func(c *Content) (ent.Value, error) {
			return c.Order, nil
		},
		column: content.FieldOrder,
		toTerm: content.ByOrder,
		toCursor: func(c *Content) Cursor {
			return Cursor{
				ID:    c.marshalID(),
				Value: c.Order,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ContentOrderField) String() string {
	var str string
	switch f.column {
	case ContentOrderFieldOrder.column:
		str = "ORDER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ContentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ContentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ContentOrderField %T must be a string", v)
	}
	switch str {
	case "ORDER":
		*f = *ContentOrderFieldOrder
	default:
		return fmt.Errorf("%s is not a valid ContentOrderField", str)
	}
	return nil
}

// ContentOrderField defines the ordering field of Content.
type ContentOrderField struct {
	// Value extracts the ordering value from the given Content.
	Value    func(*Content) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) content.OrderOption
	toCursor func(*Content) Cursor
}

// ContentOrder defines the ordering of Content.
type ContentOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ContentOrderField `json:"field"`
}

// DefaultContentOrder is the default ordering of Content.
var DefaultContentOrder = &ContentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ContentOrderField{
		Value: func(c *Content) (ent.Value, error) {
			return c.ID, nil
		},
		column: content.FieldID,
		toTerm: content.ByID,
		toCursor: func(c *Content) Cursor {
			return Cursor{ID: c.marshalID()}
		},
	},
}

// ToEdge converts Content into ContentEdge.
func (c *Content) ToEdge(order *ContentOrder) *ContentEdge {
	if order == nil {
		order = DefaultContentOrder
	}
	return &ContentEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// ContentEpisodeEdge is the edge representation of ContentEpisode.
type ContentEpisodeEdge struct {
	Node   *ContentEpisode `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// ContentEpisodeConnection is the connection containing edges to ContentEpisode.
type ContentEpisodeConnection struct {
	Edges      []*ContentEpisodeEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *ContentEpisodeConnection) build(nodes []*ContentEpisode, pager *contentepisodePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ContentEpisode
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ContentEpisode {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ContentEpisode {
			return nodes[i]
		}
	}
	c.Edges = make([]*ContentEpisodeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ContentEpisodeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ContentEpisodePaginateOption enables pagination customization.
type ContentEpisodePaginateOption func(*contentepisodePager) error

// WithContentEpisodeOrder configures pagination ordering.
func WithContentEpisodeOrder(order *ContentEpisodeOrder) ContentEpisodePaginateOption {
	if order == nil {
		order = DefaultContentEpisodeOrder
	}
	o := *order
	return func(pager *contentepisodePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultContentEpisodeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithContentEpisodeFilter configures pagination filter.
func WithContentEpisodeFilter(filter func(*ContentEpisodeQuery) (*ContentEpisodeQuery, error)) ContentEpisodePaginateOption {
	return func(pager *contentepisodePager) error {
		if filter == nil {
			return errors.New("ContentEpisodeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type contentepisodePager struct {
	reverse bool
	order   *ContentEpisodeOrder
	filter  func(*ContentEpisodeQuery) (*ContentEpisodeQuery, error)
}

func newContentEpisodePager(opts []ContentEpisodePaginateOption, reverse bool) (*contentepisodePager, error) {
	pager := &contentepisodePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultContentEpisodeOrder
	}
	return pager, nil
}

func (p *contentepisodePager) applyFilter(query *ContentEpisodeQuery) (*ContentEpisodeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *contentepisodePager) toCursor(ce *ContentEpisode) Cursor {
	return p.order.Field.toCursor(ce)
}

func (p *contentepisodePager) applyCursors(query *ContentEpisodeQuery, after, before *Cursor) (*ContentEpisodeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultContentEpisodeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *contentepisodePager) applyOrder(query *ContentEpisodeQuery) *ContentEpisodeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultContentEpisodeOrder.Field {
		query = query.Order(DefaultContentEpisodeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *contentepisodePager) orderExpr(query *ContentEpisodeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultContentEpisodeOrder.Field {
			b.Comma().Ident(DefaultContentEpisodeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ContentEpisode.
func (ce *ContentEpisodeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ContentEpisodePaginateOption,
) (*ContentEpisodeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newContentEpisodePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ce, err = pager.applyFilter(ce); err != nil {
		return nil, err
	}
	conn := &ContentEpisodeConnection{Edges: []*ContentEpisodeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ce.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ce, err = pager.applyCursors(ce, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ce.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ce.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ce = pager.applyOrder(ce)
	nodes, err := ce.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ContentEpisodeOrderFieldOrder orders ContentEpisode by order.
	ContentEpisodeOrderFieldOrder = &ContentEpisodeOrderField{
		Value: func(ce *ContentEpisode) (ent.Value, error) {
			return ce.Order, nil
		},
		column: contentepisode.FieldOrder,
		toTerm: contentepisode.ByOrder,
		toCursor: func(ce *ContentEpisode) Cursor {
			return Cursor{
				ID:    ce.marshalID(),
				Value: ce.Order,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ContentEpisodeOrderField) String() string {
	var str string
	switch f.column {
	case ContentEpisodeOrderFieldOrder.column:
		str = "ORDER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ContentEpisodeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ContentEpisodeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ContentEpisodeOrderField %T must be a string", v)
	}
	switch str {
	case "ORDER":
		*f = *ContentEpisodeOrderFieldOrder
	default:
		return fmt.Errorf("%s is not a valid ContentEpisodeOrderField", str)
	}
	return nil
}

// ContentEpisodeOrderField defines the ordering field of ContentEpisode.
type ContentEpisodeOrderField struct {
	// Value extracts the ordering value from the given ContentEpisode.
	Value    func(*ContentEpisode) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) contentepisode.OrderOption
	toCursor func(*ContentEpisode) Cursor
}

// ContentEpisodeOrder defines the ordering of ContentEpisode.
type ContentEpisodeOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *ContentEpisodeOrderField `json:"field"`
}

// DefaultContentEpisodeOrder is the default ordering of ContentEpisode.
var DefaultContentEpisodeOrder = &ContentEpisodeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ContentEpisodeOrderField{
		Value: func(ce *ContentEpisode) (ent.Value, error) {
			return ce.ID, nil
		},
		column: contentepisode.FieldID,
		toTerm: contentepisode.ByID,
		toCursor: func(ce *ContentEpisode) Cursor {
			return Cursor{ID: ce.marshalID()}
		},
	},
}

// ToEdge converts ContentEpisode into ContentEpisodeEdge.
func (ce *ContentEpisode) ToEdge(order *ContentEpisodeOrder) *ContentEpisodeEdge {
	if order == nil {
		order = DefaultContentEpisodeOrder
	}
	return &ContentEpisodeEdge{
		Node:   ce,
		Cursor: order.Field.toCursor(ce),
	}
}

// ContentProgressEdge is the edge representation of ContentProgress.
type ContentProgressEdge struct {
	Node   *ContentProgress `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// ContentProgressConnection is the connection containing edges to ContentProgress.
type ContentProgressConnection struct {
	Edges      []*ContentProgressEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *ContentProgressConnection) build(nodes []*ContentProgress, pager *contentprogressPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ContentProgress
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ContentProgress {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ContentProgress {
			return nodes[i]
		}
	}
	c.Edges = make([]*ContentProgressEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ContentProgressEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ContentProgressPaginateOption enables pagination customization.
type ContentProgressPaginateOption func(*contentprogressPager) error

// WithContentProgressOrder configures pagination ordering.
func WithContentProgressOrder(order *ContentProgressOrder) ContentProgressPaginateOption {
	if order == nil {
		order = DefaultContentProgressOrder
	}
	o := *order
	return func(pager *contentprogressPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultContentProgressOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithContentProgressFilter configures pagination filter.
func WithContentProgressFilter(filter func(*ContentProgressQuery) (*ContentProgressQuery, error)) ContentProgressPaginateOption {
	return func(pager *contentprogressPager) error {
		if filter == nil {
			return errors.New("ContentProgressQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type contentprogressPager struct {
	reverse bool
	order   *ContentProgressOrder
	filter  func(*ContentProgressQuery) (*ContentProgressQuery, error)
}

func newContentProgressPager(opts []ContentProgressPaginateOption, reverse bool) (*contentprogressPager, error) {
	pager := &contentprogressPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultContentProgressOrder
	}
	return pager, nil
}

func (p *contentprogressPager) applyFilter(query *ContentProgressQuery) (*ContentProgressQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *contentprogressPager) toCursor(cp *ContentProgress) Cursor {
	return p.order.Field.toCursor(cp)
}

func (p *contentprogressPager) applyCursors(query *ContentProgressQuery, after, before *Cursor) (*ContentProgressQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultContentProgressOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *contentprogressPager) applyOrder(query *ContentProgressQuery) *ContentProgressQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultContentProgressOrder.Field {
		query = query.Order(DefaultContentProgressOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *contentprogressPager) orderExpr(query *ContentProgressQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultContentProgressOrder.Field {
			b.Comma().Ident(DefaultContentProgressOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ContentProgress.
func (cp *ContentProgressQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ContentProgressPaginateOption,
) (*ContentProgressConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newContentProgressPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cp, err = pager.applyFilter(cp); err != nil {
		return nil, err
	}
	conn := &ContentProgressConnection{Edges: []*ContentProgressEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := cp.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cp, err = pager.applyCursors(cp, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		cp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cp.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cp = pager.applyOrder(cp)
	nodes, err := cp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ContentProgressOrderField defines the ordering field of ContentProgress.
type ContentProgressOrderField struct {
	// Value extracts the ordering value from the given ContentProgress.
	Value    func(*ContentProgress) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) contentprogress.OrderOption
	toCursor func(*ContentProgress) Cursor
}

// ContentProgressOrder defines the ordering of ContentProgress.
type ContentProgressOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *ContentProgressOrderField `json:"field"`
}

// DefaultContentProgressOrder is the default ordering of ContentProgress.
var DefaultContentProgressOrder = &ContentProgressOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ContentProgressOrderField{
		Value: func(cp *ContentProgress) (ent.Value, error) {
			return cp.ID, nil
		},
		column: contentprogress.FieldID,
		toTerm: contentprogress.ByID,
		toCursor: func(cp *ContentProgress) Cursor {
			return Cursor{ID: cp.marshalID()}
		},
	},
}

// ToEdge converts ContentProgress into ContentProgressEdge.
func (cp *ContentProgress) ToEdge(order *ContentProgressOrder) *ContentProgressEdge {
	if order == nil {
		order = DefaultContentProgressOrder
	}
	return &ContentProgressEdge{
		Node:   cp,
		Cursor: order.Field.toCursor(cp),
	}
}

// CourseEdge is the edge representation of Course.
type CourseEdge struct {
	Node   *Course `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// CourseConnection is the connection containing edges to Course.
type CourseConnection struct {
	Edges      []*CourseEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *CourseConnection) build(nodes []*Course, pager *coursePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Course
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Course {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Course {
			return nodes[i]
		}
	}
	c.Edges = make([]*CourseEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CourseEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CoursePaginateOption enables pagination customization.
type CoursePaginateOption func(*coursePager) error

// WithCourseOrder configures pagination ordering.
func WithCourseOrder(order *CourseOrder) CoursePaginateOption {
	if order == nil {
		order = DefaultCourseOrder
	}
	o := *order
	return func(pager *coursePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCourseOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCourseFilter configures pagination filter.
func WithCourseFilter(filter func(*CourseQuery) (*CourseQuery, error)) CoursePaginateOption {
	return func(pager *coursePager) error {
		if filter == nil {
			return errors.New("CourseQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type coursePager struct {
	reverse bool
	order   *CourseOrder
	filter  func(*CourseQuery) (*CourseQuery, error)
}

func newCoursePager(opts []CoursePaginateOption, reverse bool) (*coursePager, error) {
	pager := &coursePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCourseOrder
	}
	return pager, nil
}

func (p *coursePager) applyFilter(query *CourseQuery) (*CourseQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *coursePager) toCursor(c *Course) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *coursePager) applyCursors(query *CourseQuery, after, before *Cursor) (*CourseQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCourseOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *coursePager) applyOrder(query *CourseQuery) *CourseQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCourseOrder.Field {
		query = query.Order(DefaultCourseOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *coursePager) orderExpr(query *CourseQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCourseOrder.Field {
			b.Comma().Ident(DefaultCourseOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Course.
func (c *CourseQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CoursePaginateOption,
) (*CourseConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCoursePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CourseConnection{Edges: []*CourseEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CourseOrderFieldOrder orders Course by order.
	CourseOrderFieldOrder = &CourseOrderField{
		Value: func(c *Course) (ent.Value, error) {
			return c.Order, nil
		},
		column: course.FieldOrder,
		toTerm: course.ByOrder,
		toCursor: func(c *Course) Cursor {
			return Cursor{
				ID:    c.marshalID(),
				Value: c.Order,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CourseOrderField) String() string {
	var str string
	switch f.column {
	case CourseOrderFieldOrder.column:
		str = "ORDER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CourseOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CourseOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CourseOrderField %T must be a string", v)
	}
	switch str {
	case "ORDER":
		*f = *CourseOrderFieldOrder
	default:
		return fmt.Errorf("%s is not a valid CourseOrderField", str)
	}
	return nil
}

// CourseOrderField defines the ordering field of Course.
type CourseOrderField struct {
	// Value extracts the ordering value from the given Course.
	Value    func(*Course) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) course.OrderOption
	toCursor func(*Course) Cursor
}

// CourseOrder defines the ordering of Course.
type CourseOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *CourseOrderField `json:"field"`
}

// DefaultCourseOrder is the default ordering of Course.
var DefaultCourseOrder = &CourseOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CourseOrderField{
		Value: func(c *Course) (ent.Value, error) {
			return c.ID, nil
		},
		column: course.FieldID,
		toTerm: course.ByID,
		toCursor: func(c *Course) Cursor {
			return Cursor{ID: c.marshalID()}
		},
	},
}

// ToEdge converts Course into CourseEdge.
func (c *Course) ToEdge(order *CourseOrder) *CourseEdge {
	if order == nil {
		order = DefaultCourseOrder
	}
	return &CourseEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// JournalRecordEdge is the edge representation of JournalRecord.
type JournalRecordEdge struct {
	Node   *JournalRecord `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// JournalRecordConnection is the connection containing edges to JournalRecord.
type JournalRecordConnection struct {
	Edges      []*JournalRecordEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *JournalRecordConnection) build(nodes []*JournalRecord, pager *journalrecordPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *JournalRecord
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *JournalRecord {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *JournalRecord {
			return nodes[i]
		}
	}
	c.Edges = make([]*JournalRecordEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &JournalRecordEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// JournalRecordPaginateOption enables pagination customization.
type JournalRecordPaginateOption func(*journalrecordPager) error

// WithJournalRecordOrder configures pagination ordering.
func WithJournalRecordOrder(order *JournalRecordOrder) JournalRecordPaginateOption {
	if order == nil {
		order = DefaultJournalRecordOrder
	}
	o := *order
	return func(pager *journalrecordPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultJournalRecordOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithJournalRecordFilter configures pagination filter.
func WithJournalRecordFilter(filter func(*JournalRecordQuery) (*JournalRecordQuery, error)) JournalRecordPaginateOption {
	return func(pager *journalrecordPager) error {
		if filter == nil {
			return errors.New("JournalRecordQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type journalrecordPager struct {
	reverse bool
	order   *JournalRecordOrder
	filter  func(*JournalRecordQuery) (*JournalRecordQuery, error)
}

func newJournalRecordPager(opts []JournalRecordPaginateOption, reverse bool) (*journalrecordPager, error) {
	pager := &journalrecordPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultJournalRecordOrder
	}
	return pager, nil
}

func (p *journalrecordPager) applyFilter(query *JournalRecordQuery) (*JournalRecordQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *journalrecordPager) toCursor(jr *JournalRecord) Cursor {
	return p.order.Field.toCursor(jr)
}

func (p *journalrecordPager) applyCursors(query *JournalRecordQuery, after, before *Cursor) (*JournalRecordQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultJournalRecordOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *journalrecordPager) applyOrder(query *JournalRecordQuery) *JournalRecordQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultJournalRecordOrder.Field {
		query = query.Order(DefaultJournalRecordOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *journalrecordPager) orderExpr(query *JournalRecordQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultJournalRecordOrder.Field {
			b.Comma().Ident(DefaultJournalRecordOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to JournalRecord.
func (jr *JournalRecordQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...JournalRecordPaginateOption,
) (*JournalRecordConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newJournalRecordPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if jr, err = pager.applyFilter(jr); err != nil {
		return nil, err
	}
	conn := &JournalRecordConnection{Edges: []*JournalRecordEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := jr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if jr, err = pager.applyCursors(jr, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		jr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := jr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	jr = pager.applyOrder(jr)
	nodes, err := jr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// JournalRecordOrderFieldDateTime orders JournalRecord by dateTime.
	JournalRecordOrderFieldDateTime = &JournalRecordOrderField{
		Value: func(jr *JournalRecord) (ent.Value, error) {
			return jr.DateTime, nil
		},
		column: journalrecord.FieldDateTime,
		toTerm: journalrecord.ByDateTime,
		toCursor: func(jr *JournalRecord) Cursor {
			return Cursor{
				ID:    jr.marshalID(),
				Value: jr.DateTime,
			}
		},
	}
	// JournalRecordOrderFieldCreatedAt orders JournalRecord by createdAt.
	JournalRecordOrderFieldCreatedAt = &JournalRecordOrderField{
		Value: func(jr *JournalRecord) (ent.Value, error) {
			return jr.CreatedAt, nil
		},
		column: journalrecord.FieldCreatedAt,
		toTerm: journalrecord.ByCreatedAt,
		toCursor: func(jr *JournalRecord) Cursor {
			return Cursor{
				ID:    jr.marshalID(),
				Value: jr.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f JournalRecordOrderField) String() string {
	var str string
	switch f.column {
	case JournalRecordOrderFieldDateTime.column:
		str = "DATE_TIME"
	case JournalRecordOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f JournalRecordOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *JournalRecordOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("JournalRecordOrderField %T must be a string", v)
	}
	switch str {
	case "DATE_TIME":
		*f = *JournalRecordOrderFieldDateTime
	case "CREATED_AT":
		*f = *JournalRecordOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid JournalRecordOrderField", str)
	}
	return nil
}

// JournalRecordOrderField defines the ordering field of JournalRecord.
type JournalRecordOrderField struct {
	// Value extracts the ordering value from the given JournalRecord.
	Value    func(*JournalRecord) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) journalrecord.OrderOption
	toCursor func(*JournalRecord) Cursor
}

// JournalRecordOrder defines the ordering of JournalRecord.
type JournalRecordOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *JournalRecordOrderField `json:"field"`
}

// DefaultJournalRecordOrder is the default ordering of JournalRecord.
var DefaultJournalRecordOrder = &JournalRecordOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &JournalRecordOrderField{
		Value: func(jr *JournalRecord) (ent.Value, error) {
			return jr.ID, nil
		},
		column: journalrecord.FieldID,
		toTerm: journalrecord.ByID,
		toCursor: func(jr *JournalRecord) Cursor {
			return Cursor{ID: jr.marshalID()}
		},
	},
}

// ToEdge converts JournalRecord into JournalRecordEdge.
func (jr *JournalRecord) ToEdge(order *JournalRecordOrder) *JournalRecordEdge {
	if order == nil {
		order = DefaultJournalRecordOrder
	}
	return &JournalRecordEdge{
		Node:   jr,
		Cursor: order.Field.toCursor(jr),
	}
}

// LessonEdge is the edge representation of Lesson.
type LessonEdge struct {
	Node   *Lesson `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// LessonConnection is the connection containing edges to Lesson.
type LessonConnection struct {
	Edges      []*LessonEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *LessonConnection) build(nodes []*Lesson, pager *lessonPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Lesson
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Lesson {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Lesson {
			return nodes[i]
		}
	}
	c.Edges = make([]*LessonEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LessonEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LessonPaginateOption enables pagination customization.
type LessonPaginateOption func(*lessonPager) error

// WithLessonOrder configures pagination ordering.
func WithLessonOrder(order *LessonOrder) LessonPaginateOption {
	if order == nil {
		order = DefaultLessonOrder
	}
	o := *order
	return func(pager *lessonPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLessonOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLessonFilter configures pagination filter.
func WithLessonFilter(filter func(*LessonQuery) (*LessonQuery, error)) LessonPaginateOption {
	return func(pager *lessonPager) error {
		if filter == nil {
			return errors.New("LessonQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type lessonPager struct {
	reverse bool
	order   *LessonOrder
	filter  func(*LessonQuery) (*LessonQuery, error)
}

func newLessonPager(opts []LessonPaginateOption, reverse bool) (*lessonPager, error) {
	pager := &lessonPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLessonOrder
	}
	return pager, nil
}

func (p *lessonPager) applyFilter(query *LessonQuery) (*LessonQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *lessonPager) toCursor(l *Lesson) Cursor {
	return p.order.Field.toCursor(l)
}

func (p *lessonPager) applyCursors(query *LessonQuery, after, before *Cursor) (*LessonQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLessonOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *lessonPager) applyOrder(query *LessonQuery) *LessonQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLessonOrder.Field {
		query = query.Order(DefaultLessonOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *lessonPager) orderExpr(query *LessonQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLessonOrder.Field {
			b.Comma().Ident(DefaultLessonOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Lesson.
func (l *LessonQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LessonPaginateOption,
) (*LessonConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLessonPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if l, err = pager.applyFilter(l); err != nil {
		return nil, err
	}
	conn := &LessonConnection{Edges: []*LessonEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := l.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if l, err = pager.applyCursors(l, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		l.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := l.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	l = pager.applyOrder(l)
	nodes, err := l.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// LessonOrderFieldOrder orders Lesson by order.
	LessonOrderFieldOrder = &LessonOrderField{
		Value: func(l *Lesson) (ent.Value, error) {
			return l.Order, nil
		},
		column: lesson.FieldOrder,
		toTerm: lesson.ByOrder,
		toCursor: func(l *Lesson) Cursor {
			return Cursor{
				ID:    l.marshalID(),
				Value: l.Order,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f LessonOrderField) String() string {
	var str string
	switch f.column {
	case LessonOrderFieldOrder.column:
		str = "ORDER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f LessonOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *LessonOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("LessonOrderField %T must be a string", v)
	}
	switch str {
	case "ORDER":
		*f = *LessonOrderFieldOrder
	default:
		return fmt.Errorf("%s is not a valid LessonOrderField", str)
	}
	return nil
}

// LessonOrderField defines the ordering field of Lesson.
type LessonOrderField struct {
	// Value extracts the ordering value from the given Lesson.
	Value    func(*Lesson) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) lesson.OrderOption
	toCursor func(*Lesson) Cursor
}

// LessonOrder defines the ordering of Lesson.
type LessonOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *LessonOrderField `json:"field"`
}

// DefaultLessonOrder is the default ordering of Lesson.
var DefaultLessonOrder = &LessonOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LessonOrderField{
		Value: func(l *Lesson) (ent.Value, error) {
			return l.ID, nil
		},
		column: lesson.FieldID,
		toTerm: lesson.ByID,
		toCursor: func(l *Lesson) Cursor {
			return Cursor{ID: l.marshalID()}
		},
	},
}

// ToEdge converts Lesson into LessonEdge.
func (l *Lesson) ToEdge(order *LessonOrder) *LessonEdge {
	if order == nil {
		order = DefaultLessonOrder
	}
	return &LessonEdge{
		Node:   l,
		Cursor: order.Field.toCursor(l),
	}
}

// LessonAudioEdge is the edge representation of LessonAudio.
type LessonAudioEdge struct {
	Node   *LessonAudio `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// LessonAudioConnection is the connection containing edges to LessonAudio.
type LessonAudioConnection struct {
	Edges      []*LessonAudioEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *LessonAudioConnection) build(nodes []*LessonAudio, pager *lessonaudioPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *LessonAudio
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *LessonAudio {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *LessonAudio {
			return nodes[i]
		}
	}
	c.Edges = make([]*LessonAudioEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LessonAudioEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LessonAudioPaginateOption enables pagination customization.
type LessonAudioPaginateOption func(*lessonaudioPager) error

// WithLessonAudioOrder configures pagination ordering.
func WithLessonAudioOrder(order *LessonAudioOrder) LessonAudioPaginateOption {
	if order == nil {
		order = DefaultLessonAudioOrder
	}
	o := *order
	return func(pager *lessonaudioPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLessonAudioOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLessonAudioFilter configures pagination filter.
func WithLessonAudioFilter(filter func(*LessonAudioQuery) (*LessonAudioQuery, error)) LessonAudioPaginateOption {
	return func(pager *lessonaudioPager) error {
		if filter == nil {
			return errors.New("LessonAudioQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type lessonaudioPager struct {
	reverse bool
	order   *LessonAudioOrder
	filter  func(*LessonAudioQuery) (*LessonAudioQuery, error)
}

func newLessonAudioPager(opts []LessonAudioPaginateOption, reverse bool) (*lessonaudioPager, error) {
	pager := &lessonaudioPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLessonAudioOrder
	}
	return pager, nil
}

func (p *lessonaudioPager) applyFilter(query *LessonAudioQuery) (*LessonAudioQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *lessonaudioPager) toCursor(la *LessonAudio) Cursor {
	return p.order.Field.toCursor(la)
}

func (p *lessonaudioPager) applyCursors(query *LessonAudioQuery, after, before *Cursor) (*LessonAudioQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLessonAudioOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *lessonaudioPager) applyOrder(query *LessonAudioQuery) *LessonAudioQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLessonAudioOrder.Field {
		query = query.Order(DefaultLessonAudioOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *lessonaudioPager) orderExpr(query *LessonAudioQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLessonAudioOrder.Field {
			b.Comma().Ident(DefaultLessonAudioOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to LessonAudio.
func (la *LessonAudioQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LessonAudioPaginateOption,
) (*LessonAudioConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLessonAudioPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if la, err = pager.applyFilter(la); err != nil {
		return nil, err
	}
	conn := &LessonAudioConnection{Edges: []*LessonAudioEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := la.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if la, err = pager.applyCursors(la, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		la.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := la.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	la = pager.applyOrder(la)
	nodes, err := la.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// LessonAudioOrderFieldDuration orders LessonAudio by duration.
	LessonAudioOrderFieldDuration = &LessonAudioOrderField{
		Value: func(la *LessonAudio) (ent.Value, error) {
			return la.Duration, nil
		},
		column: lessonaudio.FieldDuration,
		toTerm: lessonaudio.ByDuration,
		toCursor: func(la *LessonAudio) Cursor {
			return Cursor{
				ID:    la.marshalID(),
				Value: la.Duration,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f LessonAudioOrderField) String() string {
	var str string
	switch f.column {
	case LessonAudioOrderFieldDuration.column:
		str = "DURATION"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f LessonAudioOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *LessonAudioOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("LessonAudioOrderField %T must be a string", v)
	}
	switch str {
	case "DURATION":
		*f = *LessonAudioOrderFieldDuration
	default:
		return fmt.Errorf("%s is not a valid LessonAudioOrderField", str)
	}
	return nil
}

// LessonAudioOrderField defines the ordering field of LessonAudio.
type LessonAudioOrderField struct {
	// Value extracts the ordering value from the given LessonAudio.
	Value    func(*LessonAudio) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) lessonaudio.OrderOption
	toCursor func(*LessonAudio) Cursor
}

// LessonAudioOrder defines the ordering of LessonAudio.
type LessonAudioOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *LessonAudioOrderField `json:"field"`
}

// DefaultLessonAudioOrder is the default ordering of LessonAudio.
var DefaultLessonAudioOrder = &LessonAudioOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LessonAudioOrderField{
		Value: func(la *LessonAudio) (ent.Value, error) {
			return la.ID, nil
		},
		column: lessonaudio.FieldID,
		toTerm: lessonaudio.ByID,
		toCursor: func(la *LessonAudio) Cursor {
			return Cursor{ID: la.marshalID()}
		},
	},
}

// ToEdge converts LessonAudio into LessonAudioEdge.
func (la *LessonAudio) ToEdge(order *LessonAudioOrder) *LessonAudioEdge {
	if order == nil {
		order = DefaultLessonAudioOrder
	}
	return &LessonAudioEdge{
		Node:   la,
		Cursor: order.Field.toCursor(la),
	}
}

// TechniqueEdge is the edge representation of Technique.
type TechniqueEdge struct {
	Node   *Technique `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// TechniqueConnection is the connection containing edges to Technique.
type TechniqueConnection struct {
	Edges      []*TechniqueEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *TechniqueConnection) build(nodes []*Technique, pager *techniquePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Technique
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Technique {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Technique {
			return nodes[i]
		}
	}
	c.Edges = make([]*TechniqueEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TechniqueEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TechniquePaginateOption enables pagination customization.
type TechniquePaginateOption func(*techniquePager) error

// WithTechniqueOrder configures pagination ordering.
func WithTechniqueOrder(order *TechniqueOrder) TechniquePaginateOption {
	if order == nil {
		order = DefaultTechniqueOrder
	}
	o := *order
	return func(pager *techniquePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTechniqueOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTechniqueFilter configures pagination filter.
func WithTechniqueFilter(filter func(*TechniqueQuery) (*TechniqueQuery, error)) TechniquePaginateOption {
	return func(pager *techniquePager) error {
		if filter == nil {
			return errors.New("TechniqueQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type techniquePager struct {
	reverse bool
	order   *TechniqueOrder
	filter  func(*TechniqueQuery) (*TechniqueQuery, error)
}

func newTechniquePager(opts []TechniquePaginateOption, reverse bool) (*techniquePager, error) {
	pager := &techniquePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTechniqueOrder
	}
	return pager, nil
}

func (p *techniquePager) applyFilter(query *TechniqueQuery) (*TechniqueQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *techniquePager) toCursor(t *Technique) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *techniquePager) applyCursors(query *TechniqueQuery, after, before *Cursor) (*TechniqueQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTechniqueOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *techniquePager) applyOrder(query *TechniqueQuery) *TechniqueQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTechniqueOrder.Field {
		query = query.Order(DefaultTechniqueOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *techniquePager) orderExpr(query *TechniqueQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTechniqueOrder.Field {
			b.Comma().Ident(DefaultTechniqueOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Technique.
func (t *TechniqueQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TechniquePaginateOption,
) (*TechniqueConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTechniquePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TechniqueConnection{Edges: []*TechniqueEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := t.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if t, err = pager.applyCursors(t, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	t = pager.applyOrder(t)
	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TechniqueOrderFieldOrder orders Technique by order.
	TechniqueOrderFieldOrder = &TechniqueOrderField{
		Value: func(t *Technique) (ent.Value, error) {
			return t.Order, nil
		},
		column: technique.FieldOrder,
		toTerm: technique.ByOrder,
		toCursor: func(t *Technique) Cursor {
			return Cursor{
				ID:    t.marshalID(),
				Value: t.Order,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TechniqueOrderField) String() string {
	var str string
	switch f.column {
	case TechniqueOrderFieldOrder.column:
		str = "ORDER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TechniqueOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TechniqueOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TechniqueOrderField %T must be a string", v)
	}
	switch str {
	case "ORDER":
		*f = *TechniqueOrderFieldOrder
	default:
		return fmt.Errorf("%s is not a valid TechniqueOrderField", str)
	}
	return nil
}

// TechniqueOrderField defines the ordering field of Technique.
type TechniqueOrderField struct {
	// Value extracts the ordering value from the given Technique.
	Value    func(*Technique) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) technique.OrderOption
	toCursor func(*Technique) Cursor
}

// TechniqueOrder defines the ordering of Technique.
type TechniqueOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *TechniqueOrderField `json:"field"`
}

// DefaultTechniqueOrder is the default ordering of Technique.
var DefaultTechniqueOrder = &TechniqueOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TechniqueOrderField{
		Value: func(t *Technique) (ent.Value, error) {
			return t.ID, nil
		},
		column: technique.FieldID,
		toTerm: technique.ByID,
		toCursor: func(t *Technique) Cursor {
			return Cursor{ID: t.marshalID()}
		},
	},
}

// ToEdge converts Technique into TechniqueEdge.
func (t *Technique) ToEdge(order *TechniqueOrder) *TechniqueEdge {
	if order == nil {
		order = DefaultTechniqueOrder
	}
	return &TechniqueEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// UnitEdge is the edge representation of Unit.
type UnitEdge struct {
	Node   *Unit  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UnitConnection is the connection containing edges to Unit.
type UnitConnection struct {
	Edges      []*UnitEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UnitConnection) build(nodes []*Unit, pager *unitPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Unit
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Unit {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Unit {
			return nodes[i]
		}
	}
	c.Edges = make([]*UnitEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UnitEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UnitPaginateOption enables pagination customization.
type UnitPaginateOption func(*unitPager) error

// WithUnitOrder configures pagination ordering.
func WithUnitOrder(order *UnitOrder) UnitPaginateOption {
	if order == nil {
		order = DefaultUnitOrder
	}
	o := *order
	return func(pager *unitPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUnitOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUnitFilter configures pagination filter.
func WithUnitFilter(filter func(*UnitQuery) (*UnitQuery, error)) UnitPaginateOption {
	return func(pager *unitPager) error {
		if filter == nil {
			return errors.New("UnitQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type unitPager struct {
	reverse bool
	order   *UnitOrder
	filter  func(*UnitQuery) (*UnitQuery, error)
}

func newUnitPager(opts []UnitPaginateOption, reverse bool) (*unitPager, error) {
	pager := &unitPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUnitOrder
	}
	return pager, nil
}

func (p *unitPager) applyFilter(query *UnitQuery) (*UnitQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *unitPager) toCursor(u *Unit) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *unitPager) applyCursors(query *UnitQuery, after, before *Cursor) (*UnitQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUnitOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *unitPager) applyOrder(query *UnitQuery) *UnitQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUnitOrder.Field {
		query = query.Order(DefaultUnitOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *unitPager) orderExpr(query *UnitQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUnitOrder.Field {
			b.Comma().Ident(DefaultUnitOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Unit.
func (u *UnitQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UnitPaginateOption,
) (*UnitConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUnitPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UnitConnection{Edges: []*UnitEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UnitOrderFieldOrder orders Unit by order.
	UnitOrderFieldOrder = &UnitOrderField{
		Value: func(u *Unit) (ent.Value, error) {
			return u.Order, nil
		},
		column: unit.FieldOrder,
		toTerm: unit.ByOrder,
		toCursor: func(u *Unit) Cursor {
			return Cursor{
				ID:    u.marshalID(),
				Value: u.Order,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UnitOrderField) String() string {
	var str string
	switch f.column {
	case UnitOrderFieldOrder.column:
		str = "ORDER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UnitOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UnitOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UnitOrderField %T must be a string", v)
	}
	switch str {
	case "ORDER":
		*f = *UnitOrderFieldOrder
	default:
		return fmt.Errorf("%s is not a valid UnitOrderField", str)
	}
	return nil
}

// UnitOrderField defines the ordering field of Unit.
type UnitOrderField struct {
	// Value extracts the ordering value from the given Unit.
	Value    func(*Unit) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) unit.OrderOption
	toCursor func(*Unit) Cursor
}

// UnitOrder defines the ordering of Unit.
type UnitOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UnitOrderField `json:"field"`
}

// DefaultUnitOrder is the default ordering of Unit.
var DefaultUnitOrder = &UnitOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UnitOrderField{
		Value: func(u *Unit) (ent.Value, error) {
			return u.ID, nil
		},
		column: unit.FieldID,
		toTerm: unit.ByID,
		toCursor: func(u *Unit) Cursor {
			return Cursor{ID: u.marshalID()}
		},
	},
}

// ToEdge converts Unit into UnitEdge.
func (u *Unit) ToEdge(order *UnitOrder) *UnitEdge {
	if order == nil {
		order = DefaultUnitOrder
	}
	return &UnitEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by createdAt.
	UserOrderFieldCreatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.CreatedAt, nil
		},
		column: user.FieldCreatedAt,
		toTerm: user.ByCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.marshalID(),
				Value: u.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.column {
	case UserOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.marshalID()}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// UserProgressEdge is the edge representation of UserProgress.
type UserProgressEdge struct {
	Node   *UserProgress `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// UserProgressConnection is the connection containing edges to UserProgress.
type UserProgressConnection struct {
	Edges      []*UserProgressEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *UserProgressConnection) build(nodes []*UserProgress, pager *userprogressPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserProgress
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserProgress {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserProgress {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserProgressEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserProgressEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserProgressPaginateOption enables pagination customization.
type UserProgressPaginateOption func(*userprogressPager) error

// WithUserProgressOrder configures pagination ordering.
func WithUserProgressOrder(order *UserProgressOrder) UserProgressPaginateOption {
	if order == nil {
		order = DefaultUserProgressOrder
	}
	o := *order
	return func(pager *userprogressPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserProgressOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserProgressFilter configures pagination filter.
func WithUserProgressFilter(filter func(*UserProgressQuery) (*UserProgressQuery, error)) UserProgressPaginateOption {
	return func(pager *userprogressPager) error {
		if filter == nil {
			return errors.New("UserProgressQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userprogressPager struct {
	reverse bool
	order   *UserProgressOrder
	filter  func(*UserProgressQuery) (*UserProgressQuery, error)
}

func newUserProgressPager(opts []UserProgressPaginateOption, reverse bool) (*userprogressPager, error) {
	pager := &userprogressPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserProgressOrder
	}
	return pager, nil
}

func (p *userprogressPager) applyFilter(query *UserProgressQuery) (*UserProgressQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userprogressPager) toCursor(up *UserProgress) Cursor {
	return p.order.Field.toCursor(up)
}

func (p *userprogressPager) applyCursors(query *UserProgressQuery, after, before *Cursor) (*UserProgressQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserProgressOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userprogressPager) applyOrder(query *UserProgressQuery) *UserProgressQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserProgressOrder.Field {
		query = query.Order(DefaultUserProgressOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userprogressPager) orderExpr(query *UserProgressQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserProgressOrder.Field {
			b.Comma().Ident(DefaultUserProgressOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserProgress.
func (up *UserProgressQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserProgressPaginateOption,
) (*UserProgressConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserProgressPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if up, err = pager.applyFilter(up); err != nil {
		return nil, err
	}
	conn := &UserProgressConnection{Edges: []*UserProgressEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := up.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if up, err = pager.applyCursors(up, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		up.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := up.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	up = pager.applyOrder(up)
	nodes, err := up.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserProgressOrderFieldFinishedAt orders UserProgress by finishedAt.
	UserProgressOrderFieldFinishedAt = &UserProgressOrderField{
		Value: func(up *UserProgress) (ent.Value, error) {
			return up.FinishedAt, nil
		},
		column: userprogress.FieldFinishedAt,
		toTerm: userprogress.ByFinishedAt,
		toCursor: func(up *UserProgress) Cursor {
			return Cursor{
				ID:    up.marshalID(),
				Value: up.FinishedAt,
			}
		},
	}
	// UserProgressOrderFieldCreatedAt orders UserProgress by createdAt.
	UserProgressOrderFieldCreatedAt = &UserProgressOrderField{
		Value: func(up *UserProgress) (ent.Value, error) {
			return up.CreatedAt, nil
		},
		column: userprogress.FieldCreatedAt,
		toTerm: userprogress.ByCreatedAt,
		toCursor: func(up *UserProgress) Cursor {
			return Cursor{
				ID:    up.marshalID(),
				Value: up.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserProgressOrderField) String() string {
	var str string
	switch f.column {
	case UserProgressOrderFieldFinishedAt.column:
		str = "FINISHED_AT"
	case UserProgressOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserProgressOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserProgressOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserProgressOrderField %T must be a string", v)
	}
	switch str {
	case "FINISHED_AT":
		*f = *UserProgressOrderFieldFinishedAt
	case "CREATED_AT":
		*f = *UserProgressOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserProgressOrderField", str)
	}
	return nil
}

// UserProgressOrderField defines the ordering field of UserProgress.
type UserProgressOrderField struct {
	// Value extracts the ordering value from the given UserProgress.
	Value    func(*UserProgress) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) userprogress.OrderOption
	toCursor func(*UserProgress) Cursor
}

// UserProgressOrder defines the ordering of UserProgress.
type UserProgressOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *UserProgressOrderField `json:"field"`
}

// DefaultUserProgressOrder is the default ordering of UserProgress.
var DefaultUserProgressOrder = &UserProgressOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserProgressOrderField{
		Value: func(up *UserProgress) (ent.Value, error) {
			return up.ID, nil
		},
		column: userprogress.FieldID,
		toTerm: userprogress.ByID,
		toCursor: func(up *UserProgress) Cursor {
			return Cursor{ID: up.marshalID()}
		},
	},
}

// ToEdge converts UserProgress into UserProgressEdge.
func (up *UserProgress) ToEdge(order *UserProgressOrder) *UserProgressEdge {
	if order == nil {
		order = DefaultUserProgressOrder
	}
	return &UserProgressEdge{
		Node:   up,
		Cursor: order.Field.toCursor(up),
	}
}
