// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/jhana-app/jhana-app/ent/property"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirebaseUid holds the string denoting the firebaseuid field in the database.
	FieldFirebaseUid = "firebase_uid"
	// FieldDisplayName holds the string denoting the displayname field in the database.
	FieldDisplayName = "display_name"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAuthMethod holds the string denoting the auth_method field in the database.
	FieldAuthMethod = "auth_method"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldEmailVerified holds the string denoting the email_verified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFirebaseUid,
	FieldDisplayName,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAuthMethod,
	FieldEmail,
	FieldEmailVerified,
	FieldPassword,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DisplayNameValidator is a validator for the "displayName" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultEmailVerified holds the default value on creation for the "email_verified" field.
	DefaultEmailVerified bool
)

const DefaultAuthMethod property.AuthMethod = "firebase"

// AuthMethodValidator is a validator for the "auth_method" field enum values. It is called by the builders before save.
func AuthMethodValidator(am property.AuthMethod) error {
	switch am {
	case "local", "firebase":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for auth_method field: %q", am)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirebaseUid orders the results by the firebaseUid field.
func ByFirebaseUid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirebaseUid, opts...).ToFunc()
}

// ByDisplayName orders the results by the displayName field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAuthMethod orders the results by the auth_method field.
func ByAuthMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthMethod, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByEmailVerified orders the results by the email_verified field.
func ByEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailVerified, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

var (
	// property.AuthMethod must implement graphql.Marshaler.
	_ graphql.Marshaler = (*property.AuthMethod)(nil)
	// property.AuthMethod must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*property.AuthMethod)(nil)
)
