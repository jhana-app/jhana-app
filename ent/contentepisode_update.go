// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/contentepisode"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/property"
)

// ContentEpisodeUpdate is the builder for updating ContentEpisode entities.
type ContentEpisodeUpdate struct {
	config
	hooks     []Hook
	mutation  *ContentEpisodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ContentEpisodeUpdate builder.
func (ceu *ContentEpisodeUpdate) Where(ps ...predicate.ContentEpisode) *ContentEpisodeUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetType sets the "type" field.
func (ceu *ContentEpisodeUpdate) SetType(pt property.ContentType) *ContentEpisodeUpdate {
	ceu.mutation.SetType(pt)
	return ceu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableType(pt *property.ContentType) *ContentEpisodeUpdate {
	if pt != nil {
		ceu.SetType(*pt)
	}
	return ceu
}

// SetTitle sets the "title" field.
func (ceu *ContentEpisodeUpdate) SetTitle(s string) *ContentEpisodeUpdate {
	ceu.mutation.SetTitle(s)
	return ceu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableTitle(s *string) *ContentEpisodeUpdate {
	if s != nil {
		ceu.SetTitle(*s)
	}
	return ceu
}

// SetSubtitle sets the "subtitle" field.
func (ceu *ContentEpisodeUpdate) SetSubtitle(s string) *ContentEpisodeUpdate {
	ceu.mutation.SetSubtitle(s)
	return ceu
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableSubtitle(s *string) *ContentEpisodeUpdate {
	if s != nil {
		ceu.SetSubtitle(*s)
	}
	return ceu
}

// SetDescription sets the "description" field.
func (ceu *ContentEpisodeUpdate) SetDescription(s string) *ContentEpisodeUpdate {
	ceu.mutation.SetDescription(s)
	return ceu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableDescription(s *string) *ContentEpisodeUpdate {
	if s != nil {
		ceu.SetDescription(*s)
	}
	return ceu
}

// SetDuration sets the "duration" field.
func (ceu *ContentEpisodeUpdate) SetDuration(i int) *ContentEpisodeUpdate {
	ceu.mutation.ResetDuration()
	ceu.mutation.SetDuration(i)
	return ceu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableDuration(i *int) *ContentEpisodeUpdate {
	if i != nil {
		ceu.SetDuration(*i)
	}
	return ceu
}

// AddDuration adds i to the "duration" field.
func (ceu *ContentEpisodeUpdate) AddDuration(i int) *ContentEpisodeUpdate {
	ceu.mutation.AddDuration(i)
	return ceu
}

// SetStreamURL sets the "streamURL" field.
func (ceu *ContentEpisodeUpdate) SetStreamURL(s string) *ContentEpisodeUpdate {
	ceu.mutation.SetStreamURL(s)
	return ceu
}

// SetNillableStreamURL sets the "streamURL" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableStreamURL(s *string) *ContentEpisodeUpdate {
	if s != nil {
		ceu.SetStreamURL(*s)
	}
	return ceu
}

// SetDownloadURL sets the "downloadURL" field.
func (ceu *ContentEpisodeUpdate) SetDownloadURL(s string) *ContentEpisodeUpdate {
	ceu.mutation.SetDownloadURL(s)
	return ceu
}

// SetNillableDownloadURL sets the "downloadURL" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableDownloadURL(s *string) *ContentEpisodeUpdate {
	if s != nil {
		ceu.SetDownloadURL(*s)
	}
	return ceu
}

// SetSource sets the "source" field.
func (ceu *ContentEpisodeUpdate) SetSource(s string) *ContentEpisodeUpdate {
	ceu.mutation.SetSource(s)
	return ceu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableSource(s *string) *ContentEpisodeUpdate {
	if s != nil {
		ceu.SetSource(*s)
	}
	return ceu
}

// SetSourceURL sets the "sourceURL" field.
func (ceu *ContentEpisodeUpdate) SetSourceURL(s string) *ContentEpisodeUpdate {
	ceu.mutation.SetSourceURL(s)
	return ceu
}

// SetNillableSourceURL sets the "sourceURL" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableSourceURL(s *string) *ContentEpisodeUpdate {
	if s != nil {
		ceu.SetSourceURL(*s)
	}
	return ceu
}

// SetLicence sets the "licence" field.
func (ceu *ContentEpisodeUpdate) SetLicence(s string) *ContentEpisodeUpdate {
	ceu.mutation.SetLicence(s)
	return ceu
}

// SetNillableLicence sets the "licence" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableLicence(s *string) *ContentEpisodeUpdate {
	if s != nil {
		ceu.SetLicence(*s)
	}
	return ceu
}

// SetLicenceURL sets the "licenceURL" field.
func (ceu *ContentEpisodeUpdate) SetLicenceURL(s string) *ContentEpisodeUpdate {
	ceu.mutation.SetLicenceURL(s)
	return ceu
}

// SetNillableLicenceURL sets the "licenceURL" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableLicenceURL(s *string) *ContentEpisodeUpdate {
	if s != nil {
		ceu.SetLicenceURL(*s)
	}
	return ceu
}

// SetIsHidden sets the "isHidden" field.
func (ceu *ContentEpisodeUpdate) SetIsHidden(b bool) *ContentEpisodeUpdate {
	ceu.mutation.SetIsHidden(b)
	return ceu
}

// SetNillableIsHidden sets the "isHidden" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableIsHidden(b *bool) *ContentEpisodeUpdate {
	if b != nil {
		ceu.SetIsHidden(*b)
	}
	return ceu
}

// SetOrder sets the "order" field.
func (ceu *ContentEpisodeUpdate) SetOrder(i int) *ContentEpisodeUpdate {
	ceu.mutation.ResetOrder()
	ceu.mutation.SetOrder(i)
	return ceu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (ceu *ContentEpisodeUpdate) SetNillableOrder(i *int) *ContentEpisodeUpdate {
	if i != nil {
		ceu.SetOrder(*i)
	}
	return ceu
}

// AddOrder adds i to the "order" field.
func (ceu *ContentEpisodeUpdate) AddOrder(i int) *ContentEpisodeUpdate {
	ceu.mutation.AddOrder(i)
	return ceu
}

// Mutation returns the ContentEpisodeMutation object of the builder.
func (ceu *ContentEpisodeUpdate) Mutation() *ContentEpisodeMutation {
	return ceu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *ContentEpisodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ceu.sqlSave, ceu.mutation, ceu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *ContentEpisodeUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *ContentEpisodeUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *ContentEpisodeUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceu *ContentEpisodeUpdate) check() error {
	if v, ok := ceu.mutation.GetType(); ok {
		if err := contentepisode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.type": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.Title(); ok {
		if err := contentepisode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.title": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.Subtitle(); ok {
		if err := contentepisode.SubtitleValidator(v); err != nil {
			return &ValidationError{Name: "subtitle", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.subtitle": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.Description(); ok {
		if err := contentepisode.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.description": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.Duration(); ok {
		if err := contentepisode.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.duration": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.Order(); ok {
		if err := contentepisode.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.order": %w`, err)}
		}
	}
	if _, ok := ceu.mutation.ContentID(); ceu.mutation.ContentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContentEpisode.content"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ceu *ContentEpisodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContentEpisodeUpdate {
	ceu.modifiers = append(ceu.modifiers, modifiers...)
	return ceu
}

func (ceu *ContentEpisodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ceu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contentepisode.Table, contentepisode.Columns, sqlgraph.NewFieldSpec(contentepisode.FieldID, field.TypeInt64))
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.GetType(); ok {
		_spec.SetField(contentepisode.FieldType, field.TypeEnum, value)
	}
	if value, ok := ceu.mutation.Title(); ok {
		_spec.SetField(contentepisode.FieldTitle, field.TypeString, value)
	}
	if value, ok := ceu.mutation.Subtitle(); ok {
		_spec.SetField(contentepisode.FieldSubtitle, field.TypeString, value)
	}
	if value, ok := ceu.mutation.Description(); ok {
		_spec.SetField(contentepisode.FieldDescription, field.TypeString, value)
	}
	if value, ok := ceu.mutation.Duration(); ok {
		_spec.SetField(contentepisode.FieldDuration, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.AddedDuration(); ok {
		_spec.AddField(contentepisode.FieldDuration, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.StreamURL(); ok {
		_spec.SetField(contentepisode.FieldStreamURL, field.TypeString, value)
	}
	if value, ok := ceu.mutation.DownloadURL(); ok {
		_spec.SetField(contentepisode.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := ceu.mutation.Source(); ok {
		_spec.SetField(contentepisode.FieldSource, field.TypeString, value)
	}
	if value, ok := ceu.mutation.SourceURL(); ok {
		_spec.SetField(contentepisode.FieldSourceURL, field.TypeString, value)
	}
	if value, ok := ceu.mutation.Licence(); ok {
		_spec.SetField(contentepisode.FieldLicence, field.TypeString, value)
	}
	if value, ok := ceu.mutation.LicenceURL(); ok {
		_spec.SetField(contentepisode.FieldLicenceURL, field.TypeString, value)
	}
	if value, ok := ceu.mutation.IsHidden(); ok {
		_spec.SetField(contentepisode.FieldIsHidden, field.TypeBool, value)
	}
	if value, ok := ceu.mutation.Order(); ok {
		_spec.SetField(contentepisode.FieldOrder, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.AddedOrder(); ok {
		_spec.AddField(contentepisode.FieldOrder, field.TypeInt, value)
	}
	_spec.AddModifiers(ceu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contentepisode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ceu.mutation.done = true
	return n, nil
}

// ContentEpisodeUpdateOne is the builder for updating a single ContentEpisode entity.
type ContentEpisodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ContentEpisodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetType sets the "type" field.
func (ceuo *ContentEpisodeUpdateOne) SetType(pt property.ContentType) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetType(pt)
	return ceuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableType(pt *property.ContentType) *ContentEpisodeUpdateOne {
	if pt != nil {
		ceuo.SetType(*pt)
	}
	return ceuo
}

// SetTitle sets the "title" field.
func (ceuo *ContentEpisodeUpdateOne) SetTitle(s string) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetTitle(s)
	return ceuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableTitle(s *string) *ContentEpisodeUpdateOne {
	if s != nil {
		ceuo.SetTitle(*s)
	}
	return ceuo
}

// SetSubtitle sets the "subtitle" field.
func (ceuo *ContentEpisodeUpdateOne) SetSubtitle(s string) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetSubtitle(s)
	return ceuo
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableSubtitle(s *string) *ContentEpisodeUpdateOne {
	if s != nil {
		ceuo.SetSubtitle(*s)
	}
	return ceuo
}

// SetDescription sets the "description" field.
func (ceuo *ContentEpisodeUpdateOne) SetDescription(s string) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetDescription(s)
	return ceuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableDescription(s *string) *ContentEpisodeUpdateOne {
	if s != nil {
		ceuo.SetDescription(*s)
	}
	return ceuo
}

// SetDuration sets the "duration" field.
func (ceuo *ContentEpisodeUpdateOne) SetDuration(i int) *ContentEpisodeUpdateOne {
	ceuo.mutation.ResetDuration()
	ceuo.mutation.SetDuration(i)
	return ceuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableDuration(i *int) *ContentEpisodeUpdateOne {
	if i != nil {
		ceuo.SetDuration(*i)
	}
	return ceuo
}

// AddDuration adds i to the "duration" field.
func (ceuo *ContentEpisodeUpdateOne) AddDuration(i int) *ContentEpisodeUpdateOne {
	ceuo.mutation.AddDuration(i)
	return ceuo
}

// SetStreamURL sets the "streamURL" field.
func (ceuo *ContentEpisodeUpdateOne) SetStreamURL(s string) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetStreamURL(s)
	return ceuo
}

// SetNillableStreamURL sets the "streamURL" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableStreamURL(s *string) *ContentEpisodeUpdateOne {
	if s != nil {
		ceuo.SetStreamURL(*s)
	}
	return ceuo
}

// SetDownloadURL sets the "downloadURL" field.
func (ceuo *ContentEpisodeUpdateOne) SetDownloadURL(s string) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetDownloadURL(s)
	return ceuo
}

// SetNillableDownloadURL sets the "downloadURL" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableDownloadURL(s *string) *ContentEpisodeUpdateOne {
	if s != nil {
		ceuo.SetDownloadURL(*s)
	}
	return ceuo
}

// SetSource sets the "source" field.
func (ceuo *ContentEpisodeUpdateOne) SetSource(s string) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetSource(s)
	return ceuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableSource(s *string) *ContentEpisodeUpdateOne {
	if s != nil {
		ceuo.SetSource(*s)
	}
	return ceuo
}

// SetSourceURL sets the "sourceURL" field.
func (ceuo *ContentEpisodeUpdateOne) SetSourceURL(s string) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetSourceURL(s)
	return ceuo
}

// SetNillableSourceURL sets the "sourceURL" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableSourceURL(s *string) *ContentEpisodeUpdateOne {
	if s != nil {
		ceuo.SetSourceURL(*s)
	}
	return ceuo
}

// SetLicence sets the "licence" field.
func (ceuo *ContentEpisodeUpdateOne) SetLicence(s string) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetLicence(s)
	return ceuo
}

// SetNillableLicence sets the "licence" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableLicence(s *string) *ContentEpisodeUpdateOne {
	if s != nil {
		ceuo.SetLicence(*s)
	}
	return ceuo
}

// SetLicenceURL sets the "licenceURL" field.
func (ceuo *ContentEpisodeUpdateOne) SetLicenceURL(s string) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetLicenceURL(s)
	return ceuo
}

// SetNillableLicenceURL sets the "licenceURL" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableLicenceURL(s *string) *ContentEpisodeUpdateOne {
	if s != nil {
		ceuo.SetLicenceURL(*s)
	}
	return ceuo
}

// SetIsHidden sets the "isHidden" field.
func (ceuo *ContentEpisodeUpdateOne) SetIsHidden(b bool) *ContentEpisodeUpdateOne {
	ceuo.mutation.SetIsHidden(b)
	return ceuo
}

// SetNillableIsHidden sets the "isHidden" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableIsHidden(b *bool) *ContentEpisodeUpdateOne {
	if b != nil {
		ceuo.SetIsHidden(*b)
	}
	return ceuo
}

// SetOrder sets the "order" field.
func (ceuo *ContentEpisodeUpdateOne) SetOrder(i int) *ContentEpisodeUpdateOne {
	ceuo.mutation.ResetOrder()
	ceuo.mutation.SetOrder(i)
	return ceuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (ceuo *ContentEpisodeUpdateOne) SetNillableOrder(i *int) *ContentEpisodeUpdateOne {
	if i != nil {
		ceuo.SetOrder(*i)
	}
	return ceuo
}

// AddOrder adds i to the "order" field.
func (ceuo *ContentEpisodeUpdateOne) AddOrder(i int) *ContentEpisodeUpdateOne {
	ceuo.mutation.AddOrder(i)
	return ceuo
}

// Mutation returns the ContentEpisodeMutation object of the builder.
func (ceuo *ContentEpisodeUpdateOne) Mutation() *ContentEpisodeMutation {
	return ceuo.mutation
}

// Where appends a list predicates to the ContentEpisodeUpdate builder.
func (ceuo *ContentEpisodeUpdateOne) Where(ps ...predicate.ContentEpisode) *ContentEpisodeUpdateOne {
	ceuo.mutation.Where(ps...)
	return ceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *ContentEpisodeUpdateOne) Select(field string, fields ...string) *ContentEpisodeUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated ContentEpisode entity.
func (ceuo *ContentEpisodeUpdateOne) Save(ctx context.Context) (*ContentEpisode, error) {
	return withHooks(ctx, ceuo.sqlSave, ceuo.mutation, ceuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *ContentEpisodeUpdateOne) SaveX(ctx context.Context) *ContentEpisode {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *ContentEpisodeUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *ContentEpisodeUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceuo *ContentEpisodeUpdateOne) check() error {
	if v, ok := ceuo.mutation.GetType(); ok {
		if err := contentepisode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.type": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.Title(); ok {
		if err := contentepisode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.title": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.Subtitle(); ok {
		if err := contentepisode.SubtitleValidator(v); err != nil {
			return &ValidationError{Name: "subtitle", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.subtitle": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.Description(); ok {
		if err := contentepisode.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.description": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.Duration(); ok {
		if err := contentepisode.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.duration": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.Order(); ok {
		if err := contentepisode.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "ContentEpisode.order": %w`, err)}
		}
	}
	if _, ok := ceuo.mutation.ContentID(); ceuo.mutation.ContentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContentEpisode.content"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ceuo *ContentEpisodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContentEpisodeUpdateOne {
	ceuo.modifiers = append(ceuo.modifiers, modifiers...)
	return ceuo
}

func (ceuo *ContentEpisodeUpdateOne) sqlSave(ctx context.Context) (_node *ContentEpisode, err error) {
	if err := ceuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contentepisode.Table, contentepisode.Columns, sqlgraph.NewFieldSpec(contentepisode.FieldID, field.TypeInt64))
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContentEpisode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contentepisode.FieldID)
		for _, f := range fields {
			if !contentepisode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contentepisode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.GetType(); ok {
		_spec.SetField(contentepisode.FieldType, field.TypeEnum, value)
	}
	if value, ok := ceuo.mutation.Title(); ok {
		_spec.SetField(contentepisode.FieldTitle, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.Subtitle(); ok {
		_spec.SetField(contentepisode.FieldSubtitle, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.Description(); ok {
		_spec.SetField(contentepisode.FieldDescription, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.Duration(); ok {
		_spec.SetField(contentepisode.FieldDuration, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.AddedDuration(); ok {
		_spec.AddField(contentepisode.FieldDuration, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.StreamURL(); ok {
		_spec.SetField(contentepisode.FieldStreamURL, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.DownloadURL(); ok {
		_spec.SetField(contentepisode.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.Source(); ok {
		_spec.SetField(contentepisode.FieldSource, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.SourceURL(); ok {
		_spec.SetField(contentepisode.FieldSourceURL, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.Licence(); ok {
		_spec.SetField(contentepisode.FieldLicence, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.LicenceURL(); ok {
		_spec.SetField(contentepisode.FieldLicenceURL, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.IsHidden(); ok {
		_spec.SetField(contentepisode.FieldIsHidden, field.TypeBool, value)
	}
	if value, ok := ceuo.mutation.Order(); ok {
		_spec.SetField(contentepisode.FieldOrder, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.AddedOrder(); ok {
		_spec.AddField(contentepisode.FieldOrder, field.TypeInt, value)
	}
	_spec.AddModifiers(ceuo.modifiers...)
	_node = &ContentEpisode{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contentepisode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ceuo.mutation.done = true
	return _node, nil
}
