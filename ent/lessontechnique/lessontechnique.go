// Code generated by ent, DO NOT EDIT.

package lessontechnique

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lessontechnique type in the database.
	Label = "lesson_technique"
	// FieldLessonID holds the string denoting the lesson_id field in the database.
	FieldLessonID = "lesson_id"
	// FieldTechniqueID holds the string denoting the technique_id field in the database.
	FieldTechniqueID = "technique_id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeLesson holds the string denoting the lesson edge name in mutations.
	EdgeLesson = "lesson"
	// EdgeTechnique holds the string denoting the technique edge name in mutations.
	EdgeTechnique = "technique"
	// LessonFieldID holds the string denoting the ID field of the Lesson.
	LessonFieldID = "id"
	// TechniqueFieldID holds the string denoting the ID field of the Technique.
	TechniqueFieldID = "id"
	// Table holds the table name of the lessontechnique in the database.
	Table = "lesson_techniques"
	// LessonTable is the table that holds the lesson relation/edge.
	LessonTable = "lesson_techniques"
	// LessonInverseTable is the table name for the Lesson entity.
	// It exists in this package in order to avoid circular dependency with the "lesson" package.
	LessonInverseTable = "lessons"
	// LessonColumn is the table column denoting the lesson relation/edge.
	LessonColumn = "lesson_id"
	// TechniqueTable is the table that holds the technique relation/edge.
	TechniqueTable = "lesson_techniques"
	// TechniqueInverseTable is the table name for the Technique entity.
	// It exists in this package in order to avoid circular dependency with the "technique" package.
	TechniqueInverseTable = "techniques"
	// TechniqueColumn is the table column denoting the technique relation/edge.
	TechniqueColumn = "technique_id"
)

// Columns holds all SQL columns for lessontechnique fields.
var Columns = []string{
	FieldLessonID,
	FieldTechniqueID,
	FieldOrder,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the LessonTechnique queries.
type OrderOption func(*sql.Selector)

// ByLessonID orders the results by the lesson_id field.
func ByLessonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonID, opts...).ToFunc()
}

// ByTechniqueID orders the results by the technique_id field.
func ByTechniqueID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTechniqueID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByLessonField orders the results by lesson field.
func ByLessonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonStep(), sql.OrderByField(field, opts...))
	}
}

// ByTechniqueField orders the results by technique field.
func ByTechniqueField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTechniqueStep(), sql.OrderByField(field, opts...))
	}
}
func newLessonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, LessonColumn),
		sqlgraph.To(LessonInverseTable, LessonFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LessonTable, LessonColumn),
	)
}
func newTechniqueStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, TechniqueColumn),
		sqlgraph.To(TechniqueInverseTable, TechniqueFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TechniqueTable, TechniqueColumn),
	)
}
