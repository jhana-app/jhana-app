// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/technique"
	"github.com/jhana-app/jhana-app/ent/unit"
	"github.com/jhana-app/jhana-app/ent/unittechnique"
)

// UnitTechniqueCreate is the builder for creating a UnitTechnique entity.
type UnitTechniqueCreate struct {
	config
	mutation *UnitTechniqueMutation
	hooks    []Hook
}

// SetUnitID sets the "unit_id" field.
func (utc *UnitTechniqueCreate) SetUnitID(gi gqlid.UnitID) *UnitTechniqueCreate {
	utc.mutation.SetUnitID(gi)
	return utc
}

// SetTechniqueID sets the "technique_id" field.
func (utc *UnitTechniqueCreate) SetTechniqueID(gi gqlid.TechniqueID) *UnitTechniqueCreate {
	utc.mutation.SetTechniqueID(gi)
	return utc
}

// SetPosition sets the "position" field.
func (utc *UnitTechniqueCreate) SetPosition(i int64) *UnitTechniqueCreate {
	utc.mutation.SetPosition(i)
	return utc
}

// SetUnit sets the "unit" edge to the Unit entity.
func (utc *UnitTechniqueCreate) SetUnit(u *Unit) *UnitTechniqueCreate {
	return utc.SetUnitID(u.ID)
}

// SetTechnique sets the "technique" edge to the Technique entity.
func (utc *UnitTechniqueCreate) SetTechnique(t *Technique) *UnitTechniqueCreate {
	return utc.SetTechniqueID(t.ID)
}

// Mutation returns the UnitTechniqueMutation object of the builder.
func (utc *UnitTechniqueCreate) Mutation() *UnitTechniqueMutation {
	return utc.mutation
}

// Save creates the UnitTechnique in the database.
func (utc *UnitTechniqueCreate) Save(ctx context.Context) (*UnitTechnique, error) {
	return withHooks(ctx, utc.sqlSave, utc.mutation, utc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utc *UnitTechniqueCreate) SaveX(ctx context.Context) *UnitTechnique {
	v, err := utc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utc *UnitTechniqueCreate) Exec(ctx context.Context) error {
	_, err := utc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utc *UnitTechniqueCreate) ExecX(ctx context.Context) {
	if err := utc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utc *UnitTechniqueCreate) check() error {
	if _, ok := utc.mutation.UnitID(); !ok {
		return &ValidationError{Name: "unit_id", err: errors.New(`ent: missing required field "UnitTechnique.unit_id"`)}
	}
	if _, ok := utc.mutation.TechniqueID(); !ok {
		return &ValidationError{Name: "technique_id", err: errors.New(`ent: missing required field "UnitTechnique.technique_id"`)}
	}
	if _, ok := utc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "UnitTechnique.position"`)}
	}
	if _, ok := utc.mutation.UnitID(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required edge "UnitTechnique.unit"`)}
	}
	if _, ok := utc.mutation.TechniqueID(); !ok {
		return &ValidationError{Name: "technique", err: errors.New(`ent: missing required edge "UnitTechnique.technique"`)}
	}
	return nil
}

func (utc *UnitTechniqueCreate) sqlSave(ctx context.Context) (*UnitTechnique, error) {
	if err := utc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (utc *UnitTechniqueCreate) createSpec() (*UnitTechnique, *sqlgraph.CreateSpec) {
	var (
		_node = &UnitTechnique{config: utc.config}
		_spec = sqlgraph.NewCreateSpec(unittechnique.Table, nil)
	)
	if value, ok := utc.mutation.Position(); ok {
		_spec.SetField(unittechnique.FieldPosition, field.TypeInt64, value)
		_node.Position = value
	}
	if nodes := utc.mutation.UnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   unittechnique.UnitTable,
			Columns: []string{unittechnique.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := utc.mutation.TechniqueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   unittechnique.TechniqueTable,
			Columns: []string{unittechnique.TechniqueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TechniqueID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UnitTechniqueCreateBulk is the builder for creating many UnitTechnique entities in bulk.
type UnitTechniqueCreateBulk struct {
	config
	err      error
	builders []*UnitTechniqueCreate
}

// Save creates the UnitTechnique entities in the database.
func (utcb *UnitTechniqueCreateBulk) Save(ctx context.Context) ([]*UnitTechnique, error) {
	if utcb.err != nil {
		return nil, utcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utcb.builders))
	nodes := make([]*UnitTechnique, len(utcb.builders))
	mutators := make([]Mutator, len(utcb.builders))
	for i := range utcb.builders {
		func(i int, root context.Context) {
			builder := utcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UnitTechniqueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utcb *UnitTechniqueCreateBulk) SaveX(ctx context.Context) []*UnitTechnique {
	v, err := utcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utcb *UnitTechniqueCreateBulk) Exec(ctx context.Context) error {
	_, err := utcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utcb *UnitTechniqueCreateBulk) ExecX(ctx context.Context) {
	if err := utcb.Exec(ctx); err != nil {
		panic(err)
	}
}
