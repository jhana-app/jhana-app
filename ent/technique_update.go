// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/predicate"
	"github.com/jhana-app/jhana-app/ent/technique"
	"github.com/jhana-app/jhana-app/ent/unit"
)

// TechniqueUpdate is the builder for updating Technique entities.
type TechniqueUpdate struct {
	config
	hooks     []Hook
	mutation  *TechniqueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TechniqueUpdate builder.
func (tu *TechniqueUpdate) Where(ps ...predicate.Technique) *TechniqueUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetIconImage sets the "iconImage" field.
func (tu *TechniqueUpdate) SetIconImage(s string) *TechniqueUpdate {
	tu.mutation.SetIconImage(s)
	return tu
}

// SetNillableIconImage sets the "iconImage" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableIconImage(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetIconImage(*s)
	}
	return tu
}

// SetCoverImage sets the "coverImage" field.
func (tu *TechniqueUpdate) SetCoverImage(s string) *TechniqueUpdate {
	tu.mutation.SetCoverImage(s)
	return tu
}

// SetNillableCoverImage sets the "coverImage" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableCoverImage(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetCoverImage(*s)
	}
	return tu
}

// SetTitle sets the "title" field.
func (tu *TechniqueUpdate) SetTitle(s string) *TechniqueUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableTitle(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetSubtitle sets the "subtitle" field.
func (tu *TechniqueUpdate) SetSubtitle(s string) *TechniqueUpdate {
	tu.mutation.SetSubtitle(s)
	return tu
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableSubtitle(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetSubtitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TechniqueUpdate) SetDescription(s string) *TechniqueUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableDescription(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetOrder sets the "order" field.
func (tu *TechniqueUpdate) SetOrder(i int) *TechniqueUpdate {
	tu.mutation.ResetOrder()
	tu.mutation.SetOrder(i)
	return tu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableOrder(i *int) *TechniqueUpdate {
	if i != nil {
		tu.SetOrder(*i)
	}
	return tu
}

// AddOrder adds i to the "order" field.
func (tu *TechniqueUpdate) AddOrder(i int) *TechniqueUpdate {
	tu.mutation.AddOrder(i)
	return tu
}

// AddLessonIDs adds the "lessons" edge to the Lesson entity by IDs.
func (tu *TechniqueUpdate) AddLessonIDs(ids ...gqlid.LessonID) *TechniqueUpdate {
	tu.mutation.AddLessonIDs(ids...)
	return tu
}

// AddLessons adds the "lessons" edges to the Lesson entity.
func (tu *TechniqueUpdate) AddLessons(l ...*Lesson) *TechniqueUpdate {
	ids := make([]gqlid.LessonID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.AddLessonIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Unit entity by IDs.
func (tu *TechniqueUpdate) AddTechniqueIDs(ids ...gqlid.UnitID) *TechniqueUpdate {
	tu.mutation.AddTechniqueIDs(ids...)
	return tu
}

// AddTechniques adds the "techniques" edges to the Unit entity.
func (tu *TechniqueUpdate) AddTechniques(u ...*Unit) *TechniqueUpdate {
	ids := make([]gqlid.UnitID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddTechniqueIDs(ids...)
}

// Mutation returns the TechniqueMutation object of the builder.
func (tu *TechniqueUpdate) Mutation() *TechniqueMutation {
	return tu.mutation
}

// ClearLessons clears all "lessons" edges to the Lesson entity.
func (tu *TechniqueUpdate) ClearLessons() *TechniqueUpdate {
	tu.mutation.ClearLessons()
	return tu
}

// RemoveLessonIDs removes the "lessons" edge to Lesson entities by IDs.
func (tu *TechniqueUpdate) RemoveLessonIDs(ids ...gqlid.LessonID) *TechniqueUpdate {
	tu.mutation.RemoveLessonIDs(ids...)
	return tu
}

// RemoveLessons removes "lessons" edges to Lesson entities.
func (tu *TechniqueUpdate) RemoveLessons(l ...*Lesson) *TechniqueUpdate {
	ids := make([]gqlid.LessonID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.RemoveLessonIDs(ids...)
}

// ClearTechniques clears all "techniques" edges to the Unit entity.
func (tu *TechniqueUpdate) ClearTechniques() *TechniqueUpdate {
	tu.mutation.ClearTechniques()
	return tu
}

// RemoveTechniqueIDs removes the "techniques" edge to Unit entities by IDs.
func (tu *TechniqueUpdate) RemoveTechniqueIDs(ids ...gqlid.UnitID) *TechniqueUpdate {
	tu.mutation.RemoveTechniqueIDs(ids...)
	return tu
}

// RemoveTechniques removes "techniques" edges to Unit entities.
func (tu *TechniqueUpdate) RemoveTechniques(u ...*Unit) *TechniqueUpdate {
	ids := make([]gqlid.UnitID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveTechniqueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TechniqueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TechniqueUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TechniqueUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TechniqueUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TechniqueUpdate) check() error {
	if v, ok := tu.mutation.IconImage(); ok {
		if err := technique.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Technique.iconImage": %w`, err)}
		}
	}
	if v, ok := tu.mutation.CoverImage(); ok {
		if err := technique.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Technique.coverImage": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Title(); ok {
		if err := technique.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Technique.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Subtitle(); ok {
		if err := technique.SubtitleValidator(v); err != nil {
			return &ValidationError{Name: "subtitle", err: fmt.Errorf(`ent: validator failed for field "Technique.subtitle": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := technique.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Technique.description": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Order(); ok {
		if err := technique.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Technique.order": %w`, err)}
		}
	}
	if _, ok := tu.mutation.UnitID(); tu.mutation.UnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Technique.unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TechniqueUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TechniqueUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TechniqueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(technique.Table, technique.Columns, sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.IconImage(); ok {
		_spec.SetField(technique.FieldIconImage, field.TypeString, value)
	}
	if value, ok := tu.mutation.CoverImage(); ok {
		_spec.SetField(technique.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(technique.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Subtitle(); ok {
		_spec.SetField(technique.FieldSubtitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(technique.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Order(); ok {
		_spec.SetField(technique.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedOrder(); ok {
		_spec.AddField(technique.FieldOrder, field.TypeInt, value)
	}
	if tu.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.LessonsTable,
			Columns: technique.LessonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLessonsIDs(); len(nodes) > 0 && !tu.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.LessonsTable,
			Columns: technique.LessonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.LessonsTable,
			Columns: technique.LessonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.TechniquesTable,
			Columns: technique.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !tu.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.TechniquesTable,
			Columns: technique.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.TechniquesTable,
			Columns: technique.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technique.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TechniqueUpdateOne is the builder for updating a single Technique entity.
type TechniqueUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TechniqueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIconImage sets the "iconImage" field.
func (tuo *TechniqueUpdateOne) SetIconImage(s string) *TechniqueUpdateOne {
	tuo.mutation.SetIconImage(s)
	return tuo
}

// SetNillableIconImage sets the "iconImage" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableIconImage(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetIconImage(*s)
	}
	return tuo
}

// SetCoverImage sets the "coverImage" field.
func (tuo *TechniqueUpdateOne) SetCoverImage(s string) *TechniqueUpdateOne {
	tuo.mutation.SetCoverImage(s)
	return tuo
}

// SetNillableCoverImage sets the "coverImage" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableCoverImage(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetCoverImage(*s)
	}
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TechniqueUpdateOne) SetTitle(s string) *TechniqueUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableTitle(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetSubtitle sets the "subtitle" field.
func (tuo *TechniqueUpdateOne) SetSubtitle(s string) *TechniqueUpdateOne {
	tuo.mutation.SetSubtitle(s)
	return tuo
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableSubtitle(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetSubtitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TechniqueUpdateOne) SetDescription(s string) *TechniqueUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableDescription(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetOrder sets the "order" field.
func (tuo *TechniqueUpdateOne) SetOrder(i int) *TechniqueUpdateOne {
	tuo.mutation.ResetOrder()
	tuo.mutation.SetOrder(i)
	return tuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableOrder(i *int) *TechniqueUpdateOne {
	if i != nil {
		tuo.SetOrder(*i)
	}
	return tuo
}

// AddOrder adds i to the "order" field.
func (tuo *TechniqueUpdateOne) AddOrder(i int) *TechniqueUpdateOne {
	tuo.mutation.AddOrder(i)
	return tuo
}

// AddLessonIDs adds the "lessons" edge to the Lesson entity by IDs.
func (tuo *TechniqueUpdateOne) AddLessonIDs(ids ...gqlid.LessonID) *TechniqueUpdateOne {
	tuo.mutation.AddLessonIDs(ids...)
	return tuo
}

// AddLessons adds the "lessons" edges to the Lesson entity.
func (tuo *TechniqueUpdateOne) AddLessons(l ...*Lesson) *TechniqueUpdateOne {
	ids := make([]gqlid.LessonID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.AddLessonIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Unit entity by IDs.
func (tuo *TechniqueUpdateOne) AddTechniqueIDs(ids ...gqlid.UnitID) *TechniqueUpdateOne {
	tuo.mutation.AddTechniqueIDs(ids...)
	return tuo
}

// AddTechniques adds the "techniques" edges to the Unit entity.
func (tuo *TechniqueUpdateOne) AddTechniques(u ...*Unit) *TechniqueUpdateOne {
	ids := make([]gqlid.UnitID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddTechniqueIDs(ids...)
}

// Mutation returns the TechniqueMutation object of the builder.
func (tuo *TechniqueUpdateOne) Mutation() *TechniqueMutation {
	return tuo.mutation
}

// ClearLessons clears all "lessons" edges to the Lesson entity.
func (tuo *TechniqueUpdateOne) ClearLessons() *TechniqueUpdateOne {
	tuo.mutation.ClearLessons()
	return tuo
}

// RemoveLessonIDs removes the "lessons" edge to Lesson entities by IDs.
func (tuo *TechniqueUpdateOne) RemoveLessonIDs(ids ...gqlid.LessonID) *TechniqueUpdateOne {
	tuo.mutation.RemoveLessonIDs(ids...)
	return tuo
}

// RemoveLessons removes "lessons" edges to Lesson entities.
func (tuo *TechniqueUpdateOne) RemoveLessons(l ...*Lesson) *TechniqueUpdateOne {
	ids := make([]gqlid.LessonID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.RemoveLessonIDs(ids...)
}

// ClearTechniques clears all "techniques" edges to the Unit entity.
func (tuo *TechniqueUpdateOne) ClearTechniques() *TechniqueUpdateOne {
	tuo.mutation.ClearTechniques()
	return tuo
}

// RemoveTechniqueIDs removes the "techniques" edge to Unit entities by IDs.
func (tuo *TechniqueUpdateOne) RemoveTechniqueIDs(ids ...gqlid.UnitID) *TechniqueUpdateOne {
	tuo.mutation.RemoveTechniqueIDs(ids...)
	return tuo
}

// RemoveTechniques removes "techniques" edges to Unit entities.
func (tuo *TechniqueUpdateOne) RemoveTechniques(u ...*Unit) *TechniqueUpdateOne {
	ids := make([]gqlid.UnitID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveTechniqueIDs(ids...)
}

// Where appends a list predicates to the TechniqueUpdate builder.
func (tuo *TechniqueUpdateOne) Where(ps ...predicate.Technique) *TechniqueUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TechniqueUpdateOne) Select(field string, fields ...string) *TechniqueUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Technique entity.
func (tuo *TechniqueUpdateOne) Save(ctx context.Context) (*Technique, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TechniqueUpdateOne) SaveX(ctx context.Context) *Technique {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TechniqueUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TechniqueUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TechniqueUpdateOne) check() error {
	if v, ok := tuo.mutation.IconImage(); ok {
		if err := technique.IconImageValidator(v); err != nil {
			return &ValidationError{Name: "iconImage", err: fmt.Errorf(`ent: validator failed for field "Technique.iconImage": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.CoverImage(); ok {
		if err := technique.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Technique.coverImage": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Title(); ok {
		if err := technique.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Technique.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Subtitle(); ok {
		if err := technique.SubtitleValidator(v); err != nil {
			return &ValidationError{Name: "subtitle", err: fmt.Errorf(`ent: validator failed for field "Technique.subtitle": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := technique.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Technique.description": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Order(); ok {
		if err := technique.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Technique.order": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.UnitID(); tuo.mutation.UnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Technique.unit"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TechniqueUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TechniqueUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TechniqueUpdateOne) sqlSave(ctx context.Context) (_node *Technique, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(technique.Table, technique.Columns, sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Technique.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, technique.FieldID)
		for _, f := range fields {
			if !technique.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != technique.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.IconImage(); ok {
		_spec.SetField(technique.FieldIconImage, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CoverImage(); ok {
		_spec.SetField(technique.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(technique.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Subtitle(); ok {
		_spec.SetField(technique.FieldSubtitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(technique.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Order(); ok {
		_spec.SetField(technique.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedOrder(); ok {
		_spec.AddField(technique.FieldOrder, field.TypeInt, value)
	}
	if tuo.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.LessonsTable,
			Columns: technique.LessonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLessonsIDs(); len(nodes) > 0 && !tuo.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.LessonsTable,
			Columns: technique.LessonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.LessonsTable,
			Columns: technique.LessonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.TechniquesTable,
			Columns: technique.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !tuo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.TechniquesTable,
			Columns: technique.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technique.TechniquesTable,
			Columns: technique.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unit.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Technique{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technique.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
