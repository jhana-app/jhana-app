// Code generated by ent, DO NOT EDIT.

package course

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the course type in the database.
	Label = "course"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIconImage holds the string denoting the iconimage field in the database.
	FieldIconImage = "icon_image"
	// FieldCoverImage holds the string denoting the coverimage field in the database.
	FieldCoverImage = "cover_image"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeUnits holds the string denoting the units edge name in mutations.
	EdgeUnits = "units"
	// Table holds the table name of the course in the database.
	Table = "courses"
	// UnitsTable is the table that holds the units relation/edge.
	UnitsTable = "units"
	// UnitsInverseTable is the table name for the Unit entity.
	// It exists in this package in order to avoid circular dependency with the "unit" package.
	UnitsInverseTable = "units"
	// UnitsColumn is the table column denoting the units relation/edge.
	UnitsColumn = "course_id"
)

// Columns holds all SQL columns for course fields.
var Columns = []string{
	FieldID,
	FieldIconImage,
	FieldCoverImage,
	FieldTitle,
	FieldDescription,
	FieldColor,
	FieldActive,
	FieldOrder,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IconImageValidator is a validator for the "iconImage" field. It is called by the builders before save.
	IconImageValidator func(string) error
	// CoverImageValidator is a validator for the "coverImage" field. It is called by the builders before save.
	CoverImageValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// ColorValidator is a validator for the "color" field. It is called by the builders before save.
	ColorValidator func(string) error
	// OrderValidator is a validator for the "order" field. It is called by the builders before save.
	OrderValidator func(int) error
)

// OrderOption defines the ordering options for the Course queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIconImage orders the results by the iconImage field.
func ByIconImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIconImage, opts...).ToFunc()
}

// ByCoverImage orders the results by the coverImage field.
func ByCoverImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverImage, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByUnitsCount orders the results by units count.
func ByUnitsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUnitsStep(), opts...)
	}
}

// ByUnits orders the results by units terms.
func ByUnits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUnitsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUnitsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UnitsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UnitsTable, UnitsColumn),
	)
}
