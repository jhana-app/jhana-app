package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"

	"github.com/jhana-app/jhana-app/ent"
	"github.com/jhana-app/jhana-app/ent/contentepisode"
	"go.uber.org/zap"
)

// SingleEpisode is the resolver for the singleEpisode field.
func (r *contentResolver) SingleEpisode(ctx context.Context, obj *ent.Content) (*ent.ContentEpisode, error) {
	if obj.EpisodesCount != 1 {
		return nil, nil
	}

	episodes, err := r.client.ContentEpisode.
		Query().
		Where(contentepisode.ContentID(obj.ID), contentepisode.IsHiddenEQ(false)).
		Limit(2).
		All(ctx)
	if err != nil {
		r.logger.Error("failed to get content episodes", zap.Error(err), zap.Int64("content_id", obj.ID.ID))
		return nil, fmt.Errorf("internal server error")
	}

	if len(episodes) == 1 {
		return episodes[0], nil
	}

	return nil, nil
}

// EpisodesList is the resolver for the episodesList field.
func (r *contentResolver) EpisodesList(ctx context.Context, obj *ent.Content) ([]*ent.ContentEpisode, error) {
	episodes, err := r.client.ContentEpisode.
		Query().
		Where(contentepisode.ContentID(obj.ID), contentepisode.IsHiddenEQ(false)).
		Order(ent.Asc(contentepisode.FieldOrder)).
		All(ctx)
	if err != nil {
		r.logger.Error("failed to get content episodes", zap.Error(err), zap.Int64("content_id", obj.ID.ID))
		return nil, fmt.Errorf("internal server error")
	}

	return episodes, nil
}
