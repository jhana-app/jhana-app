package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"

	"github.com/jhana-app/jhana-app/ent"
	"github.com/jhana-app/jhana-app/ent/dataloaders"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/internal/authctx"
	"go.uber.org/zap"
)

// IsStarted is the resolver for the isStarted field.
func (r *courseResolver) IsStarted(ctx context.Context, obj *ent.Course) (bool, error) {
	authenticatedUser, err := authctx.GetUser(ctx)
	if err != nil {
		return false, nil
	}

	exists, err := dataloaders.MustGet(ctx).CourseProgressExists.Load(gqlid.NewCourseProgressKey(authenticatedUser.ID, obj.ID))
	if err != nil {
		r.logger.Error("failed to check if course is started", zap.Error(err), zap.Int64("user_id", authenticatedUser.ID.ID), zap.Int64("course_id", obj.ID.ID))
		return false, err
	}

	return exists, nil
}
