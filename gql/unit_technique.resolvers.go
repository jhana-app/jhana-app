package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"

	"github.com/jhana-app/jhana-app/ent"
	"github.com/jhana-app/jhana-app/ent/dataloaders"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"go.uber.org/zap"
)

// UnitID is the resolver for the unitId field.
func (r *unitTechniqueResolver) UnitID(ctx context.Context, obj *ent.UnitTechnique) (*gqlid.Base64ID, error) {
	return obj.UnitID.Base64ID(), nil
}

// TechniqueID is the resolver for the techniqueId field.
func (r *unitTechniqueResolver) TechniqueID(ctx context.Context, obj *ent.UnitTechnique) (*gqlid.Base64ID, error) {
	return obj.TechniqueID.Base64ID(), nil
}

// Technique is the resolver for the technique field.
func (r *unitTechniqueResolver) Technique(ctx context.Context, obj *ent.UnitTechnique) (*ent.Technique, error) {
	technique, err := dataloaders.MustGet(ctx).Technique.Load(obj.TechniqueID)
	if err != nil {
		r.logger.Error("failed to get technique", zap.Error(err), zap.Int64("technique_id", obj.TechniqueID.ID))
		return nil, fmt.Errorf("internal server error")
	}

	return technique, nil
}

// UnitTechnique returns UnitTechniqueResolver implementation.
func (r *Resolver) UnitTechnique() UnitTechniqueResolver { return &unitTechniqueResolver{r} }

type unitTechniqueResolver struct{ *Resolver }
