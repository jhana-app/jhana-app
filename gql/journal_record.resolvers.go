package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"
	"time"

	"github.com/jhana-app/jhana-app/ent"
	"github.com/jhana-app/jhana-app/ent/dataloaders"
	"github.com/jhana-app/jhana-app/ent/journalrecord"
	"github.com/jhana-app/jhana-app/internal/authctx"
	"go.uber.org/zap"
)

// UnitColor is the resolver for the unitColor field.
func (r *journalRecordResolver) UnitColor(ctx context.Context, obj *ent.JournalRecord) (*string, error) {
	if obj.LessonID.ID == 0 {
		return nil, nil
	}

	lesson, err := dataloaders.MustGet(ctx).Lesson.Load(obj.LessonID)
	if err != nil {
		r.logger.Error("failed to get journal record lesson", zap.Error(err))
		return nil, fmt.Errorf("lesson not found")
	}

	unit, err := dataloaders.MustGet(ctx).Unit.Load(lesson.UnitID)
	if err != nil {
		r.logger.Error("failed to get lesson unit", zap.Error(err))
		return nil, fmt.Errorf("unit not found")
	}

	return &unit.Color, nil
}

// WeekStats is the resolver for the weekStats field.
func (r *queryResolver) WeekStats(ctx context.Context) ([]*ent.JournalRecord, error) {
	authenticatedUser, err := authctx.GetUser(ctx)
	if err != nil {
		r.logger.Error("failed to get user from context", zap.Error(err))
		return nil, fmt.Errorf("user is not authorized")
	}
	logger := r.logger.With(zap.Int64("user_id", authenticatedUser.ID.ID))

	records, err := r.client.JournalRecord.Query().
		Where(
			journalrecord.UserID(authenticatedUser.ID),
			journalrecord.DateTimeGTE(time.Now().AddDate(0, 0, -8)),
		).
		Order(ent.Desc(journalrecord.FieldDateTime)).
		All(ctx)
	if err != nil {
		logger.Error("failed to get user journal records", zap.Error(err))
		return nil, fmt.Errorf("failed to get meditations stats")
	}

	return records, nil
}
