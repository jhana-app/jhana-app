package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/jhana-app/jhana-app/ent"
	"github.com/jhana-app/jhana-app/ent/content"
	"github.com/jhana-app/jhana-app/ent/contentepisode"
	"github.com/jhana-app/jhana-app/ent/contentprogress"
	"github.com/jhana-app/jhana-app/ent/course"
	"github.com/jhana-app/jhana-app/ent/gqlid"
	"github.com/jhana-app/jhana-app/ent/journalrecord"
	"github.com/jhana-app/jhana-app/ent/lesson"
	"github.com/jhana-app/jhana-app/ent/lessonaudio"
	"github.com/jhana-app/jhana-app/ent/technique"
	"github.com/jhana-app/jhana-app/ent/unit"
	"github.com/jhana-app/jhana-app/ent/user"
	"github.com/jhana-app/jhana-app/ent/userprogress"
	"github.com/jhana-app/jhana-app/internal/authctx"
	"go.uber.org/zap"
)

// ID is the resolver for the id field.
func (r *contentResolver) ID(ctx context.Context, obj *ent.Content) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// ID is the resolver for the id field.
func (r *contentEpisodeResolver) ID(ctx context.Context, obj *ent.ContentEpisode) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// ContentID is the resolver for the contentID field.
func (r *contentEpisodeResolver) ContentID(ctx context.Context, obj *ent.ContentEpisode) (*gqlid.Base64ID, error) {
	return obj.ContentID.Base64ID(), nil
}

// ID is the resolver for the id field.
func (r *contentProgressResolver) ID(ctx context.Context, obj *ent.ContentProgress) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// UserID is the resolver for the userID field.
func (r *contentProgressResolver) UserID(ctx context.Context, obj *ent.ContentProgress) (*gqlid.Base64ID, error) {
	return obj.UserID.Base64ID(), nil
}

// ContentID is the resolver for the contentID field.
func (r *contentProgressResolver) ContentID(ctx context.Context, obj *ent.ContentProgress) (*gqlid.Base64ID, error) {
	return obj.ContentID.Base64ID(), nil
}

// EpisodeID is the resolver for the episodeID field.
func (r *contentProgressResolver) EpisodeID(ctx context.Context, obj *ent.ContentProgress) (*gqlid.Base64ID, error) {
	return obj.EpisodeID.Base64ID(), nil
}

// ID is the resolver for the id field.
func (r *courseResolver) ID(ctx context.Context, obj *ent.Course) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// ID is the resolver for the id field.
func (r *journalRecordResolver) ID(ctx context.Context, obj *ent.JournalRecord) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// UserID is the resolver for the userID field.
func (r *journalRecordResolver) UserID(ctx context.Context, obj *ent.JournalRecord) (*gqlid.Base64ID, error) {
	return obj.UserID.Base64ID(), nil
}

// LessonID is the resolver for the lessonID field.
func (r *journalRecordResolver) LessonID(ctx context.Context, obj *ent.JournalRecord) (*gqlid.Base64ID, error) {
	if obj.LessonID.ID == 0 {
		return nil, nil
	}
	return obj.LessonID.Base64ID(), nil
}

// ID is the resolver for the id field.
func (r *lessonResolver) ID(ctx context.Context, obj *ent.Lesson) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// UnitID is the resolver for the unitID field.
func (r *lessonResolver) UnitID(ctx context.Context, obj *ent.Lesson) (*gqlid.Base64ID, error) {
	return obj.UnitID.Base64ID(), nil
}

// ID is the resolver for the id field.
func (r *lessonAudioResolver) ID(ctx context.Context, obj *ent.LessonAudio) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// LessonID is the resolver for the lessonID field.
func (r *lessonAudioResolver) LessonID(ctx context.Context, obj *ent.LessonAudio) (*gqlid.Base64ID, error) {
	return obj.LessonID.Base64ID(), nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id gqlid.Base64ID) (ent.Noder, error) {
	var nodeType string
	switch id.Prefix {
	case gqlid.ContentModel:
		nodeType = content.Table
	case gqlid.ContentEpisodeModel:
		nodeType = contentepisode.Table
	case gqlid.CourseModel:
		nodeType = course.Table
	case gqlid.JournalRecordModel:
		nodeType = journalrecord.Table
	case gqlid.LessonAudioModel:
		nodeType = lessonaudio.Table
	case gqlid.LessonModel:
		nodeType = lesson.Table
	case gqlid.TechniqueModel:
		nodeType = technique.Table
	case gqlid.UnitModel:
		nodeType = unit.Table
	default:
		panic(fmt.Errorf("not implemented"))
	}

	return r.client.Noder(ctx, id.String(), ent.WithFixedNodeType(nodeType))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []*gqlid.Base64ID) ([]ent.Noder, error) {
	var (
		res = make([]ent.Noder, len(ids))
		err error
	)

	for i, id := range ids {
		if id == nil {
			return nil, fmt.Errorf("id is empty")
		}
		res[i], err = r.Node(ctx, *id)
		if err != nil {
			return nil, err
		}
	}

	return res, nil
}

// Contents is the resolver for the contents field.
func (r *queryResolver) Contents(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.ContentOrder, where *ent.ContentWhereInput) (*ent.ContentConnection, error) {
	contents := r.client.Content.Query().Where(content.IsHidden(false)).Order(ent.Asc(content.FieldOrder))

	if where != nil {
		var err error
		contents, err = where.Filter(contents)
		if err != nil {
			r.logger.Error("failed to filter contents", zap.Error(err))
			return nil, fmt.Errorf("internal server error")
		}
	}

	return contents.Paginate(ctx, after, first, before, last, ent.WithContentOrder(orderBy))
}

// ContentEpisodes is the resolver for the contentEpisodes field.
func (r *queryResolver) ContentEpisodes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.ContentEpisodeOrder, where *ent.ContentEpisodeWhereInput) (*ent.ContentEpisodeConnection, error) {
	episodes := r.client.ContentEpisode.Query().Where(contentepisode.IsHidden(false))

	if where != nil {
		var err error
		episodes, err = where.Filter(episodes)
		if err != nil {
			r.logger.Error("failed to filter content episodes", zap.Error(err))
			return nil, fmt.Errorf("internal server error")
		}
	}

	return episodes.Paginate(ctx, after, first, before, last, ent.WithContentEpisodeOrder(orderBy))
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.CourseOrder, where *ent.CourseWhereInput) (*ent.CourseConnection, error) {
	courses := r.client.Course.Query()

	if where != nil {
		var err error
		courses, err = where.Filter(courses)
		if err != nil {
			r.logger.Error("failed to filter courses", zap.Error(err))
			return nil, fmt.Errorf("internal server error")
		}
	}

	return courses.Paginate(ctx, after, first, before, last, ent.WithCourseOrder(orderBy))
}

// JournalRecords is the resolver for the journalRecords field.
func (r *queryResolver) JournalRecords(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.JournalRecordOrder, where *ent.JournalRecordWhereInput) (*ent.JournalRecordConnection, error) {
	authenticatedUser, err := authctx.GetUser(ctx)
	if err != nil {
		r.logger.Error("failed to get user from context", zap.Error(err))
		return nil, fmt.Errorf("user is not authorized")
	}

	records := r.client.JournalRecord.Query().Where(journalrecord.UserID(authenticatedUser.ID))

	if where != nil {
		records, err = where.Filter(records)
		if err != nil {
			r.logger.Error("failed to filter journal records", zap.Error(err))
			return nil, fmt.Errorf("internal server error")
		}
	}

	return records.Paginate(ctx, after, first, before, last, ent.WithJournalRecordOrder(orderBy))
}

// Lessons is the resolver for the lessons field.
func (r *queryResolver) Lessons(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.LessonOrder, where *ent.LessonWhereInput) (*ent.LessonConnection, error) {
	lessons := r.client.Lesson.Query()

	if where != nil {
		var err error
		lessons, err = where.Filter(lessons)
		if err != nil {
			r.logger.Error("failed to filter lessons", zap.Error(err))
			return nil, fmt.Errorf("internal server error")
		}
	}

	return lessons.Paginate(ctx, after, first, before, last, ent.WithLessonOrder(orderBy))
}

// Techniques is the resolver for the techniques field.
func (r *queryResolver) Techniques(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.TechniqueOrder, where *ent.TechniqueWhereInput) (*ent.TechniqueConnection, error) {
	techniques := r.client.Technique.Query()

	if where != nil {
		var err error
		techniques, err = where.Filter(techniques)
		if err != nil {
			r.logger.Error("failed to filter techniques", zap.Error(err))
			return nil, fmt.Errorf("internal server error")
		}
	}

	return techniques.Paginate(ctx, after, first, before, last, ent.WithTechniqueOrder(orderBy))
}

// Units is the resolver for the units field.
func (r *queryResolver) Units(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.UnitOrder, where *ent.UnitWhereInput) (*ent.UnitConnection, error) {
	units := r.client.Debug().Unit.Query()

	if where != nil {
		var err error
		units, err = where.Filter(units)
		if err != nil {
			r.logger.Error("failed to filter units", zap.Error(err))
			return nil, fmt.Errorf("internal server error")
		}
	}

	return units.Paginate(ctx, after, first, before, last, ent.WithUnitOrder(orderBy))
}

// ID is the resolver for the id field.
func (r *techniqueResolver) ID(ctx context.Context, obj *ent.Technique) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// UnitID is the resolver for the unitID field.
func (r *techniqueResolver) UnitID(ctx context.Context, obj *ent.Technique) (*gqlid.Base64ID, error) {
	return obj.UnitID.Base64ID(), nil
}

// ID is the resolver for the id field.
func (r *unitResolver) ID(ctx context.Context, obj *ent.Unit) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// CourseID is the resolver for the courseID field.
func (r *unitResolver) CourseID(ctx context.Context, obj *ent.Unit) (*gqlid.Base64ID, error) {
	return obj.CourseID.Base64ID(), nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// ID is the resolver for the id field.
func (r *userProgressResolver) ID(ctx context.Context, obj *ent.UserProgress) (*gqlid.Base64ID, error) {
	return obj.ID.Base64ID(), nil
}

// UserID is the resolver for the userID field.
func (r *userProgressResolver) UserID(ctx context.Context, obj *ent.UserProgress) (*gqlid.Base64ID, error) {
	return obj.UserID.Base64ID(), nil
}

// CourseID is the resolver for the courseID field.
func (r *userProgressResolver) CourseID(ctx context.Context, obj *ent.UserProgress) (*gqlid.Base64ID, error) {
	return obj.CourseID.Base64ID(), nil
}

// UnitID is the resolver for the unitID field.
func (r *userProgressResolver) UnitID(ctx context.Context, obj *ent.UserProgress) (*gqlid.Base64ID, error) {
	return obj.UnitID.Base64ID(), nil
}

// LessonID is the resolver for the lessonID field.
func (r *userProgressResolver) LessonID(ctx context.Context, obj *ent.UserProgress) (*gqlid.Base64ID, error) {
	return obj.LessonID.Base64ID(), nil
}

// ID is the resolver for the id field.
func (r *contentEpisodeWhereInputResolver) ID(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentEpisodeIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentepisode.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *contentEpisodeWhereInputResolver) IDNeq(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentEpisodeIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentepisode.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *contentEpisodeWhereInputResolver) IDIn(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentEpisodeID
		id  *gqlid.ContentEpisodeID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentEpisodeIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentepisode.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *contentEpisodeWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentEpisodeID
		id  *gqlid.ContentEpisodeID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentEpisodeIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentepisode.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *contentEpisodeWhereInputResolver) IDGt(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentEpisodeIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentepisode.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *contentEpisodeWhereInputResolver) IDGte(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentEpisodeIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentepisode.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *contentEpisodeWhereInputResolver) IDLt(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentEpisodeIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentepisode.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *contentEpisodeWhereInputResolver) IDLte(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentEpisodeIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentepisode.IDLTE(*id))
	}

	return nil
}

// ContentID is the resolver for the contentID field.
func (r *contentEpisodeWhereInputResolver) ContentID(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentepisode.ContentID(*id))
	}

	return nil
}

// ContentIDNeq is the resolver for the contentIDNEQ field.
func (r *contentEpisodeWhereInputResolver) ContentIDNeq(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentepisode.ContentIDNEQ(*id))
	}

	return nil
}

// ContentIDIn is the resolver for the contentIDIn field.
func (r *contentEpisodeWhereInputResolver) ContentIDIn(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentID
		id  *gqlid.ContentID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentepisode.ContentIDIn(ids...))
	}

	return nil
}

// ContentIDNotIn is the resolver for the contentIDNotIn field.
func (r *contentEpisodeWhereInputResolver) ContentIDNotIn(ctx context.Context, obj *ent.ContentEpisodeWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentID
		id  *gqlid.ContentID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentepisode.ContentIDNotIn(ids...))
	}

	return nil
}

// ID is the resolver for the id field.
func (r *contentProgressWhereInputResolver) ID(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *contentProgressWhereInputResolver) IDNeq(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *contentProgressWhereInputResolver) IDIn(ctx context.Context, obj *ent.ContentProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentProgressID
		id  *gqlid.ContentProgressID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentProgressIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentprogress.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *contentProgressWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.ContentProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentProgressID
		id  *gqlid.ContentProgressID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentProgressIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentprogress.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *contentProgressWhereInputResolver) IDGt(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *contentProgressWhereInputResolver) IDGte(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *contentProgressWhereInputResolver) IDLt(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *contentProgressWhereInputResolver) IDLte(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.IDLTE(*id))
	}

	return nil
}

// UserID is the resolver for the userID field.
func (r *contentProgressWhereInputResolver) UserID(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.UserID(*id))
	}

	return nil
}

// UserIDNeq is the resolver for the userIDNEQ field.
func (r *contentProgressWhereInputResolver) UserIDNeq(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.UserIDNEQ(*id))
	}

	return nil
}

// UserIDIn is the resolver for the userIDIn field.
func (r *contentProgressWhereInputResolver) UserIDIn(ctx context.Context, obj *ent.ContentProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UserID
		id  *gqlid.UserID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUserIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentprogress.UserIDIn(ids...))
	}

	return nil
}

// UserIDNotIn is the resolver for the userIDNotIn field.
func (r *contentProgressWhereInputResolver) UserIDNotIn(ctx context.Context, obj *ent.ContentProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UserID
		id  *gqlid.UserID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUserIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentprogress.UserIDNotIn(ids...))
	}

	return nil
}

// ContentID is the resolver for the contentID field.
func (r *contentProgressWhereInputResolver) ContentID(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.ContentID(*id))
	}

	return nil
}

// ContentIDNeq is the resolver for the contentIDNEQ field.
func (r *contentProgressWhereInputResolver) ContentIDNeq(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.ContentIDNEQ(*id))
	}

	return nil
}

// ContentIDIn is the resolver for the contentIDIn field.
func (r *contentProgressWhereInputResolver) ContentIDIn(ctx context.Context, obj *ent.ContentProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentID
		id  *gqlid.ContentID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentprogress.ContentIDIn(ids...))
	}

	return nil
}

// ContentIDNotIn is the resolver for the contentIDNotIn field.
func (r *contentProgressWhereInputResolver) ContentIDNotIn(ctx context.Context, obj *ent.ContentProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentID
		id  *gqlid.ContentID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentprogress.ContentIDNotIn(ids...))
	}

	return nil
}

// EpisodeID is the resolver for the episodeID field.
func (r *contentProgressWhereInputResolver) EpisodeID(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentEpisodeIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.EpisodeID(*id))
	}

	return nil
}

// EpisodeIDNeq is the resolver for the episodeIDNEQ field.
func (r *contentProgressWhereInputResolver) EpisodeIDNeq(ctx context.Context, obj *ent.ContentProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentEpisodeIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(contentprogress.EpisodeIDNEQ(*id))
	}

	return nil
}

// EpisodeIDIn is the resolver for the episodeIDIn field.
func (r *contentProgressWhereInputResolver) EpisodeIDIn(ctx context.Context, obj *ent.ContentProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentEpisodeID
		id  *gqlid.ContentEpisodeID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentEpisodeIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentprogress.EpisodeIDIn(ids...))
	}

	return nil
}

// EpisodeIDNotIn is the resolver for the episodeIDNotIn field.
func (r *contentProgressWhereInputResolver) EpisodeIDNotIn(ctx context.Context, obj *ent.ContentProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentEpisodeID
		id  *gqlid.ContentEpisodeID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentEpisodeIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(contentprogress.EpisodeIDNotIn(ids...))
	}

	return nil
}

// ID is the resolver for the id field.
func (r *contentWhereInputResolver) ID(ctx context.Context, obj *ent.ContentWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(content.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *contentWhereInputResolver) IDNeq(ctx context.Context, obj *ent.ContentWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(content.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *contentWhereInputResolver) IDIn(ctx context.Context, obj *ent.ContentWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentID
		id  *gqlid.ContentID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(content.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *contentWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.ContentWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.ContentID
		id  *gqlid.ContentID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewContentIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(content.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *contentWhereInputResolver) IDGt(ctx context.Context, obj *ent.ContentWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(content.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *contentWhereInputResolver) IDGte(ctx context.Context, obj *ent.ContentWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(content.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *contentWhereInputResolver) IDLt(ctx context.Context, obj *ent.ContentWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(content.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *contentWhereInputResolver) IDLte(ctx context.Context, obj *ent.ContentWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewContentIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(content.IDLTE(*id))
	}

	return nil
}

// ID is the resolver for the id field.
func (r *courseWhereInputResolver) ID(ctx context.Context, obj *ent.CourseWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewCourseIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(course.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *courseWhereInputResolver) IDNeq(ctx context.Context, obj *ent.CourseWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewCourseIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(course.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *courseWhereInputResolver) IDIn(ctx context.Context, obj *ent.CourseWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.CourseID
		id  *gqlid.CourseID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewCourseIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(course.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *courseWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.CourseWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.CourseID
		id  *gqlid.CourseID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewCourseIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(course.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *courseWhereInputResolver) IDGt(ctx context.Context, obj *ent.CourseWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewCourseIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(course.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *courseWhereInputResolver) IDGte(ctx context.Context, obj *ent.CourseWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewCourseIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(course.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *courseWhereInputResolver) IDLt(ctx context.Context, obj *ent.CourseWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewCourseIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(course.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *courseWhereInputResolver) IDLte(ctx context.Context, obj *ent.CourseWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewCourseIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(course.IDLTE(*id))
	}

	return nil
}

// ID is the resolver for the id field.
func (r *journalRecordWhereInputResolver) ID(ctx context.Context, obj *ent.JournalRecordWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewJournalRecordIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(journalrecord.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *journalRecordWhereInputResolver) IDNeq(ctx context.Context, obj *ent.JournalRecordWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewJournalRecordIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(journalrecord.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *journalRecordWhereInputResolver) IDIn(ctx context.Context, obj *ent.JournalRecordWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.JournalRecordID
		id  *gqlid.JournalRecordID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewJournalRecordIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(journalrecord.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *journalRecordWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.JournalRecordWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.JournalRecordID
		id  *gqlid.JournalRecordID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewJournalRecordIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(journalrecord.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *journalRecordWhereInputResolver) IDGt(ctx context.Context, obj *ent.JournalRecordWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewJournalRecordIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(journalrecord.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *journalRecordWhereInputResolver) IDGte(ctx context.Context, obj *ent.JournalRecordWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewJournalRecordIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(journalrecord.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *journalRecordWhereInputResolver) IDLt(ctx context.Context, obj *ent.JournalRecordWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewJournalRecordIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(journalrecord.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *journalRecordWhereInputResolver) IDLte(ctx context.Context, obj *ent.JournalRecordWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewJournalRecordIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(journalrecord.IDLTE(*id))
	}

	return nil
}

// UserID is the resolver for the userID field.
func (r *journalRecordWhereInputResolver) UserID(ctx context.Context, obj *ent.JournalRecordWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(journalrecord.UserID(*id))
	}

	return nil
}

// UserIDNeq is the resolver for the userIDNEQ field.
func (r *journalRecordWhereInputResolver) UserIDNeq(ctx context.Context, obj *ent.JournalRecordWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(journalrecord.UserIDNEQ(*id))
	}

	return nil
}

// UserIDIn is the resolver for the userIDIn field.
func (r *journalRecordWhereInputResolver) UserIDIn(ctx context.Context, obj *ent.JournalRecordWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UserID
		id  *gqlid.UserID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUserIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(journalrecord.UserIDIn(ids...))
	}

	return nil
}

// UserIDNotIn is the resolver for the userIDNotIn field.
func (r *journalRecordWhereInputResolver) UserIDNotIn(ctx context.Context, obj *ent.JournalRecordWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UserID
		id  *gqlid.UserID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUserIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(journalrecord.UserIDNotIn(ids...))
	}

	return nil
}

// LessonID is the resolver for the lessonID field.
func (r *journalRecordWhereInputResolver) LessonID(ctx context.Context, obj *ent.JournalRecordWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(journalrecord.LessonID(*id))
	}

	return nil
}

// LessonIDNeq is the resolver for the lessonIDNEQ field.
func (r *journalRecordWhereInputResolver) LessonIDNeq(ctx context.Context, obj *ent.JournalRecordWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(journalrecord.LessonIDNEQ(*id))
	}

	return nil
}

// LessonIDIn is the resolver for the lessonIDIn field.
func (r *journalRecordWhereInputResolver) LessonIDIn(ctx context.Context, obj *ent.JournalRecordWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.LessonID
		id  *gqlid.LessonID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewLessonIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(journalrecord.LessonIDIn(ids...))
	}

	return nil
}

// LessonIDNotIn is the resolver for the lessonIDNotIn field.
func (r *journalRecordWhereInputResolver) LessonIDNotIn(ctx context.Context, obj *ent.JournalRecordWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.LessonID
		id  *gqlid.LessonID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewLessonIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(journalrecord.LessonIDNotIn(ids...))
	}

	return nil
}

// ID is the resolver for the id field.
func (r *lessonAudioWhereInputResolver) ID(ctx context.Context, obj *ent.LessonAudioWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonAudioIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lessonaudio.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *lessonAudioWhereInputResolver) IDNeq(ctx context.Context, obj *ent.LessonAudioWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonAudioIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lessonaudio.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *lessonAudioWhereInputResolver) IDIn(ctx context.Context, obj *ent.LessonAudioWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.LessonAudioID
		id  *gqlid.LessonAudioID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewLessonAudioIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(lessonaudio.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *lessonAudioWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.LessonAudioWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.LessonAudioID
		id  *gqlid.LessonAudioID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewLessonAudioIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(lessonaudio.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *lessonAudioWhereInputResolver) IDGt(ctx context.Context, obj *ent.LessonAudioWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonAudioIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lessonaudio.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *lessonAudioWhereInputResolver) IDGte(ctx context.Context, obj *ent.LessonAudioWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonAudioIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lessonaudio.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *lessonAudioWhereInputResolver) IDLt(ctx context.Context, obj *ent.LessonAudioWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonAudioIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lessonaudio.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *lessonAudioWhereInputResolver) IDLte(ctx context.Context, obj *ent.LessonAudioWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonAudioIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lessonaudio.IDLTE(*id))
	}

	return nil
}

// LessonID is the resolver for the lessonID field.
func (r *lessonAudioWhereInputResolver) LessonID(ctx context.Context, obj *ent.LessonAudioWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lessonaudio.LessonID(*id))
	}

	return nil
}

// LessonIDNeq is the resolver for the lessonIDNEQ field.
func (r *lessonAudioWhereInputResolver) LessonIDNeq(ctx context.Context, obj *ent.LessonAudioWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lessonaudio.LessonIDNEQ(*id))
	}

	return nil
}

// LessonIDIn is the resolver for the lessonIDIn field.
func (r *lessonAudioWhereInputResolver) LessonIDIn(ctx context.Context, obj *ent.LessonAudioWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.LessonID
		id  *gqlid.LessonID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewLessonIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(lessonaudio.LessonIDIn(ids...))
	}

	return nil
}

// LessonIDNotIn is the resolver for the lessonIDNotIn field.
func (r *lessonAudioWhereInputResolver) LessonIDNotIn(ctx context.Context, obj *ent.LessonAudioWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.LessonID
		id  *gqlid.LessonID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewLessonIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(lessonaudio.LessonIDNotIn(ids...))
	}

	return nil
}

// ID is the resolver for the id field.
func (r *lessonWhereInputResolver) ID(ctx context.Context, obj *ent.LessonWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lesson.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *lessonWhereInputResolver) IDNeq(ctx context.Context, obj *ent.LessonWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lesson.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *lessonWhereInputResolver) IDIn(ctx context.Context, obj *ent.LessonWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.LessonID
		id  *gqlid.LessonID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewLessonIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(lesson.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *lessonWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.LessonWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.LessonID
		id  *gqlid.LessonID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewLessonIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(lesson.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *lessonWhereInputResolver) IDGt(ctx context.Context, obj *ent.LessonWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lesson.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *lessonWhereInputResolver) IDGte(ctx context.Context, obj *ent.LessonWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lesson.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *lessonWhereInputResolver) IDLt(ctx context.Context, obj *ent.LessonWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lesson.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *lessonWhereInputResolver) IDLte(ctx context.Context, obj *ent.LessonWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lesson.IDLTE(*id))
	}

	return nil
}

// UnitID is the resolver for the unitID field.
func (r *lessonWhereInputResolver) UnitID(ctx context.Context, obj *ent.LessonWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lesson.UnitID(*id))
	}

	return nil
}

// UnitIDNeq is the resolver for the unitIDNEQ field.
func (r *lessonWhereInputResolver) UnitIDNeq(ctx context.Context, obj *ent.LessonWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(lesson.UnitIDNEQ(*id))
	}

	return nil
}

// UnitIDIn is the resolver for the unitIDIn field.
func (r *lessonWhereInputResolver) UnitIDIn(ctx context.Context, obj *ent.LessonWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UnitID
		id  *gqlid.UnitID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUnitIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(lesson.UnitIDIn(ids...))
	}

	return nil
}

// UnitIDNotIn is the resolver for the unitIDNotIn field.
func (r *lessonWhereInputResolver) UnitIDNotIn(ctx context.Context, obj *ent.LessonWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UnitID
		id  *gqlid.UnitID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUnitIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(lesson.UnitIDNotIn(ids...))
	}

	return nil
}

// ID is the resolver for the id field.
func (r *techniqueWhereInputResolver) ID(ctx context.Context, obj *ent.TechniqueWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewTechniqueIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(technique.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *techniqueWhereInputResolver) IDNeq(ctx context.Context, obj *ent.TechniqueWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewTechniqueIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(technique.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *techniqueWhereInputResolver) IDIn(ctx context.Context, obj *ent.TechniqueWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.TechniqueID
		id  *gqlid.TechniqueID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewTechniqueIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(technique.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *techniqueWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.TechniqueWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.TechniqueID
		id  *gqlid.TechniqueID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewTechniqueIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(technique.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *techniqueWhereInputResolver) IDGt(ctx context.Context, obj *ent.TechniqueWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewTechniqueIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(technique.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *techniqueWhereInputResolver) IDGte(ctx context.Context, obj *ent.TechniqueWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewTechniqueIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(technique.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *techniqueWhereInputResolver) IDLt(ctx context.Context, obj *ent.TechniqueWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewTechniqueIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(technique.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *techniqueWhereInputResolver) IDLte(ctx context.Context, obj *ent.TechniqueWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewTechniqueIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(technique.IDLTE(*id))
	}

	return nil
}

// UnitID is the resolver for the unitID field.
func (r *techniqueWhereInputResolver) UnitID(ctx context.Context, obj *ent.TechniqueWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(technique.UnitID(*id))
	}

	return nil
}

// UnitIDNeq is the resolver for the unitIDNEQ field.
func (r *techniqueWhereInputResolver) UnitIDNeq(ctx context.Context, obj *ent.TechniqueWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(technique.UnitIDNEQ(*id))
	}

	return nil
}

// UnitIDIn is the resolver for the unitIDIn field.
func (r *techniqueWhereInputResolver) UnitIDIn(ctx context.Context, obj *ent.TechniqueWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UnitID
		id  *gqlid.UnitID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUnitIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(technique.UnitIDIn(ids...))
	}

	return nil
}

// UnitIDNotIn is the resolver for the unitIDNotIn field.
func (r *techniqueWhereInputResolver) UnitIDNotIn(ctx context.Context, obj *ent.TechniqueWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UnitID
		id  *gqlid.UnitID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUnitIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(technique.UnitIDNotIn(ids...))
	}

	return nil
}

// ID is the resolver for the id field.
func (r *unitWhereInputResolver) ID(ctx context.Context, obj *ent.UnitWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(unit.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *unitWhereInputResolver) IDNeq(ctx context.Context, obj *ent.UnitWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(unit.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *unitWhereInputResolver) IDIn(ctx context.Context, obj *ent.UnitWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UnitID
		id  *gqlid.UnitID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUnitIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(unit.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *unitWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.UnitWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UnitID
		id  *gqlid.UnitID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUnitIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(unit.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *unitWhereInputResolver) IDGt(ctx context.Context, obj *ent.UnitWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(unit.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *unitWhereInputResolver) IDGte(ctx context.Context, obj *ent.UnitWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(unit.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *unitWhereInputResolver) IDLt(ctx context.Context, obj *ent.UnitWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(unit.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *unitWhereInputResolver) IDLte(ctx context.Context, obj *ent.UnitWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(unit.IDLTE(*id))
	}

	return nil
}

// CourseID is the resolver for the courseID field.
func (r *unitWhereInputResolver) CourseID(ctx context.Context, obj *ent.UnitWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewCourseIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(unit.CourseID(*id))
	}

	return nil
}

// CourseIDNeq is the resolver for the courseIDNEQ field.
func (r *unitWhereInputResolver) CourseIDNeq(ctx context.Context, obj *ent.UnitWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewCourseIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(unit.CourseIDNEQ(*id))
	}

	return nil
}

// CourseIDIn is the resolver for the courseIDIn field.
func (r *unitWhereInputResolver) CourseIDIn(ctx context.Context, obj *ent.UnitWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.CourseID
		id  *gqlid.CourseID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewCourseIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(unit.CourseIDIn(ids...))
	}

	return nil
}

// CourseIDNotIn is the resolver for the courseIDNotIn field.
func (r *unitWhereInputResolver) CourseIDNotIn(ctx context.Context, obj *ent.UnitWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.CourseID
		id  *gqlid.CourseID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewCourseIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(unit.CourseIDNotIn(ids...))
	}

	return nil
}

// ID is the resolver for the id field.
func (r *userProgressWhereInputResolver) ID(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *userProgressWhereInputResolver) IDNeq(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *userProgressWhereInputResolver) IDIn(ctx context.Context, obj *ent.UserProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UserProgressID
		id  *gqlid.UserProgressID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUserProgressIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(userprogress.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *userProgressWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.UserProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UserProgressID
		id  *gqlid.UserProgressID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUserProgressIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(userprogress.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *userProgressWhereInputResolver) IDGt(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *userProgressWhereInputResolver) IDGte(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *userProgressWhereInputResolver) IDLt(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *userProgressWhereInputResolver) IDLte(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserProgressIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.IDLTE(*id))
	}

	return nil
}

// UserID is the resolver for the userID field.
func (r *userProgressWhereInputResolver) UserID(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.UserID(*id))
	}

	return nil
}

// UserIDNeq is the resolver for the userIDNEQ field.
func (r *userProgressWhereInputResolver) UserIDNeq(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.UserIDNEQ(*id))
	}

	return nil
}

// UserIDIn is the resolver for the userIDIn field.
func (r *userProgressWhereInputResolver) UserIDIn(ctx context.Context, obj *ent.UserProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UserID
		id  *gqlid.UserID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUserIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(userprogress.UserIDIn(ids...))
	}

	return nil
}

// UserIDNotIn is the resolver for the userIDNotIn field.
func (r *userProgressWhereInputResolver) UserIDNotIn(ctx context.Context, obj *ent.UserProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UserID
		id  *gqlid.UserID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUserIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(userprogress.UserIDNotIn(ids...))
	}

	return nil
}

// CourseID is the resolver for the courseID field.
func (r *userProgressWhereInputResolver) CourseID(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewCourseIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.CourseID(*id))
	}

	return nil
}

// CourseIDNeq is the resolver for the courseIDNEQ field.
func (r *userProgressWhereInputResolver) CourseIDNeq(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewCourseIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.CourseIDNEQ(*id))
	}

	return nil
}

// CourseIDIn is the resolver for the courseIDIn field.
func (r *userProgressWhereInputResolver) CourseIDIn(ctx context.Context, obj *ent.UserProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.CourseID
		id  *gqlid.CourseID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewCourseIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(userprogress.CourseIDIn(ids...))
	}

	return nil
}

// CourseIDNotIn is the resolver for the courseIDNotIn field.
func (r *userProgressWhereInputResolver) CourseIDNotIn(ctx context.Context, obj *ent.UserProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.CourseID
		id  *gqlid.CourseID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewCourseIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(userprogress.CourseIDNotIn(ids...))
	}

	return nil
}

// UnitID is the resolver for the unitID field.
func (r *userProgressWhereInputResolver) UnitID(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.UnitID(*id))
	}

	return nil
}

// UnitIDNeq is the resolver for the unitIDNEQ field.
func (r *userProgressWhereInputResolver) UnitIDNeq(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUnitIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.UnitIDNEQ(*id))
	}

	return nil
}

// UnitIDIn is the resolver for the unitIDIn field.
func (r *userProgressWhereInputResolver) UnitIDIn(ctx context.Context, obj *ent.UserProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UnitID
		id  *gqlid.UnitID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUnitIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(userprogress.UnitIDIn(ids...))
	}

	return nil
}

// UnitIDNotIn is the resolver for the unitIDNotIn field.
func (r *userProgressWhereInputResolver) UnitIDNotIn(ctx context.Context, obj *ent.UserProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UnitID
		id  *gqlid.UnitID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUnitIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(userprogress.UnitIDNotIn(ids...))
	}

	return nil
}

// LessonID is the resolver for the lessonID field.
func (r *userProgressWhereInputResolver) LessonID(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.LessonID(*id))
	}

	return nil
}

// LessonIDNeq is the resolver for the lessonIDNEQ field.
func (r *userProgressWhereInputResolver) LessonIDNeq(ctx context.Context, obj *ent.UserProgressWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewLessonIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(userprogress.LessonIDNEQ(*id))
	}

	return nil
}

// LessonIDIn is the resolver for the lessonIDIn field.
func (r *userProgressWhereInputResolver) LessonIDIn(ctx context.Context, obj *ent.UserProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.LessonID
		id  *gqlid.LessonID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewLessonIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(userprogress.LessonIDIn(ids...))
	}

	return nil
}

// LessonIDNotIn is the resolver for the lessonIDNotIn field.
func (r *userProgressWhereInputResolver) LessonIDNotIn(ctx context.Context, obj *ent.UserProgressWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.LessonID
		id  *gqlid.LessonID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewLessonIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(userprogress.LessonIDNotIn(ids...))
	}

	return nil
}

// ID is the resolver for the id field.
func (r *userWhereInputResolver) ID(ctx context.Context, obj *ent.UserWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(user.ID(*id))
	}

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *userWhereInputResolver) IDNeq(ctx context.Context, obj *ent.UserWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(user.IDNEQ(*id))
	}

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *userWhereInputResolver) IDIn(ctx context.Context, obj *ent.UserWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UserID
		id  *gqlid.UserID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUserIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(user.IDIn(ids...))
	}

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *userWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.UserWhereInput, data []*gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	var (
		ids []gqlid.UserID
		id  *gqlid.UserID
		err error
	)

	for _, rawID := range data {
		if id, err = gqlid.NewUserIDFromBase64(rawID); err != nil {
			return err
		}

		if id != nil {
			ids = append(ids, *id)
		}
	}

	if ids != nil {
		obj.AddPredicates(user.IDNotIn(ids...))
	}

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *userWhereInputResolver) IDGt(ctx context.Context, obj *ent.UserWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(user.IDGT(*id))
	}

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *userWhereInputResolver) IDGte(ctx context.Context, obj *ent.UserWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(user.IDGTE(*id))
	}

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *userWhereInputResolver) IDLt(ctx context.Context, obj *ent.UserWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(user.IDLT(*id))
	}

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *userWhereInputResolver) IDLte(ctx context.Context, obj *ent.UserWhereInput, data *gqlid.Base64ID) error {
	if obj == nil {
		return nil
	}

	id, err := gqlid.NewUserIDFromBase64(data)
	if err != nil {
		return err
	}

	if id != nil {
		obj.AddPredicates(user.IDLTE(*id))
	}

	return nil
}

// Content returns ContentResolver implementation.
func (r *Resolver) Content() ContentResolver { return &contentResolver{r} }

// ContentEpisode returns ContentEpisodeResolver implementation.
func (r *Resolver) ContentEpisode() ContentEpisodeResolver { return &contentEpisodeResolver{r} }

// ContentProgress returns ContentProgressResolver implementation.
func (r *Resolver) ContentProgress() ContentProgressResolver { return &contentProgressResolver{r} }

// Course returns CourseResolver implementation.
func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

// JournalRecord returns JournalRecordResolver implementation.
func (r *Resolver) JournalRecord() JournalRecordResolver { return &journalRecordResolver{r} }

// Lesson returns LessonResolver implementation.
func (r *Resolver) Lesson() LessonResolver { return &lessonResolver{r} }

// LessonAudio returns LessonAudioResolver implementation.
func (r *Resolver) LessonAudio() LessonAudioResolver { return &lessonAudioResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Technique returns TechniqueResolver implementation.
func (r *Resolver) Technique() TechniqueResolver { return &techniqueResolver{r} }

// Unit returns UnitResolver implementation.
func (r *Resolver) Unit() UnitResolver { return &unitResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// UserProgress returns UserProgressResolver implementation.
func (r *Resolver) UserProgress() UserProgressResolver { return &userProgressResolver{r} }

// ContentEpisodeWhereInput returns ContentEpisodeWhereInputResolver implementation.
func (r *Resolver) ContentEpisodeWhereInput() ContentEpisodeWhereInputResolver {
	return &contentEpisodeWhereInputResolver{r}
}

// ContentProgressWhereInput returns ContentProgressWhereInputResolver implementation.
func (r *Resolver) ContentProgressWhereInput() ContentProgressWhereInputResolver {
	return &contentProgressWhereInputResolver{r}
}

// ContentWhereInput returns ContentWhereInputResolver implementation.
func (r *Resolver) ContentWhereInput() ContentWhereInputResolver {
	return &contentWhereInputResolver{r}
}

// CourseWhereInput returns CourseWhereInputResolver implementation.
func (r *Resolver) CourseWhereInput() CourseWhereInputResolver { return &courseWhereInputResolver{r} }

// JournalRecordWhereInput returns JournalRecordWhereInputResolver implementation.
func (r *Resolver) JournalRecordWhereInput() JournalRecordWhereInputResolver {
	return &journalRecordWhereInputResolver{r}
}

// LessonAudioWhereInput returns LessonAudioWhereInputResolver implementation.
func (r *Resolver) LessonAudioWhereInput() LessonAudioWhereInputResolver {
	return &lessonAudioWhereInputResolver{r}
}

// LessonWhereInput returns LessonWhereInputResolver implementation.
func (r *Resolver) LessonWhereInput() LessonWhereInputResolver { return &lessonWhereInputResolver{r} }

// TechniqueWhereInput returns TechniqueWhereInputResolver implementation.
func (r *Resolver) TechniqueWhereInput() TechniqueWhereInputResolver {
	return &techniqueWhereInputResolver{r}
}

// UnitWhereInput returns UnitWhereInputResolver implementation.
func (r *Resolver) UnitWhereInput() UnitWhereInputResolver { return &unitWhereInputResolver{r} }

// UserProgressWhereInput returns UserProgressWhereInputResolver implementation.
func (r *Resolver) UserProgressWhereInput() UserProgressWhereInputResolver {
	return &userProgressWhereInputResolver{r}
}

// UserWhereInput returns UserWhereInputResolver implementation.
func (r *Resolver) UserWhereInput() UserWhereInputResolver { return &userWhereInputResolver{r} }

type contentResolver struct{ *Resolver }
type contentEpisodeResolver struct{ *Resolver }
type contentProgressResolver struct{ *Resolver }
type courseResolver struct{ *Resolver }
type journalRecordResolver struct{ *Resolver }
type lessonResolver struct{ *Resolver }
type lessonAudioResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type techniqueResolver struct{ *Resolver }
type unitResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type userProgressResolver struct{ *Resolver }
type contentEpisodeWhereInputResolver struct{ *Resolver }
type contentProgressWhereInputResolver struct{ *Resolver }
type contentWhereInputResolver struct{ *Resolver }
type courseWhereInputResolver struct{ *Resolver }
type journalRecordWhereInputResolver struct{ *Resolver }
type lessonAudioWhereInputResolver struct{ *Resolver }
type lessonWhereInputResolver struct{ *Resolver }
type techniqueWhereInputResolver struct{ *Resolver }
type unitWhereInputResolver struct{ *Resolver }
type userProgressWhereInputResolver struct{ *Resolver }
type userWhereInputResolver struct{ *Resolver }
