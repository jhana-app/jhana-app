directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Content implements Node {
  id: ID!
  type: ContentContentType!
  iconimage: String! @goField(name: "IconImage", forceResolver: false)
  coverimage: String! @goField(name: "CoverImage", forceResolver: false)
  title: String!
  subtitle: String!
  description: String!
  source: String!
  sourceurl: String! @goField(name: "SourceURL", forceResolver: false)
  licence: String!
  licenceurl: String! @goField(name: "LicenceURL", forceResolver: false)
  ishidden: Boolean! @goField(name: "IsHidden", forceResolver: false)
  order: Int!
  episodescount: Int! @goField(name: "EpisodesCount", forceResolver: false)
  episodes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ContentEpisodes returned from the connection.
    """
    orderBy: ContentEpisodeOrder

    """
    Filtering options for ContentEpisodes returned from the connection.
    """
    where: ContentEpisodeWhereInput
  ): ContentEpisodeConnection!
}
"""
A connection to a list of items.
"""
type ContentConnection {
  """
  A list of edges.
  """
  edges: [ContentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ContentContentType is enum for the field type
"""
enum ContentContentType @goModel(model: "github.com/jhana-app/jhana-app/ent/property.ContentType") {
  audio
  video
  text
}
"""
An edge in a connection.
"""
type ContentEdge {
  """
  The item at the end of the edge.
  """
  node: Content
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ContentEpisode implements Node {
  id: ID!
  contentID: ID!
  type: ContentEpisodeContentType!
  title: String!
  subtitle: String!
  description: String!
  duration: Int!
  streamurl: String! @goField(name: "StreamURL", forceResolver: false)
  downloadurl: String! @goField(name: "DownloadURL", forceResolver: false)
  source: String!
  sourceurl: String! @goField(name: "SourceURL", forceResolver: false)
  licence: String!
  licenceurl: String! @goField(name: "LicenceURL", forceResolver: false)
  ishidden: Boolean! @goField(name: "IsHidden", forceResolver: false)
  order: Int!
  content: Content!
}
"""
A connection to a list of items.
"""
type ContentEpisodeConnection {
  """
  A list of edges.
  """
  edges: [ContentEpisodeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ContentEpisodeContentType is enum for the field type
"""
enum ContentEpisodeContentType @goModel(model: "github.com/jhana-app/jhana-app/ent/property.ContentType") {
  audio
  video
  text
}
"""
An edge in a connection.
"""
type ContentEpisodeEdge {
  """
  The item at the end of the edge.
  """
  node: ContentEpisode
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for ContentEpisode connections
"""
input ContentEpisodeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ContentEpisodes.
  """
  field: ContentEpisodeOrderField!
}
"""
Properties by which ContentEpisode connections can be ordered.
"""
enum ContentEpisodeOrderField {
  ORDER
}
"""
ContentEpisodeWhereInput is used for filtering ContentEpisode objects.
Input was generated by ent.
"""
input ContentEpisodeWhereInput {
  not: ContentEpisodeWhereInput
  and: [ContentEpisodeWhereInput!]
  or: [ContentEpisodeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  content_id field predicates
  """
  contentID: ID
  contentIDNEQ: ID
  contentIDIn: [ID!]
  contentIDNotIn: [ID!]
  """
  type field predicates
  """
  type: ContentEpisodeContentType
  typeNEQ: ContentEpisodeContentType
  typeIn: [ContentEpisodeContentType!]
  typeNotIn: [ContentEpisodeContentType!]
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  subtitle field predicates
  """
  subtitle: String
  subtitleNEQ: String
  subtitleIn: [String!]
  subtitleNotIn: [String!]
  subtitleGT: String
  subtitleGTE: String
  subtitleLT: String
  subtitleLTE: String
  subtitleContains: String
  subtitleHasPrefix: String
  subtitleHasSuffix: String
  subtitleEqualFold: String
  subtitleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  duration field predicates
  """
  duration: Int
  durationNEQ: Int
  durationIn: [Int!]
  durationNotIn: [Int!]
  durationGT: Int
  durationGTE: Int
  durationLT: Int
  durationLTE: Int
  """
  streamURL field predicates
  """
  streamurl: String
  streamurlNEQ: String
  streamurlIn: [String!]
  streamurlNotIn: [String!]
  streamurlGT: String
  streamurlGTE: String
  streamurlLT: String
  streamurlLTE: String
  streamurlContains: String
  streamurlHasPrefix: String
  streamurlHasSuffix: String
  streamurlEqualFold: String
  streamurlContainsFold: String
  """
  downloadURL field predicates
  """
  downloadurl: String
  downloadurlNEQ: String
  downloadurlIn: [String!]
  downloadurlNotIn: [String!]
  downloadurlGT: String
  downloadurlGTE: String
  downloadurlLT: String
  downloadurlLTE: String
  downloadurlContains: String
  downloadurlHasPrefix: String
  downloadurlHasSuffix: String
  downloadurlEqualFold: String
  downloadurlContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceEqualFold: String
  sourceContainsFold: String
  """
  sourceURL field predicates
  """
  sourceurl: String
  sourceurlNEQ: String
  sourceurlIn: [String!]
  sourceurlNotIn: [String!]
  sourceurlGT: String
  sourceurlGTE: String
  sourceurlLT: String
  sourceurlLTE: String
  sourceurlContains: String
  sourceurlHasPrefix: String
  sourceurlHasSuffix: String
  sourceurlEqualFold: String
  sourceurlContainsFold: String
  """
  licence field predicates
  """
  licence: String
  licenceNEQ: String
  licenceIn: [String!]
  licenceNotIn: [String!]
  licenceGT: String
  licenceGTE: String
  licenceLT: String
  licenceLTE: String
  licenceContains: String
  licenceHasPrefix: String
  licenceHasSuffix: String
  licenceEqualFold: String
  licenceContainsFold: String
  """
  licenceURL field predicates
  """
  licenceurl: String
  licenceurlNEQ: String
  licenceurlIn: [String!]
  licenceurlNotIn: [String!]
  licenceurlGT: String
  licenceurlGTE: String
  licenceurlLT: String
  licenceurlLTE: String
  licenceurlContains: String
  licenceurlHasPrefix: String
  licenceurlHasSuffix: String
  licenceurlEqualFold: String
  licenceurlContainsFold: String
  """
  isHidden field predicates
  """
  ishidden: Boolean
  ishiddenNEQ: Boolean
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  content edge predicates
  """
  hasContent: Boolean
  hasContentWith: [ContentWhereInput!]
}
"""
Ordering options for Content connections
"""
input ContentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Contents.
  """
  field: ContentOrderField!
}
"""
Properties by which Content connections can be ordered.
"""
enum ContentOrderField {
  ORDER
}
type ContentProgress implements Node {
  id: ID!
  userID: ID!
  contentID: ID!
  episodeID: ID!
  contentType: ContentProgressContentType!
  progress: Int!
  finishedat: Time @goField(name: "FinishedAt", forceResolver: false)
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  user: User!
  content: Content!
  episode: ContentEpisode!
}
"""
ContentProgressContentType is enum for the field content_type
"""
enum ContentProgressContentType @goModel(model: "github.com/jhana-app/jhana-app/ent/property.ContentType") {
  audio
  video
  text
}
"""
ContentProgressWhereInput is used for filtering ContentProgress objects.
Input was generated by ent.
"""
input ContentProgressWhereInput {
  not: ContentProgressWhereInput
  and: [ContentProgressWhereInput!]
  or: [ContentProgressWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  content_id field predicates
  """
  contentID: ID
  contentIDNEQ: ID
  contentIDIn: [ID!]
  contentIDNotIn: [ID!]
  """
  episode_id field predicates
  """
  episodeID: ID
  episodeIDNEQ: ID
  episodeIDIn: [ID!]
  episodeIDNotIn: [ID!]
  """
  content_type field predicates
  """
  contentType: ContentProgressContentType
  contentTypeNEQ: ContentProgressContentType
  contentTypeIn: [ContentProgressContentType!]
  contentTypeNotIn: [ContentProgressContentType!]
  """
  progress field predicates
  """
  progress: Int
  progressNEQ: Int
  progressIn: [Int!]
  progressNotIn: [Int!]
  progressGT: Int
  progressGTE: Int
  progressLT: Int
  progressLTE: Int
  """
  finishedAt field predicates
  """
  finishedat: Time
  finishedatNEQ: Time
  finishedatIn: [Time!]
  finishedatNotIn: [Time!]
  finishedatGT: Time
  finishedatGTE: Time
  finishedatLT: Time
  finishedatLTE: Time
  finishedatIsNil: Boolean
  finishedatNotNil: Boolean
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  content edge predicates
  """
  hasContent: Boolean
  hasContentWith: [ContentWhereInput!]
  """
  episode edge predicates
  """
  hasEpisode: Boolean
  hasEpisodeWith: [ContentEpisodeWhereInput!]
}
"""
ContentWhereInput is used for filtering Content objects.
Input was generated by ent.
"""
input ContentWhereInput {
  not: ContentWhereInput
  and: [ContentWhereInput!]
  or: [ContentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  type field predicates
  """
  type: ContentContentType
  typeNEQ: ContentContentType
  typeIn: [ContentContentType!]
  typeNotIn: [ContentContentType!]
  """
  iconImage field predicates
  """
  iconimage: String
  iconimageNEQ: String
  iconimageIn: [String!]
  iconimageNotIn: [String!]
  iconimageGT: String
  iconimageGTE: String
  iconimageLT: String
  iconimageLTE: String
  iconimageContains: String
  iconimageHasPrefix: String
  iconimageHasSuffix: String
  iconimageEqualFold: String
  iconimageContainsFold: String
  """
  coverImage field predicates
  """
  coverimage: String
  coverimageNEQ: String
  coverimageIn: [String!]
  coverimageNotIn: [String!]
  coverimageGT: String
  coverimageGTE: String
  coverimageLT: String
  coverimageLTE: String
  coverimageContains: String
  coverimageHasPrefix: String
  coverimageHasSuffix: String
  coverimageEqualFold: String
  coverimageContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  subtitle field predicates
  """
  subtitle: String
  subtitleNEQ: String
  subtitleIn: [String!]
  subtitleNotIn: [String!]
  subtitleGT: String
  subtitleGTE: String
  subtitleLT: String
  subtitleLTE: String
  subtitleContains: String
  subtitleHasPrefix: String
  subtitleHasSuffix: String
  subtitleEqualFold: String
  subtitleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceEqualFold: String
  sourceContainsFold: String
  """
  sourceURL field predicates
  """
  sourceurl: String
  sourceurlNEQ: String
  sourceurlIn: [String!]
  sourceurlNotIn: [String!]
  sourceurlGT: String
  sourceurlGTE: String
  sourceurlLT: String
  sourceurlLTE: String
  sourceurlContains: String
  sourceurlHasPrefix: String
  sourceurlHasSuffix: String
  sourceurlEqualFold: String
  sourceurlContainsFold: String
  """
  licence field predicates
  """
  licence: String
  licenceNEQ: String
  licenceIn: [String!]
  licenceNotIn: [String!]
  licenceGT: String
  licenceGTE: String
  licenceLT: String
  licenceLTE: String
  licenceContains: String
  licenceHasPrefix: String
  licenceHasSuffix: String
  licenceEqualFold: String
  licenceContainsFold: String
  """
  licenceURL field predicates
  """
  licenceurl: String
  licenceurlNEQ: String
  licenceurlIn: [String!]
  licenceurlNotIn: [String!]
  licenceurlGT: String
  licenceurlGTE: String
  licenceurlLT: String
  licenceurlLTE: String
  licenceurlContains: String
  licenceurlHasPrefix: String
  licenceurlHasSuffix: String
  licenceurlEqualFold: String
  licenceurlContainsFold: String
  """
  isHidden field predicates
  """
  ishidden: Boolean
  ishiddenNEQ: Boolean
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  episodesCount field predicates
  """
  episodescount: Int
  episodescountNEQ: Int
  episodescountIn: [Int!]
  episodescountNotIn: [Int!]
  episodescountGT: Int
  episodescountGTE: Int
  episodescountLT: Int
  episodescountLTE: Int
  """
  episodes edge predicates
  """
  hasEpisodes: Boolean
  hasEpisodesWith: [ContentEpisodeWhereInput!]
}
type Course implements Node {
  id: ID!
  iconimage: String! @goField(name: "IconImage", forceResolver: false)
  coverimage: String! @goField(name: "CoverImage", forceResolver: false)
  title: String!
  description: String!
  color: String!
  active: Boolean!
  order: Int!
  units(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Units returned from the connection.
    """
    orderBy: UnitOrder

    """
    Filtering options for Units returned from the connection.
    """
    where: UnitWhereInput
  ): UnitConnection!
}
"""
A connection to a list of items.
"""
type CourseConnection {
  """
  A list of edges.
  """
  edges: [CourseEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CourseEdge {
  """
  The item at the end of the edge.
  """
  node: Course
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Course connections
"""
input CourseOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Courses.
  """
  field: CourseOrderField!
}
"""
Properties by which Course connections can be ordered.
"""
enum CourseOrderField {
  ORDER
}
"""
CourseWhereInput is used for filtering Course objects.
Input was generated by ent.
"""
input CourseWhereInput {
  not: CourseWhereInput
  and: [CourseWhereInput!]
  or: [CourseWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  iconImage field predicates
  """
  iconimage: String
  iconimageNEQ: String
  iconimageIn: [String!]
  iconimageNotIn: [String!]
  iconimageGT: String
  iconimageGTE: String
  iconimageLT: String
  iconimageLTE: String
  iconimageContains: String
  iconimageHasPrefix: String
  iconimageHasSuffix: String
  iconimageEqualFold: String
  iconimageContainsFold: String
  """
  coverImage field predicates
  """
  coverimage: String
  coverimageNEQ: String
  coverimageIn: [String!]
  coverimageNotIn: [String!]
  coverimageGT: String
  coverimageGTE: String
  coverimageLT: String
  coverimageLTE: String
  coverimageContains: String
  coverimageHasPrefix: String
  coverimageHasSuffix: String
  coverimageEqualFold: String
  coverimageContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  color field predicates
  """
  color: String
  colorNEQ: String
  colorIn: [String!]
  colorNotIn: [String!]
  colorGT: String
  colorGTE: String
  colorLT: String
  colorLTE: String
  colorContains: String
  colorHasPrefix: String
  colorHasSuffix: String
  colorEqualFold: String
  colorContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  units edge predicates
  """
  hasUnits: Boolean
  hasUnitsWith: [UnitWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type JournalRecord implements Node {
  id: ID!
  userID: ID!
  lessonID: ID
  datetime: Time! @goField(name: "DateTime", forceResolver: false)
  duration: Int!
  note: String!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  user: User!
  lesson: Lesson
}
"""
A connection to a list of items.
"""
type JournalRecordConnection {
  """
  A list of edges.
  """
  edges: [JournalRecordEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type JournalRecordEdge {
  """
  The item at the end of the edge.
  """
  node: JournalRecord
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for JournalRecord connections
"""
input JournalRecordOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order JournalRecords.
  """
  field: JournalRecordOrderField!
}
"""
Properties by which JournalRecord connections can be ordered.
"""
enum JournalRecordOrderField {
  DATE_TIME
  CREATED_AT
}
"""
JournalRecordWhereInput is used for filtering JournalRecord objects.
Input was generated by ent.
"""
input JournalRecordWhereInput {
  not: JournalRecordWhereInput
  and: [JournalRecordWhereInput!]
  or: [JournalRecordWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  lesson_id field predicates
  """
  lessonID: ID
  lessonIDNEQ: ID
  lessonIDIn: [ID!]
  lessonIDNotIn: [ID!]
  lessonIDIsNil: Boolean
  lessonIDNotNil: Boolean
  """
  dateTime field predicates
  """
  datetime: Time
  datetimeNEQ: Time
  datetimeIn: [Time!]
  datetimeNotIn: [Time!]
  datetimeGT: Time
  datetimeGTE: Time
  datetimeLT: Time
  datetimeLTE: Time
  """
  duration field predicates
  """
  duration: Int
  durationNEQ: Int
  durationIn: [Int!]
  durationNotIn: [Int!]
  durationGT: Int
  durationGTE: Int
  durationLT: Int
  durationLTE: Int
  """
  note field predicates
  """
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteEqualFold: String
  noteContainsFold: String
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  lesson edge predicates
  """
  hasLesson: Boolean
  hasLessonWith: [LessonWhereInput!]
}
type Lesson implements Node {
  id: ID!
  unitID: ID!
  type: LessonLessonType!
  iconimage: String! @goField(name: "IconImage", forceResolver: false)
  coverimage: String! @goField(name: "CoverImage", forceResolver: false)
  title: String!
  description: String!
  order: Int!
  unit: Unit!
}
type LessonAudio implements Node {
  id: ID!
  lessonID: ID!
  audiourl: String! @goField(name: "AudioURL", forceResolver: false)
  duration: Int!
  lesson: Lesson!
}
"""
Ordering options for LessonAudio connections
"""
input LessonAudioOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order LessonAudios.
  """
  field: LessonAudioOrderField!
}
"""
Properties by which LessonAudio connections can be ordered.
"""
enum LessonAudioOrderField {
  DURATION
}
"""
LessonAudioWhereInput is used for filtering LessonAudio objects.
Input was generated by ent.
"""
input LessonAudioWhereInput {
  not: LessonAudioWhereInput
  and: [LessonAudioWhereInput!]
  or: [LessonAudioWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  lesson_id field predicates
  """
  lessonID: ID
  lessonIDNEQ: ID
  lessonIDIn: [ID!]
  lessonIDNotIn: [ID!]
  """
  audioURL field predicates
  """
  audiourl: String
  audiourlNEQ: String
  audiourlIn: [String!]
  audiourlNotIn: [String!]
  audiourlGT: String
  audiourlGTE: String
  audiourlLT: String
  audiourlLTE: String
  audiourlContains: String
  audiourlHasPrefix: String
  audiourlHasSuffix: String
  audiourlEqualFold: String
  audiourlContainsFold: String
  """
  duration field predicates
  """
  duration: Int
  durationNEQ: Int
  durationIn: [Int!]
  durationNotIn: [Int!]
  durationGT: Int
  durationGTE: Int
  durationLT: Int
  durationLTE: Int
  """
  lesson edge predicates
  """
  hasLesson: Boolean
  hasLessonWith: [LessonWhereInput!]
}
"""
A connection to a list of items.
"""
type LessonConnection {
  """
  A list of edges.
  """
  edges: [LessonEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type LessonEdge {
  """
  The item at the end of the edge.
  """
  node: Lesson
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
LessonLessonType is enum for the field type
"""
enum LessonLessonType @goModel(model: "github.com/jhana-app/jhana-app/ent/property.LessonType") {
  guided
  mastery
}
"""
Ordering options for Lesson connections
"""
input LessonOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Lessons.
  """
  field: LessonOrderField!
}
"""
Properties by which Lesson connections can be ordered.
"""
enum LessonOrderField {
  ORDER
}
"""
LessonWhereInput is used for filtering Lesson objects.
Input was generated by ent.
"""
input LessonWhereInput {
  not: LessonWhereInput
  and: [LessonWhereInput!]
  or: [LessonWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  unit_id field predicates
  """
  unitID: ID
  unitIDNEQ: ID
  unitIDIn: [ID!]
  unitIDNotIn: [ID!]
  """
  type field predicates
  """
  type: LessonLessonType
  typeNEQ: LessonLessonType
  typeIn: [LessonLessonType!]
  typeNotIn: [LessonLessonType!]
  """
  iconImage field predicates
  """
  iconimage: String
  iconimageNEQ: String
  iconimageIn: [String!]
  iconimageNotIn: [String!]
  iconimageGT: String
  iconimageGTE: String
  iconimageLT: String
  iconimageLTE: String
  iconimageContains: String
  iconimageHasPrefix: String
  iconimageHasSuffix: String
  iconimageEqualFold: String
  iconimageContainsFold: String
  """
  coverImage field predicates
  """
  coverimage: String
  coverimageNEQ: String
  coverimageIn: [String!]
  coverimageNotIn: [String!]
  coverimageGT: String
  coverimageGTE: String
  coverimageLT: String
  coverimageLTE: String
  coverimageContains: String
  coverimageHasPrefix: String
  coverimageHasSuffix: String
  coverimageEqualFold: String
  coverimageContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  unit edge predicates
  """
  hasUnit: Boolean
  hasUnitWith: [UnitWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/jhana-app/jhana-app/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  contents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Contents returned from the connection.
    """
    orderBy: ContentOrder

    """
    Filtering options for Contents returned from the connection.
    """
    where: ContentWhereInput
  ): ContentConnection!
  contentEpisodes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ContentEpisodes returned from the connection.
    """
    orderBy: ContentEpisodeOrder

    """
    Filtering options for ContentEpisodes returned from the connection.
    """
    where: ContentEpisodeWhereInput
  ): ContentEpisodeConnection!
  courses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Courses returned from the connection.
    """
    orderBy: CourseOrder

    """
    Filtering options for Courses returned from the connection.
    """
    where: CourseWhereInput
  ): CourseConnection!
  journalRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JournalRecords returned from the connection.
    """
    orderBy: JournalRecordOrder

    """
    Filtering options for JournalRecords returned from the connection.
    """
    where: JournalRecordWhereInput
  ): JournalRecordConnection!
  lessons(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Lessons returned from the connection.
    """
    orderBy: LessonOrder

    """
    Filtering options for Lessons returned from the connection.
    """
    where: LessonWhereInput
  ): LessonConnection!
  techniques(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Techniques returned from the connection.
    """
    orderBy: TechniqueOrder

    """
    Filtering options for Techniques returned from the connection.
    """
    where: TechniqueWhereInput
  ): TechniqueConnection!
  units(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Units returned from the connection.
    """
    orderBy: UnitOrder

    """
    Filtering options for Units returned from the connection.
    """
    where: UnitWhereInput
  ): UnitConnection!
}
type Technique implements Node {
  id: ID!
  unitID: ID!
  iconimage: String! @goField(name: "IconImage", forceResolver: false)
  coverimage: String! @goField(name: "CoverImage", forceResolver: false)
  title: String!
  subtitle: String!
  description: String!
  order: Int!
  unit: Unit!
  lessons: [Lesson!]
  techniques: [Unit!]
}
"""
A connection to a list of items.
"""
type TechniqueConnection {
  """
  A list of edges.
  """
  edges: [TechniqueEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TechniqueEdge {
  """
  The item at the end of the edge.
  """
  node: Technique
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Technique connections
"""
input TechniqueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Techniques.
  """
  field: TechniqueOrderField!
}
"""
Properties by which Technique connections can be ordered.
"""
enum TechniqueOrderField {
  ORDER
}
"""
TechniqueWhereInput is used for filtering Technique objects.
Input was generated by ent.
"""
input TechniqueWhereInput {
  not: TechniqueWhereInput
  and: [TechniqueWhereInput!]
  or: [TechniqueWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  unit_id field predicates
  """
  unitID: ID
  unitIDNEQ: ID
  unitIDIn: [ID!]
  unitIDNotIn: [ID!]
  """
  iconImage field predicates
  """
  iconimage: String
  iconimageNEQ: String
  iconimageIn: [String!]
  iconimageNotIn: [String!]
  iconimageGT: String
  iconimageGTE: String
  iconimageLT: String
  iconimageLTE: String
  iconimageContains: String
  iconimageHasPrefix: String
  iconimageHasSuffix: String
  iconimageEqualFold: String
  iconimageContainsFold: String
  """
  coverImage field predicates
  """
  coverimage: String
  coverimageNEQ: String
  coverimageIn: [String!]
  coverimageNotIn: [String!]
  coverimageGT: String
  coverimageGTE: String
  coverimageLT: String
  coverimageLTE: String
  coverimageContains: String
  coverimageHasPrefix: String
  coverimageHasSuffix: String
  coverimageEqualFold: String
  coverimageContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  subtitle field predicates
  """
  subtitle: String
  subtitleNEQ: String
  subtitleIn: [String!]
  subtitleNotIn: [String!]
  subtitleGT: String
  subtitleGTE: String
  subtitleLT: String
  subtitleLTE: String
  subtitleContains: String
  subtitleHasPrefix: String
  subtitleHasSuffix: String
  subtitleEqualFold: String
  subtitleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  unit edge predicates
  """
  hasUnit: Boolean
  hasUnitWith: [UnitWhereInput!]
  """
  lessons edge predicates
  """
  hasLessons: Boolean
  hasLessonsWith: [LessonWhereInput!]
  """
  techniques edge predicates
  """
  hasTechniques: Boolean
  hasTechniquesWith: [UnitWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
type Unit implements Node {
  id: ID!
  courseID: ID!
  iconimage: String! @goField(name: "IconImage", forceResolver: false)
  coverimage: String! @goField(name: "CoverImage", forceResolver: false)
  title: String!
  subtitle: String!
  description: String!
  mastering: String!
  days: Int!
  color: String!
  order: Int!
  course: Course!
  lessons(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Lessons returned from the connection.
    """
    orderBy: LessonOrder

    """
    Filtering options for Lessons returned from the connection.
    """
    where: LessonWhereInput
  ): LessonConnection!
}
"""
A connection to a list of items.
"""
type UnitConnection {
  """
  A list of edges.
  """
  edges: [UnitEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UnitEdge {
  """
  The item at the end of the edge.
  """
  node: Unit
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Unit connections
"""
input UnitOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Units.
  """
  field: UnitOrderField!
}
"""
Properties by which Unit connections can be ordered.
"""
enum UnitOrderField {
  ORDER
}
"""
UnitWhereInput is used for filtering Unit objects.
Input was generated by ent.
"""
input UnitWhereInput {
  not: UnitWhereInput
  and: [UnitWhereInput!]
  or: [UnitWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  course_id field predicates
  """
  courseID: ID
  courseIDNEQ: ID
  courseIDIn: [ID!]
  courseIDNotIn: [ID!]
  """
  iconImage field predicates
  """
  iconimage: String
  iconimageNEQ: String
  iconimageIn: [String!]
  iconimageNotIn: [String!]
  iconimageGT: String
  iconimageGTE: String
  iconimageLT: String
  iconimageLTE: String
  iconimageContains: String
  iconimageHasPrefix: String
  iconimageHasSuffix: String
  iconimageEqualFold: String
  iconimageContainsFold: String
  """
  coverImage field predicates
  """
  coverimage: String
  coverimageNEQ: String
  coverimageIn: [String!]
  coverimageNotIn: [String!]
  coverimageGT: String
  coverimageGTE: String
  coverimageLT: String
  coverimageLTE: String
  coverimageContains: String
  coverimageHasPrefix: String
  coverimageHasSuffix: String
  coverimageEqualFold: String
  coverimageContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  subtitle field predicates
  """
  subtitle: String
  subtitleNEQ: String
  subtitleIn: [String!]
  subtitleNotIn: [String!]
  subtitleGT: String
  subtitleGTE: String
  subtitleLT: String
  subtitleLTE: String
  subtitleContains: String
  subtitleHasPrefix: String
  subtitleHasSuffix: String
  subtitleEqualFold: String
  subtitleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  mastering field predicates
  """
  mastering: String
  masteringNEQ: String
  masteringIn: [String!]
  masteringNotIn: [String!]
  masteringGT: String
  masteringGTE: String
  masteringLT: String
  masteringLTE: String
  masteringContains: String
  masteringHasPrefix: String
  masteringHasSuffix: String
  masteringEqualFold: String
  masteringContainsFold: String
  """
  days field predicates
  """
  days: Int
  daysNEQ: Int
  daysIn: [Int!]
  daysNotIn: [Int!]
  daysGT: Int
  daysGTE: Int
  daysLT: Int
  daysLTE: Int
  """
  color field predicates
  """
  color: String
  colorNEQ: String
  colorIn: [String!]
  colorNotIn: [String!]
  colorGT: String
  colorGTE: String
  colorLT: String
  colorLTE: String
  colorContains: String
  colorHasPrefix: String
  colorHasSuffix: String
  colorEqualFold: String
  colorContainsFold: String
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  course edge predicates
  """
  hasCourse: Boolean
  hasCourseWith: [CourseWhereInput!]
  """
  lessons edge predicates
  """
  hasLessons: Boolean
  hasLessonsWith: [LessonWhereInput!]
}
type User implements Node {
  id: ID!
  firebaseuid: String @goField(name: "FirebaseUid", forceResolver: false)
  displayname: String! @goField(name: "DisplayName", forceResolver: false)
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  authMethod: UserAuthMethod!
  email: String
  emailVerified: Boolean!
}
"""
UserAuthMethod is enum for the field auth_method
"""
enum UserAuthMethod @goModel(model: "github.com/jhana-app/jhana-app/ent/property.AuthMethod") {
  local
  firebase
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  CREATED_AT
}
type UserProgress implements Node {
  id: ID!
  userID: ID!
  courseID: ID!
  unitID: ID!
  lessonID: ID!
  lessonType: UserProgressLessonType!
  islast: Boolean! @goField(name: "IsLast", forceResolver: false)
  isnext: Boolean! @goField(name: "IsNext", forceResolver: false)
  progress: Int!
  finishedat: Time @goField(name: "FinishedAt", forceResolver: false)
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  user: User!
  course: Course!
  unit: Unit!
  lesson: Lesson!
}
"""
UserProgressLessonType is enum for the field lesson_type
"""
enum UserProgressLessonType @goModel(model: "github.com/jhana-app/jhana-app/ent/property.LessonType") {
  guided
  mastery
}
"""
Ordering options for UserProgress connections
"""
input UserProgressOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserProgresses.
  """
  field: UserProgressOrderField!
}
"""
Properties by which UserProgress connections can be ordered.
"""
enum UserProgressOrderField {
  FINISHED_AT
  CREATED_AT
}
"""
UserProgressWhereInput is used for filtering UserProgress objects.
Input was generated by ent.
"""
input UserProgressWhereInput {
  not: UserProgressWhereInput
  and: [UserProgressWhereInput!]
  or: [UserProgressWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  course_id field predicates
  """
  courseID: ID
  courseIDNEQ: ID
  courseIDIn: [ID!]
  courseIDNotIn: [ID!]
  """
  unit_id field predicates
  """
  unitID: ID
  unitIDNEQ: ID
  unitIDIn: [ID!]
  unitIDNotIn: [ID!]
  """
  lesson_id field predicates
  """
  lessonID: ID
  lessonIDNEQ: ID
  lessonIDIn: [ID!]
  lessonIDNotIn: [ID!]
  """
  lesson_type field predicates
  """
  lessonType: UserProgressLessonType
  lessonTypeNEQ: UserProgressLessonType
  lessonTypeIn: [UserProgressLessonType!]
  lessonTypeNotIn: [UserProgressLessonType!]
  """
  isLast field predicates
  """
  islast: Boolean
  islastNEQ: Boolean
  """
  isNext field predicates
  """
  isnext: Boolean
  isnextNEQ: Boolean
  """
  progress field predicates
  """
  progress: Int
  progressNEQ: Int
  progressIn: [Int!]
  progressNotIn: [Int!]
  progressGT: Int
  progressGTE: Int
  progressLT: Int
  progressLTE: Int
  """
  finishedAt field predicates
  """
  finishedat: Time
  finishedatNEQ: Time
  finishedatIn: [Time!]
  finishedatNotIn: [Time!]
  finishedatGT: Time
  finishedatGTE: Time
  finishedatLT: Time
  finishedatLTE: Time
  finishedatIsNil: Boolean
  finishedatNotNil: Boolean
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  course edge predicates
  """
  hasCourse: Boolean
  hasCourseWith: [CourseWhereInput!]
  """
  unit edge predicates
  """
  hasUnit: Boolean
  hasUnitWith: [UnitWhereInput!]
  """
  lesson edge predicates
  """
  hasLesson: Boolean
  hasLessonWith: [LessonWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  firebaseUid field predicates
  """
  firebaseuid: String
  firebaseuidNEQ: String
  firebaseuidIn: [String!]
  firebaseuidNotIn: [String!]
  firebaseuidGT: String
  firebaseuidGTE: String
  firebaseuidLT: String
  firebaseuidLTE: String
  firebaseuidContains: String
  firebaseuidHasPrefix: String
  firebaseuidHasSuffix: String
  firebaseuidIsNil: Boolean
  firebaseuidNotNil: Boolean
  firebaseuidEqualFold: String
  firebaseuidContainsFold: String
  """
  displayName field predicates
  """
  displayname: String
  displaynameNEQ: String
  displaynameIn: [String!]
  displaynameNotIn: [String!]
  displaynameGT: String
  displaynameGTE: String
  displaynameLT: String
  displaynameLTE: String
  displaynameContains: String
  displaynameHasPrefix: String
  displaynameHasSuffix: String
  displaynameEqualFold: String
  displaynameContainsFold: String
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  auth_method field predicates
  """
  authMethod: UserAuthMethod
  authMethodNEQ: UserAuthMethod
  authMethodIn: [UserAuthMethod!]
  authMethodNotIn: [UserAuthMethod!]
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  email_verified field predicates
  """
  emailVerified: Boolean
  emailVerifiedNEQ: Boolean
}
