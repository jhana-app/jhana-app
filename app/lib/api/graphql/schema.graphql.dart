// GENERATED FILE, DO NOT MODIFY
class Input$SignInWithEmailAndPasswordInput {
  factory Input$SignInWithEmailAndPasswordInput({
    required String email,
    required String password,
  }) =>
      Input$SignInWithEmailAndPasswordInput._({
        r'email': email,
        r'password': password,
      });

  Input$SignInWithEmailAndPasswordInput._(this._$data);

  factory Input$SignInWithEmailAndPasswordInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$email = data['email'];
    result$data['email'] = (l$email as String);
    final l$password = data['password'];
    result$data['password'] = (l$password as String);
    return Input$SignInWithEmailAndPasswordInput._(result$data);
  }

  Map<String, dynamic> _$data;

  String get email => (_$data['email'] as String);

  String get password => (_$data['password'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$email = email;
    result$data['email'] = l$email;
    final l$password = password;
    result$data['password'] = l$password;
    return result$data;
  }

  CopyWith$Input$SignInWithEmailAndPasswordInput<
          Input$SignInWithEmailAndPasswordInput>
      get copyWith => CopyWith$Input$SignInWithEmailAndPasswordInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SignInWithEmailAndPasswordInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (l$email != lOther$email) {
      return false;
    }
    final l$password = password;
    final lOther$password = other.password;
    if (l$password != lOther$password) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$email = email;
    final l$password = password;
    return Object.hashAll([
      l$email,
      l$password,
    ]);
  }
}

abstract class CopyWith$Input$SignInWithEmailAndPasswordInput<TRes> {
  factory CopyWith$Input$SignInWithEmailAndPasswordInput(
    Input$SignInWithEmailAndPasswordInput instance,
    TRes Function(Input$SignInWithEmailAndPasswordInput) then,
  ) = _CopyWithImpl$Input$SignInWithEmailAndPasswordInput;

  factory CopyWith$Input$SignInWithEmailAndPasswordInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SignInWithEmailAndPasswordInput;

  TRes call({
    String? email,
    String? password,
  });
}

class _CopyWithImpl$Input$SignInWithEmailAndPasswordInput<TRes>
    implements CopyWith$Input$SignInWithEmailAndPasswordInput<TRes> {
  _CopyWithImpl$Input$SignInWithEmailAndPasswordInput(
    this._instance,
    this._then,
  );

  final Input$SignInWithEmailAndPasswordInput _instance;

  final TRes Function(Input$SignInWithEmailAndPasswordInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? email = _undefined,
    Object? password = _undefined,
  }) =>
      _then(Input$SignInWithEmailAndPasswordInput._({
        ..._instance._$data,
        if (email != _undefined && email != null) 'email': (email as String),
        if (password != _undefined && password != null)
          'password': (password as String),
      }));
}

class _CopyWithStubImpl$Input$SignInWithEmailAndPasswordInput<TRes>
    implements CopyWith$Input$SignInWithEmailAndPasswordInput<TRes> {
  _CopyWithStubImpl$Input$SignInWithEmailAndPasswordInput(this._res);

  TRes _res;

  call({
    String? email,
    String? password,
  }) =>
      _res;
}

class Input$SignUpWithEmailAndPasswordInput {
  factory Input$SignUpWithEmailAndPasswordInput({
    required String email,
    required String password,
    String? name,
  }) =>
      Input$SignUpWithEmailAndPasswordInput._({
        r'email': email,
        r'password': password,
        if (name != null) r'name': name,
      });

  Input$SignUpWithEmailAndPasswordInput._(this._$data);

  factory Input$SignUpWithEmailAndPasswordInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$email = data['email'];
    result$data['email'] = (l$email as String);
    final l$password = data['password'];
    result$data['password'] = (l$password as String);
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    return Input$SignUpWithEmailAndPasswordInput._(result$data);
  }

  Map<String, dynamic> _$data;

  String get email => (_$data['email'] as String);

  String get password => (_$data['password'] as String);

  String? get name => (_$data['name'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$email = email;
    result$data['email'] = l$email;
    final l$password = password;
    result$data['password'] = l$password;
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    return result$data;
  }

  CopyWith$Input$SignUpWithEmailAndPasswordInput<
          Input$SignUpWithEmailAndPasswordInput>
      get copyWith => CopyWith$Input$SignUpWithEmailAndPasswordInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SignUpWithEmailAndPasswordInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (l$email != lOther$email) {
      return false;
    }
    final l$password = password;
    final lOther$password = other.password;
    if (l$password != lOther$password) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$email = email;
    final l$password = password;
    final l$name = name;
    return Object.hashAll([
      l$email,
      l$password,
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$SignUpWithEmailAndPasswordInput<TRes> {
  factory CopyWith$Input$SignUpWithEmailAndPasswordInput(
    Input$SignUpWithEmailAndPasswordInput instance,
    TRes Function(Input$SignUpWithEmailAndPasswordInput) then,
  ) = _CopyWithImpl$Input$SignUpWithEmailAndPasswordInput;

  factory CopyWith$Input$SignUpWithEmailAndPasswordInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SignUpWithEmailAndPasswordInput;

  TRes call({
    String? email,
    String? password,
    String? name,
  });
}

class _CopyWithImpl$Input$SignUpWithEmailAndPasswordInput<TRes>
    implements CopyWith$Input$SignUpWithEmailAndPasswordInput<TRes> {
  _CopyWithImpl$Input$SignUpWithEmailAndPasswordInput(
    this._instance,
    this._then,
  );

  final Input$SignUpWithEmailAndPasswordInput _instance;

  final TRes Function(Input$SignUpWithEmailAndPasswordInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? email = _undefined,
    Object? password = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$SignUpWithEmailAndPasswordInput._({
        ..._instance._$data,
        if (email != _undefined && email != null) 'email': (email as String),
        if (password != _undefined && password != null)
          'password': (password as String),
        if (name != _undefined) 'name': (name as String?),
      }));
}

class _CopyWithStubImpl$Input$SignUpWithEmailAndPasswordInput<TRes>
    implements CopyWith$Input$SignUpWithEmailAndPasswordInput<TRes> {
  _CopyWithStubImpl$Input$SignUpWithEmailAndPasswordInput(this._res);

  TRes _res;

  call({
    String? email,
    String? password,
    String? name,
  }) =>
      _res;
}

class Input$SignOutInput {
  factory Input$SignOutInput({required String refreshToken}) =>
      Input$SignOutInput._({
        r'refreshToken': refreshToken,
      });

  Input$SignOutInput._(this._$data);

  factory Input$SignOutInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$refreshToken = data['refreshToken'];
    result$data['refreshToken'] = (l$refreshToken as String);
    return Input$SignOutInput._(result$data);
  }

  Map<String, dynamic> _$data;

  String get refreshToken => (_$data['refreshToken'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$refreshToken = refreshToken;
    result$data['refreshToken'] = l$refreshToken;
    return result$data;
  }

  CopyWith$Input$SignOutInput<Input$SignOutInput> get copyWith =>
      CopyWith$Input$SignOutInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SignOutInput) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$refreshToken = refreshToken;
    final lOther$refreshToken = other.refreshToken;
    if (l$refreshToken != lOther$refreshToken) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$refreshToken = refreshToken;
    return Object.hashAll([l$refreshToken]);
  }
}

abstract class CopyWith$Input$SignOutInput<TRes> {
  factory CopyWith$Input$SignOutInput(
    Input$SignOutInput instance,
    TRes Function(Input$SignOutInput) then,
  ) = _CopyWithImpl$Input$SignOutInput;

  factory CopyWith$Input$SignOutInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SignOutInput;

  TRes call({String? refreshToken});
}

class _CopyWithImpl$Input$SignOutInput<TRes>
    implements CopyWith$Input$SignOutInput<TRes> {
  _CopyWithImpl$Input$SignOutInput(
    this._instance,
    this._then,
  );

  final Input$SignOutInput _instance;

  final TRes Function(Input$SignOutInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? refreshToken = _undefined}) => _then(Input$SignOutInput._({
        ..._instance._$data,
        if (refreshToken != _undefined && refreshToken != null)
          'refreshToken': (refreshToken as String),
      }));
}

class _CopyWithStubImpl$Input$SignOutInput<TRes>
    implements CopyWith$Input$SignOutInput<TRes> {
  _CopyWithStubImpl$Input$SignOutInput(this._res);

  TRes _res;

  call({String? refreshToken}) => _res;
}

class Input$RefreshTokenInput {
  factory Input$RefreshTokenInput({required String refreshToken}) =>
      Input$RefreshTokenInput._({
        r'refreshToken': refreshToken,
      });

  Input$RefreshTokenInput._(this._$data);

  factory Input$RefreshTokenInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$refreshToken = data['refreshToken'];
    result$data['refreshToken'] = (l$refreshToken as String);
    return Input$RefreshTokenInput._(result$data);
  }

  Map<String, dynamic> _$data;

  String get refreshToken => (_$data['refreshToken'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$refreshToken = refreshToken;
    result$data['refreshToken'] = l$refreshToken;
    return result$data;
  }

  CopyWith$Input$RefreshTokenInput<Input$RefreshTokenInput> get copyWith =>
      CopyWith$Input$RefreshTokenInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$RefreshTokenInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$refreshToken = refreshToken;
    final lOther$refreshToken = other.refreshToken;
    if (l$refreshToken != lOther$refreshToken) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$refreshToken = refreshToken;
    return Object.hashAll([l$refreshToken]);
  }
}

abstract class CopyWith$Input$RefreshTokenInput<TRes> {
  factory CopyWith$Input$RefreshTokenInput(
    Input$RefreshTokenInput instance,
    TRes Function(Input$RefreshTokenInput) then,
  ) = _CopyWithImpl$Input$RefreshTokenInput;

  factory CopyWith$Input$RefreshTokenInput.stub(TRes res) =
      _CopyWithStubImpl$Input$RefreshTokenInput;

  TRes call({String? refreshToken});
}

class _CopyWithImpl$Input$RefreshTokenInput<TRes>
    implements CopyWith$Input$RefreshTokenInput<TRes> {
  _CopyWithImpl$Input$RefreshTokenInput(
    this._instance,
    this._then,
  );

  final Input$RefreshTokenInput _instance;

  final TRes Function(Input$RefreshTokenInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? refreshToken = _undefined}) =>
      _then(Input$RefreshTokenInput._({
        ..._instance._$data,
        if (refreshToken != _undefined && refreshToken != null)
          'refreshToken': (refreshToken as String),
      }));
}

class _CopyWithStubImpl$Input$RefreshTokenInput<TRes>
    implements CopyWith$Input$RefreshTokenInput<TRes> {
  _CopyWithStubImpl$Input$RefreshTokenInput(this._res);

  TRes _res;

  call({String? refreshToken}) => _res;
}

class Input$ResetContentProgressInput {
  factory Input$ResetContentProgressInput({required bool confirm}) =>
      Input$ResetContentProgressInput._({
        r'confirm': confirm,
      });

  Input$ResetContentProgressInput._(this._$data);

  factory Input$ResetContentProgressInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$confirm = data['confirm'];
    result$data['confirm'] = (l$confirm as bool);
    return Input$ResetContentProgressInput._(result$data);
  }

  Map<String, dynamic> _$data;

  bool get confirm => (_$data['confirm'] as bool);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$confirm = confirm;
    result$data['confirm'] = l$confirm;
    return result$data;
  }

  CopyWith$Input$ResetContentProgressInput<Input$ResetContentProgressInput>
      get copyWith => CopyWith$Input$ResetContentProgressInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$ResetContentProgressInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$confirm = confirm;
    final lOther$confirm = other.confirm;
    if (l$confirm != lOther$confirm) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$confirm = confirm;
    return Object.hashAll([l$confirm]);
  }
}

abstract class CopyWith$Input$ResetContentProgressInput<TRes> {
  factory CopyWith$Input$ResetContentProgressInput(
    Input$ResetContentProgressInput instance,
    TRes Function(Input$ResetContentProgressInput) then,
  ) = _CopyWithImpl$Input$ResetContentProgressInput;

  factory CopyWith$Input$ResetContentProgressInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ResetContentProgressInput;

  TRes call({bool? confirm});
}

class _CopyWithImpl$Input$ResetContentProgressInput<TRes>
    implements CopyWith$Input$ResetContentProgressInput<TRes> {
  _CopyWithImpl$Input$ResetContentProgressInput(
    this._instance,
    this._then,
  );

  final Input$ResetContentProgressInput _instance;

  final TRes Function(Input$ResetContentProgressInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? confirm = _undefined}) =>
      _then(Input$ResetContentProgressInput._({
        ..._instance._$data,
        if (confirm != _undefined && confirm != null)
          'confirm': (confirm as bool),
      }));
}

class _CopyWithStubImpl$Input$ResetContentProgressInput<TRes>
    implements CopyWith$Input$ResetContentProgressInput<TRes> {
  _CopyWithStubImpl$Input$ResetContentProgressInput(this._res);

  TRes _res;

  call({bool? confirm}) => _res;
}

class Input$DownloadContentInput {
  factory Input$DownloadContentInput({required bool finished}) =>
      Input$DownloadContentInput._({
        r'finished': finished,
      });

  Input$DownloadContentInput._(this._$data);

  factory Input$DownloadContentInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$finished = data['finished'];
    result$data['finished'] = (l$finished as bool);
    return Input$DownloadContentInput._(result$data);
  }

  Map<String, dynamic> _$data;

  bool get finished => (_$data['finished'] as bool);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$finished = finished;
    result$data['finished'] = l$finished;
    return result$data;
  }

  CopyWith$Input$DownloadContentInput<Input$DownloadContentInput>
      get copyWith => CopyWith$Input$DownloadContentInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$DownloadContentInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$finished = finished;
    final lOther$finished = other.finished;
    if (l$finished != lOther$finished) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$finished = finished;
    return Object.hashAll([l$finished]);
  }
}

abstract class CopyWith$Input$DownloadContentInput<TRes> {
  factory CopyWith$Input$DownloadContentInput(
    Input$DownloadContentInput instance,
    TRes Function(Input$DownloadContentInput) then,
  ) = _CopyWithImpl$Input$DownloadContentInput;

  factory CopyWith$Input$DownloadContentInput.stub(TRes res) =
      _CopyWithStubImpl$Input$DownloadContentInput;

  TRes call({bool? finished});
}

class _CopyWithImpl$Input$DownloadContentInput<TRes>
    implements CopyWith$Input$DownloadContentInput<TRes> {
  _CopyWithImpl$Input$DownloadContentInput(
    this._instance,
    this._then,
  );

  final Input$DownloadContentInput _instance;

  final TRes Function(Input$DownloadContentInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? finished = _undefined}) =>
      _then(Input$DownloadContentInput._({
        ..._instance._$data,
        if (finished != _undefined && finished != null)
          'finished': (finished as bool),
      }));
}

class _CopyWithStubImpl$Input$DownloadContentInput<TRes>
    implements CopyWith$Input$DownloadContentInput<TRes> {
  _CopyWithStubImpl$Input$DownloadContentInput(this._res);

  TRes _res;

  call({bool? finished}) => _res;
}

class Input$FinishContentEpisodeInput {
  factory Input$FinishContentEpisodeInput({required String datetime}) =>
      Input$FinishContentEpisodeInput._({
        r'datetime': datetime,
      });

  Input$FinishContentEpisodeInput._(this._$data);

  factory Input$FinishContentEpisodeInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$datetime = data['datetime'];
    result$data['datetime'] = (l$datetime as String);
    return Input$FinishContentEpisodeInput._(result$data);
  }

  Map<String, dynamic> _$data;

  String get datetime => (_$data['datetime'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$datetime = datetime;
    result$data['datetime'] = l$datetime;
    return result$data;
  }

  CopyWith$Input$FinishContentEpisodeInput<Input$FinishContentEpisodeInput>
      get copyWith => CopyWith$Input$FinishContentEpisodeInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$FinishContentEpisodeInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$datetime = datetime;
    final lOther$datetime = other.datetime;
    if (l$datetime != lOther$datetime) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$datetime = datetime;
    return Object.hashAll([l$datetime]);
  }
}

abstract class CopyWith$Input$FinishContentEpisodeInput<TRes> {
  factory CopyWith$Input$FinishContentEpisodeInput(
    Input$FinishContentEpisodeInput instance,
    TRes Function(Input$FinishContentEpisodeInput) then,
  ) = _CopyWithImpl$Input$FinishContentEpisodeInput;

  factory CopyWith$Input$FinishContentEpisodeInput.stub(TRes res) =
      _CopyWithStubImpl$Input$FinishContentEpisodeInput;

  TRes call({String? datetime});
}

class _CopyWithImpl$Input$FinishContentEpisodeInput<TRes>
    implements CopyWith$Input$FinishContentEpisodeInput<TRes> {
  _CopyWithImpl$Input$FinishContentEpisodeInput(
    this._instance,
    this._then,
  );

  final Input$FinishContentEpisodeInput _instance;

  final TRes Function(Input$FinishContentEpisodeInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? datetime = _undefined}) =>
      _then(Input$FinishContentEpisodeInput._({
        ..._instance._$data,
        if (datetime != _undefined && datetime != null)
          'datetime': (datetime as String),
      }));
}

class _CopyWithStubImpl$Input$FinishContentEpisodeInput<TRes>
    implements CopyWith$Input$FinishContentEpisodeInput<TRes> {
  _CopyWithStubImpl$Input$FinishContentEpisodeInput(this._res);

  TRes _res;

  call({String? datetime}) => _res;
}

class Input$SaveContentEpisodeProgressInput {
  factory Input$SaveContentEpisodeProgressInput({required int progress}) =>
      Input$SaveContentEpisodeProgressInput._({
        r'progress': progress,
      });

  Input$SaveContentEpisodeProgressInput._(this._$data);

  factory Input$SaveContentEpisodeProgressInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$progress = data['progress'];
    result$data['progress'] = (l$progress as int);
    return Input$SaveContentEpisodeProgressInput._(result$data);
  }

  Map<String, dynamic> _$data;

  int get progress => (_$data['progress'] as int);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$progress = progress;
    result$data['progress'] = l$progress;
    return result$data;
  }

  CopyWith$Input$SaveContentEpisodeProgressInput<
          Input$SaveContentEpisodeProgressInput>
      get copyWith => CopyWith$Input$SaveContentEpisodeProgressInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SaveContentEpisodeProgressInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$progress = progress;
    final lOther$progress = other.progress;
    if (l$progress != lOther$progress) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$progress = progress;
    return Object.hashAll([l$progress]);
  }
}

abstract class CopyWith$Input$SaveContentEpisodeProgressInput<TRes> {
  factory CopyWith$Input$SaveContentEpisodeProgressInput(
    Input$SaveContentEpisodeProgressInput instance,
    TRes Function(Input$SaveContentEpisodeProgressInput) then,
  ) = _CopyWithImpl$Input$SaveContentEpisodeProgressInput;

  factory CopyWith$Input$SaveContentEpisodeProgressInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SaveContentEpisodeProgressInput;

  TRes call({int? progress});
}

class _CopyWithImpl$Input$SaveContentEpisodeProgressInput<TRes>
    implements CopyWith$Input$SaveContentEpisodeProgressInput<TRes> {
  _CopyWithImpl$Input$SaveContentEpisodeProgressInput(
    this._instance,
    this._then,
  );

  final Input$SaveContentEpisodeProgressInput _instance;

  final TRes Function(Input$SaveContentEpisodeProgressInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? progress = _undefined}) =>
      _then(Input$SaveContentEpisodeProgressInput._({
        ..._instance._$data,
        if (progress != _undefined && progress != null)
          'progress': (progress as int),
      }));
}

class _CopyWithStubImpl$Input$SaveContentEpisodeProgressInput<TRes>
    implements CopyWith$Input$SaveContentEpisodeProgressInput<TRes> {
  _CopyWithStubImpl$Input$SaveContentEpisodeProgressInput(this._res);

  TRes _res;

  call({int? progress}) => _res;
}

class Input$ResetContentEpisodeProgressInput {
  factory Input$ResetContentEpisodeProgressInput({required bool confirm}) =>
      Input$ResetContentEpisodeProgressInput._({
        r'confirm': confirm,
      });

  Input$ResetContentEpisodeProgressInput._(this._$data);

  factory Input$ResetContentEpisodeProgressInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$confirm = data['confirm'];
    result$data['confirm'] = (l$confirm as bool);
    return Input$ResetContentEpisodeProgressInput._(result$data);
  }

  Map<String, dynamic> _$data;

  bool get confirm => (_$data['confirm'] as bool);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$confirm = confirm;
    result$data['confirm'] = l$confirm;
    return result$data;
  }

  CopyWith$Input$ResetContentEpisodeProgressInput<
          Input$ResetContentEpisodeProgressInput>
      get copyWith => CopyWith$Input$ResetContentEpisodeProgressInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$ResetContentEpisodeProgressInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$confirm = confirm;
    final lOther$confirm = other.confirm;
    if (l$confirm != lOther$confirm) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$confirm = confirm;
    return Object.hashAll([l$confirm]);
  }
}

abstract class CopyWith$Input$ResetContentEpisodeProgressInput<TRes> {
  factory CopyWith$Input$ResetContentEpisodeProgressInput(
    Input$ResetContentEpisodeProgressInput instance,
    TRes Function(Input$ResetContentEpisodeProgressInput) then,
  ) = _CopyWithImpl$Input$ResetContentEpisodeProgressInput;

  factory CopyWith$Input$ResetContentEpisodeProgressInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ResetContentEpisodeProgressInput;

  TRes call({bool? confirm});
}

class _CopyWithImpl$Input$ResetContentEpisodeProgressInput<TRes>
    implements CopyWith$Input$ResetContentEpisodeProgressInput<TRes> {
  _CopyWithImpl$Input$ResetContentEpisodeProgressInput(
    this._instance,
    this._then,
  );

  final Input$ResetContentEpisodeProgressInput _instance;

  final TRes Function(Input$ResetContentEpisodeProgressInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? confirm = _undefined}) =>
      _then(Input$ResetContentEpisodeProgressInput._({
        ..._instance._$data,
        if (confirm != _undefined && confirm != null)
          'confirm': (confirm as bool),
      }));
}

class _CopyWithStubImpl$Input$ResetContentEpisodeProgressInput<TRes>
    implements CopyWith$Input$ResetContentEpisodeProgressInput<TRes> {
  _CopyWithStubImpl$Input$ResetContentEpisodeProgressInput(this._res);

  TRes _res;

  call({bool? confirm}) => _res;
}

class Input$DownloadContentEpisodeInput {
  factory Input$DownloadContentEpisodeInput({required bool finished}) =>
      Input$DownloadContentEpisodeInput._({
        r'finished': finished,
      });

  Input$DownloadContentEpisodeInput._(this._$data);

  factory Input$DownloadContentEpisodeInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$finished = data['finished'];
    result$data['finished'] = (l$finished as bool);
    return Input$DownloadContentEpisodeInput._(result$data);
  }

  Map<String, dynamic> _$data;

  bool get finished => (_$data['finished'] as bool);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$finished = finished;
    result$data['finished'] = l$finished;
    return result$data;
  }

  CopyWith$Input$DownloadContentEpisodeInput<Input$DownloadContentEpisodeInput>
      get copyWith => CopyWith$Input$DownloadContentEpisodeInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$DownloadContentEpisodeInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$finished = finished;
    final lOther$finished = other.finished;
    if (l$finished != lOther$finished) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$finished = finished;
    return Object.hashAll([l$finished]);
  }
}

abstract class CopyWith$Input$DownloadContentEpisodeInput<TRes> {
  factory CopyWith$Input$DownloadContentEpisodeInput(
    Input$DownloadContentEpisodeInput instance,
    TRes Function(Input$DownloadContentEpisodeInput) then,
  ) = _CopyWithImpl$Input$DownloadContentEpisodeInput;

  factory CopyWith$Input$DownloadContentEpisodeInput.stub(TRes res) =
      _CopyWithStubImpl$Input$DownloadContentEpisodeInput;

  TRes call({bool? finished});
}

class _CopyWithImpl$Input$DownloadContentEpisodeInput<TRes>
    implements CopyWith$Input$DownloadContentEpisodeInput<TRes> {
  _CopyWithImpl$Input$DownloadContentEpisodeInput(
    this._instance,
    this._then,
  );

  final Input$DownloadContentEpisodeInput _instance;

  final TRes Function(Input$DownloadContentEpisodeInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? finished = _undefined}) =>
      _then(Input$DownloadContentEpisodeInput._({
        ..._instance._$data,
        if (finished != _undefined && finished != null)
          'finished': (finished as bool),
      }));
}

class _CopyWithStubImpl$Input$DownloadContentEpisodeInput<TRes>
    implements CopyWith$Input$DownloadContentEpisodeInput<TRes> {
  _CopyWithStubImpl$Input$DownloadContentEpisodeInput(this._res);

  TRes _res;

  call({bool? finished}) => _res;
}

class Input$ContentEpisodeOrder {
  factory Input$ContentEpisodeOrder({
    Enum$OrderDirection? direction,
    required Enum$ContentEpisodeOrderField field,
  }) =>
      Input$ContentEpisodeOrder._({
        if (direction != null) r'direction': direction,
        r'field': field,
      });

  Input$ContentEpisodeOrder._(this._$data);

  factory Input$ContentEpisodeOrder.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('direction')) {
      final l$direction = data['direction'];
      result$data['direction'] =
          fromJson$Enum$OrderDirection((l$direction as String));
    }
    final l$field = data['field'];
    result$data['field'] =
        fromJson$Enum$ContentEpisodeOrderField((l$field as String));
    return Input$ContentEpisodeOrder._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderDirection? get direction =>
      (_$data['direction'] as Enum$OrderDirection?);

  Enum$ContentEpisodeOrderField get field =>
      (_$data['field'] as Enum$ContentEpisodeOrderField);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('direction')) {
      final l$direction = direction;
      result$data['direction'] =
          toJson$Enum$OrderDirection((l$direction as Enum$OrderDirection));
    }
    final l$field = field;
    result$data['field'] = toJson$Enum$ContentEpisodeOrderField(l$field);
    return result$data;
  }

  CopyWith$Input$ContentEpisodeOrder<Input$ContentEpisodeOrder> get copyWith =>
      CopyWith$Input$ContentEpisodeOrder(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$ContentEpisodeOrder) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$direction = direction;
    final lOther$direction = other.direction;
    if (_$data.containsKey('direction') !=
        other._$data.containsKey('direction')) {
      return false;
    }
    if (l$direction != lOther$direction) {
      return false;
    }
    final l$field = field;
    final lOther$field = other.field;
    if (l$field != lOther$field) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$direction = direction;
    final l$field = field;
    return Object.hashAll([
      _$data.containsKey('direction') ? l$direction : const {},
      l$field,
    ]);
  }
}

abstract class CopyWith$Input$ContentEpisodeOrder<TRes> {
  factory CopyWith$Input$ContentEpisodeOrder(
    Input$ContentEpisodeOrder instance,
    TRes Function(Input$ContentEpisodeOrder) then,
  ) = _CopyWithImpl$Input$ContentEpisodeOrder;

  factory CopyWith$Input$ContentEpisodeOrder.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentEpisodeOrder;

  TRes call({
    Enum$OrderDirection? direction,
    Enum$ContentEpisodeOrderField? field,
  });
}

class _CopyWithImpl$Input$ContentEpisodeOrder<TRes>
    implements CopyWith$Input$ContentEpisodeOrder<TRes> {
  _CopyWithImpl$Input$ContentEpisodeOrder(
    this._instance,
    this._then,
  );

  final Input$ContentEpisodeOrder _instance;

  final TRes Function(Input$ContentEpisodeOrder) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? direction = _undefined,
    Object? field = _undefined,
  }) =>
      _then(Input$ContentEpisodeOrder._({
        ..._instance._$data,
        if (direction != _undefined && direction != null)
          'direction': (direction as Enum$OrderDirection),
        if (field != _undefined && field != null)
          'field': (field as Enum$ContentEpisodeOrderField),
      }));
}

class _CopyWithStubImpl$Input$ContentEpisodeOrder<TRes>
    implements CopyWith$Input$ContentEpisodeOrder<TRes> {
  _CopyWithStubImpl$Input$ContentEpisodeOrder(this._res);

  TRes _res;

  call({
    Enum$OrderDirection? direction,
    Enum$ContentEpisodeOrderField? field,
  }) =>
      _res;
}

class Input$ContentEpisodeWhereInput {
  factory Input$ContentEpisodeWhereInput({
    Input$ContentEpisodeWhereInput? not,
    List<Input$ContentEpisodeWhereInput>? and,
    List<Input$ContentEpisodeWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? contentID,
    String? contentIDNEQ,
    List<String>? contentIDIn,
    List<String>? contentIDNotIn,
    Enum$ContentEpisodeContentType? type,
    Enum$ContentEpisodeContentType? typeNEQ,
    List<Enum$ContentEpisodeContentType>? typeIn,
    List<Enum$ContentEpisodeContentType>? typeNotIn,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    int? duration,
    int? durationNEQ,
    List<int>? durationIn,
    List<int>? durationNotIn,
    int? durationGT,
    int? durationGTE,
    int? durationLT,
    int? durationLTE,
    String? streamurl,
    String? streamurlNEQ,
    List<String>? streamurlIn,
    List<String>? streamurlNotIn,
    String? streamurlGT,
    String? streamurlGTE,
    String? streamurlLT,
    String? streamurlLTE,
    String? streamurlContains,
    String? streamurlHasPrefix,
    String? streamurlHasSuffix,
    String? streamurlEqualFold,
    String? streamurlContainsFold,
    String? downloadurl,
    String? downloadurlNEQ,
    List<String>? downloadurlIn,
    List<String>? downloadurlNotIn,
    String? downloadurlGT,
    String? downloadurlGTE,
    String? downloadurlLT,
    String? downloadurlLTE,
    String? downloadurlContains,
    String? downloadurlHasPrefix,
    String? downloadurlHasSuffix,
    String? downloadurlEqualFold,
    String? downloadurlContainsFold,
    String? source,
    String? sourceNEQ,
    List<String>? sourceIn,
    List<String>? sourceNotIn,
    String? sourceGT,
    String? sourceGTE,
    String? sourceLT,
    String? sourceLTE,
    String? sourceContains,
    String? sourceHasPrefix,
    String? sourceHasSuffix,
    String? sourceEqualFold,
    String? sourceContainsFold,
    String? sourceurl,
    String? sourceurlNEQ,
    List<String>? sourceurlIn,
    List<String>? sourceurlNotIn,
    String? sourceurlGT,
    String? sourceurlGTE,
    String? sourceurlLT,
    String? sourceurlLTE,
    String? sourceurlContains,
    String? sourceurlHasPrefix,
    String? sourceurlHasSuffix,
    String? sourceurlEqualFold,
    String? sourceurlContainsFold,
    String? licence,
    String? licenceNEQ,
    List<String>? licenceIn,
    List<String>? licenceNotIn,
    String? licenceGT,
    String? licenceGTE,
    String? licenceLT,
    String? licenceLTE,
    String? licenceContains,
    String? licenceHasPrefix,
    String? licenceHasSuffix,
    String? licenceEqualFold,
    String? licenceContainsFold,
    String? licenceurl,
    String? licenceurlNEQ,
    List<String>? licenceurlIn,
    List<String>? licenceurlNotIn,
    String? licenceurlGT,
    String? licenceurlGTE,
    String? licenceurlLT,
    String? licenceurlLTE,
    String? licenceurlContains,
    String? licenceurlHasPrefix,
    String? licenceurlHasSuffix,
    String? licenceurlEqualFold,
    String? licenceurlContainsFold,
    bool? ishidden,
    bool? ishiddenNEQ,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasContent,
    List<Input$ContentWhereInput>? hasContentWith,
  }) =>
      Input$ContentEpisodeWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (contentID != null) r'contentID': contentID,
        if (contentIDNEQ != null) r'contentIDNEQ': contentIDNEQ,
        if (contentIDIn != null) r'contentIDIn': contentIDIn,
        if (contentIDNotIn != null) r'contentIDNotIn': contentIDNotIn,
        if (type != null) r'type': type,
        if (typeNEQ != null) r'typeNEQ': typeNEQ,
        if (typeIn != null) r'typeIn': typeIn,
        if (typeNotIn != null) r'typeNotIn': typeNotIn,
        if (title != null) r'title': title,
        if (titleNEQ != null) r'titleNEQ': titleNEQ,
        if (titleIn != null) r'titleIn': titleIn,
        if (titleNotIn != null) r'titleNotIn': titleNotIn,
        if (titleGT != null) r'titleGT': titleGT,
        if (titleGTE != null) r'titleGTE': titleGTE,
        if (titleLT != null) r'titleLT': titleLT,
        if (titleLTE != null) r'titleLTE': titleLTE,
        if (titleContains != null) r'titleContains': titleContains,
        if (titleHasPrefix != null) r'titleHasPrefix': titleHasPrefix,
        if (titleHasSuffix != null) r'titleHasSuffix': titleHasSuffix,
        if (titleEqualFold != null) r'titleEqualFold': titleEqualFold,
        if (titleContainsFold != null) r'titleContainsFold': titleContainsFold,
        if (subtitle != null) r'subtitle': subtitle,
        if (subtitleNEQ != null) r'subtitleNEQ': subtitleNEQ,
        if (subtitleIn != null) r'subtitleIn': subtitleIn,
        if (subtitleNotIn != null) r'subtitleNotIn': subtitleNotIn,
        if (subtitleGT != null) r'subtitleGT': subtitleGT,
        if (subtitleGTE != null) r'subtitleGTE': subtitleGTE,
        if (subtitleLT != null) r'subtitleLT': subtitleLT,
        if (subtitleLTE != null) r'subtitleLTE': subtitleLTE,
        if (subtitleContains != null) r'subtitleContains': subtitleContains,
        if (subtitleHasPrefix != null) r'subtitleHasPrefix': subtitleHasPrefix,
        if (subtitleHasSuffix != null) r'subtitleHasSuffix': subtitleHasSuffix,
        if (subtitleEqualFold != null) r'subtitleEqualFold': subtitleEqualFold,
        if (subtitleContainsFold != null)
          r'subtitleContainsFold': subtitleContainsFold,
        if (description != null) r'description': description,
        if (descriptionNEQ != null) r'descriptionNEQ': descriptionNEQ,
        if (descriptionIn != null) r'descriptionIn': descriptionIn,
        if (descriptionNotIn != null) r'descriptionNotIn': descriptionNotIn,
        if (descriptionGT != null) r'descriptionGT': descriptionGT,
        if (descriptionGTE != null) r'descriptionGTE': descriptionGTE,
        if (descriptionLT != null) r'descriptionLT': descriptionLT,
        if (descriptionLTE != null) r'descriptionLTE': descriptionLTE,
        if (descriptionContains != null)
          r'descriptionContains': descriptionContains,
        if (descriptionHasPrefix != null)
          r'descriptionHasPrefix': descriptionHasPrefix,
        if (descriptionHasSuffix != null)
          r'descriptionHasSuffix': descriptionHasSuffix,
        if (descriptionEqualFold != null)
          r'descriptionEqualFold': descriptionEqualFold,
        if (descriptionContainsFold != null)
          r'descriptionContainsFold': descriptionContainsFold,
        if (duration != null) r'duration': duration,
        if (durationNEQ != null) r'durationNEQ': durationNEQ,
        if (durationIn != null) r'durationIn': durationIn,
        if (durationNotIn != null) r'durationNotIn': durationNotIn,
        if (durationGT != null) r'durationGT': durationGT,
        if (durationGTE != null) r'durationGTE': durationGTE,
        if (durationLT != null) r'durationLT': durationLT,
        if (durationLTE != null) r'durationLTE': durationLTE,
        if (streamurl != null) r'streamurl': streamurl,
        if (streamurlNEQ != null) r'streamurlNEQ': streamurlNEQ,
        if (streamurlIn != null) r'streamurlIn': streamurlIn,
        if (streamurlNotIn != null) r'streamurlNotIn': streamurlNotIn,
        if (streamurlGT != null) r'streamurlGT': streamurlGT,
        if (streamurlGTE != null) r'streamurlGTE': streamurlGTE,
        if (streamurlLT != null) r'streamurlLT': streamurlLT,
        if (streamurlLTE != null) r'streamurlLTE': streamurlLTE,
        if (streamurlContains != null) r'streamurlContains': streamurlContains,
        if (streamurlHasPrefix != null)
          r'streamurlHasPrefix': streamurlHasPrefix,
        if (streamurlHasSuffix != null)
          r'streamurlHasSuffix': streamurlHasSuffix,
        if (streamurlEqualFold != null)
          r'streamurlEqualFold': streamurlEqualFold,
        if (streamurlContainsFold != null)
          r'streamurlContainsFold': streamurlContainsFold,
        if (downloadurl != null) r'downloadurl': downloadurl,
        if (downloadurlNEQ != null) r'downloadurlNEQ': downloadurlNEQ,
        if (downloadurlIn != null) r'downloadurlIn': downloadurlIn,
        if (downloadurlNotIn != null) r'downloadurlNotIn': downloadurlNotIn,
        if (downloadurlGT != null) r'downloadurlGT': downloadurlGT,
        if (downloadurlGTE != null) r'downloadurlGTE': downloadurlGTE,
        if (downloadurlLT != null) r'downloadurlLT': downloadurlLT,
        if (downloadurlLTE != null) r'downloadurlLTE': downloadurlLTE,
        if (downloadurlContains != null)
          r'downloadurlContains': downloadurlContains,
        if (downloadurlHasPrefix != null)
          r'downloadurlHasPrefix': downloadurlHasPrefix,
        if (downloadurlHasSuffix != null)
          r'downloadurlHasSuffix': downloadurlHasSuffix,
        if (downloadurlEqualFold != null)
          r'downloadurlEqualFold': downloadurlEqualFold,
        if (downloadurlContainsFold != null)
          r'downloadurlContainsFold': downloadurlContainsFold,
        if (source != null) r'source': source,
        if (sourceNEQ != null) r'sourceNEQ': sourceNEQ,
        if (sourceIn != null) r'sourceIn': sourceIn,
        if (sourceNotIn != null) r'sourceNotIn': sourceNotIn,
        if (sourceGT != null) r'sourceGT': sourceGT,
        if (sourceGTE != null) r'sourceGTE': sourceGTE,
        if (sourceLT != null) r'sourceLT': sourceLT,
        if (sourceLTE != null) r'sourceLTE': sourceLTE,
        if (sourceContains != null) r'sourceContains': sourceContains,
        if (sourceHasPrefix != null) r'sourceHasPrefix': sourceHasPrefix,
        if (sourceHasSuffix != null) r'sourceHasSuffix': sourceHasSuffix,
        if (sourceEqualFold != null) r'sourceEqualFold': sourceEqualFold,
        if (sourceContainsFold != null)
          r'sourceContainsFold': sourceContainsFold,
        if (sourceurl != null) r'sourceurl': sourceurl,
        if (sourceurlNEQ != null) r'sourceurlNEQ': sourceurlNEQ,
        if (sourceurlIn != null) r'sourceurlIn': sourceurlIn,
        if (sourceurlNotIn != null) r'sourceurlNotIn': sourceurlNotIn,
        if (sourceurlGT != null) r'sourceurlGT': sourceurlGT,
        if (sourceurlGTE != null) r'sourceurlGTE': sourceurlGTE,
        if (sourceurlLT != null) r'sourceurlLT': sourceurlLT,
        if (sourceurlLTE != null) r'sourceurlLTE': sourceurlLTE,
        if (sourceurlContains != null) r'sourceurlContains': sourceurlContains,
        if (sourceurlHasPrefix != null)
          r'sourceurlHasPrefix': sourceurlHasPrefix,
        if (sourceurlHasSuffix != null)
          r'sourceurlHasSuffix': sourceurlHasSuffix,
        if (sourceurlEqualFold != null)
          r'sourceurlEqualFold': sourceurlEqualFold,
        if (sourceurlContainsFold != null)
          r'sourceurlContainsFold': sourceurlContainsFold,
        if (licence != null) r'licence': licence,
        if (licenceNEQ != null) r'licenceNEQ': licenceNEQ,
        if (licenceIn != null) r'licenceIn': licenceIn,
        if (licenceNotIn != null) r'licenceNotIn': licenceNotIn,
        if (licenceGT != null) r'licenceGT': licenceGT,
        if (licenceGTE != null) r'licenceGTE': licenceGTE,
        if (licenceLT != null) r'licenceLT': licenceLT,
        if (licenceLTE != null) r'licenceLTE': licenceLTE,
        if (licenceContains != null) r'licenceContains': licenceContains,
        if (licenceHasPrefix != null) r'licenceHasPrefix': licenceHasPrefix,
        if (licenceHasSuffix != null) r'licenceHasSuffix': licenceHasSuffix,
        if (licenceEqualFold != null) r'licenceEqualFold': licenceEqualFold,
        if (licenceContainsFold != null)
          r'licenceContainsFold': licenceContainsFold,
        if (licenceurl != null) r'licenceurl': licenceurl,
        if (licenceurlNEQ != null) r'licenceurlNEQ': licenceurlNEQ,
        if (licenceurlIn != null) r'licenceurlIn': licenceurlIn,
        if (licenceurlNotIn != null) r'licenceurlNotIn': licenceurlNotIn,
        if (licenceurlGT != null) r'licenceurlGT': licenceurlGT,
        if (licenceurlGTE != null) r'licenceurlGTE': licenceurlGTE,
        if (licenceurlLT != null) r'licenceurlLT': licenceurlLT,
        if (licenceurlLTE != null) r'licenceurlLTE': licenceurlLTE,
        if (licenceurlContains != null)
          r'licenceurlContains': licenceurlContains,
        if (licenceurlHasPrefix != null)
          r'licenceurlHasPrefix': licenceurlHasPrefix,
        if (licenceurlHasSuffix != null)
          r'licenceurlHasSuffix': licenceurlHasSuffix,
        if (licenceurlEqualFold != null)
          r'licenceurlEqualFold': licenceurlEqualFold,
        if (licenceurlContainsFold != null)
          r'licenceurlContainsFold': licenceurlContainsFold,
        if (ishidden != null) r'ishidden': ishidden,
        if (ishiddenNEQ != null) r'ishiddenNEQ': ishiddenNEQ,
        if (order != null) r'order': order,
        if (orderNEQ != null) r'orderNEQ': orderNEQ,
        if (orderIn != null) r'orderIn': orderIn,
        if (orderNotIn != null) r'orderNotIn': orderNotIn,
        if (orderGT != null) r'orderGT': orderGT,
        if (orderGTE != null) r'orderGTE': orderGTE,
        if (orderLT != null) r'orderLT': orderLT,
        if (orderLTE != null) r'orderLTE': orderLTE,
        if (hasContent != null) r'hasContent': hasContent,
        if (hasContentWith != null) r'hasContentWith': hasContentWith,
      });

  Input$ContentEpisodeWhereInput._(this._$data);

  factory Input$ContentEpisodeWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$ContentEpisodeWhereInput.fromJson(
              (l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map((e) => Input$ContentEpisodeWhereInput.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map((e) => Input$ContentEpisodeWhereInput.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('contentID')) {
      final l$contentID = data['contentID'];
      result$data['contentID'] = (l$contentID as String?);
    }
    if (data.containsKey('contentIDNEQ')) {
      final l$contentIDNEQ = data['contentIDNEQ'];
      result$data['contentIDNEQ'] = (l$contentIDNEQ as String?);
    }
    if (data.containsKey('contentIDIn')) {
      final l$contentIDIn = data['contentIDIn'];
      result$data['contentIDIn'] =
          (l$contentIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('contentIDNotIn')) {
      final l$contentIDNotIn = data['contentIDNotIn'];
      result$data['contentIDNotIn'] = (l$contentIDNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = l$type == null
          ? null
          : fromJson$Enum$ContentEpisodeContentType((l$type as String));
    }
    if (data.containsKey('typeNEQ')) {
      final l$typeNEQ = data['typeNEQ'];
      result$data['typeNEQ'] = l$typeNEQ == null
          ? null
          : fromJson$Enum$ContentEpisodeContentType((l$typeNEQ as String));
    }
    if (data.containsKey('typeIn')) {
      final l$typeIn = data['typeIn'];
      result$data['typeIn'] = (l$typeIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$ContentEpisodeContentType((e as String)))
          .toList();
    }
    if (data.containsKey('typeNotIn')) {
      final l$typeNotIn = data['typeNotIn'];
      result$data['typeNotIn'] = (l$typeNotIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$ContentEpisodeContentType((e as String)))
          .toList();
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] = (l$title as String?);
    }
    if (data.containsKey('titleNEQ')) {
      final l$titleNEQ = data['titleNEQ'];
      result$data['titleNEQ'] = (l$titleNEQ as String?);
    }
    if (data.containsKey('titleIn')) {
      final l$titleIn = data['titleIn'];
      result$data['titleIn'] =
          (l$titleIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleNotIn')) {
      final l$titleNotIn = data['titleNotIn'];
      result$data['titleNotIn'] =
          (l$titleNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleGT')) {
      final l$titleGT = data['titleGT'];
      result$data['titleGT'] = (l$titleGT as String?);
    }
    if (data.containsKey('titleGTE')) {
      final l$titleGTE = data['titleGTE'];
      result$data['titleGTE'] = (l$titleGTE as String?);
    }
    if (data.containsKey('titleLT')) {
      final l$titleLT = data['titleLT'];
      result$data['titleLT'] = (l$titleLT as String?);
    }
    if (data.containsKey('titleLTE')) {
      final l$titleLTE = data['titleLTE'];
      result$data['titleLTE'] = (l$titleLTE as String?);
    }
    if (data.containsKey('titleContains')) {
      final l$titleContains = data['titleContains'];
      result$data['titleContains'] = (l$titleContains as String?);
    }
    if (data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = data['titleHasPrefix'];
      result$data['titleHasPrefix'] = (l$titleHasPrefix as String?);
    }
    if (data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = data['titleHasSuffix'];
      result$data['titleHasSuffix'] = (l$titleHasSuffix as String?);
    }
    if (data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = data['titleEqualFold'];
      result$data['titleEqualFold'] = (l$titleEqualFold as String?);
    }
    if (data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = data['titleContainsFold'];
      result$data['titleContainsFold'] = (l$titleContainsFold as String?);
    }
    if (data.containsKey('subtitle')) {
      final l$subtitle = data['subtitle'];
      result$data['subtitle'] = (l$subtitle as String?);
    }
    if (data.containsKey('subtitleNEQ')) {
      final l$subtitleNEQ = data['subtitleNEQ'];
      result$data['subtitleNEQ'] = (l$subtitleNEQ as String?);
    }
    if (data.containsKey('subtitleIn')) {
      final l$subtitleIn = data['subtitleIn'];
      result$data['subtitleIn'] =
          (l$subtitleIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('subtitleNotIn')) {
      final l$subtitleNotIn = data['subtitleNotIn'];
      result$data['subtitleNotIn'] = (l$subtitleNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('subtitleGT')) {
      final l$subtitleGT = data['subtitleGT'];
      result$data['subtitleGT'] = (l$subtitleGT as String?);
    }
    if (data.containsKey('subtitleGTE')) {
      final l$subtitleGTE = data['subtitleGTE'];
      result$data['subtitleGTE'] = (l$subtitleGTE as String?);
    }
    if (data.containsKey('subtitleLT')) {
      final l$subtitleLT = data['subtitleLT'];
      result$data['subtitleLT'] = (l$subtitleLT as String?);
    }
    if (data.containsKey('subtitleLTE')) {
      final l$subtitleLTE = data['subtitleLTE'];
      result$data['subtitleLTE'] = (l$subtitleLTE as String?);
    }
    if (data.containsKey('subtitleContains')) {
      final l$subtitleContains = data['subtitleContains'];
      result$data['subtitleContains'] = (l$subtitleContains as String?);
    }
    if (data.containsKey('subtitleHasPrefix')) {
      final l$subtitleHasPrefix = data['subtitleHasPrefix'];
      result$data['subtitleHasPrefix'] = (l$subtitleHasPrefix as String?);
    }
    if (data.containsKey('subtitleHasSuffix')) {
      final l$subtitleHasSuffix = data['subtitleHasSuffix'];
      result$data['subtitleHasSuffix'] = (l$subtitleHasSuffix as String?);
    }
    if (data.containsKey('subtitleEqualFold')) {
      final l$subtitleEqualFold = data['subtitleEqualFold'];
      result$data['subtitleEqualFold'] = (l$subtitleEqualFold as String?);
    }
    if (data.containsKey('subtitleContainsFold')) {
      final l$subtitleContainsFold = data['subtitleContainsFold'];
      result$data['subtitleContainsFold'] = (l$subtitleContainsFold as String?);
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = (l$description as String?);
    }
    if (data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = data['descriptionNEQ'];
      result$data['descriptionNEQ'] = (l$descriptionNEQ as String?);
    }
    if (data.containsKey('descriptionIn')) {
      final l$descriptionIn = data['descriptionIn'];
      result$data['descriptionIn'] = (l$descriptionIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = data['descriptionNotIn'];
      result$data['descriptionNotIn'] = (l$descriptionNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionGT')) {
      final l$descriptionGT = data['descriptionGT'];
      result$data['descriptionGT'] = (l$descriptionGT as String?);
    }
    if (data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = data['descriptionGTE'];
      result$data['descriptionGTE'] = (l$descriptionGTE as String?);
    }
    if (data.containsKey('descriptionLT')) {
      final l$descriptionLT = data['descriptionLT'];
      result$data['descriptionLT'] = (l$descriptionLT as String?);
    }
    if (data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = data['descriptionLTE'];
      result$data['descriptionLTE'] = (l$descriptionLTE as String?);
    }
    if (data.containsKey('descriptionContains')) {
      final l$descriptionContains = data['descriptionContains'];
      result$data['descriptionContains'] = (l$descriptionContains as String?);
    }
    if (data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = data['descriptionHasPrefix'];
      result$data['descriptionHasPrefix'] = (l$descriptionHasPrefix as String?);
    }
    if (data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = data['descriptionHasSuffix'];
      result$data['descriptionHasSuffix'] = (l$descriptionHasSuffix as String?);
    }
    if (data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = data['descriptionEqualFold'];
      result$data['descriptionEqualFold'] = (l$descriptionEqualFold as String?);
    }
    if (data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = data['descriptionContainsFold'];
      result$data['descriptionContainsFold'] =
          (l$descriptionContainsFold as String?);
    }
    if (data.containsKey('duration')) {
      final l$duration = data['duration'];
      result$data['duration'] = (l$duration as int?);
    }
    if (data.containsKey('durationNEQ')) {
      final l$durationNEQ = data['durationNEQ'];
      result$data['durationNEQ'] = (l$durationNEQ as int?);
    }
    if (data.containsKey('durationIn')) {
      final l$durationIn = data['durationIn'];
      result$data['durationIn'] =
          (l$durationIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('durationNotIn')) {
      final l$durationNotIn = data['durationNotIn'];
      result$data['durationNotIn'] =
          (l$durationNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('durationGT')) {
      final l$durationGT = data['durationGT'];
      result$data['durationGT'] = (l$durationGT as int?);
    }
    if (data.containsKey('durationGTE')) {
      final l$durationGTE = data['durationGTE'];
      result$data['durationGTE'] = (l$durationGTE as int?);
    }
    if (data.containsKey('durationLT')) {
      final l$durationLT = data['durationLT'];
      result$data['durationLT'] = (l$durationLT as int?);
    }
    if (data.containsKey('durationLTE')) {
      final l$durationLTE = data['durationLTE'];
      result$data['durationLTE'] = (l$durationLTE as int?);
    }
    if (data.containsKey('streamurl')) {
      final l$streamurl = data['streamurl'];
      result$data['streamurl'] = (l$streamurl as String?);
    }
    if (data.containsKey('streamurlNEQ')) {
      final l$streamurlNEQ = data['streamurlNEQ'];
      result$data['streamurlNEQ'] = (l$streamurlNEQ as String?);
    }
    if (data.containsKey('streamurlIn')) {
      final l$streamurlIn = data['streamurlIn'];
      result$data['streamurlIn'] =
          (l$streamurlIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('streamurlNotIn')) {
      final l$streamurlNotIn = data['streamurlNotIn'];
      result$data['streamurlNotIn'] = (l$streamurlNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('streamurlGT')) {
      final l$streamurlGT = data['streamurlGT'];
      result$data['streamurlGT'] = (l$streamurlGT as String?);
    }
    if (data.containsKey('streamurlGTE')) {
      final l$streamurlGTE = data['streamurlGTE'];
      result$data['streamurlGTE'] = (l$streamurlGTE as String?);
    }
    if (data.containsKey('streamurlLT')) {
      final l$streamurlLT = data['streamurlLT'];
      result$data['streamurlLT'] = (l$streamurlLT as String?);
    }
    if (data.containsKey('streamurlLTE')) {
      final l$streamurlLTE = data['streamurlLTE'];
      result$data['streamurlLTE'] = (l$streamurlLTE as String?);
    }
    if (data.containsKey('streamurlContains')) {
      final l$streamurlContains = data['streamurlContains'];
      result$data['streamurlContains'] = (l$streamurlContains as String?);
    }
    if (data.containsKey('streamurlHasPrefix')) {
      final l$streamurlHasPrefix = data['streamurlHasPrefix'];
      result$data['streamurlHasPrefix'] = (l$streamurlHasPrefix as String?);
    }
    if (data.containsKey('streamurlHasSuffix')) {
      final l$streamurlHasSuffix = data['streamurlHasSuffix'];
      result$data['streamurlHasSuffix'] = (l$streamurlHasSuffix as String?);
    }
    if (data.containsKey('streamurlEqualFold')) {
      final l$streamurlEqualFold = data['streamurlEqualFold'];
      result$data['streamurlEqualFold'] = (l$streamurlEqualFold as String?);
    }
    if (data.containsKey('streamurlContainsFold')) {
      final l$streamurlContainsFold = data['streamurlContainsFold'];
      result$data['streamurlContainsFold'] =
          (l$streamurlContainsFold as String?);
    }
    if (data.containsKey('downloadurl')) {
      final l$downloadurl = data['downloadurl'];
      result$data['downloadurl'] = (l$downloadurl as String?);
    }
    if (data.containsKey('downloadurlNEQ')) {
      final l$downloadurlNEQ = data['downloadurlNEQ'];
      result$data['downloadurlNEQ'] = (l$downloadurlNEQ as String?);
    }
    if (data.containsKey('downloadurlIn')) {
      final l$downloadurlIn = data['downloadurlIn'];
      result$data['downloadurlIn'] = (l$downloadurlIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('downloadurlNotIn')) {
      final l$downloadurlNotIn = data['downloadurlNotIn'];
      result$data['downloadurlNotIn'] = (l$downloadurlNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('downloadurlGT')) {
      final l$downloadurlGT = data['downloadurlGT'];
      result$data['downloadurlGT'] = (l$downloadurlGT as String?);
    }
    if (data.containsKey('downloadurlGTE')) {
      final l$downloadurlGTE = data['downloadurlGTE'];
      result$data['downloadurlGTE'] = (l$downloadurlGTE as String?);
    }
    if (data.containsKey('downloadurlLT')) {
      final l$downloadurlLT = data['downloadurlLT'];
      result$data['downloadurlLT'] = (l$downloadurlLT as String?);
    }
    if (data.containsKey('downloadurlLTE')) {
      final l$downloadurlLTE = data['downloadurlLTE'];
      result$data['downloadurlLTE'] = (l$downloadurlLTE as String?);
    }
    if (data.containsKey('downloadurlContains')) {
      final l$downloadurlContains = data['downloadurlContains'];
      result$data['downloadurlContains'] = (l$downloadurlContains as String?);
    }
    if (data.containsKey('downloadurlHasPrefix')) {
      final l$downloadurlHasPrefix = data['downloadurlHasPrefix'];
      result$data['downloadurlHasPrefix'] = (l$downloadurlHasPrefix as String?);
    }
    if (data.containsKey('downloadurlHasSuffix')) {
      final l$downloadurlHasSuffix = data['downloadurlHasSuffix'];
      result$data['downloadurlHasSuffix'] = (l$downloadurlHasSuffix as String?);
    }
    if (data.containsKey('downloadurlEqualFold')) {
      final l$downloadurlEqualFold = data['downloadurlEqualFold'];
      result$data['downloadurlEqualFold'] = (l$downloadurlEqualFold as String?);
    }
    if (data.containsKey('downloadurlContainsFold')) {
      final l$downloadurlContainsFold = data['downloadurlContainsFold'];
      result$data['downloadurlContainsFold'] =
          (l$downloadurlContainsFold as String?);
    }
    if (data.containsKey('source')) {
      final l$source = data['source'];
      result$data['source'] = (l$source as String?);
    }
    if (data.containsKey('sourceNEQ')) {
      final l$sourceNEQ = data['sourceNEQ'];
      result$data['sourceNEQ'] = (l$sourceNEQ as String?);
    }
    if (data.containsKey('sourceIn')) {
      final l$sourceIn = data['sourceIn'];
      result$data['sourceIn'] =
          (l$sourceIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('sourceNotIn')) {
      final l$sourceNotIn = data['sourceNotIn'];
      result$data['sourceNotIn'] =
          (l$sourceNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('sourceGT')) {
      final l$sourceGT = data['sourceGT'];
      result$data['sourceGT'] = (l$sourceGT as String?);
    }
    if (data.containsKey('sourceGTE')) {
      final l$sourceGTE = data['sourceGTE'];
      result$data['sourceGTE'] = (l$sourceGTE as String?);
    }
    if (data.containsKey('sourceLT')) {
      final l$sourceLT = data['sourceLT'];
      result$data['sourceLT'] = (l$sourceLT as String?);
    }
    if (data.containsKey('sourceLTE')) {
      final l$sourceLTE = data['sourceLTE'];
      result$data['sourceLTE'] = (l$sourceLTE as String?);
    }
    if (data.containsKey('sourceContains')) {
      final l$sourceContains = data['sourceContains'];
      result$data['sourceContains'] = (l$sourceContains as String?);
    }
    if (data.containsKey('sourceHasPrefix')) {
      final l$sourceHasPrefix = data['sourceHasPrefix'];
      result$data['sourceHasPrefix'] = (l$sourceHasPrefix as String?);
    }
    if (data.containsKey('sourceHasSuffix')) {
      final l$sourceHasSuffix = data['sourceHasSuffix'];
      result$data['sourceHasSuffix'] = (l$sourceHasSuffix as String?);
    }
    if (data.containsKey('sourceEqualFold')) {
      final l$sourceEqualFold = data['sourceEqualFold'];
      result$data['sourceEqualFold'] = (l$sourceEqualFold as String?);
    }
    if (data.containsKey('sourceContainsFold')) {
      final l$sourceContainsFold = data['sourceContainsFold'];
      result$data['sourceContainsFold'] = (l$sourceContainsFold as String?);
    }
    if (data.containsKey('sourceurl')) {
      final l$sourceurl = data['sourceurl'];
      result$data['sourceurl'] = (l$sourceurl as String?);
    }
    if (data.containsKey('sourceurlNEQ')) {
      final l$sourceurlNEQ = data['sourceurlNEQ'];
      result$data['sourceurlNEQ'] = (l$sourceurlNEQ as String?);
    }
    if (data.containsKey('sourceurlIn')) {
      final l$sourceurlIn = data['sourceurlIn'];
      result$data['sourceurlIn'] =
          (l$sourceurlIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('sourceurlNotIn')) {
      final l$sourceurlNotIn = data['sourceurlNotIn'];
      result$data['sourceurlNotIn'] = (l$sourceurlNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('sourceurlGT')) {
      final l$sourceurlGT = data['sourceurlGT'];
      result$data['sourceurlGT'] = (l$sourceurlGT as String?);
    }
    if (data.containsKey('sourceurlGTE')) {
      final l$sourceurlGTE = data['sourceurlGTE'];
      result$data['sourceurlGTE'] = (l$sourceurlGTE as String?);
    }
    if (data.containsKey('sourceurlLT')) {
      final l$sourceurlLT = data['sourceurlLT'];
      result$data['sourceurlLT'] = (l$sourceurlLT as String?);
    }
    if (data.containsKey('sourceurlLTE')) {
      final l$sourceurlLTE = data['sourceurlLTE'];
      result$data['sourceurlLTE'] = (l$sourceurlLTE as String?);
    }
    if (data.containsKey('sourceurlContains')) {
      final l$sourceurlContains = data['sourceurlContains'];
      result$data['sourceurlContains'] = (l$sourceurlContains as String?);
    }
    if (data.containsKey('sourceurlHasPrefix')) {
      final l$sourceurlHasPrefix = data['sourceurlHasPrefix'];
      result$data['sourceurlHasPrefix'] = (l$sourceurlHasPrefix as String?);
    }
    if (data.containsKey('sourceurlHasSuffix')) {
      final l$sourceurlHasSuffix = data['sourceurlHasSuffix'];
      result$data['sourceurlHasSuffix'] = (l$sourceurlHasSuffix as String?);
    }
    if (data.containsKey('sourceurlEqualFold')) {
      final l$sourceurlEqualFold = data['sourceurlEqualFold'];
      result$data['sourceurlEqualFold'] = (l$sourceurlEqualFold as String?);
    }
    if (data.containsKey('sourceurlContainsFold')) {
      final l$sourceurlContainsFold = data['sourceurlContainsFold'];
      result$data['sourceurlContainsFold'] =
          (l$sourceurlContainsFold as String?);
    }
    if (data.containsKey('licence')) {
      final l$licence = data['licence'];
      result$data['licence'] = (l$licence as String?);
    }
    if (data.containsKey('licenceNEQ')) {
      final l$licenceNEQ = data['licenceNEQ'];
      result$data['licenceNEQ'] = (l$licenceNEQ as String?);
    }
    if (data.containsKey('licenceIn')) {
      final l$licenceIn = data['licenceIn'];
      result$data['licenceIn'] =
          (l$licenceIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('licenceNotIn')) {
      final l$licenceNotIn = data['licenceNotIn'];
      result$data['licenceNotIn'] = (l$licenceNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('licenceGT')) {
      final l$licenceGT = data['licenceGT'];
      result$data['licenceGT'] = (l$licenceGT as String?);
    }
    if (data.containsKey('licenceGTE')) {
      final l$licenceGTE = data['licenceGTE'];
      result$data['licenceGTE'] = (l$licenceGTE as String?);
    }
    if (data.containsKey('licenceLT')) {
      final l$licenceLT = data['licenceLT'];
      result$data['licenceLT'] = (l$licenceLT as String?);
    }
    if (data.containsKey('licenceLTE')) {
      final l$licenceLTE = data['licenceLTE'];
      result$data['licenceLTE'] = (l$licenceLTE as String?);
    }
    if (data.containsKey('licenceContains')) {
      final l$licenceContains = data['licenceContains'];
      result$data['licenceContains'] = (l$licenceContains as String?);
    }
    if (data.containsKey('licenceHasPrefix')) {
      final l$licenceHasPrefix = data['licenceHasPrefix'];
      result$data['licenceHasPrefix'] = (l$licenceHasPrefix as String?);
    }
    if (data.containsKey('licenceHasSuffix')) {
      final l$licenceHasSuffix = data['licenceHasSuffix'];
      result$data['licenceHasSuffix'] = (l$licenceHasSuffix as String?);
    }
    if (data.containsKey('licenceEqualFold')) {
      final l$licenceEqualFold = data['licenceEqualFold'];
      result$data['licenceEqualFold'] = (l$licenceEqualFold as String?);
    }
    if (data.containsKey('licenceContainsFold')) {
      final l$licenceContainsFold = data['licenceContainsFold'];
      result$data['licenceContainsFold'] = (l$licenceContainsFold as String?);
    }
    if (data.containsKey('licenceurl')) {
      final l$licenceurl = data['licenceurl'];
      result$data['licenceurl'] = (l$licenceurl as String?);
    }
    if (data.containsKey('licenceurlNEQ')) {
      final l$licenceurlNEQ = data['licenceurlNEQ'];
      result$data['licenceurlNEQ'] = (l$licenceurlNEQ as String?);
    }
    if (data.containsKey('licenceurlIn')) {
      final l$licenceurlIn = data['licenceurlIn'];
      result$data['licenceurlIn'] = (l$licenceurlIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('licenceurlNotIn')) {
      final l$licenceurlNotIn = data['licenceurlNotIn'];
      result$data['licenceurlNotIn'] = (l$licenceurlNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('licenceurlGT')) {
      final l$licenceurlGT = data['licenceurlGT'];
      result$data['licenceurlGT'] = (l$licenceurlGT as String?);
    }
    if (data.containsKey('licenceurlGTE')) {
      final l$licenceurlGTE = data['licenceurlGTE'];
      result$data['licenceurlGTE'] = (l$licenceurlGTE as String?);
    }
    if (data.containsKey('licenceurlLT')) {
      final l$licenceurlLT = data['licenceurlLT'];
      result$data['licenceurlLT'] = (l$licenceurlLT as String?);
    }
    if (data.containsKey('licenceurlLTE')) {
      final l$licenceurlLTE = data['licenceurlLTE'];
      result$data['licenceurlLTE'] = (l$licenceurlLTE as String?);
    }
    if (data.containsKey('licenceurlContains')) {
      final l$licenceurlContains = data['licenceurlContains'];
      result$data['licenceurlContains'] = (l$licenceurlContains as String?);
    }
    if (data.containsKey('licenceurlHasPrefix')) {
      final l$licenceurlHasPrefix = data['licenceurlHasPrefix'];
      result$data['licenceurlHasPrefix'] = (l$licenceurlHasPrefix as String?);
    }
    if (data.containsKey('licenceurlHasSuffix')) {
      final l$licenceurlHasSuffix = data['licenceurlHasSuffix'];
      result$data['licenceurlHasSuffix'] = (l$licenceurlHasSuffix as String?);
    }
    if (data.containsKey('licenceurlEqualFold')) {
      final l$licenceurlEqualFold = data['licenceurlEqualFold'];
      result$data['licenceurlEqualFold'] = (l$licenceurlEqualFold as String?);
    }
    if (data.containsKey('licenceurlContainsFold')) {
      final l$licenceurlContainsFold = data['licenceurlContainsFold'];
      result$data['licenceurlContainsFold'] =
          (l$licenceurlContainsFold as String?);
    }
    if (data.containsKey('ishidden')) {
      final l$ishidden = data['ishidden'];
      result$data['ishidden'] = (l$ishidden as bool?);
    }
    if (data.containsKey('ishiddenNEQ')) {
      final l$ishiddenNEQ = data['ishiddenNEQ'];
      result$data['ishiddenNEQ'] = (l$ishiddenNEQ as bool?);
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = (l$order as int?);
    }
    if (data.containsKey('orderNEQ')) {
      final l$orderNEQ = data['orderNEQ'];
      result$data['orderNEQ'] = (l$orderNEQ as int?);
    }
    if (data.containsKey('orderIn')) {
      final l$orderIn = data['orderIn'];
      result$data['orderIn'] =
          (l$orderIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderNotIn')) {
      final l$orderNotIn = data['orderNotIn'];
      result$data['orderNotIn'] =
          (l$orderNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderGT')) {
      final l$orderGT = data['orderGT'];
      result$data['orderGT'] = (l$orderGT as int?);
    }
    if (data.containsKey('orderGTE')) {
      final l$orderGTE = data['orderGTE'];
      result$data['orderGTE'] = (l$orderGTE as int?);
    }
    if (data.containsKey('orderLT')) {
      final l$orderLT = data['orderLT'];
      result$data['orderLT'] = (l$orderLT as int?);
    }
    if (data.containsKey('orderLTE')) {
      final l$orderLTE = data['orderLTE'];
      result$data['orderLTE'] = (l$orderLTE as int?);
    }
    if (data.containsKey('hasContent')) {
      final l$hasContent = data['hasContent'];
      result$data['hasContent'] = (l$hasContent as bool?);
    }
    if (data.containsKey('hasContentWith')) {
      final l$hasContentWith = data['hasContentWith'];
      result$data['hasContentWith'] = (l$hasContentWith as List<dynamic>?)
          ?.map((e) =>
              Input$ContentWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    return Input$ContentEpisodeWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentEpisodeWhereInput? get not =>
      (_$data['not'] as Input$ContentEpisodeWhereInput?);

  List<Input$ContentEpisodeWhereInput>? get and =>
      (_$data['and'] as List<Input$ContentEpisodeWhereInput>?);

  List<Input$ContentEpisodeWhereInput>? get or =>
      (_$data['or'] as List<Input$ContentEpisodeWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  String? get contentID => (_$data['contentID'] as String?);

  String? get contentIDNEQ => (_$data['contentIDNEQ'] as String?);

  List<String>? get contentIDIn => (_$data['contentIDIn'] as List<String>?);

  List<String>? get contentIDNotIn =>
      (_$data['contentIDNotIn'] as List<String>?);

  Enum$ContentEpisodeContentType? get type =>
      (_$data['type'] as Enum$ContentEpisodeContentType?);

  Enum$ContentEpisodeContentType? get typeNEQ =>
      (_$data['typeNEQ'] as Enum$ContentEpisodeContentType?);

  List<Enum$ContentEpisodeContentType>? get typeIn =>
      (_$data['typeIn'] as List<Enum$ContentEpisodeContentType>?);

  List<Enum$ContentEpisodeContentType>? get typeNotIn =>
      (_$data['typeNotIn'] as List<Enum$ContentEpisodeContentType>?);

  String? get title => (_$data['title'] as String?);

  String? get titleNEQ => (_$data['titleNEQ'] as String?);

  List<String>? get titleIn => (_$data['titleIn'] as List<String>?);

  List<String>? get titleNotIn => (_$data['titleNotIn'] as List<String>?);

  String? get titleGT => (_$data['titleGT'] as String?);

  String? get titleGTE => (_$data['titleGTE'] as String?);

  String? get titleLT => (_$data['titleLT'] as String?);

  String? get titleLTE => (_$data['titleLTE'] as String?);

  String? get titleContains => (_$data['titleContains'] as String?);

  String? get titleHasPrefix => (_$data['titleHasPrefix'] as String?);

  String? get titleHasSuffix => (_$data['titleHasSuffix'] as String?);

  String? get titleEqualFold => (_$data['titleEqualFold'] as String?);

  String? get titleContainsFold => (_$data['titleContainsFold'] as String?);

  String? get subtitle => (_$data['subtitle'] as String?);

  String? get subtitleNEQ => (_$data['subtitleNEQ'] as String?);

  List<String>? get subtitleIn => (_$data['subtitleIn'] as List<String>?);

  List<String>? get subtitleNotIn => (_$data['subtitleNotIn'] as List<String>?);

  String? get subtitleGT => (_$data['subtitleGT'] as String?);

  String? get subtitleGTE => (_$data['subtitleGTE'] as String?);

  String? get subtitleLT => (_$data['subtitleLT'] as String?);

  String? get subtitleLTE => (_$data['subtitleLTE'] as String?);

  String? get subtitleContains => (_$data['subtitleContains'] as String?);

  String? get subtitleHasPrefix => (_$data['subtitleHasPrefix'] as String?);

  String? get subtitleHasSuffix => (_$data['subtitleHasSuffix'] as String?);

  String? get subtitleEqualFold => (_$data['subtitleEqualFold'] as String?);

  String? get subtitleContainsFold =>
      (_$data['subtitleContainsFold'] as String?);

  String? get description => (_$data['description'] as String?);

  String? get descriptionNEQ => (_$data['descriptionNEQ'] as String?);

  List<String>? get descriptionIn => (_$data['descriptionIn'] as List<String>?);

  List<String>? get descriptionNotIn =>
      (_$data['descriptionNotIn'] as List<String>?);

  String? get descriptionGT => (_$data['descriptionGT'] as String?);

  String? get descriptionGTE => (_$data['descriptionGTE'] as String?);

  String? get descriptionLT => (_$data['descriptionLT'] as String?);

  String? get descriptionLTE => (_$data['descriptionLTE'] as String?);

  String? get descriptionContains => (_$data['descriptionContains'] as String?);

  String? get descriptionHasPrefix =>
      (_$data['descriptionHasPrefix'] as String?);

  String? get descriptionHasSuffix =>
      (_$data['descriptionHasSuffix'] as String?);

  String? get descriptionEqualFold =>
      (_$data['descriptionEqualFold'] as String?);

  String? get descriptionContainsFold =>
      (_$data['descriptionContainsFold'] as String?);

  int? get duration => (_$data['duration'] as int?);

  int? get durationNEQ => (_$data['durationNEQ'] as int?);

  List<int>? get durationIn => (_$data['durationIn'] as List<int>?);

  List<int>? get durationNotIn => (_$data['durationNotIn'] as List<int>?);

  int? get durationGT => (_$data['durationGT'] as int?);

  int? get durationGTE => (_$data['durationGTE'] as int?);

  int? get durationLT => (_$data['durationLT'] as int?);

  int? get durationLTE => (_$data['durationLTE'] as int?);

  String? get streamurl => (_$data['streamurl'] as String?);

  String? get streamurlNEQ => (_$data['streamurlNEQ'] as String?);

  List<String>? get streamurlIn => (_$data['streamurlIn'] as List<String>?);

  List<String>? get streamurlNotIn =>
      (_$data['streamurlNotIn'] as List<String>?);

  String? get streamurlGT => (_$data['streamurlGT'] as String?);

  String? get streamurlGTE => (_$data['streamurlGTE'] as String?);

  String? get streamurlLT => (_$data['streamurlLT'] as String?);

  String? get streamurlLTE => (_$data['streamurlLTE'] as String?);

  String? get streamurlContains => (_$data['streamurlContains'] as String?);

  String? get streamurlHasPrefix => (_$data['streamurlHasPrefix'] as String?);

  String? get streamurlHasSuffix => (_$data['streamurlHasSuffix'] as String?);

  String? get streamurlEqualFold => (_$data['streamurlEqualFold'] as String?);

  String? get streamurlContainsFold =>
      (_$data['streamurlContainsFold'] as String?);

  String? get downloadurl => (_$data['downloadurl'] as String?);

  String? get downloadurlNEQ => (_$data['downloadurlNEQ'] as String?);

  List<String>? get downloadurlIn => (_$data['downloadurlIn'] as List<String>?);

  List<String>? get downloadurlNotIn =>
      (_$data['downloadurlNotIn'] as List<String>?);

  String? get downloadurlGT => (_$data['downloadurlGT'] as String?);

  String? get downloadurlGTE => (_$data['downloadurlGTE'] as String?);

  String? get downloadurlLT => (_$data['downloadurlLT'] as String?);

  String? get downloadurlLTE => (_$data['downloadurlLTE'] as String?);

  String? get downloadurlContains => (_$data['downloadurlContains'] as String?);

  String? get downloadurlHasPrefix =>
      (_$data['downloadurlHasPrefix'] as String?);

  String? get downloadurlHasSuffix =>
      (_$data['downloadurlHasSuffix'] as String?);

  String? get downloadurlEqualFold =>
      (_$data['downloadurlEqualFold'] as String?);

  String? get downloadurlContainsFold =>
      (_$data['downloadurlContainsFold'] as String?);

  String? get source => (_$data['source'] as String?);

  String? get sourceNEQ => (_$data['sourceNEQ'] as String?);

  List<String>? get sourceIn => (_$data['sourceIn'] as List<String>?);

  List<String>? get sourceNotIn => (_$data['sourceNotIn'] as List<String>?);

  String? get sourceGT => (_$data['sourceGT'] as String?);

  String? get sourceGTE => (_$data['sourceGTE'] as String?);

  String? get sourceLT => (_$data['sourceLT'] as String?);

  String? get sourceLTE => (_$data['sourceLTE'] as String?);

  String? get sourceContains => (_$data['sourceContains'] as String?);

  String? get sourceHasPrefix => (_$data['sourceHasPrefix'] as String?);

  String? get sourceHasSuffix => (_$data['sourceHasSuffix'] as String?);

  String? get sourceEqualFold => (_$data['sourceEqualFold'] as String?);

  String? get sourceContainsFold => (_$data['sourceContainsFold'] as String?);

  String? get sourceurl => (_$data['sourceurl'] as String?);

  String? get sourceurlNEQ => (_$data['sourceurlNEQ'] as String?);

  List<String>? get sourceurlIn => (_$data['sourceurlIn'] as List<String>?);

  List<String>? get sourceurlNotIn =>
      (_$data['sourceurlNotIn'] as List<String>?);

  String? get sourceurlGT => (_$data['sourceurlGT'] as String?);

  String? get sourceurlGTE => (_$data['sourceurlGTE'] as String?);

  String? get sourceurlLT => (_$data['sourceurlLT'] as String?);

  String? get sourceurlLTE => (_$data['sourceurlLTE'] as String?);

  String? get sourceurlContains => (_$data['sourceurlContains'] as String?);

  String? get sourceurlHasPrefix => (_$data['sourceurlHasPrefix'] as String?);

  String? get sourceurlHasSuffix => (_$data['sourceurlHasSuffix'] as String?);

  String? get sourceurlEqualFold => (_$data['sourceurlEqualFold'] as String?);

  String? get sourceurlContainsFold =>
      (_$data['sourceurlContainsFold'] as String?);

  String? get licence => (_$data['licence'] as String?);

  String? get licenceNEQ => (_$data['licenceNEQ'] as String?);

  List<String>? get licenceIn => (_$data['licenceIn'] as List<String>?);

  List<String>? get licenceNotIn => (_$data['licenceNotIn'] as List<String>?);

  String? get licenceGT => (_$data['licenceGT'] as String?);

  String? get licenceGTE => (_$data['licenceGTE'] as String?);

  String? get licenceLT => (_$data['licenceLT'] as String?);

  String? get licenceLTE => (_$data['licenceLTE'] as String?);

  String? get licenceContains => (_$data['licenceContains'] as String?);

  String? get licenceHasPrefix => (_$data['licenceHasPrefix'] as String?);

  String? get licenceHasSuffix => (_$data['licenceHasSuffix'] as String?);

  String? get licenceEqualFold => (_$data['licenceEqualFold'] as String?);

  String? get licenceContainsFold => (_$data['licenceContainsFold'] as String?);

  String? get licenceurl => (_$data['licenceurl'] as String?);

  String? get licenceurlNEQ => (_$data['licenceurlNEQ'] as String?);

  List<String>? get licenceurlIn => (_$data['licenceurlIn'] as List<String>?);

  List<String>? get licenceurlNotIn =>
      (_$data['licenceurlNotIn'] as List<String>?);

  String? get licenceurlGT => (_$data['licenceurlGT'] as String?);

  String? get licenceurlGTE => (_$data['licenceurlGTE'] as String?);

  String? get licenceurlLT => (_$data['licenceurlLT'] as String?);

  String? get licenceurlLTE => (_$data['licenceurlLTE'] as String?);

  String? get licenceurlContains => (_$data['licenceurlContains'] as String?);

  String? get licenceurlHasPrefix => (_$data['licenceurlHasPrefix'] as String?);

  String? get licenceurlHasSuffix => (_$data['licenceurlHasSuffix'] as String?);

  String? get licenceurlEqualFold => (_$data['licenceurlEqualFold'] as String?);

  String? get licenceurlContainsFold =>
      (_$data['licenceurlContainsFold'] as String?);

  bool? get ishidden => (_$data['ishidden'] as bool?);

  bool? get ishiddenNEQ => (_$data['ishiddenNEQ'] as bool?);

  int? get order => (_$data['order'] as int?);

  int? get orderNEQ => (_$data['orderNEQ'] as int?);

  List<int>? get orderIn => (_$data['orderIn'] as List<int>?);

  List<int>? get orderNotIn => (_$data['orderNotIn'] as List<int>?);

  int? get orderGT => (_$data['orderGT'] as int?);

  int? get orderGTE => (_$data['orderGTE'] as int?);

  int? get orderLT => (_$data['orderLT'] as int?);

  int? get orderLTE => (_$data['orderLTE'] as int?);

  bool? get hasContent => (_$data['hasContent'] as bool?);

  List<Input$ContentWhereInput>? get hasContentWith =>
      (_$data['hasContentWith'] as List<Input$ContentWhereInput>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('contentID')) {
      final l$contentID = contentID;
      result$data['contentID'] = l$contentID;
    }
    if (_$data.containsKey('contentIDNEQ')) {
      final l$contentIDNEQ = contentIDNEQ;
      result$data['contentIDNEQ'] = l$contentIDNEQ;
    }
    if (_$data.containsKey('contentIDIn')) {
      final l$contentIDIn = contentIDIn;
      result$data['contentIDIn'] = l$contentIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('contentIDNotIn')) {
      final l$contentIDNotIn = contentIDNotIn;
      result$data['contentIDNotIn'] = l$contentIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] =
          l$type == null ? null : toJson$Enum$ContentEpisodeContentType(l$type);
    }
    if (_$data.containsKey('typeNEQ')) {
      final l$typeNEQ = typeNEQ;
      result$data['typeNEQ'] = l$typeNEQ == null
          ? null
          : toJson$Enum$ContentEpisodeContentType(l$typeNEQ);
    }
    if (_$data.containsKey('typeIn')) {
      final l$typeIn = typeIn;
      result$data['typeIn'] = l$typeIn
          ?.map((e) => toJson$Enum$ContentEpisodeContentType(e))
          .toList();
    }
    if (_$data.containsKey('typeNotIn')) {
      final l$typeNotIn = typeNotIn;
      result$data['typeNotIn'] = l$typeNotIn
          ?.map((e) => toJson$Enum$ContentEpisodeContentType(e))
          .toList();
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] = l$title;
    }
    if (_$data.containsKey('titleNEQ')) {
      final l$titleNEQ = titleNEQ;
      result$data['titleNEQ'] = l$titleNEQ;
    }
    if (_$data.containsKey('titleIn')) {
      final l$titleIn = titleIn;
      result$data['titleIn'] = l$titleIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleNotIn')) {
      final l$titleNotIn = titleNotIn;
      result$data['titleNotIn'] = l$titleNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleGT')) {
      final l$titleGT = titleGT;
      result$data['titleGT'] = l$titleGT;
    }
    if (_$data.containsKey('titleGTE')) {
      final l$titleGTE = titleGTE;
      result$data['titleGTE'] = l$titleGTE;
    }
    if (_$data.containsKey('titleLT')) {
      final l$titleLT = titleLT;
      result$data['titleLT'] = l$titleLT;
    }
    if (_$data.containsKey('titleLTE')) {
      final l$titleLTE = titleLTE;
      result$data['titleLTE'] = l$titleLTE;
    }
    if (_$data.containsKey('titleContains')) {
      final l$titleContains = titleContains;
      result$data['titleContains'] = l$titleContains;
    }
    if (_$data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = titleHasPrefix;
      result$data['titleHasPrefix'] = l$titleHasPrefix;
    }
    if (_$data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = titleHasSuffix;
      result$data['titleHasSuffix'] = l$titleHasSuffix;
    }
    if (_$data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = titleEqualFold;
      result$data['titleEqualFold'] = l$titleEqualFold;
    }
    if (_$data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = titleContainsFold;
      result$data['titleContainsFold'] = l$titleContainsFold;
    }
    if (_$data.containsKey('subtitle')) {
      final l$subtitle = subtitle;
      result$data['subtitle'] = l$subtitle;
    }
    if (_$data.containsKey('subtitleNEQ')) {
      final l$subtitleNEQ = subtitleNEQ;
      result$data['subtitleNEQ'] = l$subtitleNEQ;
    }
    if (_$data.containsKey('subtitleIn')) {
      final l$subtitleIn = subtitleIn;
      result$data['subtitleIn'] = l$subtitleIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('subtitleNotIn')) {
      final l$subtitleNotIn = subtitleNotIn;
      result$data['subtitleNotIn'] = l$subtitleNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('subtitleGT')) {
      final l$subtitleGT = subtitleGT;
      result$data['subtitleGT'] = l$subtitleGT;
    }
    if (_$data.containsKey('subtitleGTE')) {
      final l$subtitleGTE = subtitleGTE;
      result$data['subtitleGTE'] = l$subtitleGTE;
    }
    if (_$data.containsKey('subtitleLT')) {
      final l$subtitleLT = subtitleLT;
      result$data['subtitleLT'] = l$subtitleLT;
    }
    if (_$data.containsKey('subtitleLTE')) {
      final l$subtitleLTE = subtitleLTE;
      result$data['subtitleLTE'] = l$subtitleLTE;
    }
    if (_$data.containsKey('subtitleContains')) {
      final l$subtitleContains = subtitleContains;
      result$data['subtitleContains'] = l$subtitleContains;
    }
    if (_$data.containsKey('subtitleHasPrefix')) {
      final l$subtitleHasPrefix = subtitleHasPrefix;
      result$data['subtitleHasPrefix'] = l$subtitleHasPrefix;
    }
    if (_$data.containsKey('subtitleHasSuffix')) {
      final l$subtitleHasSuffix = subtitleHasSuffix;
      result$data['subtitleHasSuffix'] = l$subtitleHasSuffix;
    }
    if (_$data.containsKey('subtitleEqualFold')) {
      final l$subtitleEqualFold = subtitleEqualFold;
      result$data['subtitleEqualFold'] = l$subtitleEqualFold;
    }
    if (_$data.containsKey('subtitleContainsFold')) {
      final l$subtitleContainsFold = subtitleContainsFold;
      result$data['subtitleContainsFold'] = l$subtitleContainsFold;
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] = l$description;
    }
    if (_$data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = descriptionNEQ;
      result$data['descriptionNEQ'] = l$descriptionNEQ;
    }
    if (_$data.containsKey('descriptionIn')) {
      final l$descriptionIn = descriptionIn;
      result$data['descriptionIn'] = l$descriptionIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = descriptionNotIn;
      result$data['descriptionNotIn'] =
          l$descriptionNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionGT')) {
      final l$descriptionGT = descriptionGT;
      result$data['descriptionGT'] = l$descriptionGT;
    }
    if (_$data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = descriptionGTE;
      result$data['descriptionGTE'] = l$descriptionGTE;
    }
    if (_$data.containsKey('descriptionLT')) {
      final l$descriptionLT = descriptionLT;
      result$data['descriptionLT'] = l$descriptionLT;
    }
    if (_$data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = descriptionLTE;
      result$data['descriptionLTE'] = l$descriptionLTE;
    }
    if (_$data.containsKey('descriptionContains')) {
      final l$descriptionContains = descriptionContains;
      result$data['descriptionContains'] = l$descriptionContains;
    }
    if (_$data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = descriptionHasPrefix;
      result$data['descriptionHasPrefix'] = l$descriptionHasPrefix;
    }
    if (_$data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = descriptionHasSuffix;
      result$data['descriptionHasSuffix'] = l$descriptionHasSuffix;
    }
    if (_$data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = descriptionEqualFold;
      result$data['descriptionEqualFold'] = l$descriptionEqualFold;
    }
    if (_$data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = descriptionContainsFold;
      result$data['descriptionContainsFold'] = l$descriptionContainsFold;
    }
    if (_$data.containsKey('duration')) {
      final l$duration = duration;
      result$data['duration'] = l$duration;
    }
    if (_$data.containsKey('durationNEQ')) {
      final l$durationNEQ = durationNEQ;
      result$data['durationNEQ'] = l$durationNEQ;
    }
    if (_$data.containsKey('durationIn')) {
      final l$durationIn = durationIn;
      result$data['durationIn'] = l$durationIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('durationNotIn')) {
      final l$durationNotIn = durationNotIn;
      result$data['durationNotIn'] = l$durationNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('durationGT')) {
      final l$durationGT = durationGT;
      result$data['durationGT'] = l$durationGT;
    }
    if (_$data.containsKey('durationGTE')) {
      final l$durationGTE = durationGTE;
      result$data['durationGTE'] = l$durationGTE;
    }
    if (_$data.containsKey('durationLT')) {
      final l$durationLT = durationLT;
      result$data['durationLT'] = l$durationLT;
    }
    if (_$data.containsKey('durationLTE')) {
      final l$durationLTE = durationLTE;
      result$data['durationLTE'] = l$durationLTE;
    }
    if (_$data.containsKey('streamurl')) {
      final l$streamurl = streamurl;
      result$data['streamurl'] = l$streamurl;
    }
    if (_$data.containsKey('streamurlNEQ')) {
      final l$streamurlNEQ = streamurlNEQ;
      result$data['streamurlNEQ'] = l$streamurlNEQ;
    }
    if (_$data.containsKey('streamurlIn')) {
      final l$streamurlIn = streamurlIn;
      result$data['streamurlIn'] = l$streamurlIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('streamurlNotIn')) {
      final l$streamurlNotIn = streamurlNotIn;
      result$data['streamurlNotIn'] = l$streamurlNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('streamurlGT')) {
      final l$streamurlGT = streamurlGT;
      result$data['streamurlGT'] = l$streamurlGT;
    }
    if (_$data.containsKey('streamurlGTE')) {
      final l$streamurlGTE = streamurlGTE;
      result$data['streamurlGTE'] = l$streamurlGTE;
    }
    if (_$data.containsKey('streamurlLT')) {
      final l$streamurlLT = streamurlLT;
      result$data['streamurlLT'] = l$streamurlLT;
    }
    if (_$data.containsKey('streamurlLTE')) {
      final l$streamurlLTE = streamurlLTE;
      result$data['streamurlLTE'] = l$streamurlLTE;
    }
    if (_$data.containsKey('streamurlContains')) {
      final l$streamurlContains = streamurlContains;
      result$data['streamurlContains'] = l$streamurlContains;
    }
    if (_$data.containsKey('streamurlHasPrefix')) {
      final l$streamurlHasPrefix = streamurlHasPrefix;
      result$data['streamurlHasPrefix'] = l$streamurlHasPrefix;
    }
    if (_$data.containsKey('streamurlHasSuffix')) {
      final l$streamurlHasSuffix = streamurlHasSuffix;
      result$data['streamurlHasSuffix'] = l$streamurlHasSuffix;
    }
    if (_$data.containsKey('streamurlEqualFold')) {
      final l$streamurlEqualFold = streamurlEqualFold;
      result$data['streamurlEqualFold'] = l$streamurlEqualFold;
    }
    if (_$data.containsKey('streamurlContainsFold')) {
      final l$streamurlContainsFold = streamurlContainsFold;
      result$data['streamurlContainsFold'] = l$streamurlContainsFold;
    }
    if (_$data.containsKey('downloadurl')) {
      final l$downloadurl = downloadurl;
      result$data['downloadurl'] = l$downloadurl;
    }
    if (_$data.containsKey('downloadurlNEQ')) {
      final l$downloadurlNEQ = downloadurlNEQ;
      result$data['downloadurlNEQ'] = l$downloadurlNEQ;
    }
    if (_$data.containsKey('downloadurlIn')) {
      final l$downloadurlIn = downloadurlIn;
      result$data['downloadurlIn'] = l$downloadurlIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('downloadurlNotIn')) {
      final l$downloadurlNotIn = downloadurlNotIn;
      result$data['downloadurlNotIn'] =
          l$downloadurlNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('downloadurlGT')) {
      final l$downloadurlGT = downloadurlGT;
      result$data['downloadurlGT'] = l$downloadurlGT;
    }
    if (_$data.containsKey('downloadurlGTE')) {
      final l$downloadurlGTE = downloadurlGTE;
      result$data['downloadurlGTE'] = l$downloadurlGTE;
    }
    if (_$data.containsKey('downloadurlLT')) {
      final l$downloadurlLT = downloadurlLT;
      result$data['downloadurlLT'] = l$downloadurlLT;
    }
    if (_$data.containsKey('downloadurlLTE')) {
      final l$downloadurlLTE = downloadurlLTE;
      result$data['downloadurlLTE'] = l$downloadurlLTE;
    }
    if (_$data.containsKey('downloadurlContains')) {
      final l$downloadurlContains = downloadurlContains;
      result$data['downloadurlContains'] = l$downloadurlContains;
    }
    if (_$data.containsKey('downloadurlHasPrefix')) {
      final l$downloadurlHasPrefix = downloadurlHasPrefix;
      result$data['downloadurlHasPrefix'] = l$downloadurlHasPrefix;
    }
    if (_$data.containsKey('downloadurlHasSuffix')) {
      final l$downloadurlHasSuffix = downloadurlHasSuffix;
      result$data['downloadurlHasSuffix'] = l$downloadurlHasSuffix;
    }
    if (_$data.containsKey('downloadurlEqualFold')) {
      final l$downloadurlEqualFold = downloadurlEqualFold;
      result$data['downloadurlEqualFold'] = l$downloadurlEqualFold;
    }
    if (_$data.containsKey('downloadurlContainsFold')) {
      final l$downloadurlContainsFold = downloadurlContainsFold;
      result$data['downloadurlContainsFold'] = l$downloadurlContainsFold;
    }
    if (_$data.containsKey('source')) {
      final l$source = source;
      result$data['source'] = l$source;
    }
    if (_$data.containsKey('sourceNEQ')) {
      final l$sourceNEQ = sourceNEQ;
      result$data['sourceNEQ'] = l$sourceNEQ;
    }
    if (_$data.containsKey('sourceIn')) {
      final l$sourceIn = sourceIn;
      result$data['sourceIn'] = l$sourceIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('sourceNotIn')) {
      final l$sourceNotIn = sourceNotIn;
      result$data['sourceNotIn'] = l$sourceNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('sourceGT')) {
      final l$sourceGT = sourceGT;
      result$data['sourceGT'] = l$sourceGT;
    }
    if (_$data.containsKey('sourceGTE')) {
      final l$sourceGTE = sourceGTE;
      result$data['sourceGTE'] = l$sourceGTE;
    }
    if (_$data.containsKey('sourceLT')) {
      final l$sourceLT = sourceLT;
      result$data['sourceLT'] = l$sourceLT;
    }
    if (_$data.containsKey('sourceLTE')) {
      final l$sourceLTE = sourceLTE;
      result$data['sourceLTE'] = l$sourceLTE;
    }
    if (_$data.containsKey('sourceContains')) {
      final l$sourceContains = sourceContains;
      result$data['sourceContains'] = l$sourceContains;
    }
    if (_$data.containsKey('sourceHasPrefix')) {
      final l$sourceHasPrefix = sourceHasPrefix;
      result$data['sourceHasPrefix'] = l$sourceHasPrefix;
    }
    if (_$data.containsKey('sourceHasSuffix')) {
      final l$sourceHasSuffix = sourceHasSuffix;
      result$data['sourceHasSuffix'] = l$sourceHasSuffix;
    }
    if (_$data.containsKey('sourceEqualFold')) {
      final l$sourceEqualFold = sourceEqualFold;
      result$data['sourceEqualFold'] = l$sourceEqualFold;
    }
    if (_$data.containsKey('sourceContainsFold')) {
      final l$sourceContainsFold = sourceContainsFold;
      result$data['sourceContainsFold'] = l$sourceContainsFold;
    }
    if (_$data.containsKey('sourceurl')) {
      final l$sourceurl = sourceurl;
      result$data['sourceurl'] = l$sourceurl;
    }
    if (_$data.containsKey('sourceurlNEQ')) {
      final l$sourceurlNEQ = sourceurlNEQ;
      result$data['sourceurlNEQ'] = l$sourceurlNEQ;
    }
    if (_$data.containsKey('sourceurlIn')) {
      final l$sourceurlIn = sourceurlIn;
      result$data['sourceurlIn'] = l$sourceurlIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('sourceurlNotIn')) {
      final l$sourceurlNotIn = sourceurlNotIn;
      result$data['sourceurlNotIn'] = l$sourceurlNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('sourceurlGT')) {
      final l$sourceurlGT = sourceurlGT;
      result$data['sourceurlGT'] = l$sourceurlGT;
    }
    if (_$data.containsKey('sourceurlGTE')) {
      final l$sourceurlGTE = sourceurlGTE;
      result$data['sourceurlGTE'] = l$sourceurlGTE;
    }
    if (_$data.containsKey('sourceurlLT')) {
      final l$sourceurlLT = sourceurlLT;
      result$data['sourceurlLT'] = l$sourceurlLT;
    }
    if (_$data.containsKey('sourceurlLTE')) {
      final l$sourceurlLTE = sourceurlLTE;
      result$data['sourceurlLTE'] = l$sourceurlLTE;
    }
    if (_$data.containsKey('sourceurlContains')) {
      final l$sourceurlContains = sourceurlContains;
      result$data['sourceurlContains'] = l$sourceurlContains;
    }
    if (_$data.containsKey('sourceurlHasPrefix')) {
      final l$sourceurlHasPrefix = sourceurlHasPrefix;
      result$data['sourceurlHasPrefix'] = l$sourceurlHasPrefix;
    }
    if (_$data.containsKey('sourceurlHasSuffix')) {
      final l$sourceurlHasSuffix = sourceurlHasSuffix;
      result$data['sourceurlHasSuffix'] = l$sourceurlHasSuffix;
    }
    if (_$data.containsKey('sourceurlEqualFold')) {
      final l$sourceurlEqualFold = sourceurlEqualFold;
      result$data['sourceurlEqualFold'] = l$sourceurlEqualFold;
    }
    if (_$data.containsKey('sourceurlContainsFold')) {
      final l$sourceurlContainsFold = sourceurlContainsFold;
      result$data['sourceurlContainsFold'] = l$sourceurlContainsFold;
    }
    if (_$data.containsKey('licence')) {
      final l$licence = licence;
      result$data['licence'] = l$licence;
    }
    if (_$data.containsKey('licenceNEQ')) {
      final l$licenceNEQ = licenceNEQ;
      result$data['licenceNEQ'] = l$licenceNEQ;
    }
    if (_$data.containsKey('licenceIn')) {
      final l$licenceIn = licenceIn;
      result$data['licenceIn'] = l$licenceIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('licenceNotIn')) {
      final l$licenceNotIn = licenceNotIn;
      result$data['licenceNotIn'] = l$licenceNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('licenceGT')) {
      final l$licenceGT = licenceGT;
      result$data['licenceGT'] = l$licenceGT;
    }
    if (_$data.containsKey('licenceGTE')) {
      final l$licenceGTE = licenceGTE;
      result$data['licenceGTE'] = l$licenceGTE;
    }
    if (_$data.containsKey('licenceLT')) {
      final l$licenceLT = licenceLT;
      result$data['licenceLT'] = l$licenceLT;
    }
    if (_$data.containsKey('licenceLTE')) {
      final l$licenceLTE = licenceLTE;
      result$data['licenceLTE'] = l$licenceLTE;
    }
    if (_$data.containsKey('licenceContains')) {
      final l$licenceContains = licenceContains;
      result$data['licenceContains'] = l$licenceContains;
    }
    if (_$data.containsKey('licenceHasPrefix')) {
      final l$licenceHasPrefix = licenceHasPrefix;
      result$data['licenceHasPrefix'] = l$licenceHasPrefix;
    }
    if (_$data.containsKey('licenceHasSuffix')) {
      final l$licenceHasSuffix = licenceHasSuffix;
      result$data['licenceHasSuffix'] = l$licenceHasSuffix;
    }
    if (_$data.containsKey('licenceEqualFold')) {
      final l$licenceEqualFold = licenceEqualFold;
      result$data['licenceEqualFold'] = l$licenceEqualFold;
    }
    if (_$data.containsKey('licenceContainsFold')) {
      final l$licenceContainsFold = licenceContainsFold;
      result$data['licenceContainsFold'] = l$licenceContainsFold;
    }
    if (_$data.containsKey('licenceurl')) {
      final l$licenceurl = licenceurl;
      result$data['licenceurl'] = l$licenceurl;
    }
    if (_$data.containsKey('licenceurlNEQ')) {
      final l$licenceurlNEQ = licenceurlNEQ;
      result$data['licenceurlNEQ'] = l$licenceurlNEQ;
    }
    if (_$data.containsKey('licenceurlIn')) {
      final l$licenceurlIn = licenceurlIn;
      result$data['licenceurlIn'] = l$licenceurlIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('licenceurlNotIn')) {
      final l$licenceurlNotIn = licenceurlNotIn;
      result$data['licenceurlNotIn'] =
          l$licenceurlNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('licenceurlGT')) {
      final l$licenceurlGT = licenceurlGT;
      result$data['licenceurlGT'] = l$licenceurlGT;
    }
    if (_$data.containsKey('licenceurlGTE')) {
      final l$licenceurlGTE = licenceurlGTE;
      result$data['licenceurlGTE'] = l$licenceurlGTE;
    }
    if (_$data.containsKey('licenceurlLT')) {
      final l$licenceurlLT = licenceurlLT;
      result$data['licenceurlLT'] = l$licenceurlLT;
    }
    if (_$data.containsKey('licenceurlLTE')) {
      final l$licenceurlLTE = licenceurlLTE;
      result$data['licenceurlLTE'] = l$licenceurlLTE;
    }
    if (_$data.containsKey('licenceurlContains')) {
      final l$licenceurlContains = licenceurlContains;
      result$data['licenceurlContains'] = l$licenceurlContains;
    }
    if (_$data.containsKey('licenceurlHasPrefix')) {
      final l$licenceurlHasPrefix = licenceurlHasPrefix;
      result$data['licenceurlHasPrefix'] = l$licenceurlHasPrefix;
    }
    if (_$data.containsKey('licenceurlHasSuffix')) {
      final l$licenceurlHasSuffix = licenceurlHasSuffix;
      result$data['licenceurlHasSuffix'] = l$licenceurlHasSuffix;
    }
    if (_$data.containsKey('licenceurlEqualFold')) {
      final l$licenceurlEqualFold = licenceurlEqualFold;
      result$data['licenceurlEqualFold'] = l$licenceurlEqualFold;
    }
    if (_$data.containsKey('licenceurlContainsFold')) {
      final l$licenceurlContainsFold = licenceurlContainsFold;
      result$data['licenceurlContainsFold'] = l$licenceurlContainsFold;
    }
    if (_$data.containsKey('ishidden')) {
      final l$ishidden = ishidden;
      result$data['ishidden'] = l$ishidden;
    }
    if (_$data.containsKey('ishiddenNEQ')) {
      final l$ishiddenNEQ = ishiddenNEQ;
      result$data['ishiddenNEQ'] = l$ishiddenNEQ;
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order;
    }
    if (_$data.containsKey('orderNEQ')) {
      final l$orderNEQ = orderNEQ;
      result$data['orderNEQ'] = l$orderNEQ;
    }
    if (_$data.containsKey('orderIn')) {
      final l$orderIn = orderIn;
      result$data['orderIn'] = l$orderIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderNotIn')) {
      final l$orderNotIn = orderNotIn;
      result$data['orderNotIn'] = l$orderNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderGT')) {
      final l$orderGT = orderGT;
      result$data['orderGT'] = l$orderGT;
    }
    if (_$data.containsKey('orderGTE')) {
      final l$orderGTE = orderGTE;
      result$data['orderGTE'] = l$orderGTE;
    }
    if (_$data.containsKey('orderLT')) {
      final l$orderLT = orderLT;
      result$data['orderLT'] = l$orderLT;
    }
    if (_$data.containsKey('orderLTE')) {
      final l$orderLTE = orderLTE;
      result$data['orderLTE'] = l$orderLTE;
    }
    if (_$data.containsKey('hasContent')) {
      final l$hasContent = hasContent;
      result$data['hasContent'] = l$hasContent;
    }
    if (_$data.containsKey('hasContentWith')) {
      final l$hasContentWith = hasContentWith;
      result$data['hasContentWith'] =
          l$hasContentWith?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$ContentEpisodeWhereInput<Input$ContentEpisodeWhereInput>
      get copyWith => CopyWith$Input$ContentEpisodeWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$ContentEpisodeWhereInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$contentID = contentID;
    final lOther$contentID = other.contentID;
    if (_$data.containsKey('contentID') !=
        other._$data.containsKey('contentID')) {
      return false;
    }
    if (l$contentID != lOther$contentID) {
      return false;
    }
    final l$contentIDNEQ = contentIDNEQ;
    final lOther$contentIDNEQ = other.contentIDNEQ;
    if (_$data.containsKey('contentIDNEQ') !=
        other._$data.containsKey('contentIDNEQ')) {
      return false;
    }
    if (l$contentIDNEQ != lOther$contentIDNEQ) {
      return false;
    }
    final l$contentIDIn = contentIDIn;
    final lOther$contentIDIn = other.contentIDIn;
    if (_$data.containsKey('contentIDIn') !=
        other._$data.containsKey('contentIDIn')) {
      return false;
    }
    if (l$contentIDIn != null && lOther$contentIDIn != null) {
      if (l$contentIDIn.length != lOther$contentIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$contentIDIn.length; i++) {
        final l$contentIDIn$entry = l$contentIDIn[i];
        final lOther$contentIDIn$entry = lOther$contentIDIn[i];
        if (l$contentIDIn$entry != lOther$contentIDIn$entry) {
          return false;
        }
      }
    } else if (l$contentIDIn != lOther$contentIDIn) {
      return false;
    }
    final l$contentIDNotIn = contentIDNotIn;
    final lOther$contentIDNotIn = other.contentIDNotIn;
    if (_$data.containsKey('contentIDNotIn') !=
        other._$data.containsKey('contentIDNotIn')) {
      return false;
    }
    if (l$contentIDNotIn != null && lOther$contentIDNotIn != null) {
      if (l$contentIDNotIn.length != lOther$contentIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$contentIDNotIn.length; i++) {
        final l$contentIDNotIn$entry = l$contentIDNotIn[i];
        final lOther$contentIDNotIn$entry = lOther$contentIDNotIn[i];
        if (l$contentIDNotIn$entry != lOther$contentIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$contentIDNotIn != lOther$contentIDNotIn) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$typeNEQ = typeNEQ;
    final lOther$typeNEQ = other.typeNEQ;
    if (_$data.containsKey('typeNEQ') != other._$data.containsKey('typeNEQ')) {
      return false;
    }
    if (l$typeNEQ != lOther$typeNEQ) {
      return false;
    }
    final l$typeIn = typeIn;
    final lOther$typeIn = other.typeIn;
    if (_$data.containsKey('typeIn') != other._$data.containsKey('typeIn')) {
      return false;
    }
    if (l$typeIn != null && lOther$typeIn != null) {
      if (l$typeIn.length != lOther$typeIn.length) {
        return false;
      }
      for (int i = 0; i < l$typeIn.length; i++) {
        final l$typeIn$entry = l$typeIn[i];
        final lOther$typeIn$entry = lOther$typeIn[i];
        if (l$typeIn$entry != lOther$typeIn$entry) {
          return false;
        }
      }
    } else if (l$typeIn != lOther$typeIn) {
      return false;
    }
    final l$typeNotIn = typeNotIn;
    final lOther$typeNotIn = other.typeNotIn;
    if (_$data.containsKey('typeNotIn') !=
        other._$data.containsKey('typeNotIn')) {
      return false;
    }
    if (l$typeNotIn != null && lOther$typeNotIn != null) {
      if (l$typeNotIn.length != lOther$typeNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$typeNotIn.length; i++) {
        final l$typeNotIn$entry = l$typeNotIn[i];
        final lOther$typeNotIn$entry = lOther$typeNotIn[i];
        if (l$typeNotIn$entry != lOther$typeNotIn$entry) {
          return false;
        }
      }
    } else if (l$typeNotIn != lOther$typeNotIn) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$titleNEQ = titleNEQ;
    final lOther$titleNEQ = other.titleNEQ;
    if (_$data.containsKey('titleNEQ') !=
        other._$data.containsKey('titleNEQ')) {
      return false;
    }
    if (l$titleNEQ != lOther$titleNEQ) {
      return false;
    }
    final l$titleIn = titleIn;
    final lOther$titleIn = other.titleIn;
    if (_$data.containsKey('titleIn') != other._$data.containsKey('titleIn')) {
      return false;
    }
    if (l$titleIn != null && lOther$titleIn != null) {
      if (l$titleIn.length != lOther$titleIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleIn.length; i++) {
        final l$titleIn$entry = l$titleIn[i];
        final lOther$titleIn$entry = lOther$titleIn[i];
        if (l$titleIn$entry != lOther$titleIn$entry) {
          return false;
        }
      }
    } else if (l$titleIn != lOther$titleIn) {
      return false;
    }
    final l$titleNotIn = titleNotIn;
    final lOther$titleNotIn = other.titleNotIn;
    if (_$data.containsKey('titleNotIn') !=
        other._$data.containsKey('titleNotIn')) {
      return false;
    }
    if (l$titleNotIn != null && lOther$titleNotIn != null) {
      if (l$titleNotIn.length != lOther$titleNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleNotIn.length; i++) {
        final l$titleNotIn$entry = l$titleNotIn[i];
        final lOther$titleNotIn$entry = lOther$titleNotIn[i];
        if (l$titleNotIn$entry != lOther$titleNotIn$entry) {
          return false;
        }
      }
    } else if (l$titleNotIn != lOther$titleNotIn) {
      return false;
    }
    final l$titleGT = titleGT;
    final lOther$titleGT = other.titleGT;
    if (_$data.containsKey('titleGT') != other._$data.containsKey('titleGT')) {
      return false;
    }
    if (l$titleGT != lOther$titleGT) {
      return false;
    }
    final l$titleGTE = titleGTE;
    final lOther$titleGTE = other.titleGTE;
    if (_$data.containsKey('titleGTE') !=
        other._$data.containsKey('titleGTE')) {
      return false;
    }
    if (l$titleGTE != lOther$titleGTE) {
      return false;
    }
    final l$titleLT = titleLT;
    final lOther$titleLT = other.titleLT;
    if (_$data.containsKey('titleLT') != other._$data.containsKey('titleLT')) {
      return false;
    }
    if (l$titleLT != lOther$titleLT) {
      return false;
    }
    final l$titleLTE = titleLTE;
    final lOther$titleLTE = other.titleLTE;
    if (_$data.containsKey('titleLTE') !=
        other._$data.containsKey('titleLTE')) {
      return false;
    }
    if (l$titleLTE != lOther$titleLTE) {
      return false;
    }
    final l$titleContains = titleContains;
    final lOther$titleContains = other.titleContains;
    if (_$data.containsKey('titleContains') !=
        other._$data.containsKey('titleContains')) {
      return false;
    }
    if (l$titleContains != lOther$titleContains) {
      return false;
    }
    final l$titleHasPrefix = titleHasPrefix;
    final lOther$titleHasPrefix = other.titleHasPrefix;
    if (_$data.containsKey('titleHasPrefix') !=
        other._$data.containsKey('titleHasPrefix')) {
      return false;
    }
    if (l$titleHasPrefix != lOther$titleHasPrefix) {
      return false;
    }
    final l$titleHasSuffix = titleHasSuffix;
    final lOther$titleHasSuffix = other.titleHasSuffix;
    if (_$data.containsKey('titleHasSuffix') !=
        other._$data.containsKey('titleHasSuffix')) {
      return false;
    }
    if (l$titleHasSuffix != lOther$titleHasSuffix) {
      return false;
    }
    final l$titleEqualFold = titleEqualFold;
    final lOther$titleEqualFold = other.titleEqualFold;
    if (_$data.containsKey('titleEqualFold') !=
        other._$data.containsKey('titleEqualFold')) {
      return false;
    }
    if (l$titleEqualFold != lOther$titleEqualFold) {
      return false;
    }
    final l$titleContainsFold = titleContainsFold;
    final lOther$titleContainsFold = other.titleContainsFold;
    if (_$data.containsKey('titleContainsFold') !=
        other._$data.containsKey('titleContainsFold')) {
      return false;
    }
    if (l$titleContainsFold != lOther$titleContainsFold) {
      return false;
    }
    final l$subtitle = subtitle;
    final lOther$subtitle = other.subtitle;
    if (_$data.containsKey('subtitle') !=
        other._$data.containsKey('subtitle')) {
      return false;
    }
    if (l$subtitle != lOther$subtitle) {
      return false;
    }
    final l$subtitleNEQ = subtitleNEQ;
    final lOther$subtitleNEQ = other.subtitleNEQ;
    if (_$data.containsKey('subtitleNEQ') !=
        other._$data.containsKey('subtitleNEQ')) {
      return false;
    }
    if (l$subtitleNEQ != lOther$subtitleNEQ) {
      return false;
    }
    final l$subtitleIn = subtitleIn;
    final lOther$subtitleIn = other.subtitleIn;
    if (_$data.containsKey('subtitleIn') !=
        other._$data.containsKey('subtitleIn')) {
      return false;
    }
    if (l$subtitleIn != null && lOther$subtitleIn != null) {
      if (l$subtitleIn.length != lOther$subtitleIn.length) {
        return false;
      }
      for (int i = 0; i < l$subtitleIn.length; i++) {
        final l$subtitleIn$entry = l$subtitleIn[i];
        final lOther$subtitleIn$entry = lOther$subtitleIn[i];
        if (l$subtitleIn$entry != lOther$subtitleIn$entry) {
          return false;
        }
      }
    } else if (l$subtitleIn != lOther$subtitleIn) {
      return false;
    }
    final l$subtitleNotIn = subtitleNotIn;
    final lOther$subtitleNotIn = other.subtitleNotIn;
    if (_$data.containsKey('subtitleNotIn') !=
        other._$data.containsKey('subtitleNotIn')) {
      return false;
    }
    if (l$subtitleNotIn != null && lOther$subtitleNotIn != null) {
      if (l$subtitleNotIn.length != lOther$subtitleNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$subtitleNotIn.length; i++) {
        final l$subtitleNotIn$entry = l$subtitleNotIn[i];
        final lOther$subtitleNotIn$entry = lOther$subtitleNotIn[i];
        if (l$subtitleNotIn$entry != lOther$subtitleNotIn$entry) {
          return false;
        }
      }
    } else if (l$subtitleNotIn != lOther$subtitleNotIn) {
      return false;
    }
    final l$subtitleGT = subtitleGT;
    final lOther$subtitleGT = other.subtitleGT;
    if (_$data.containsKey('subtitleGT') !=
        other._$data.containsKey('subtitleGT')) {
      return false;
    }
    if (l$subtitleGT != lOther$subtitleGT) {
      return false;
    }
    final l$subtitleGTE = subtitleGTE;
    final lOther$subtitleGTE = other.subtitleGTE;
    if (_$data.containsKey('subtitleGTE') !=
        other._$data.containsKey('subtitleGTE')) {
      return false;
    }
    if (l$subtitleGTE != lOther$subtitleGTE) {
      return false;
    }
    final l$subtitleLT = subtitleLT;
    final lOther$subtitleLT = other.subtitleLT;
    if (_$data.containsKey('subtitleLT') !=
        other._$data.containsKey('subtitleLT')) {
      return false;
    }
    if (l$subtitleLT != lOther$subtitleLT) {
      return false;
    }
    final l$subtitleLTE = subtitleLTE;
    final lOther$subtitleLTE = other.subtitleLTE;
    if (_$data.containsKey('subtitleLTE') !=
        other._$data.containsKey('subtitleLTE')) {
      return false;
    }
    if (l$subtitleLTE != lOther$subtitleLTE) {
      return false;
    }
    final l$subtitleContains = subtitleContains;
    final lOther$subtitleContains = other.subtitleContains;
    if (_$data.containsKey('subtitleContains') !=
        other._$data.containsKey('subtitleContains')) {
      return false;
    }
    if (l$subtitleContains != lOther$subtitleContains) {
      return false;
    }
    final l$subtitleHasPrefix = subtitleHasPrefix;
    final lOther$subtitleHasPrefix = other.subtitleHasPrefix;
    if (_$data.containsKey('subtitleHasPrefix') !=
        other._$data.containsKey('subtitleHasPrefix')) {
      return false;
    }
    if (l$subtitleHasPrefix != lOther$subtitleHasPrefix) {
      return false;
    }
    final l$subtitleHasSuffix = subtitleHasSuffix;
    final lOther$subtitleHasSuffix = other.subtitleHasSuffix;
    if (_$data.containsKey('subtitleHasSuffix') !=
        other._$data.containsKey('subtitleHasSuffix')) {
      return false;
    }
    if (l$subtitleHasSuffix != lOther$subtitleHasSuffix) {
      return false;
    }
    final l$subtitleEqualFold = subtitleEqualFold;
    final lOther$subtitleEqualFold = other.subtitleEqualFold;
    if (_$data.containsKey('subtitleEqualFold') !=
        other._$data.containsKey('subtitleEqualFold')) {
      return false;
    }
    if (l$subtitleEqualFold != lOther$subtitleEqualFold) {
      return false;
    }
    final l$subtitleContainsFold = subtitleContainsFold;
    final lOther$subtitleContainsFold = other.subtitleContainsFold;
    if (_$data.containsKey('subtitleContainsFold') !=
        other._$data.containsKey('subtitleContainsFold')) {
      return false;
    }
    if (l$subtitleContainsFold != lOther$subtitleContainsFold) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$descriptionNEQ = descriptionNEQ;
    final lOther$descriptionNEQ = other.descriptionNEQ;
    if (_$data.containsKey('descriptionNEQ') !=
        other._$data.containsKey('descriptionNEQ')) {
      return false;
    }
    if (l$descriptionNEQ != lOther$descriptionNEQ) {
      return false;
    }
    final l$descriptionIn = descriptionIn;
    final lOther$descriptionIn = other.descriptionIn;
    if (_$data.containsKey('descriptionIn') !=
        other._$data.containsKey('descriptionIn')) {
      return false;
    }
    if (l$descriptionIn != null && lOther$descriptionIn != null) {
      if (l$descriptionIn.length != lOther$descriptionIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionIn.length; i++) {
        final l$descriptionIn$entry = l$descriptionIn[i];
        final lOther$descriptionIn$entry = lOther$descriptionIn[i];
        if (l$descriptionIn$entry != lOther$descriptionIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionIn != lOther$descriptionIn) {
      return false;
    }
    final l$descriptionNotIn = descriptionNotIn;
    final lOther$descriptionNotIn = other.descriptionNotIn;
    if (_$data.containsKey('descriptionNotIn') !=
        other._$data.containsKey('descriptionNotIn')) {
      return false;
    }
    if (l$descriptionNotIn != null && lOther$descriptionNotIn != null) {
      if (l$descriptionNotIn.length != lOther$descriptionNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionNotIn.length; i++) {
        final l$descriptionNotIn$entry = l$descriptionNotIn[i];
        final lOther$descriptionNotIn$entry = lOther$descriptionNotIn[i];
        if (l$descriptionNotIn$entry != lOther$descriptionNotIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionNotIn != lOther$descriptionNotIn) {
      return false;
    }
    final l$descriptionGT = descriptionGT;
    final lOther$descriptionGT = other.descriptionGT;
    if (_$data.containsKey('descriptionGT') !=
        other._$data.containsKey('descriptionGT')) {
      return false;
    }
    if (l$descriptionGT != lOther$descriptionGT) {
      return false;
    }
    final l$descriptionGTE = descriptionGTE;
    final lOther$descriptionGTE = other.descriptionGTE;
    if (_$data.containsKey('descriptionGTE') !=
        other._$data.containsKey('descriptionGTE')) {
      return false;
    }
    if (l$descriptionGTE != lOther$descriptionGTE) {
      return false;
    }
    final l$descriptionLT = descriptionLT;
    final lOther$descriptionLT = other.descriptionLT;
    if (_$data.containsKey('descriptionLT') !=
        other._$data.containsKey('descriptionLT')) {
      return false;
    }
    if (l$descriptionLT != lOther$descriptionLT) {
      return false;
    }
    final l$descriptionLTE = descriptionLTE;
    final lOther$descriptionLTE = other.descriptionLTE;
    if (_$data.containsKey('descriptionLTE') !=
        other._$data.containsKey('descriptionLTE')) {
      return false;
    }
    if (l$descriptionLTE != lOther$descriptionLTE) {
      return false;
    }
    final l$descriptionContains = descriptionContains;
    final lOther$descriptionContains = other.descriptionContains;
    if (_$data.containsKey('descriptionContains') !=
        other._$data.containsKey('descriptionContains')) {
      return false;
    }
    if (l$descriptionContains != lOther$descriptionContains) {
      return false;
    }
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final lOther$descriptionHasPrefix = other.descriptionHasPrefix;
    if (_$data.containsKey('descriptionHasPrefix') !=
        other._$data.containsKey('descriptionHasPrefix')) {
      return false;
    }
    if (l$descriptionHasPrefix != lOther$descriptionHasPrefix) {
      return false;
    }
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final lOther$descriptionHasSuffix = other.descriptionHasSuffix;
    if (_$data.containsKey('descriptionHasSuffix') !=
        other._$data.containsKey('descriptionHasSuffix')) {
      return false;
    }
    if (l$descriptionHasSuffix != lOther$descriptionHasSuffix) {
      return false;
    }
    final l$descriptionEqualFold = descriptionEqualFold;
    final lOther$descriptionEqualFold = other.descriptionEqualFold;
    if (_$data.containsKey('descriptionEqualFold') !=
        other._$data.containsKey('descriptionEqualFold')) {
      return false;
    }
    if (l$descriptionEqualFold != lOther$descriptionEqualFold) {
      return false;
    }
    final l$descriptionContainsFold = descriptionContainsFold;
    final lOther$descriptionContainsFold = other.descriptionContainsFold;
    if (_$data.containsKey('descriptionContainsFold') !=
        other._$data.containsKey('descriptionContainsFold')) {
      return false;
    }
    if (l$descriptionContainsFold != lOther$descriptionContainsFold) {
      return false;
    }
    final l$duration = duration;
    final lOther$duration = other.duration;
    if (_$data.containsKey('duration') !=
        other._$data.containsKey('duration')) {
      return false;
    }
    if (l$duration != lOther$duration) {
      return false;
    }
    final l$durationNEQ = durationNEQ;
    final lOther$durationNEQ = other.durationNEQ;
    if (_$data.containsKey('durationNEQ') !=
        other._$data.containsKey('durationNEQ')) {
      return false;
    }
    if (l$durationNEQ != lOther$durationNEQ) {
      return false;
    }
    final l$durationIn = durationIn;
    final lOther$durationIn = other.durationIn;
    if (_$data.containsKey('durationIn') !=
        other._$data.containsKey('durationIn')) {
      return false;
    }
    if (l$durationIn != null && lOther$durationIn != null) {
      if (l$durationIn.length != lOther$durationIn.length) {
        return false;
      }
      for (int i = 0; i < l$durationIn.length; i++) {
        final l$durationIn$entry = l$durationIn[i];
        final lOther$durationIn$entry = lOther$durationIn[i];
        if (l$durationIn$entry != lOther$durationIn$entry) {
          return false;
        }
      }
    } else if (l$durationIn != lOther$durationIn) {
      return false;
    }
    final l$durationNotIn = durationNotIn;
    final lOther$durationNotIn = other.durationNotIn;
    if (_$data.containsKey('durationNotIn') !=
        other._$data.containsKey('durationNotIn')) {
      return false;
    }
    if (l$durationNotIn != null && lOther$durationNotIn != null) {
      if (l$durationNotIn.length != lOther$durationNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$durationNotIn.length; i++) {
        final l$durationNotIn$entry = l$durationNotIn[i];
        final lOther$durationNotIn$entry = lOther$durationNotIn[i];
        if (l$durationNotIn$entry != lOther$durationNotIn$entry) {
          return false;
        }
      }
    } else if (l$durationNotIn != lOther$durationNotIn) {
      return false;
    }
    final l$durationGT = durationGT;
    final lOther$durationGT = other.durationGT;
    if (_$data.containsKey('durationGT') !=
        other._$data.containsKey('durationGT')) {
      return false;
    }
    if (l$durationGT != lOther$durationGT) {
      return false;
    }
    final l$durationGTE = durationGTE;
    final lOther$durationGTE = other.durationGTE;
    if (_$data.containsKey('durationGTE') !=
        other._$data.containsKey('durationGTE')) {
      return false;
    }
    if (l$durationGTE != lOther$durationGTE) {
      return false;
    }
    final l$durationLT = durationLT;
    final lOther$durationLT = other.durationLT;
    if (_$data.containsKey('durationLT') !=
        other._$data.containsKey('durationLT')) {
      return false;
    }
    if (l$durationLT != lOther$durationLT) {
      return false;
    }
    final l$durationLTE = durationLTE;
    final lOther$durationLTE = other.durationLTE;
    if (_$data.containsKey('durationLTE') !=
        other._$data.containsKey('durationLTE')) {
      return false;
    }
    if (l$durationLTE != lOther$durationLTE) {
      return false;
    }
    final l$streamurl = streamurl;
    final lOther$streamurl = other.streamurl;
    if (_$data.containsKey('streamurl') !=
        other._$data.containsKey('streamurl')) {
      return false;
    }
    if (l$streamurl != lOther$streamurl) {
      return false;
    }
    final l$streamurlNEQ = streamurlNEQ;
    final lOther$streamurlNEQ = other.streamurlNEQ;
    if (_$data.containsKey('streamurlNEQ') !=
        other._$data.containsKey('streamurlNEQ')) {
      return false;
    }
    if (l$streamurlNEQ != lOther$streamurlNEQ) {
      return false;
    }
    final l$streamurlIn = streamurlIn;
    final lOther$streamurlIn = other.streamurlIn;
    if (_$data.containsKey('streamurlIn') !=
        other._$data.containsKey('streamurlIn')) {
      return false;
    }
    if (l$streamurlIn != null && lOther$streamurlIn != null) {
      if (l$streamurlIn.length != lOther$streamurlIn.length) {
        return false;
      }
      for (int i = 0; i < l$streamurlIn.length; i++) {
        final l$streamurlIn$entry = l$streamurlIn[i];
        final lOther$streamurlIn$entry = lOther$streamurlIn[i];
        if (l$streamurlIn$entry != lOther$streamurlIn$entry) {
          return false;
        }
      }
    } else if (l$streamurlIn != lOther$streamurlIn) {
      return false;
    }
    final l$streamurlNotIn = streamurlNotIn;
    final lOther$streamurlNotIn = other.streamurlNotIn;
    if (_$data.containsKey('streamurlNotIn') !=
        other._$data.containsKey('streamurlNotIn')) {
      return false;
    }
    if (l$streamurlNotIn != null && lOther$streamurlNotIn != null) {
      if (l$streamurlNotIn.length != lOther$streamurlNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$streamurlNotIn.length; i++) {
        final l$streamurlNotIn$entry = l$streamurlNotIn[i];
        final lOther$streamurlNotIn$entry = lOther$streamurlNotIn[i];
        if (l$streamurlNotIn$entry != lOther$streamurlNotIn$entry) {
          return false;
        }
      }
    } else if (l$streamurlNotIn != lOther$streamurlNotIn) {
      return false;
    }
    final l$streamurlGT = streamurlGT;
    final lOther$streamurlGT = other.streamurlGT;
    if (_$data.containsKey('streamurlGT') !=
        other._$data.containsKey('streamurlGT')) {
      return false;
    }
    if (l$streamurlGT != lOther$streamurlGT) {
      return false;
    }
    final l$streamurlGTE = streamurlGTE;
    final lOther$streamurlGTE = other.streamurlGTE;
    if (_$data.containsKey('streamurlGTE') !=
        other._$data.containsKey('streamurlGTE')) {
      return false;
    }
    if (l$streamurlGTE != lOther$streamurlGTE) {
      return false;
    }
    final l$streamurlLT = streamurlLT;
    final lOther$streamurlLT = other.streamurlLT;
    if (_$data.containsKey('streamurlLT') !=
        other._$data.containsKey('streamurlLT')) {
      return false;
    }
    if (l$streamurlLT != lOther$streamurlLT) {
      return false;
    }
    final l$streamurlLTE = streamurlLTE;
    final lOther$streamurlLTE = other.streamurlLTE;
    if (_$data.containsKey('streamurlLTE') !=
        other._$data.containsKey('streamurlLTE')) {
      return false;
    }
    if (l$streamurlLTE != lOther$streamurlLTE) {
      return false;
    }
    final l$streamurlContains = streamurlContains;
    final lOther$streamurlContains = other.streamurlContains;
    if (_$data.containsKey('streamurlContains') !=
        other._$data.containsKey('streamurlContains')) {
      return false;
    }
    if (l$streamurlContains != lOther$streamurlContains) {
      return false;
    }
    final l$streamurlHasPrefix = streamurlHasPrefix;
    final lOther$streamurlHasPrefix = other.streamurlHasPrefix;
    if (_$data.containsKey('streamurlHasPrefix') !=
        other._$data.containsKey('streamurlHasPrefix')) {
      return false;
    }
    if (l$streamurlHasPrefix != lOther$streamurlHasPrefix) {
      return false;
    }
    final l$streamurlHasSuffix = streamurlHasSuffix;
    final lOther$streamurlHasSuffix = other.streamurlHasSuffix;
    if (_$data.containsKey('streamurlHasSuffix') !=
        other._$data.containsKey('streamurlHasSuffix')) {
      return false;
    }
    if (l$streamurlHasSuffix != lOther$streamurlHasSuffix) {
      return false;
    }
    final l$streamurlEqualFold = streamurlEqualFold;
    final lOther$streamurlEqualFold = other.streamurlEqualFold;
    if (_$data.containsKey('streamurlEqualFold') !=
        other._$data.containsKey('streamurlEqualFold')) {
      return false;
    }
    if (l$streamurlEqualFold != lOther$streamurlEqualFold) {
      return false;
    }
    final l$streamurlContainsFold = streamurlContainsFold;
    final lOther$streamurlContainsFold = other.streamurlContainsFold;
    if (_$data.containsKey('streamurlContainsFold') !=
        other._$data.containsKey('streamurlContainsFold')) {
      return false;
    }
    if (l$streamurlContainsFold != lOther$streamurlContainsFold) {
      return false;
    }
    final l$downloadurl = downloadurl;
    final lOther$downloadurl = other.downloadurl;
    if (_$data.containsKey('downloadurl') !=
        other._$data.containsKey('downloadurl')) {
      return false;
    }
    if (l$downloadurl != lOther$downloadurl) {
      return false;
    }
    final l$downloadurlNEQ = downloadurlNEQ;
    final lOther$downloadurlNEQ = other.downloadurlNEQ;
    if (_$data.containsKey('downloadurlNEQ') !=
        other._$data.containsKey('downloadurlNEQ')) {
      return false;
    }
    if (l$downloadurlNEQ != lOther$downloadurlNEQ) {
      return false;
    }
    final l$downloadurlIn = downloadurlIn;
    final lOther$downloadurlIn = other.downloadurlIn;
    if (_$data.containsKey('downloadurlIn') !=
        other._$data.containsKey('downloadurlIn')) {
      return false;
    }
    if (l$downloadurlIn != null && lOther$downloadurlIn != null) {
      if (l$downloadurlIn.length != lOther$downloadurlIn.length) {
        return false;
      }
      for (int i = 0; i < l$downloadurlIn.length; i++) {
        final l$downloadurlIn$entry = l$downloadurlIn[i];
        final lOther$downloadurlIn$entry = lOther$downloadurlIn[i];
        if (l$downloadurlIn$entry != lOther$downloadurlIn$entry) {
          return false;
        }
      }
    } else if (l$downloadurlIn != lOther$downloadurlIn) {
      return false;
    }
    final l$downloadurlNotIn = downloadurlNotIn;
    final lOther$downloadurlNotIn = other.downloadurlNotIn;
    if (_$data.containsKey('downloadurlNotIn') !=
        other._$data.containsKey('downloadurlNotIn')) {
      return false;
    }
    if (l$downloadurlNotIn != null && lOther$downloadurlNotIn != null) {
      if (l$downloadurlNotIn.length != lOther$downloadurlNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$downloadurlNotIn.length; i++) {
        final l$downloadurlNotIn$entry = l$downloadurlNotIn[i];
        final lOther$downloadurlNotIn$entry = lOther$downloadurlNotIn[i];
        if (l$downloadurlNotIn$entry != lOther$downloadurlNotIn$entry) {
          return false;
        }
      }
    } else if (l$downloadurlNotIn != lOther$downloadurlNotIn) {
      return false;
    }
    final l$downloadurlGT = downloadurlGT;
    final lOther$downloadurlGT = other.downloadurlGT;
    if (_$data.containsKey('downloadurlGT') !=
        other._$data.containsKey('downloadurlGT')) {
      return false;
    }
    if (l$downloadurlGT != lOther$downloadurlGT) {
      return false;
    }
    final l$downloadurlGTE = downloadurlGTE;
    final lOther$downloadurlGTE = other.downloadurlGTE;
    if (_$data.containsKey('downloadurlGTE') !=
        other._$data.containsKey('downloadurlGTE')) {
      return false;
    }
    if (l$downloadurlGTE != lOther$downloadurlGTE) {
      return false;
    }
    final l$downloadurlLT = downloadurlLT;
    final lOther$downloadurlLT = other.downloadurlLT;
    if (_$data.containsKey('downloadurlLT') !=
        other._$data.containsKey('downloadurlLT')) {
      return false;
    }
    if (l$downloadurlLT != lOther$downloadurlLT) {
      return false;
    }
    final l$downloadurlLTE = downloadurlLTE;
    final lOther$downloadurlLTE = other.downloadurlLTE;
    if (_$data.containsKey('downloadurlLTE') !=
        other._$data.containsKey('downloadurlLTE')) {
      return false;
    }
    if (l$downloadurlLTE != lOther$downloadurlLTE) {
      return false;
    }
    final l$downloadurlContains = downloadurlContains;
    final lOther$downloadurlContains = other.downloadurlContains;
    if (_$data.containsKey('downloadurlContains') !=
        other._$data.containsKey('downloadurlContains')) {
      return false;
    }
    if (l$downloadurlContains != lOther$downloadurlContains) {
      return false;
    }
    final l$downloadurlHasPrefix = downloadurlHasPrefix;
    final lOther$downloadurlHasPrefix = other.downloadurlHasPrefix;
    if (_$data.containsKey('downloadurlHasPrefix') !=
        other._$data.containsKey('downloadurlHasPrefix')) {
      return false;
    }
    if (l$downloadurlHasPrefix != lOther$downloadurlHasPrefix) {
      return false;
    }
    final l$downloadurlHasSuffix = downloadurlHasSuffix;
    final lOther$downloadurlHasSuffix = other.downloadurlHasSuffix;
    if (_$data.containsKey('downloadurlHasSuffix') !=
        other._$data.containsKey('downloadurlHasSuffix')) {
      return false;
    }
    if (l$downloadurlHasSuffix != lOther$downloadurlHasSuffix) {
      return false;
    }
    final l$downloadurlEqualFold = downloadurlEqualFold;
    final lOther$downloadurlEqualFold = other.downloadurlEqualFold;
    if (_$data.containsKey('downloadurlEqualFold') !=
        other._$data.containsKey('downloadurlEqualFold')) {
      return false;
    }
    if (l$downloadurlEqualFold != lOther$downloadurlEqualFold) {
      return false;
    }
    final l$downloadurlContainsFold = downloadurlContainsFold;
    final lOther$downloadurlContainsFold = other.downloadurlContainsFold;
    if (_$data.containsKey('downloadurlContainsFold') !=
        other._$data.containsKey('downloadurlContainsFold')) {
      return false;
    }
    if (l$downloadurlContainsFold != lOther$downloadurlContainsFold) {
      return false;
    }
    final l$source = source;
    final lOther$source = other.source;
    if (_$data.containsKey('source') != other._$data.containsKey('source')) {
      return false;
    }
    if (l$source != lOther$source) {
      return false;
    }
    final l$sourceNEQ = sourceNEQ;
    final lOther$sourceNEQ = other.sourceNEQ;
    if (_$data.containsKey('sourceNEQ') !=
        other._$data.containsKey('sourceNEQ')) {
      return false;
    }
    if (l$sourceNEQ != lOther$sourceNEQ) {
      return false;
    }
    final l$sourceIn = sourceIn;
    final lOther$sourceIn = other.sourceIn;
    if (_$data.containsKey('sourceIn') !=
        other._$data.containsKey('sourceIn')) {
      return false;
    }
    if (l$sourceIn != null && lOther$sourceIn != null) {
      if (l$sourceIn.length != lOther$sourceIn.length) {
        return false;
      }
      for (int i = 0; i < l$sourceIn.length; i++) {
        final l$sourceIn$entry = l$sourceIn[i];
        final lOther$sourceIn$entry = lOther$sourceIn[i];
        if (l$sourceIn$entry != lOther$sourceIn$entry) {
          return false;
        }
      }
    } else if (l$sourceIn != lOther$sourceIn) {
      return false;
    }
    final l$sourceNotIn = sourceNotIn;
    final lOther$sourceNotIn = other.sourceNotIn;
    if (_$data.containsKey('sourceNotIn') !=
        other._$data.containsKey('sourceNotIn')) {
      return false;
    }
    if (l$sourceNotIn != null && lOther$sourceNotIn != null) {
      if (l$sourceNotIn.length != lOther$sourceNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$sourceNotIn.length; i++) {
        final l$sourceNotIn$entry = l$sourceNotIn[i];
        final lOther$sourceNotIn$entry = lOther$sourceNotIn[i];
        if (l$sourceNotIn$entry != lOther$sourceNotIn$entry) {
          return false;
        }
      }
    } else if (l$sourceNotIn != lOther$sourceNotIn) {
      return false;
    }
    final l$sourceGT = sourceGT;
    final lOther$sourceGT = other.sourceGT;
    if (_$data.containsKey('sourceGT') !=
        other._$data.containsKey('sourceGT')) {
      return false;
    }
    if (l$sourceGT != lOther$sourceGT) {
      return false;
    }
    final l$sourceGTE = sourceGTE;
    final lOther$sourceGTE = other.sourceGTE;
    if (_$data.containsKey('sourceGTE') !=
        other._$data.containsKey('sourceGTE')) {
      return false;
    }
    if (l$sourceGTE != lOther$sourceGTE) {
      return false;
    }
    final l$sourceLT = sourceLT;
    final lOther$sourceLT = other.sourceLT;
    if (_$data.containsKey('sourceLT') !=
        other._$data.containsKey('sourceLT')) {
      return false;
    }
    if (l$sourceLT != lOther$sourceLT) {
      return false;
    }
    final l$sourceLTE = sourceLTE;
    final lOther$sourceLTE = other.sourceLTE;
    if (_$data.containsKey('sourceLTE') !=
        other._$data.containsKey('sourceLTE')) {
      return false;
    }
    if (l$sourceLTE != lOther$sourceLTE) {
      return false;
    }
    final l$sourceContains = sourceContains;
    final lOther$sourceContains = other.sourceContains;
    if (_$data.containsKey('sourceContains') !=
        other._$data.containsKey('sourceContains')) {
      return false;
    }
    if (l$sourceContains != lOther$sourceContains) {
      return false;
    }
    final l$sourceHasPrefix = sourceHasPrefix;
    final lOther$sourceHasPrefix = other.sourceHasPrefix;
    if (_$data.containsKey('sourceHasPrefix') !=
        other._$data.containsKey('sourceHasPrefix')) {
      return false;
    }
    if (l$sourceHasPrefix != lOther$sourceHasPrefix) {
      return false;
    }
    final l$sourceHasSuffix = sourceHasSuffix;
    final lOther$sourceHasSuffix = other.sourceHasSuffix;
    if (_$data.containsKey('sourceHasSuffix') !=
        other._$data.containsKey('sourceHasSuffix')) {
      return false;
    }
    if (l$sourceHasSuffix != lOther$sourceHasSuffix) {
      return false;
    }
    final l$sourceEqualFold = sourceEqualFold;
    final lOther$sourceEqualFold = other.sourceEqualFold;
    if (_$data.containsKey('sourceEqualFold') !=
        other._$data.containsKey('sourceEqualFold')) {
      return false;
    }
    if (l$sourceEqualFold != lOther$sourceEqualFold) {
      return false;
    }
    final l$sourceContainsFold = sourceContainsFold;
    final lOther$sourceContainsFold = other.sourceContainsFold;
    if (_$data.containsKey('sourceContainsFold') !=
        other._$data.containsKey('sourceContainsFold')) {
      return false;
    }
    if (l$sourceContainsFold != lOther$sourceContainsFold) {
      return false;
    }
    final l$sourceurl = sourceurl;
    final lOther$sourceurl = other.sourceurl;
    if (_$data.containsKey('sourceurl') !=
        other._$data.containsKey('sourceurl')) {
      return false;
    }
    if (l$sourceurl != lOther$sourceurl) {
      return false;
    }
    final l$sourceurlNEQ = sourceurlNEQ;
    final lOther$sourceurlNEQ = other.sourceurlNEQ;
    if (_$data.containsKey('sourceurlNEQ') !=
        other._$data.containsKey('sourceurlNEQ')) {
      return false;
    }
    if (l$sourceurlNEQ != lOther$sourceurlNEQ) {
      return false;
    }
    final l$sourceurlIn = sourceurlIn;
    final lOther$sourceurlIn = other.sourceurlIn;
    if (_$data.containsKey('sourceurlIn') !=
        other._$data.containsKey('sourceurlIn')) {
      return false;
    }
    if (l$sourceurlIn != null && lOther$sourceurlIn != null) {
      if (l$sourceurlIn.length != lOther$sourceurlIn.length) {
        return false;
      }
      for (int i = 0; i < l$sourceurlIn.length; i++) {
        final l$sourceurlIn$entry = l$sourceurlIn[i];
        final lOther$sourceurlIn$entry = lOther$sourceurlIn[i];
        if (l$sourceurlIn$entry != lOther$sourceurlIn$entry) {
          return false;
        }
      }
    } else if (l$sourceurlIn != lOther$sourceurlIn) {
      return false;
    }
    final l$sourceurlNotIn = sourceurlNotIn;
    final lOther$sourceurlNotIn = other.sourceurlNotIn;
    if (_$data.containsKey('sourceurlNotIn') !=
        other._$data.containsKey('sourceurlNotIn')) {
      return false;
    }
    if (l$sourceurlNotIn != null && lOther$sourceurlNotIn != null) {
      if (l$sourceurlNotIn.length != lOther$sourceurlNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$sourceurlNotIn.length; i++) {
        final l$sourceurlNotIn$entry = l$sourceurlNotIn[i];
        final lOther$sourceurlNotIn$entry = lOther$sourceurlNotIn[i];
        if (l$sourceurlNotIn$entry != lOther$sourceurlNotIn$entry) {
          return false;
        }
      }
    } else if (l$sourceurlNotIn != lOther$sourceurlNotIn) {
      return false;
    }
    final l$sourceurlGT = sourceurlGT;
    final lOther$sourceurlGT = other.sourceurlGT;
    if (_$data.containsKey('sourceurlGT') !=
        other._$data.containsKey('sourceurlGT')) {
      return false;
    }
    if (l$sourceurlGT != lOther$sourceurlGT) {
      return false;
    }
    final l$sourceurlGTE = sourceurlGTE;
    final lOther$sourceurlGTE = other.sourceurlGTE;
    if (_$data.containsKey('sourceurlGTE') !=
        other._$data.containsKey('sourceurlGTE')) {
      return false;
    }
    if (l$sourceurlGTE != lOther$sourceurlGTE) {
      return false;
    }
    final l$sourceurlLT = sourceurlLT;
    final lOther$sourceurlLT = other.sourceurlLT;
    if (_$data.containsKey('sourceurlLT') !=
        other._$data.containsKey('sourceurlLT')) {
      return false;
    }
    if (l$sourceurlLT != lOther$sourceurlLT) {
      return false;
    }
    final l$sourceurlLTE = sourceurlLTE;
    final lOther$sourceurlLTE = other.sourceurlLTE;
    if (_$data.containsKey('sourceurlLTE') !=
        other._$data.containsKey('sourceurlLTE')) {
      return false;
    }
    if (l$sourceurlLTE != lOther$sourceurlLTE) {
      return false;
    }
    final l$sourceurlContains = sourceurlContains;
    final lOther$sourceurlContains = other.sourceurlContains;
    if (_$data.containsKey('sourceurlContains') !=
        other._$data.containsKey('sourceurlContains')) {
      return false;
    }
    if (l$sourceurlContains != lOther$sourceurlContains) {
      return false;
    }
    final l$sourceurlHasPrefix = sourceurlHasPrefix;
    final lOther$sourceurlHasPrefix = other.sourceurlHasPrefix;
    if (_$data.containsKey('sourceurlHasPrefix') !=
        other._$data.containsKey('sourceurlHasPrefix')) {
      return false;
    }
    if (l$sourceurlHasPrefix != lOther$sourceurlHasPrefix) {
      return false;
    }
    final l$sourceurlHasSuffix = sourceurlHasSuffix;
    final lOther$sourceurlHasSuffix = other.sourceurlHasSuffix;
    if (_$data.containsKey('sourceurlHasSuffix') !=
        other._$data.containsKey('sourceurlHasSuffix')) {
      return false;
    }
    if (l$sourceurlHasSuffix != lOther$sourceurlHasSuffix) {
      return false;
    }
    final l$sourceurlEqualFold = sourceurlEqualFold;
    final lOther$sourceurlEqualFold = other.sourceurlEqualFold;
    if (_$data.containsKey('sourceurlEqualFold') !=
        other._$data.containsKey('sourceurlEqualFold')) {
      return false;
    }
    if (l$sourceurlEqualFold != lOther$sourceurlEqualFold) {
      return false;
    }
    final l$sourceurlContainsFold = sourceurlContainsFold;
    final lOther$sourceurlContainsFold = other.sourceurlContainsFold;
    if (_$data.containsKey('sourceurlContainsFold') !=
        other._$data.containsKey('sourceurlContainsFold')) {
      return false;
    }
    if (l$sourceurlContainsFold != lOther$sourceurlContainsFold) {
      return false;
    }
    final l$licence = licence;
    final lOther$licence = other.licence;
    if (_$data.containsKey('licence') != other._$data.containsKey('licence')) {
      return false;
    }
    if (l$licence != lOther$licence) {
      return false;
    }
    final l$licenceNEQ = licenceNEQ;
    final lOther$licenceNEQ = other.licenceNEQ;
    if (_$data.containsKey('licenceNEQ') !=
        other._$data.containsKey('licenceNEQ')) {
      return false;
    }
    if (l$licenceNEQ != lOther$licenceNEQ) {
      return false;
    }
    final l$licenceIn = licenceIn;
    final lOther$licenceIn = other.licenceIn;
    if (_$data.containsKey('licenceIn') !=
        other._$data.containsKey('licenceIn')) {
      return false;
    }
    if (l$licenceIn != null && lOther$licenceIn != null) {
      if (l$licenceIn.length != lOther$licenceIn.length) {
        return false;
      }
      for (int i = 0; i < l$licenceIn.length; i++) {
        final l$licenceIn$entry = l$licenceIn[i];
        final lOther$licenceIn$entry = lOther$licenceIn[i];
        if (l$licenceIn$entry != lOther$licenceIn$entry) {
          return false;
        }
      }
    } else if (l$licenceIn != lOther$licenceIn) {
      return false;
    }
    final l$licenceNotIn = licenceNotIn;
    final lOther$licenceNotIn = other.licenceNotIn;
    if (_$data.containsKey('licenceNotIn') !=
        other._$data.containsKey('licenceNotIn')) {
      return false;
    }
    if (l$licenceNotIn != null && lOther$licenceNotIn != null) {
      if (l$licenceNotIn.length != lOther$licenceNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$licenceNotIn.length; i++) {
        final l$licenceNotIn$entry = l$licenceNotIn[i];
        final lOther$licenceNotIn$entry = lOther$licenceNotIn[i];
        if (l$licenceNotIn$entry != lOther$licenceNotIn$entry) {
          return false;
        }
      }
    } else if (l$licenceNotIn != lOther$licenceNotIn) {
      return false;
    }
    final l$licenceGT = licenceGT;
    final lOther$licenceGT = other.licenceGT;
    if (_$data.containsKey('licenceGT') !=
        other._$data.containsKey('licenceGT')) {
      return false;
    }
    if (l$licenceGT != lOther$licenceGT) {
      return false;
    }
    final l$licenceGTE = licenceGTE;
    final lOther$licenceGTE = other.licenceGTE;
    if (_$data.containsKey('licenceGTE') !=
        other._$data.containsKey('licenceGTE')) {
      return false;
    }
    if (l$licenceGTE != lOther$licenceGTE) {
      return false;
    }
    final l$licenceLT = licenceLT;
    final lOther$licenceLT = other.licenceLT;
    if (_$data.containsKey('licenceLT') !=
        other._$data.containsKey('licenceLT')) {
      return false;
    }
    if (l$licenceLT != lOther$licenceLT) {
      return false;
    }
    final l$licenceLTE = licenceLTE;
    final lOther$licenceLTE = other.licenceLTE;
    if (_$data.containsKey('licenceLTE') !=
        other._$data.containsKey('licenceLTE')) {
      return false;
    }
    if (l$licenceLTE != lOther$licenceLTE) {
      return false;
    }
    final l$licenceContains = licenceContains;
    final lOther$licenceContains = other.licenceContains;
    if (_$data.containsKey('licenceContains') !=
        other._$data.containsKey('licenceContains')) {
      return false;
    }
    if (l$licenceContains != lOther$licenceContains) {
      return false;
    }
    final l$licenceHasPrefix = licenceHasPrefix;
    final lOther$licenceHasPrefix = other.licenceHasPrefix;
    if (_$data.containsKey('licenceHasPrefix') !=
        other._$data.containsKey('licenceHasPrefix')) {
      return false;
    }
    if (l$licenceHasPrefix != lOther$licenceHasPrefix) {
      return false;
    }
    final l$licenceHasSuffix = licenceHasSuffix;
    final lOther$licenceHasSuffix = other.licenceHasSuffix;
    if (_$data.containsKey('licenceHasSuffix') !=
        other._$data.containsKey('licenceHasSuffix')) {
      return false;
    }
    if (l$licenceHasSuffix != lOther$licenceHasSuffix) {
      return false;
    }
    final l$licenceEqualFold = licenceEqualFold;
    final lOther$licenceEqualFold = other.licenceEqualFold;
    if (_$data.containsKey('licenceEqualFold') !=
        other._$data.containsKey('licenceEqualFold')) {
      return false;
    }
    if (l$licenceEqualFold != lOther$licenceEqualFold) {
      return false;
    }
    final l$licenceContainsFold = licenceContainsFold;
    final lOther$licenceContainsFold = other.licenceContainsFold;
    if (_$data.containsKey('licenceContainsFold') !=
        other._$data.containsKey('licenceContainsFold')) {
      return false;
    }
    if (l$licenceContainsFold != lOther$licenceContainsFold) {
      return false;
    }
    final l$licenceurl = licenceurl;
    final lOther$licenceurl = other.licenceurl;
    if (_$data.containsKey('licenceurl') !=
        other._$data.containsKey('licenceurl')) {
      return false;
    }
    if (l$licenceurl != lOther$licenceurl) {
      return false;
    }
    final l$licenceurlNEQ = licenceurlNEQ;
    final lOther$licenceurlNEQ = other.licenceurlNEQ;
    if (_$data.containsKey('licenceurlNEQ') !=
        other._$data.containsKey('licenceurlNEQ')) {
      return false;
    }
    if (l$licenceurlNEQ != lOther$licenceurlNEQ) {
      return false;
    }
    final l$licenceurlIn = licenceurlIn;
    final lOther$licenceurlIn = other.licenceurlIn;
    if (_$data.containsKey('licenceurlIn') !=
        other._$data.containsKey('licenceurlIn')) {
      return false;
    }
    if (l$licenceurlIn != null && lOther$licenceurlIn != null) {
      if (l$licenceurlIn.length != lOther$licenceurlIn.length) {
        return false;
      }
      for (int i = 0; i < l$licenceurlIn.length; i++) {
        final l$licenceurlIn$entry = l$licenceurlIn[i];
        final lOther$licenceurlIn$entry = lOther$licenceurlIn[i];
        if (l$licenceurlIn$entry != lOther$licenceurlIn$entry) {
          return false;
        }
      }
    } else if (l$licenceurlIn != lOther$licenceurlIn) {
      return false;
    }
    final l$licenceurlNotIn = licenceurlNotIn;
    final lOther$licenceurlNotIn = other.licenceurlNotIn;
    if (_$data.containsKey('licenceurlNotIn') !=
        other._$data.containsKey('licenceurlNotIn')) {
      return false;
    }
    if (l$licenceurlNotIn != null && lOther$licenceurlNotIn != null) {
      if (l$licenceurlNotIn.length != lOther$licenceurlNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$licenceurlNotIn.length; i++) {
        final l$licenceurlNotIn$entry = l$licenceurlNotIn[i];
        final lOther$licenceurlNotIn$entry = lOther$licenceurlNotIn[i];
        if (l$licenceurlNotIn$entry != lOther$licenceurlNotIn$entry) {
          return false;
        }
      }
    } else if (l$licenceurlNotIn != lOther$licenceurlNotIn) {
      return false;
    }
    final l$licenceurlGT = licenceurlGT;
    final lOther$licenceurlGT = other.licenceurlGT;
    if (_$data.containsKey('licenceurlGT') !=
        other._$data.containsKey('licenceurlGT')) {
      return false;
    }
    if (l$licenceurlGT != lOther$licenceurlGT) {
      return false;
    }
    final l$licenceurlGTE = licenceurlGTE;
    final lOther$licenceurlGTE = other.licenceurlGTE;
    if (_$data.containsKey('licenceurlGTE') !=
        other._$data.containsKey('licenceurlGTE')) {
      return false;
    }
    if (l$licenceurlGTE != lOther$licenceurlGTE) {
      return false;
    }
    final l$licenceurlLT = licenceurlLT;
    final lOther$licenceurlLT = other.licenceurlLT;
    if (_$data.containsKey('licenceurlLT') !=
        other._$data.containsKey('licenceurlLT')) {
      return false;
    }
    if (l$licenceurlLT != lOther$licenceurlLT) {
      return false;
    }
    final l$licenceurlLTE = licenceurlLTE;
    final lOther$licenceurlLTE = other.licenceurlLTE;
    if (_$data.containsKey('licenceurlLTE') !=
        other._$data.containsKey('licenceurlLTE')) {
      return false;
    }
    if (l$licenceurlLTE != lOther$licenceurlLTE) {
      return false;
    }
    final l$licenceurlContains = licenceurlContains;
    final lOther$licenceurlContains = other.licenceurlContains;
    if (_$data.containsKey('licenceurlContains') !=
        other._$data.containsKey('licenceurlContains')) {
      return false;
    }
    if (l$licenceurlContains != lOther$licenceurlContains) {
      return false;
    }
    final l$licenceurlHasPrefix = licenceurlHasPrefix;
    final lOther$licenceurlHasPrefix = other.licenceurlHasPrefix;
    if (_$data.containsKey('licenceurlHasPrefix') !=
        other._$data.containsKey('licenceurlHasPrefix')) {
      return false;
    }
    if (l$licenceurlHasPrefix != lOther$licenceurlHasPrefix) {
      return false;
    }
    final l$licenceurlHasSuffix = licenceurlHasSuffix;
    final lOther$licenceurlHasSuffix = other.licenceurlHasSuffix;
    if (_$data.containsKey('licenceurlHasSuffix') !=
        other._$data.containsKey('licenceurlHasSuffix')) {
      return false;
    }
    if (l$licenceurlHasSuffix != lOther$licenceurlHasSuffix) {
      return false;
    }
    final l$licenceurlEqualFold = licenceurlEqualFold;
    final lOther$licenceurlEqualFold = other.licenceurlEqualFold;
    if (_$data.containsKey('licenceurlEqualFold') !=
        other._$data.containsKey('licenceurlEqualFold')) {
      return false;
    }
    if (l$licenceurlEqualFold != lOther$licenceurlEqualFold) {
      return false;
    }
    final l$licenceurlContainsFold = licenceurlContainsFold;
    final lOther$licenceurlContainsFold = other.licenceurlContainsFold;
    if (_$data.containsKey('licenceurlContainsFold') !=
        other._$data.containsKey('licenceurlContainsFold')) {
      return false;
    }
    if (l$licenceurlContainsFold != lOther$licenceurlContainsFold) {
      return false;
    }
    final l$ishidden = ishidden;
    final lOther$ishidden = other.ishidden;
    if (_$data.containsKey('ishidden') !=
        other._$data.containsKey('ishidden')) {
      return false;
    }
    if (l$ishidden != lOther$ishidden) {
      return false;
    }
    final l$ishiddenNEQ = ishiddenNEQ;
    final lOther$ishiddenNEQ = other.ishiddenNEQ;
    if (_$data.containsKey('ishiddenNEQ') !=
        other._$data.containsKey('ishiddenNEQ')) {
      return false;
    }
    if (l$ishiddenNEQ != lOther$ishiddenNEQ) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$orderNEQ = orderNEQ;
    final lOther$orderNEQ = other.orderNEQ;
    if (_$data.containsKey('orderNEQ') !=
        other._$data.containsKey('orderNEQ')) {
      return false;
    }
    if (l$orderNEQ != lOther$orderNEQ) {
      return false;
    }
    final l$orderIn = orderIn;
    final lOther$orderIn = other.orderIn;
    if (_$data.containsKey('orderIn') != other._$data.containsKey('orderIn')) {
      return false;
    }
    if (l$orderIn != null && lOther$orderIn != null) {
      if (l$orderIn.length != lOther$orderIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderIn.length; i++) {
        final l$orderIn$entry = l$orderIn[i];
        final lOther$orderIn$entry = lOther$orderIn[i];
        if (l$orderIn$entry != lOther$orderIn$entry) {
          return false;
        }
      }
    } else if (l$orderIn != lOther$orderIn) {
      return false;
    }
    final l$orderNotIn = orderNotIn;
    final lOther$orderNotIn = other.orderNotIn;
    if (_$data.containsKey('orderNotIn') !=
        other._$data.containsKey('orderNotIn')) {
      return false;
    }
    if (l$orderNotIn != null && lOther$orderNotIn != null) {
      if (l$orderNotIn.length != lOther$orderNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderNotIn.length; i++) {
        final l$orderNotIn$entry = l$orderNotIn[i];
        final lOther$orderNotIn$entry = lOther$orderNotIn[i];
        if (l$orderNotIn$entry != lOther$orderNotIn$entry) {
          return false;
        }
      }
    } else if (l$orderNotIn != lOther$orderNotIn) {
      return false;
    }
    final l$orderGT = orderGT;
    final lOther$orderGT = other.orderGT;
    if (_$data.containsKey('orderGT') != other._$data.containsKey('orderGT')) {
      return false;
    }
    if (l$orderGT != lOther$orderGT) {
      return false;
    }
    final l$orderGTE = orderGTE;
    final lOther$orderGTE = other.orderGTE;
    if (_$data.containsKey('orderGTE') !=
        other._$data.containsKey('orderGTE')) {
      return false;
    }
    if (l$orderGTE != lOther$orderGTE) {
      return false;
    }
    final l$orderLT = orderLT;
    final lOther$orderLT = other.orderLT;
    if (_$data.containsKey('orderLT') != other._$data.containsKey('orderLT')) {
      return false;
    }
    if (l$orderLT != lOther$orderLT) {
      return false;
    }
    final l$orderLTE = orderLTE;
    final lOther$orderLTE = other.orderLTE;
    if (_$data.containsKey('orderLTE') !=
        other._$data.containsKey('orderLTE')) {
      return false;
    }
    if (l$orderLTE != lOther$orderLTE) {
      return false;
    }
    final l$hasContent = hasContent;
    final lOther$hasContent = other.hasContent;
    if (_$data.containsKey('hasContent') !=
        other._$data.containsKey('hasContent')) {
      return false;
    }
    if (l$hasContent != lOther$hasContent) {
      return false;
    }
    final l$hasContentWith = hasContentWith;
    final lOther$hasContentWith = other.hasContentWith;
    if (_$data.containsKey('hasContentWith') !=
        other._$data.containsKey('hasContentWith')) {
      return false;
    }
    if (l$hasContentWith != null && lOther$hasContentWith != null) {
      if (l$hasContentWith.length != lOther$hasContentWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasContentWith.length; i++) {
        final l$hasContentWith$entry = l$hasContentWith[i];
        final lOther$hasContentWith$entry = lOther$hasContentWith[i];
        if (l$hasContentWith$entry != lOther$hasContentWith$entry) {
          return false;
        }
      }
    } else if (l$hasContentWith != lOther$hasContentWith) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$contentID = contentID;
    final l$contentIDNEQ = contentIDNEQ;
    final l$contentIDIn = contentIDIn;
    final l$contentIDNotIn = contentIDNotIn;
    final l$type = type;
    final l$typeNEQ = typeNEQ;
    final l$typeIn = typeIn;
    final l$typeNotIn = typeNotIn;
    final l$title = title;
    final l$titleNEQ = titleNEQ;
    final l$titleIn = titleIn;
    final l$titleNotIn = titleNotIn;
    final l$titleGT = titleGT;
    final l$titleGTE = titleGTE;
    final l$titleLT = titleLT;
    final l$titleLTE = titleLTE;
    final l$titleContains = titleContains;
    final l$titleHasPrefix = titleHasPrefix;
    final l$titleHasSuffix = titleHasSuffix;
    final l$titleEqualFold = titleEqualFold;
    final l$titleContainsFold = titleContainsFold;
    final l$subtitle = subtitle;
    final l$subtitleNEQ = subtitleNEQ;
    final l$subtitleIn = subtitleIn;
    final l$subtitleNotIn = subtitleNotIn;
    final l$subtitleGT = subtitleGT;
    final l$subtitleGTE = subtitleGTE;
    final l$subtitleLT = subtitleLT;
    final l$subtitleLTE = subtitleLTE;
    final l$subtitleContains = subtitleContains;
    final l$subtitleHasPrefix = subtitleHasPrefix;
    final l$subtitleHasSuffix = subtitleHasSuffix;
    final l$subtitleEqualFold = subtitleEqualFold;
    final l$subtitleContainsFold = subtitleContainsFold;
    final l$description = description;
    final l$descriptionNEQ = descriptionNEQ;
    final l$descriptionIn = descriptionIn;
    final l$descriptionNotIn = descriptionNotIn;
    final l$descriptionGT = descriptionGT;
    final l$descriptionGTE = descriptionGTE;
    final l$descriptionLT = descriptionLT;
    final l$descriptionLTE = descriptionLTE;
    final l$descriptionContains = descriptionContains;
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final l$descriptionEqualFold = descriptionEqualFold;
    final l$descriptionContainsFold = descriptionContainsFold;
    final l$duration = duration;
    final l$durationNEQ = durationNEQ;
    final l$durationIn = durationIn;
    final l$durationNotIn = durationNotIn;
    final l$durationGT = durationGT;
    final l$durationGTE = durationGTE;
    final l$durationLT = durationLT;
    final l$durationLTE = durationLTE;
    final l$streamurl = streamurl;
    final l$streamurlNEQ = streamurlNEQ;
    final l$streamurlIn = streamurlIn;
    final l$streamurlNotIn = streamurlNotIn;
    final l$streamurlGT = streamurlGT;
    final l$streamurlGTE = streamurlGTE;
    final l$streamurlLT = streamurlLT;
    final l$streamurlLTE = streamurlLTE;
    final l$streamurlContains = streamurlContains;
    final l$streamurlHasPrefix = streamurlHasPrefix;
    final l$streamurlHasSuffix = streamurlHasSuffix;
    final l$streamurlEqualFold = streamurlEqualFold;
    final l$streamurlContainsFold = streamurlContainsFold;
    final l$downloadurl = downloadurl;
    final l$downloadurlNEQ = downloadurlNEQ;
    final l$downloadurlIn = downloadurlIn;
    final l$downloadurlNotIn = downloadurlNotIn;
    final l$downloadurlGT = downloadurlGT;
    final l$downloadurlGTE = downloadurlGTE;
    final l$downloadurlLT = downloadurlLT;
    final l$downloadurlLTE = downloadurlLTE;
    final l$downloadurlContains = downloadurlContains;
    final l$downloadurlHasPrefix = downloadurlHasPrefix;
    final l$downloadurlHasSuffix = downloadurlHasSuffix;
    final l$downloadurlEqualFold = downloadurlEqualFold;
    final l$downloadurlContainsFold = downloadurlContainsFold;
    final l$source = source;
    final l$sourceNEQ = sourceNEQ;
    final l$sourceIn = sourceIn;
    final l$sourceNotIn = sourceNotIn;
    final l$sourceGT = sourceGT;
    final l$sourceGTE = sourceGTE;
    final l$sourceLT = sourceLT;
    final l$sourceLTE = sourceLTE;
    final l$sourceContains = sourceContains;
    final l$sourceHasPrefix = sourceHasPrefix;
    final l$sourceHasSuffix = sourceHasSuffix;
    final l$sourceEqualFold = sourceEqualFold;
    final l$sourceContainsFold = sourceContainsFold;
    final l$sourceurl = sourceurl;
    final l$sourceurlNEQ = sourceurlNEQ;
    final l$sourceurlIn = sourceurlIn;
    final l$sourceurlNotIn = sourceurlNotIn;
    final l$sourceurlGT = sourceurlGT;
    final l$sourceurlGTE = sourceurlGTE;
    final l$sourceurlLT = sourceurlLT;
    final l$sourceurlLTE = sourceurlLTE;
    final l$sourceurlContains = sourceurlContains;
    final l$sourceurlHasPrefix = sourceurlHasPrefix;
    final l$sourceurlHasSuffix = sourceurlHasSuffix;
    final l$sourceurlEqualFold = sourceurlEqualFold;
    final l$sourceurlContainsFold = sourceurlContainsFold;
    final l$licence = licence;
    final l$licenceNEQ = licenceNEQ;
    final l$licenceIn = licenceIn;
    final l$licenceNotIn = licenceNotIn;
    final l$licenceGT = licenceGT;
    final l$licenceGTE = licenceGTE;
    final l$licenceLT = licenceLT;
    final l$licenceLTE = licenceLTE;
    final l$licenceContains = licenceContains;
    final l$licenceHasPrefix = licenceHasPrefix;
    final l$licenceHasSuffix = licenceHasSuffix;
    final l$licenceEqualFold = licenceEqualFold;
    final l$licenceContainsFold = licenceContainsFold;
    final l$licenceurl = licenceurl;
    final l$licenceurlNEQ = licenceurlNEQ;
    final l$licenceurlIn = licenceurlIn;
    final l$licenceurlNotIn = licenceurlNotIn;
    final l$licenceurlGT = licenceurlGT;
    final l$licenceurlGTE = licenceurlGTE;
    final l$licenceurlLT = licenceurlLT;
    final l$licenceurlLTE = licenceurlLTE;
    final l$licenceurlContains = licenceurlContains;
    final l$licenceurlHasPrefix = licenceurlHasPrefix;
    final l$licenceurlHasSuffix = licenceurlHasSuffix;
    final l$licenceurlEqualFold = licenceurlEqualFold;
    final l$licenceurlContainsFold = licenceurlContainsFold;
    final l$ishidden = ishidden;
    final l$ishiddenNEQ = ishiddenNEQ;
    final l$order = order;
    final l$orderNEQ = orderNEQ;
    final l$orderIn = orderIn;
    final l$orderNotIn = orderNotIn;
    final l$orderGT = orderGT;
    final l$orderGTE = orderGTE;
    final l$orderLT = orderLT;
    final l$orderLTE = orderLTE;
    final l$hasContent = hasContent;
    final l$hasContentWith = hasContentWith;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('contentID') ? l$contentID : const {},
      _$data.containsKey('contentIDNEQ') ? l$contentIDNEQ : const {},
      _$data.containsKey('contentIDIn')
          ? l$contentIDIn == null
              ? null
              : Object.hashAll(l$contentIDIn.map((v) => v))
          : const {},
      _$data.containsKey('contentIDNotIn')
          ? l$contentIDNotIn == null
              ? null
              : Object.hashAll(l$contentIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('typeNEQ') ? l$typeNEQ : const {},
      _$data.containsKey('typeIn')
          ? l$typeIn == null
              ? null
              : Object.hashAll(l$typeIn.map((v) => v))
          : const {},
      _$data.containsKey('typeNotIn')
          ? l$typeNotIn == null
              ? null
              : Object.hashAll(l$typeNotIn.map((v) => v))
          : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('titleNEQ') ? l$titleNEQ : const {},
      _$data.containsKey('titleIn')
          ? l$titleIn == null
              ? null
              : Object.hashAll(l$titleIn.map((v) => v))
          : const {},
      _$data.containsKey('titleNotIn')
          ? l$titleNotIn == null
              ? null
              : Object.hashAll(l$titleNotIn.map((v) => v))
          : const {},
      _$data.containsKey('titleGT') ? l$titleGT : const {},
      _$data.containsKey('titleGTE') ? l$titleGTE : const {},
      _$data.containsKey('titleLT') ? l$titleLT : const {},
      _$data.containsKey('titleLTE') ? l$titleLTE : const {},
      _$data.containsKey('titleContains') ? l$titleContains : const {},
      _$data.containsKey('titleHasPrefix') ? l$titleHasPrefix : const {},
      _$data.containsKey('titleHasSuffix') ? l$titleHasSuffix : const {},
      _$data.containsKey('titleEqualFold') ? l$titleEqualFold : const {},
      _$data.containsKey('titleContainsFold') ? l$titleContainsFold : const {},
      _$data.containsKey('subtitle') ? l$subtitle : const {},
      _$data.containsKey('subtitleNEQ') ? l$subtitleNEQ : const {},
      _$data.containsKey('subtitleIn')
          ? l$subtitleIn == null
              ? null
              : Object.hashAll(l$subtitleIn.map((v) => v))
          : const {},
      _$data.containsKey('subtitleNotIn')
          ? l$subtitleNotIn == null
              ? null
              : Object.hashAll(l$subtitleNotIn.map((v) => v))
          : const {},
      _$data.containsKey('subtitleGT') ? l$subtitleGT : const {},
      _$data.containsKey('subtitleGTE') ? l$subtitleGTE : const {},
      _$data.containsKey('subtitleLT') ? l$subtitleLT : const {},
      _$data.containsKey('subtitleLTE') ? l$subtitleLTE : const {},
      _$data.containsKey('subtitleContains') ? l$subtitleContains : const {},
      _$data.containsKey('subtitleHasPrefix') ? l$subtitleHasPrefix : const {},
      _$data.containsKey('subtitleHasSuffix') ? l$subtitleHasSuffix : const {},
      _$data.containsKey('subtitleEqualFold') ? l$subtitleEqualFold : const {},
      _$data.containsKey('subtitleContainsFold')
          ? l$subtitleContainsFold
          : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('descriptionNEQ') ? l$descriptionNEQ : const {},
      _$data.containsKey('descriptionIn')
          ? l$descriptionIn == null
              ? null
              : Object.hashAll(l$descriptionIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionNotIn')
          ? l$descriptionNotIn == null
              ? null
              : Object.hashAll(l$descriptionNotIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionGT') ? l$descriptionGT : const {},
      _$data.containsKey('descriptionGTE') ? l$descriptionGTE : const {},
      _$data.containsKey('descriptionLT') ? l$descriptionLT : const {},
      _$data.containsKey('descriptionLTE') ? l$descriptionLTE : const {},
      _$data.containsKey('descriptionContains')
          ? l$descriptionContains
          : const {},
      _$data.containsKey('descriptionHasPrefix')
          ? l$descriptionHasPrefix
          : const {},
      _$data.containsKey('descriptionHasSuffix')
          ? l$descriptionHasSuffix
          : const {},
      _$data.containsKey('descriptionEqualFold')
          ? l$descriptionEqualFold
          : const {},
      _$data.containsKey('descriptionContainsFold')
          ? l$descriptionContainsFold
          : const {},
      _$data.containsKey('duration') ? l$duration : const {},
      _$data.containsKey('durationNEQ') ? l$durationNEQ : const {},
      _$data.containsKey('durationIn')
          ? l$durationIn == null
              ? null
              : Object.hashAll(l$durationIn.map((v) => v))
          : const {},
      _$data.containsKey('durationNotIn')
          ? l$durationNotIn == null
              ? null
              : Object.hashAll(l$durationNotIn.map((v) => v))
          : const {},
      _$data.containsKey('durationGT') ? l$durationGT : const {},
      _$data.containsKey('durationGTE') ? l$durationGTE : const {},
      _$data.containsKey('durationLT') ? l$durationLT : const {},
      _$data.containsKey('durationLTE') ? l$durationLTE : const {},
      _$data.containsKey('streamurl') ? l$streamurl : const {},
      _$data.containsKey('streamurlNEQ') ? l$streamurlNEQ : const {},
      _$data.containsKey('streamurlIn')
          ? l$streamurlIn == null
              ? null
              : Object.hashAll(l$streamurlIn.map((v) => v))
          : const {},
      _$data.containsKey('streamurlNotIn')
          ? l$streamurlNotIn == null
              ? null
              : Object.hashAll(l$streamurlNotIn.map((v) => v))
          : const {},
      _$data.containsKey('streamurlGT') ? l$streamurlGT : const {},
      _$data.containsKey('streamurlGTE') ? l$streamurlGTE : const {},
      _$data.containsKey('streamurlLT') ? l$streamurlLT : const {},
      _$data.containsKey('streamurlLTE') ? l$streamurlLTE : const {},
      _$data.containsKey('streamurlContains') ? l$streamurlContains : const {},
      _$data.containsKey('streamurlHasPrefix')
          ? l$streamurlHasPrefix
          : const {},
      _$data.containsKey('streamurlHasSuffix')
          ? l$streamurlHasSuffix
          : const {},
      _$data.containsKey('streamurlEqualFold')
          ? l$streamurlEqualFold
          : const {},
      _$data.containsKey('streamurlContainsFold')
          ? l$streamurlContainsFold
          : const {},
      _$data.containsKey('downloadurl') ? l$downloadurl : const {},
      _$data.containsKey('downloadurlNEQ') ? l$downloadurlNEQ : const {},
      _$data.containsKey('downloadurlIn')
          ? l$downloadurlIn == null
              ? null
              : Object.hashAll(l$downloadurlIn.map((v) => v))
          : const {},
      _$data.containsKey('downloadurlNotIn')
          ? l$downloadurlNotIn == null
              ? null
              : Object.hashAll(l$downloadurlNotIn.map((v) => v))
          : const {},
      _$data.containsKey('downloadurlGT') ? l$downloadurlGT : const {},
      _$data.containsKey('downloadurlGTE') ? l$downloadurlGTE : const {},
      _$data.containsKey('downloadurlLT') ? l$downloadurlLT : const {},
      _$data.containsKey('downloadurlLTE') ? l$downloadurlLTE : const {},
      _$data.containsKey('downloadurlContains')
          ? l$downloadurlContains
          : const {},
      _$data.containsKey('downloadurlHasPrefix')
          ? l$downloadurlHasPrefix
          : const {},
      _$data.containsKey('downloadurlHasSuffix')
          ? l$downloadurlHasSuffix
          : const {},
      _$data.containsKey('downloadurlEqualFold')
          ? l$downloadurlEqualFold
          : const {},
      _$data.containsKey('downloadurlContainsFold')
          ? l$downloadurlContainsFold
          : const {},
      _$data.containsKey('source') ? l$source : const {},
      _$data.containsKey('sourceNEQ') ? l$sourceNEQ : const {},
      _$data.containsKey('sourceIn')
          ? l$sourceIn == null
              ? null
              : Object.hashAll(l$sourceIn.map((v) => v))
          : const {},
      _$data.containsKey('sourceNotIn')
          ? l$sourceNotIn == null
              ? null
              : Object.hashAll(l$sourceNotIn.map((v) => v))
          : const {},
      _$data.containsKey('sourceGT') ? l$sourceGT : const {},
      _$data.containsKey('sourceGTE') ? l$sourceGTE : const {},
      _$data.containsKey('sourceLT') ? l$sourceLT : const {},
      _$data.containsKey('sourceLTE') ? l$sourceLTE : const {},
      _$data.containsKey('sourceContains') ? l$sourceContains : const {},
      _$data.containsKey('sourceHasPrefix') ? l$sourceHasPrefix : const {},
      _$data.containsKey('sourceHasSuffix') ? l$sourceHasSuffix : const {},
      _$data.containsKey('sourceEqualFold') ? l$sourceEqualFold : const {},
      _$data.containsKey('sourceContainsFold')
          ? l$sourceContainsFold
          : const {},
      _$data.containsKey('sourceurl') ? l$sourceurl : const {},
      _$data.containsKey('sourceurlNEQ') ? l$sourceurlNEQ : const {},
      _$data.containsKey('sourceurlIn')
          ? l$sourceurlIn == null
              ? null
              : Object.hashAll(l$sourceurlIn.map((v) => v))
          : const {},
      _$data.containsKey('sourceurlNotIn')
          ? l$sourceurlNotIn == null
              ? null
              : Object.hashAll(l$sourceurlNotIn.map((v) => v))
          : const {},
      _$data.containsKey('sourceurlGT') ? l$sourceurlGT : const {},
      _$data.containsKey('sourceurlGTE') ? l$sourceurlGTE : const {},
      _$data.containsKey('sourceurlLT') ? l$sourceurlLT : const {},
      _$data.containsKey('sourceurlLTE') ? l$sourceurlLTE : const {},
      _$data.containsKey('sourceurlContains') ? l$sourceurlContains : const {},
      _$data.containsKey('sourceurlHasPrefix')
          ? l$sourceurlHasPrefix
          : const {},
      _$data.containsKey('sourceurlHasSuffix')
          ? l$sourceurlHasSuffix
          : const {},
      _$data.containsKey('sourceurlEqualFold')
          ? l$sourceurlEqualFold
          : const {},
      _$data.containsKey('sourceurlContainsFold')
          ? l$sourceurlContainsFold
          : const {},
      _$data.containsKey('licence') ? l$licence : const {},
      _$data.containsKey('licenceNEQ') ? l$licenceNEQ : const {},
      _$data.containsKey('licenceIn')
          ? l$licenceIn == null
              ? null
              : Object.hashAll(l$licenceIn.map((v) => v))
          : const {},
      _$data.containsKey('licenceNotIn')
          ? l$licenceNotIn == null
              ? null
              : Object.hashAll(l$licenceNotIn.map((v) => v))
          : const {},
      _$data.containsKey('licenceGT') ? l$licenceGT : const {},
      _$data.containsKey('licenceGTE') ? l$licenceGTE : const {},
      _$data.containsKey('licenceLT') ? l$licenceLT : const {},
      _$data.containsKey('licenceLTE') ? l$licenceLTE : const {},
      _$data.containsKey('licenceContains') ? l$licenceContains : const {},
      _$data.containsKey('licenceHasPrefix') ? l$licenceHasPrefix : const {},
      _$data.containsKey('licenceHasSuffix') ? l$licenceHasSuffix : const {},
      _$data.containsKey('licenceEqualFold') ? l$licenceEqualFold : const {},
      _$data.containsKey('licenceContainsFold')
          ? l$licenceContainsFold
          : const {},
      _$data.containsKey('licenceurl') ? l$licenceurl : const {},
      _$data.containsKey('licenceurlNEQ') ? l$licenceurlNEQ : const {},
      _$data.containsKey('licenceurlIn')
          ? l$licenceurlIn == null
              ? null
              : Object.hashAll(l$licenceurlIn.map((v) => v))
          : const {},
      _$data.containsKey('licenceurlNotIn')
          ? l$licenceurlNotIn == null
              ? null
              : Object.hashAll(l$licenceurlNotIn.map((v) => v))
          : const {},
      _$data.containsKey('licenceurlGT') ? l$licenceurlGT : const {},
      _$data.containsKey('licenceurlGTE') ? l$licenceurlGTE : const {},
      _$data.containsKey('licenceurlLT') ? l$licenceurlLT : const {},
      _$data.containsKey('licenceurlLTE') ? l$licenceurlLTE : const {},
      _$data.containsKey('licenceurlContains')
          ? l$licenceurlContains
          : const {},
      _$data.containsKey('licenceurlHasPrefix')
          ? l$licenceurlHasPrefix
          : const {},
      _$data.containsKey('licenceurlHasSuffix')
          ? l$licenceurlHasSuffix
          : const {},
      _$data.containsKey('licenceurlEqualFold')
          ? l$licenceurlEqualFold
          : const {},
      _$data.containsKey('licenceurlContainsFold')
          ? l$licenceurlContainsFold
          : const {},
      _$data.containsKey('ishidden') ? l$ishidden : const {},
      _$data.containsKey('ishiddenNEQ') ? l$ishiddenNEQ : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('orderNEQ') ? l$orderNEQ : const {},
      _$data.containsKey('orderIn')
          ? l$orderIn == null
              ? null
              : Object.hashAll(l$orderIn.map((v) => v))
          : const {},
      _$data.containsKey('orderNotIn')
          ? l$orderNotIn == null
              ? null
              : Object.hashAll(l$orderNotIn.map((v) => v))
          : const {},
      _$data.containsKey('orderGT') ? l$orderGT : const {},
      _$data.containsKey('orderGTE') ? l$orderGTE : const {},
      _$data.containsKey('orderLT') ? l$orderLT : const {},
      _$data.containsKey('orderLTE') ? l$orderLTE : const {},
      _$data.containsKey('hasContent') ? l$hasContent : const {},
      _$data.containsKey('hasContentWith')
          ? l$hasContentWith == null
              ? null
              : Object.hashAll(l$hasContentWith.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentEpisodeWhereInput<TRes> {
  factory CopyWith$Input$ContentEpisodeWhereInput(
    Input$ContentEpisodeWhereInput instance,
    TRes Function(Input$ContentEpisodeWhereInput) then,
  ) = _CopyWithImpl$Input$ContentEpisodeWhereInput;

  factory CopyWith$Input$ContentEpisodeWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentEpisodeWhereInput;

  TRes call({
    Input$ContentEpisodeWhereInput? not,
    List<Input$ContentEpisodeWhereInput>? and,
    List<Input$ContentEpisodeWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? contentID,
    String? contentIDNEQ,
    List<String>? contentIDIn,
    List<String>? contentIDNotIn,
    Enum$ContentEpisodeContentType? type,
    Enum$ContentEpisodeContentType? typeNEQ,
    List<Enum$ContentEpisodeContentType>? typeIn,
    List<Enum$ContentEpisodeContentType>? typeNotIn,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    int? duration,
    int? durationNEQ,
    List<int>? durationIn,
    List<int>? durationNotIn,
    int? durationGT,
    int? durationGTE,
    int? durationLT,
    int? durationLTE,
    String? streamurl,
    String? streamurlNEQ,
    List<String>? streamurlIn,
    List<String>? streamurlNotIn,
    String? streamurlGT,
    String? streamurlGTE,
    String? streamurlLT,
    String? streamurlLTE,
    String? streamurlContains,
    String? streamurlHasPrefix,
    String? streamurlHasSuffix,
    String? streamurlEqualFold,
    String? streamurlContainsFold,
    String? downloadurl,
    String? downloadurlNEQ,
    List<String>? downloadurlIn,
    List<String>? downloadurlNotIn,
    String? downloadurlGT,
    String? downloadurlGTE,
    String? downloadurlLT,
    String? downloadurlLTE,
    String? downloadurlContains,
    String? downloadurlHasPrefix,
    String? downloadurlHasSuffix,
    String? downloadurlEqualFold,
    String? downloadurlContainsFold,
    String? source,
    String? sourceNEQ,
    List<String>? sourceIn,
    List<String>? sourceNotIn,
    String? sourceGT,
    String? sourceGTE,
    String? sourceLT,
    String? sourceLTE,
    String? sourceContains,
    String? sourceHasPrefix,
    String? sourceHasSuffix,
    String? sourceEqualFold,
    String? sourceContainsFold,
    String? sourceurl,
    String? sourceurlNEQ,
    List<String>? sourceurlIn,
    List<String>? sourceurlNotIn,
    String? sourceurlGT,
    String? sourceurlGTE,
    String? sourceurlLT,
    String? sourceurlLTE,
    String? sourceurlContains,
    String? sourceurlHasPrefix,
    String? sourceurlHasSuffix,
    String? sourceurlEqualFold,
    String? sourceurlContainsFold,
    String? licence,
    String? licenceNEQ,
    List<String>? licenceIn,
    List<String>? licenceNotIn,
    String? licenceGT,
    String? licenceGTE,
    String? licenceLT,
    String? licenceLTE,
    String? licenceContains,
    String? licenceHasPrefix,
    String? licenceHasSuffix,
    String? licenceEqualFold,
    String? licenceContainsFold,
    String? licenceurl,
    String? licenceurlNEQ,
    List<String>? licenceurlIn,
    List<String>? licenceurlNotIn,
    String? licenceurlGT,
    String? licenceurlGTE,
    String? licenceurlLT,
    String? licenceurlLTE,
    String? licenceurlContains,
    String? licenceurlHasPrefix,
    String? licenceurlHasSuffix,
    String? licenceurlEqualFold,
    String? licenceurlContainsFold,
    bool? ishidden,
    bool? ishiddenNEQ,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasContent,
    List<Input$ContentWhereInput>? hasContentWith,
  });
  CopyWith$Input$ContentEpisodeWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$ContentEpisodeWhereInput>? Function(
              Iterable<
                  CopyWith$Input$ContentEpisodeWhereInput<
                      Input$ContentEpisodeWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$ContentEpisodeWhereInput>? Function(
              Iterable<
                  CopyWith$Input$ContentEpisodeWhereInput<
                      Input$ContentEpisodeWhereInput>>?)
          _fn);
  TRes hasContentWith(
      Iterable<Input$ContentWhereInput>? Function(
              Iterable<
                  CopyWith$Input$ContentWhereInput<Input$ContentWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$ContentEpisodeWhereInput<TRes>
    implements CopyWith$Input$ContentEpisodeWhereInput<TRes> {
  _CopyWithImpl$Input$ContentEpisodeWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContentEpisodeWhereInput _instance;

  final TRes Function(Input$ContentEpisodeWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? contentID = _undefined,
    Object? contentIDNEQ = _undefined,
    Object? contentIDIn = _undefined,
    Object? contentIDNotIn = _undefined,
    Object? type = _undefined,
    Object? typeNEQ = _undefined,
    Object? typeIn = _undefined,
    Object? typeNotIn = _undefined,
    Object? title = _undefined,
    Object? titleNEQ = _undefined,
    Object? titleIn = _undefined,
    Object? titleNotIn = _undefined,
    Object? titleGT = _undefined,
    Object? titleGTE = _undefined,
    Object? titleLT = _undefined,
    Object? titleLTE = _undefined,
    Object? titleContains = _undefined,
    Object? titleHasPrefix = _undefined,
    Object? titleHasSuffix = _undefined,
    Object? titleEqualFold = _undefined,
    Object? titleContainsFold = _undefined,
    Object? subtitle = _undefined,
    Object? subtitleNEQ = _undefined,
    Object? subtitleIn = _undefined,
    Object? subtitleNotIn = _undefined,
    Object? subtitleGT = _undefined,
    Object? subtitleGTE = _undefined,
    Object? subtitleLT = _undefined,
    Object? subtitleLTE = _undefined,
    Object? subtitleContains = _undefined,
    Object? subtitleHasPrefix = _undefined,
    Object? subtitleHasSuffix = _undefined,
    Object? subtitleEqualFold = _undefined,
    Object? subtitleContainsFold = _undefined,
    Object? description = _undefined,
    Object? descriptionNEQ = _undefined,
    Object? descriptionIn = _undefined,
    Object? descriptionNotIn = _undefined,
    Object? descriptionGT = _undefined,
    Object? descriptionGTE = _undefined,
    Object? descriptionLT = _undefined,
    Object? descriptionLTE = _undefined,
    Object? descriptionContains = _undefined,
    Object? descriptionHasPrefix = _undefined,
    Object? descriptionHasSuffix = _undefined,
    Object? descriptionEqualFold = _undefined,
    Object? descriptionContainsFold = _undefined,
    Object? duration = _undefined,
    Object? durationNEQ = _undefined,
    Object? durationIn = _undefined,
    Object? durationNotIn = _undefined,
    Object? durationGT = _undefined,
    Object? durationGTE = _undefined,
    Object? durationLT = _undefined,
    Object? durationLTE = _undefined,
    Object? streamurl = _undefined,
    Object? streamurlNEQ = _undefined,
    Object? streamurlIn = _undefined,
    Object? streamurlNotIn = _undefined,
    Object? streamurlGT = _undefined,
    Object? streamurlGTE = _undefined,
    Object? streamurlLT = _undefined,
    Object? streamurlLTE = _undefined,
    Object? streamurlContains = _undefined,
    Object? streamurlHasPrefix = _undefined,
    Object? streamurlHasSuffix = _undefined,
    Object? streamurlEqualFold = _undefined,
    Object? streamurlContainsFold = _undefined,
    Object? downloadurl = _undefined,
    Object? downloadurlNEQ = _undefined,
    Object? downloadurlIn = _undefined,
    Object? downloadurlNotIn = _undefined,
    Object? downloadurlGT = _undefined,
    Object? downloadurlGTE = _undefined,
    Object? downloadurlLT = _undefined,
    Object? downloadurlLTE = _undefined,
    Object? downloadurlContains = _undefined,
    Object? downloadurlHasPrefix = _undefined,
    Object? downloadurlHasSuffix = _undefined,
    Object? downloadurlEqualFold = _undefined,
    Object? downloadurlContainsFold = _undefined,
    Object? source = _undefined,
    Object? sourceNEQ = _undefined,
    Object? sourceIn = _undefined,
    Object? sourceNotIn = _undefined,
    Object? sourceGT = _undefined,
    Object? sourceGTE = _undefined,
    Object? sourceLT = _undefined,
    Object? sourceLTE = _undefined,
    Object? sourceContains = _undefined,
    Object? sourceHasPrefix = _undefined,
    Object? sourceHasSuffix = _undefined,
    Object? sourceEqualFold = _undefined,
    Object? sourceContainsFold = _undefined,
    Object? sourceurl = _undefined,
    Object? sourceurlNEQ = _undefined,
    Object? sourceurlIn = _undefined,
    Object? sourceurlNotIn = _undefined,
    Object? sourceurlGT = _undefined,
    Object? sourceurlGTE = _undefined,
    Object? sourceurlLT = _undefined,
    Object? sourceurlLTE = _undefined,
    Object? sourceurlContains = _undefined,
    Object? sourceurlHasPrefix = _undefined,
    Object? sourceurlHasSuffix = _undefined,
    Object? sourceurlEqualFold = _undefined,
    Object? sourceurlContainsFold = _undefined,
    Object? licence = _undefined,
    Object? licenceNEQ = _undefined,
    Object? licenceIn = _undefined,
    Object? licenceNotIn = _undefined,
    Object? licenceGT = _undefined,
    Object? licenceGTE = _undefined,
    Object? licenceLT = _undefined,
    Object? licenceLTE = _undefined,
    Object? licenceContains = _undefined,
    Object? licenceHasPrefix = _undefined,
    Object? licenceHasSuffix = _undefined,
    Object? licenceEqualFold = _undefined,
    Object? licenceContainsFold = _undefined,
    Object? licenceurl = _undefined,
    Object? licenceurlNEQ = _undefined,
    Object? licenceurlIn = _undefined,
    Object? licenceurlNotIn = _undefined,
    Object? licenceurlGT = _undefined,
    Object? licenceurlGTE = _undefined,
    Object? licenceurlLT = _undefined,
    Object? licenceurlLTE = _undefined,
    Object? licenceurlContains = _undefined,
    Object? licenceurlHasPrefix = _undefined,
    Object? licenceurlHasSuffix = _undefined,
    Object? licenceurlEqualFold = _undefined,
    Object? licenceurlContainsFold = _undefined,
    Object? ishidden = _undefined,
    Object? ishiddenNEQ = _undefined,
    Object? order = _undefined,
    Object? orderNEQ = _undefined,
    Object? orderIn = _undefined,
    Object? orderNotIn = _undefined,
    Object? orderGT = _undefined,
    Object? orderGTE = _undefined,
    Object? orderLT = _undefined,
    Object? orderLTE = _undefined,
    Object? hasContent = _undefined,
    Object? hasContentWith = _undefined,
  }) =>
      _then(Input$ContentEpisodeWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$ContentEpisodeWhereInput?),
        if (and != _undefined)
          'and': (and as List<Input$ContentEpisodeWhereInput>?),
        if (or != _undefined)
          'or': (or as List<Input$ContentEpisodeWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (contentID != _undefined) 'contentID': (contentID as String?),
        if (contentIDNEQ != _undefined)
          'contentIDNEQ': (contentIDNEQ as String?),
        if (contentIDIn != _undefined)
          'contentIDIn': (contentIDIn as List<String>?),
        if (contentIDNotIn != _undefined)
          'contentIDNotIn': (contentIDNotIn as List<String>?),
        if (type != _undefined)
          'type': (type as Enum$ContentEpisodeContentType?),
        if (typeNEQ != _undefined)
          'typeNEQ': (typeNEQ as Enum$ContentEpisodeContentType?),
        if (typeIn != _undefined)
          'typeIn': (typeIn as List<Enum$ContentEpisodeContentType>?),
        if (typeNotIn != _undefined)
          'typeNotIn': (typeNotIn as List<Enum$ContentEpisodeContentType>?),
        if (title != _undefined) 'title': (title as String?),
        if (titleNEQ != _undefined) 'titleNEQ': (titleNEQ as String?),
        if (titleIn != _undefined) 'titleIn': (titleIn as List<String>?),
        if (titleNotIn != _undefined)
          'titleNotIn': (titleNotIn as List<String>?),
        if (titleGT != _undefined) 'titleGT': (titleGT as String?),
        if (titleGTE != _undefined) 'titleGTE': (titleGTE as String?),
        if (titleLT != _undefined) 'titleLT': (titleLT as String?),
        if (titleLTE != _undefined) 'titleLTE': (titleLTE as String?),
        if (titleContains != _undefined)
          'titleContains': (titleContains as String?),
        if (titleHasPrefix != _undefined)
          'titleHasPrefix': (titleHasPrefix as String?),
        if (titleHasSuffix != _undefined)
          'titleHasSuffix': (titleHasSuffix as String?),
        if (titleEqualFold != _undefined)
          'titleEqualFold': (titleEqualFold as String?),
        if (titleContainsFold != _undefined)
          'titleContainsFold': (titleContainsFold as String?),
        if (subtitle != _undefined) 'subtitle': (subtitle as String?),
        if (subtitleNEQ != _undefined) 'subtitleNEQ': (subtitleNEQ as String?),
        if (subtitleIn != _undefined)
          'subtitleIn': (subtitleIn as List<String>?),
        if (subtitleNotIn != _undefined)
          'subtitleNotIn': (subtitleNotIn as List<String>?),
        if (subtitleGT != _undefined) 'subtitleGT': (subtitleGT as String?),
        if (subtitleGTE != _undefined) 'subtitleGTE': (subtitleGTE as String?),
        if (subtitleLT != _undefined) 'subtitleLT': (subtitleLT as String?),
        if (subtitleLTE != _undefined) 'subtitleLTE': (subtitleLTE as String?),
        if (subtitleContains != _undefined)
          'subtitleContains': (subtitleContains as String?),
        if (subtitleHasPrefix != _undefined)
          'subtitleHasPrefix': (subtitleHasPrefix as String?),
        if (subtitleHasSuffix != _undefined)
          'subtitleHasSuffix': (subtitleHasSuffix as String?),
        if (subtitleEqualFold != _undefined)
          'subtitleEqualFold': (subtitleEqualFold as String?),
        if (subtitleContainsFold != _undefined)
          'subtitleContainsFold': (subtitleContainsFold as String?),
        if (description != _undefined) 'description': (description as String?),
        if (descriptionNEQ != _undefined)
          'descriptionNEQ': (descriptionNEQ as String?),
        if (descriptionIn != _undefined)
          'descriptionIn': (descriptionIn as List<String>?),
        if (descriptionNotIn != _undefined)
          'descriptionNotIn': (descriptionNotIn as List<String>?),
        if (descriptionGT != _undefined)
          'descriptionGT': (descriptionGT as String?),
        if (descriptionGTE != _undefined)
          'descriptionGTE': (descriptionGTE as String?),
        if (descriptionLT != _undefined)
          'descriptionLT': (descriptionLT as String?),
        if (descriptionLTE != _undefined)
          'descriptionLTE': (descriptionLTE as String?),
        if (descriptionContains != _undefined)
          'descriptionContains': (descriptionContains as String?),
        if (descriptionHasPrefix != _undefined)
          'descriptionHasPrefix': (descriptionHasPrefix as String?),
        if (descriptionHasSuffix != _undefined)
          'descriptionHasSuffix': (descriptionHasSuffix as String?),
        if (descriptionEqualFold != _undefined)
          'descriptionEqualFold': (descriptionEqualFold as String?),
        if (descriptionContainsFold != _undefined)
          'descriptionContainsFold': (descriptionContainsFold as String?),
        if (duration != _undefined) 'duration': (duration as int?),
        if (durationNEQ != _undefined) 'durationNEQ': (durationNEQ as int?),
        if (durationIn != _undefined) 'durationIn': (durationIn as List<int>?),
        if (durationNotIn != _undefined)
          'durationNotIn': (durationNotIn as List<int>?),
        if (durationGT != _undefined) 'durationGT': (durationGT as int?),
        if (durationGTE != _undefined) 'durationGTE': (durationGTE as int?),
        if (durationLT != _undefined) 'durationLT': (durationLT as int?),
        if (durationLTE != _undefined) 'durationLTE': (durationLTE as int?),
        if (streamurl != _undefined) 'streamurl': (streamurl as String?),
        if (streamurlNEQ != _undefined)
          'streamurlNEQ': (streamurlNEQ as String?),
        if (streamurlIn != _undefined)
          'streamurlIn': (streamurlIn as List<String>?),
        if (streamurlNotIn != _undefined)
          'streamurlNotIn': (streamurlNotIn as List<String>?),
        if (streamurlGT != _undefined) 'streamurlGT': (streamurlGT as String?),
        if (streamurlGTE != _undefined)
          'streamurlGTE': (streamurlGTE as String?),
        if (streamurlLT != _undefined) 'streamurlLT': (streamurlLT as String?),
        if (streamurlLTE != _undefined)
          'streamurlLTE': (streamurlLTE as String?),
        if (streamurlContains != _undefined)
          'streamurlContains': (streamurlContains as String?),
        if (streamurlHasPrefix != _undefined)
          'streamurlHasPrefix': (streamurlHasPrefix as String?),
        if (streamurlHasSuffix != _undefined)
          'streamurlHasSuffix': (streamurlHasSuffix as String?),
        if (streamurlEqualFold != _undefined)
          'streamurlEqualFold': (streamurlEqualFold as String?),
        if (streamurlContainsFold != _undefined)
          'streamurlContainsFold': (streamurlContainsFold as String?),
        if (downloadurl != _undefined) 'downloadurl': (downloadurl as String?),
        if (downloadurlNEQ != _undefined)
          'downloadurlNEQ': (downloadurlNEQ as String?),
        if (downloadurlIn != _undefined)
          'downloadurlIn': (downloadurlIn as List<String>?),
        if (downloadurlNotIn != _undefined)
          'downloadurlNotIn': (downloadurlNotIn as List<String>?),
        if (downloadurlGT != _undefined)
          'downloadurlGT': (downloadurlGT as String?),
        if (downloadurlGTE != _undefined)
          'downloadurlGTE': (downloadurlGTE as String?),
        if (downloadurlLT != _undefined)
          'downloadurlLT': (downloadurlLT as String?),
        if (downloadurlLTE != _undefined)
          'downloadurlLTE': (downloadurlLTE as String?),
        if (downloadurlContains != _undefined)
          'downloadurlContains': (downloadurlContains as String?),
        if (downloadurlHasPrefix != _undefined)
          'downloadurlHasPrefix': (downloadurlHasPrefix as String?),
        if (downloadurlHasSuffix != _undefined)
          'downloadurlHasSuffix': (downloadurlHasSuffix as String?),
        if (downloadurlEqualFold != _undefined)
          'downloadurlEqualFold': (downloadurlEqualFold as String?),
        if (downloadurlContainsFold != _undefined)
          'downloadurlContainsFold': (downloadurlContainsFold as String?),
        if (source != _undefined) 'source': (source as String?),
        if (sourceNEQ != _undefined) 'sourceNEQ': (sourceNEQ as String?),
        if (sourceIn != _undefined) 'sourceIn': (sourceIn as List<String>?),
        if (sourceNotIn != _undefined)
          'sourceNotIn': (sourceNotIn as List<String>?),
        if (sourceGT != _undefined) 'sourceGT': (sourceGT as String?),
        if (sourceGTE != _undefined) 'sourceGTE': (sourceGTE as String?),
        if (sourceLT != _undefined) 'sourceLT': (sourceLT as String?),
        if (sourceLTE != _undefined) 'sourceLTE': (sourceLTE as String?),
        if (sourceContains != _undefined)
          'sourceContains': (sourceContains as String?),
        if (sourceHasPrefix != _undefined)
          'sourceHasPrefix': (sourceHasPrefix as String?),
        if (sourceHasSuffix != _undefined)
          'sourceHasSuffix': (sourceHasSuffix as String?),
        if (sourceEqualFold != _undefined)
          'sourceEqualFold': (sourceEqualFold as String?),
        if (sourceContainsFold != _undefined)
          'sourceContainsFold': (sourceContainsFold as String?),
        if (sourceurl != _undefined) 'sourceurl': (sourceurl as String?),
        if (sourceurlNEQ != _undefined)
          'sourceurlNEQ': (sourceurlNEQ as String?),
        if (sourceurlIn != _undefined)
          'sourceurlIn': (sourceurlIn as List<String>?),
        if (sourceurlNotIn != _undefined)
          'sourceurlNotIn': (sourceurlNotIn as List<String>?),
        if (sourceurlGT != _undefined) 'sourceurlGT': (sourceurlGT as String?),
        if (sourceurlGTE != _undefined)
          'sourceurlGTE': (sourceurlGTE as String?),
        if (sourceurlLT != _undefined) 'sourceurlLT': (sourceurlLT as String?),
        if (sourceurlLTE != _undefined)
          'sourceurlLTE': (sourceurlLTE as String?),
        if (sourceurlContains != _undefined)
          'sourceurlContains': (sourceurlContains as String?),
        if (sourceurlHasPrefix != _undefined)
          'sourceurlHasPrefix': (sourceurlHasPrefix as String?),
        if (sourceurlHasSuffix != _undefined)
          'sourceurlHasSuffix': (sourceurlHasSuffix as String?),
        if (sourceurlEqualFold != _undefined)
          'sourceurlEqualFold': (sourceurlEqualFold as String?),
        if (sourceurlContainsFold != _undefined)
          'sourceurlContainsFold': (sourceurlContainsFold as String?),
        if (licence != _undefined) 'licence': (licence as String?),
        if (licenceNEQ != _undefined) 'licenceNEQ': (licenceNEQ as String?),
        if (licenceIn != _undefined) 'licenceIn': (licenceIn as List<String>?),
        if (licenceNotIn != _undefined)
          'licenceNotIn': (licenceNotIn as List<String>?),
        if (licenceGT != _undefined) 'licenceGT': (licenceGT as String?),
        if (licenceGTE != _undefined) 'licenceGTE': (licenceGTE as String?),
        if (licenceLT != _undefined) 'licenceLT': (licenceLT as String?),
        if (licenceLTE != _undefined) 'licenceLTE': (licenceLTE as String?),
        if (licenceContains != _undefined)
          'licenceContains': (licenceContains as String?),
        if (licenceHasPrefix != _undefined)
          'licenceHasPrefix': (licenceHasPrefix as String?),
        if (licenceHasSuffix != _undefined)
          'licenceHasSuffix': (licenceHasSuffix as String?),
        if (licenceEqualFold != _undefined)
          'licenceEqualFold': (licenceEqualFold as String?),
        if (licenceContainsFold != _undefined)
          'licenceContainsFold': (licenceContainsFold as String?),
        if (licenceurl != _undefined) 'licenceurl': (licenceurl as String?),
        if (licenceurlNEQ != _undefined)
          'licenceurlNEQ': (licenceurlNEQ as String?),
        if (licenceurlIn != _undefined)
          'licenceurlIn': (licenceurlIn as List<String>?),
        if (licenceurlNotIn != _undefined)
          'licenceurlNotIn': (licenceurlNotIn as List<String>?),
        if (licenceurlGT != _undefined)
          'licenceurlGT': (licenceurlGT as String?),
        if (licenceurlGTE != _undefined)
          'licenceurlGTE': (licenceurlGTE as String?),
        if (licenceurlLT != _undefined)
          'licenceurlLT': (licenceurlLT as String?),
        if (licenceurlLTE != _undefined)
          'licenceurlLTE': (licenceurlLTE as String?),
        if (licenceurlContains != _undefined)
          'licenceurlContains': (licenceurlContains as String?),
        if (licenceurlHasPrefix != _undefined)
          'licenceurlHasPrefix': (licenceurlHasPrefix as String?),
        if (licenceurlHasSuffix != _undefined)
          'licenceurlHasSuffix': (licenceurlHasSuffix as String?),
        if (licenceurlEqualFold != _undefined)
          'licenceurlEqualFold': (licenceurlEqualFold as String?),
        if (licenceurlContainsFold != _undefined)
          'licenceurlContainsFold': (licenceurlContainsFold as String?),
        if (ishidden != _undefined) 'ishidden': (ishidden as bool?),
        if (ishiddenNEQ != _undefined) 'ishiddenNEQ': (ishiddenNEQ as bool?),
        if (order != _undefined) 'order': (order as int?),
        if (orderNEQ != _undefined) 'orderNEQ': (orderNEQ as int?),
        if (orderIn != _undefined) 'orderIn': (orderIn as List<int>?),
        if (orderNotIn != _undefined) 'orderNotIn': (orderNotIn as List<int>?),
        if (orderGT != _undefined) 'orderGT': (orderGT as int?),
        if (orderGTE != _undefined) 'orderGTE': (orderGTE as int?),
        if (orderLT != _undefined) 'orderLT': (orderLT as int?),
        if (orderLTE != _undefined) 'orderLTE': (orderLTE as int?),
        if (hasContent != _undefined) 'hasContent': (hasContent as bool?),
        if (hasContentWith != _undefined)
          'hasContentWith': (hasContentWith as List<Input$ContentWhereInput>?),
      }));

  CopyWith$Input$ContentEpisodeWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$ContentEpisodeWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentEpisodeWhereInput(
            local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$ContentEpisodeWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$ContentEpisodeWhereInput<
                          Input$ContentEpisodeWhereInput>>?)
              _fn) =>
      call(
          and: _fn(
              _instance.and?.map((e) => CopyWith$Input$ContentEpisodeWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes or(
          Iterable<Input$ContentEpisodeWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$ContentEpisodeWhereInput<
                          Input$ContentEpisodeWhereInput>>?)
              _fn) =>
      call(
          or: _fn(
              _instance.or?.map((e) => CopyWith$Input$ContentEpisodeWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasContentWith(
          Iterable<Input$ContentWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$ContentWhereInput<
                          Input$ContentWhereInput>>?)
              _fn) =>
      call(
          hasContentWith: _fn(_instance.hasContentWith
              ?.map((e) => CopyWith$Input$ContentWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$ContentEpisodeWhereInput<TRes>
    implements CopyWith$Input$ContentEpisodeWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContentEpisodeWhereInput(this._res);

  TRes _res;

  call({
    Input$ContentEpisodeWhereInput? not,
    List<Input$ContentEpisodeWhereInput>? and,
    List<Input$ContentEpisodeWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? contentID,
    String? contentIDNEQ,
    List<String>? contentIDIn,
    List<String>? contentIDNotIn,
    Enum$ContentEpisodeContentType? type,
    Enum$ContentEpisodeContentType? typeNEQ,
    List<Enum$ContentEpisodeContentType>? typeIn,
    List<Enum$ContentEpisodeContentType>? typeNotIn,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    int? duration,
    int? durationNEQ,
    List<int>? durationIn,
    List<int>? durationNotIn,
    int? durationGT,
    int? durationGTE,
    int? durationLT,
    int? durationLTE,
    String? streamurl,
    String? streamurlNEQ,
    List<String>? streamurlIn,
    List<String>? streamurlNotIn,
    String? streamurlGT,
    String? streamurlGTE,
    String? streamurlLT,
    String? streamurlLTE,
    String? streamurlContains,
    String? streamurlHasPrefix,
    String? streamurlHasSuffix,
    String? streamurlEqualFold,
    String? streamurlContainsFold,
    String? downloadurl,
    String? downloadurlNEQ,
    List<String>? downloadurlIn,
    List<String>? downloadurlNotIn,
    String? downloadurlGT,
    String? downloadurlGTE,
    String? downloadurlLT,
    String? downloadurlLTE,
    String? downloadurlContains,
    String? downloadurlHasPrefix,
    String? downloadurlHasSuffix,
    String? downloadurlEqualFold,
    String? downloadurlContainsFold,
    String? source,
    String? sourceNEQ,
    List<String>? sourceIn,
    List<String>? sourceNotIn,
    String? sourceGT,
    String? sourceGTE,
    String? sourceLT,
    String? sourceLTE,
    String? sourceContains,
    String? sourceHasPrefix,
    String? sourceHasSuffix,
    String? sourceEqualFold,
    String? sourceContainsFold,
    String? sourceurl,
    String? sourceurlNEQ,
    List<String>? sourceurlIn,
    List<String>? sourceurlNotIn,
    String? sourceurlGT,
    String? sourceurlGTE,
    String? sourceurlLT,
    String? sourceurlLTE,
    String? sourceurlContains,
    String? sourceurlHasPrefix,
    String? sourceurlHasSuffix,
    String? sourceurlEqualFold,
    String? sourceurlContainsFold,
    String? licence,
    String? licenceNEQ,
    List<String>? licenceIn,
    List<String>? licenceNotIn,
    String? licenceGT,
    String? licenceGTE,
    String? licenceLT,
    String? licenceLTE,
    String? licenceContains,
    String? licenceHasPrefix,
    String? licenceHasSuffix,
    String? licenceEqualFold,
    String? licenceContainsFold,
    String? licenceurl,
    String? licenceurlNEQ,
    List<String>? licenceurlIn,
    List<String>? licenceurlNotIn,
    String? licenceurlGT,
    String? licenceurlGTE,
    String? licenceurlLT,
    String? licenceurlLTE,
    String? licenceurlContains,
    String? licenceurlHasPrefix,
    String? licenceurlHasSuffix,
    String? licenceurlEqualFold,
    String? licenceurlContainsFold,
    bool? ishidden,
    bool? ishiddenNEQ,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasContent,
    List<Input$ContentWhereInput>? hasContentWith,
  }) =>
      _res;

  CopyWith$Input$ContentEpisodeWhereInput<TRes> get not =>
      CopyWith$Input$ContentEpisodeWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;

  hasContentWith(_fn) => _res;
}

class Input$ContentOrder {
  factory Input$ContentOrder({
    Enum$OrderDirection? direction,
    required Enum$ContentOrderField field,
  }) =>
      Input$ContentOrder._({
        if (direction != null) r'direction': direction,
        r'field': field,
      });

  Input$ContentOrder._(this._$data);

  factory Input$ContentOrder.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('direction')) {
      final l$direction = data['direction'];
      result$data['direction'] =
          fromJson$Enum$OrderDirection((l$direction as String));
    }
    final l$field = data['field'];
    result$data['field'] = fromJson$Enum$ContentOrderField((l$field as String));
    return Input$ContentOrder._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderDirection? get direction =>
      (_$data['direction'] as Enum$OrderDirection?);

  Enum$ContentOrderField get field =>
      (_$data['field'] as Enum$ContentOrderField);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('direction')) {
      final l$direction = direction;
      result$data['direction'] =
          toJson$Enum$OrderDirection((l$direction as Enum$OrderDirection));
    }
    final l$field = field;
    result$data['field'] = toJson$Enum$ContentOrderField(l$field);
    return result$data;
  }

  CopyWith$Input$ContentOrder<Input$ContentOrder> get copyWith =>
      CopyWith$Input$ContentOrder(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$ContentOrder) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$direction = direction;
    final lOther$direction = other.direction;
    if (_$data.containsKey('direction') !=
        other._$data.containsKey('direction')) {
      return false;
    }
    if (l$direction != lOther$direction) {
      return false;
    }
    final l$field = field;
    final lOther$field = other.field;
    if (l$field != lOther$field) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$direction = direction;
    final l$field = field;
    return Object.hashAll([
      _$data.containsKey('direction') ? l$direction : const {},
      l$field,
    ]);
  }
}

abstract class CopyWith$Input$ContentOrder<TRes> {
  factory CopyWith$Input$ContentOrder(
    Input$ContentOrder instance,
    TRes Function(Input$ContentOrder) then,
  ) = _CopyWithImpl$Input$ContentOrder;

  factory CopyWith$Input$ContentOrder.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentOrder;

  TRes call({
    Enum$OrderDirection? direction,
    Enum$ContentOrderField? field,
  });
}

class _CopyWithImpl$Input$ContentOrder<TRes>
    implements CopyWith$Input$ContentOrder<TRes> {
  _CopyWithImpl$Input$ContentOrder(
    this._instance,
    this._then,
  );

  final Input$ContentOrder _instance;

  final TRes Function(Input$ContentOrder) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? direction = _undefined,
    Object? field = _undefined,
  }) =>
      _then(Input$ContentOrder._({
        ..._instance._$data,
        if (direction != _undefined && direction != null)
          'direction': (direction as Enum$OrderDirection),
        if (field != _undefined && field != null)
          'field': (field as Enum$ContentOrderField),
      }));
}

class _CopyWithStubImpl$Input$ContentOrder<TRes>
    implements CopyWith$Input$ContentOrder<TRes> {
  _CopyWithStubImpl$Input$ContentOrder(this._res);

  TRes _res;

  call({
    Enum$OrderDirection? direction,
    Enum$ContentOrderField? field,
  }) =>
      _res;
}

class Input$ContentProgressWhereInput {
  factory Input$ContentProgressWhereInput({
    Input$ContentProgressWhereInput? not,
    List<Input$ContentProgressWhereInput>? and,
    List<Input$ContentProgressWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? userID,
    String? userIDNEQ,
    List<String>? userIDIn,
    List<String>? userIDNotIn,
    String? contentID,
    String? contentIDNEQ,
    List<String>? contentIDIn,
    List<String>? contentIDNotIn,
    String? episodeID,
    String? episodeIDNEQ,
    List<String>? episodeIDIn,
    List<String>? episodeIDNotIn,
    Enum$ContentProgressContentType? contentType,
    Enum$ContentProgressContentType? contentTypeNEQ,
    List<Enum$ContentProgressContentType>? contentTypeIn,
    List<Enum$ContentProgressContentType>? contentTypeNotIn,
    int? progress,
    int? progressNEQ,
    List<int>? progressIn,
    List<int>? progressNotIn,
    int? progressGT,
    int? progressGTE,
    int? progressLT,
    int? progressLTE,
    String? finishedat,
    String? finishedatNEQ,
    List<String>? finishedatIn,
    List<String>? finishedatNotIn,
    String? finishedatGT,
    String? finishedatGTE,
    String? finishedatLT,
    String? finishedatLTE,
    bool? finishedatIsNil,
    bool? finishedatNotNil,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    bool? hasUser,
    List<Input$UserWhereInput>? hasUserWith,
    bool? hasContent,
    List<Input$ContentWhereInput>? hasContentWith,
    bool? hasEpisode,
    List<Input$ContentEpisodeWhereInput>? hasEpisodeWith,
  }) =>
      Input$ContentProgressWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (userID != null) r'userID': userID,
        if (userIDNEQ != null) r'userIDNEQ': userIDNEQ,
        if (userIDIn != null) r'userIDIn': userIDIn,
        if (userIDNotIn != null) r'userIDNotIn': userIDNotIn,
        if (contentID != null) r'contentID': contentID,
        if (contentIDNEQ != null) r'contentIDNEQ': contentIDNEQ,
        if (contentIDIn != null) r'contentIDIn': contentIDIn,
        if (contentIDNotIn != null) r'contentIDNotIn': contentIDNotIn,
        if (episodeID != null) r'episodeID': episodeID,
        if (episodeIDNEQ != null) r'episodeIDNEQ': episodeIDNEQ,
        if (episodeIDIn != null) r'episodeIDIn': episodeIDIn,
        if (episodeIDNotIn != null) r'episodeIDNotIn': episodeIDNotIn,
        if (contentType != null) r'contentType': contentType,
        if (contentTypeNEQ != null) r'contentTypeNEQ': contentTypeNEQ,
        if (contentTypeIn != null) r'contentTypeIn': contentTypeIn,
        if (contentTypeNotIn != null) r'contentTypeNotIn': contentTypeNotIn,
        if (progress != null) r'progress': progress,
        if (progressNEQ != null) r'progressNEQ': progressNEQ,
        if (progressIn != null) r'progressIn': progressIn,
        if (progressNotIn != null) r'progressNotIn': progressNotIn,
        if (progressGT != null) r'progressGT': progressGT,
        if (progressGTE != null) r'progressGTE': progressGTE,
        if (progressLT != null) r'progressLT': progressLT,
        if (progressLTE != null) r'progressLTE': progressLTE,
        if (finishedat != null) r'finishedat': finishedat,
        if (finishedatNEQ != null) r'finishedatNEQ': finishedatNEQ,
        if (finishedatIn != null) r'finishedatIn': finishedatIn,
        if (finishedatNotIn != null) r'finishedatNotIn': finishedatNotIn,
        if (finishedatGT != null) r'finishedatGT': finishedatGT,
        if (finishedatGTE != null) r'finishedatGTE': finishedatGTE,
        if (finishedatLT != null) r'finishedatLT': finishedatLT,
        if (finishedatLTE != null) r'finishedatLTE': finishedatLTE,
        if (finishedatIsNil != null) r'finishedatIsNil': finishedatIsNil,
        if (finishedatNotNil != null) r'finishedatNotNil': finishedatNotNil,
        if (createdat != null) r'createdat': createdat,
        if (createdatNEQ != null) r'createdatNEQ': createdatNEQ,
        if (createdatIn != null) r'createdatIn': createdatIn,
        if (createdatNotIn != null) r'createdatNotIn': createdatNotIn,
        if (createdatGT != null) r'createdatGT': createdatGT,
        if (createdatGTE != null) r'createdatGTE': createdatGTE,
        if (createdatLT != null) r'createdatLT': createdatLT,
        if (createdatLTE != null) r'createdatLTE': createdatLTE,
        if (updatedat != null) r'updatedat': updatedat,
        if (updatedatNEQ != null) r'updatedatNEQ': updatedatNEQ,
        if (updatedatIn != null) r'updatedatIn': updatedatIn,
        if (updatedatNotIn != null) r'updatedatNotIn': updatedatNotIn,
        if (updatedatGT != null) r'updatedatGT': updatedatGT,
        if (updatedatGTE != null) r'updatedatGTE': updatedatGTE,
        if (updatedatLT != null) r'updatedatLT': updatedatLT,
        if (updatedatLTE != null) r'updatedatLTE': updatedatLTE,
        if (hasUser != null) r'hasUser': hasUser,
        if (hasUserWith != null) r'hasUserWith': hasUserWith,
        if (hasContent != null) r'hasContent': hasContent,
        if (hasContentWith != null) r'hasContentWith': hasContentWith,
        if (hasEpisode != null) r'hasEpisode': hasEpisode,
        if (hasEpisodeWith != null) r'hasEpisodeWith': hasEpisodeWith,
      });

  Input$ContentProgressWhereInput._(this._$data);

  factory Input$ContentProgressWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$ContentProgressWhereInput.fromJson(
              (l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map((e) => Input$ContentProgressWhereInput.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map((e) => Input$ContentProgressWhereInput.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('userID')) {
      final l$userID = data['userID'];
      result$data['userID'] = (l$userID as String?);
    }
    if (data.containsKey('userIDNEQ')) {
      final l$userIDNEQ = data['userIDNEQ'];
      result$data['userIDNEQ'] = (l$userIDNEQ as String?);
    }
    if (data.containsKey('userIDIn')) {
      final l$userIDIn = data['userIDIn'];
      result$data['userIDIn'] =
          (l$userIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('userIDNotIn')) {
      final l$userIDNotIn = data['userIDNotIn'];
      result$data['userIDNotIn'] =
          (l$userIDNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('contentID')) {
      final l$contentID = data['contentID'];
      result$data['contentID'] = (l$contentID as String?);
    }
    if (data.containsKey('contentIDNEQ')) {
      final l$contentIDNEQ = data['contentIDNEQ'];
      result$data['contentIDNEQ'] = (l$contentIDNEQ as String?);
    }
    if (data.containsKey('contentIDIn')) {
      final l$contentIDIn = data['contentIDIn'];
      result$data['contentIDIn'] =
          (l$contentIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('contentIDNotIn')) {
      final l$contentIDNotIn = data['contentIDNotIn'];
      result$data['contentIDNotIn'] = (l$contentIDNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('episodeID')) {
      final l$episodeID = data['episodeID'];
      result$data['episodeID'] = (l$episodeID as String?);
    }
    if (data.containsKey('episodeIDNEQ')) {
      final l$episodeIDNEQ = data['episodeIDNEQ'];
      result$data['episodeIDNEQ'] = (l$episodeIDNEQ as String?);
    }
    if (data.containsKey('episodeIDIn')) {
      final l$episodeIDIn = data['episodeIDIn'];
      result$data['episodeIDIn'] =
          (l$episodeIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('episodeIDNotIn')) {
      final l$episodeIDNotIn = data['episodeIDNotIn'];
      result$data['episodeIDNotIn'] = (l$episodeIDNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('contentType')) {
      final l$contentType = data['contentType'];
      result$data['contentType'] = l$contentType == null
          ? null
          : fromJson$Enum$ContentProgressContentType((l$contentType as String));
    }
    if (data.containsKey('contentTypeNEQ')) {
      final l$contentTypeNEQ = data['contentTypeNEQ'];
      result$data['contentTypeNEQ'] = l$contentTypeNEQ == null
          ? null
          : fromJson$Enum$ContentProgressContentType(
              (l$contentTypeNEQ as String));
    }
    if (data.containsKey('contentTypeIn')) {
      final l$contentTypeIn = data['contentTypeIn'];
      result$data['contentTypeIn'] = (l$contentTypeIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$ContentProgressContentType((e as String)))
          .toList();
    }
    if (data.containsKey('contentTypeNotIn')) {
      final l$contentTypeNotIn = data['contentTypeNotIn'];
      result$data['contentTypeNotIn'] = (l$contentTypeNotIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$ContentProgressContentType((e as String)))
          .toList();
    }
    if (data.containsKey('progress')) {
      final l$progress = data['progress'];
      result$data['progress'] = (l$progress as int?);
    }
    if (data.containsKey('progressNEQ')) {
      final l$progressNEQ = data['progressNEQ'];
      result$data['progressNEQ'] = (l$progressNEQ as int?);
    }
    if (data.containsKey('progressIn')) {
      final l$progressIn = data['progressIn'];
      result$data['progressIn'] =
          (l$progressIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('progressNotIn')) {
      final l$progressNotIn = data['progressNotIn'];
      result$data['progressNotIn'] =
          (l$progressNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('progressGT')) {
      final l$progressGT = data['progressGT'];
      result$data['progressGT'] = (l$progressGT as int?);
    }
    if (data.containsKey('progressGTE')) {
      final l$progressGTE = data['progressGTE'];
      result$data['progressGTE'] = (l$progressGTE as int?);
    }
    if (data.containsKey('progressLT')) {
      final l$progressLT = data['progressLT'];
      result$data['progressLT'] = (l$progressLT as int?);
    }
    if (data.containsKey('progressLTE')) {
      final l$progressLTE = data['progressLTE'];
      result$data['progressLTE'] = (l$progressLTE as int?);
    }
    if (data.containsKey('finishedat')) {
      final l$finishedat = data['finishedat'];
      result$data['finishedat'] = (l$finishedat as String?);
    }
    if (data.containsKey('finishedatNEQ')) {
      final l$finishedatNEQ = data['finishedatNEQ'];
      result$data['finishedatNEQ'] = (l$finishedatNEQ as String?);
    }
    if (data.containsKey('finishedatIn')) {
      final l$finishedatIn = data['finishedatIn'];
      result$data['finishedatIn'] = (l$finishedatIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('finishedatNotIn')) {
      final l$finishedatNotIn = data['finishedatNotIn'];
      result$data['finishedatNotIn'] = (l$finishedatNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('finishedatGT')) {
      final l$finishedatGT = data['finishedatGT'];
      result$data['finishedatGT'] = (l$finishedatGT as String?);
    }
    if (data.containsKey('finishedatGTE')) {
      final l$finishedatGTE = data['finishedatGTE'];
      result$data['finishedatGTE'] = (l$finishedatGTE as String?);
    }
    if (data.containsKey('finishedatLT')) {
      final l$finishedatLT = data['finishedatLT'];
      result$data['finishedatLT'] = (l$finishedatLT as String?);
    }
    if (data.containsKey('finishedatLTE')) {
      final l$finishedatLTE = data['finishedatLTE'];
      result$data['finishedatLTE'] = (l$finishedatLTE as String?);
    }
    if (data.containsKey('finishedatIsNil')) {
      final l$finishedatIsNil = data['finishedatIsNil'];
      result$data['finishedatIsNil'] = (l$finishedatIsNil as bool?);
    }
    if (data.containsKey('finishedatNotNil')) {
      final l$finishedatNotNil = data['finishedatNotNil'];
      result$data['finishedatNotNil'] = (l$finishedatNotNil as bool?);
    }
    if (data.containsKey('createdat')) {
      final l$createdat = data['createdat'];
      result$data['createdat'] = (l$createdat as String?);
    }
    if (data.containsKey('createdatNEQ')) {
      final l$createdatNEQ = data['createdatNEQ'];
      result$data['createdatNEQ'] = (l$createdatNEQ as String?);
    }
    if (data.containsKey('createdatIn')) {
      final l$createdatIn = data['createdatIn'];
      result$data['createdatIn'] =
          (l$createdatIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('createdatNotIn')) {
      final l$createdatNotIn = data['createdatNotIn'];
      result$data['createdatNotIn'] = (l$createdatNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('createdatGT')) {
      final l$createdatGT = data['createdatGT'];
      result$data['createdatGT'] = (l$createdatGT as String?);
    }
    if (data.containsKey('createdatGTE')) {
      final l$createdatGTE = data['createdatGTE'];
      result$data['createdatGTE'] = (l$createdatGTE as String?);
    }
    if (data.containsKey('createdatLT')) {
      final l$createdatLT = data['createdatLT'];
      result$data['createdatLT'] = (l$createdatLT as String?);
    }
    if (data.containsKey('createdatLTE')) {
      final l$createdatLTE = data['createdatLTE'];
      result$data['createdatLTE'] = (l$createdatLTE as String?);
    }
    if (data.containsKey('updatedat')) {
      final l$updatedat = data['updatedat'];
      result$data['updatedat'] = (l$updatedat as String?);
    }
    if (data.containsKey('updatedatNEQ')) {
      final l$updatedatNEQ = data['updatedatNEQ'];
      result$data['updatedatNEQ'] = (l$updatedatNEQ as String?);
    }
    if (data.containsKey('updatedatIn')) {
      final l$updatedatIn = data['updatedatIn'];
      result$data['updatedatIn'] =
          (l$updatedatIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('updatedatNotIn')) {
      final l$updatedatNotIn = data['updatedatNotIn'];
      result$data['updatedatNotIn'] = (l$updatedatNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('updatedatGT')) {
      final l$updatedatGT = data['updatedatGT'];
      result$data['updatedatGT'] = (l$updatedatGT as String?);
    }
    if (data.containsKey('updatedatGTE')) {
      final l$updatedatGTE = data['updatedatGTE'];
      result$data['updatedatGTE'] = (l$updatedatGTE as String?);
    }
    if (data.containsKey('updatedatLT')) {
      final l$updatedatLT = data['updatedatLT'];
      result$data['updatedatLT'] = (l$updatedatLT as String?);
    }
    if (data.containsKey('updatedatLTE')) {
      final l$updatedatLTE = data['updatedatLTE'];
      result$data['updatedatLTE'] = (l$updatedatLTE as String?);
    }
    if (data.containsKey('hasUser')) {
      final l$hasUser = data['hasUser'];
      result$data['hasUser'] = (l$hasUser as bool?);
    }
    if (data.containsKey('hasUserWith')) {
      final l$hasUserWith = data['hasUserWith'];
      result$data['hasUserWith'] = (l$hasUserWith as List<dynamic>?)
          ?.map(
              (e) => Input$UserWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('hasContent')) {
      final l$hasContent = data['hasContent'];
      result$data['hasContent'] = (l$hasContent as bool?);
    }
    if (data.containsKey('hasContentWith')) {
      final l$hasContentWith = data['hasContentWith'];
      result$data['hasContentWith'] = (l$hasContentWith as List<dynamic>?)
          ?.map((e) =>
              Input$ContentWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('hasEpisode')) {
      final l$hasEpisode = data['hasEpisode'];
      result$data['hasEpisode'] = (l$hasEpisode as bool?);
    }
    if (data.containsKey('hasEpisodeWith')) {
      final l$hasEpisodeWith = data['hasEpisodeWith'];
      result$data['hasEpisodeWith'] = (l$hasEpisodeWith as List<dynamic>?)
          ?.map((e) => Input$ContentEpisodeWhereInput.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    return Input$ContentProgressWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentProgressWhereInput? get not =>
      (_$data['not'] as Input$ContentProgressWhereInput?);

  List<Input$ContentProgressWhereInput>? get and =>
      (_$data['and'] as List<Input$ContentProgressWhereInput>?);

  List<Input$ContentProgressWhereInput>? get or =>
      (_$data['or'] as List<Input$ContentProgressWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  String? get userID => (_$data['userID'] as String?);

  String? get userIDNEQ => (_$data['userIDNEQ'] as String?);

  List<String>? get userIDIn => (_$data['userIDIn'] as List<String>?);

  List<String>? get userIDNotIn => (_$data['userIDNotIn'] as List<String>?);

  String? get contentID => (_$data['contentID'] as String?);

  String? get contentIDNEQ => (_$data['contentIDNEQ'] as String?);

  List<String>? get contentIDIn => (_$data['contentIDIn'] as List<String>?);

  List<String>? get contentIDNotIn =>
      (_$data['contentIDNotIn'] as List<String>?);

  String? get episodeID => (_$data['episodeID'] as String?);

  String? get episodeIDNEQ => (_$data['episodeIDNEQ'] as String?);

  List<String>? get episodeIDIn => (_$data['episodeIDIn'] as List<String>?);

  List<String>? get episodeIDNotIn =>
      (_$data['episodeIDNotIn'] as List<String>?);

  Enum$ContentProgressContentType? get contentType =>
      (_$data['contentType'] as Enum$ContentProgressContentType?);

  Enum$ContentProgressContentType? get contentTypeNEQ =>
      (_$data['contentTypeNEQ'] as Enum$ContentProgressContentType?);

  List<Enum$ContentProgressContentType>? get contentTypeIn =>
      (_$data['contentTypeIn'] as List<Enum$ContentProgressContentType>?);

  List<Enum$ContentProgressContentType>? get contentTypeNotIn =>
      (_$data['contentTypeNotIn'] as List<Enum$ContentProgressContentType>?);

  int? get progress => (_$data['progress'] as int?);

  int? get progressNEQ => (_$data['progressNEQ'] as int?);

  List<int>? get progressIn => (_$data['progressIn'] as List<int>?);

  List<int>? get progressNotIn => (_$data['progressNotIn'] as List<int>?);

  int? get progressGT => (_$data['progressGT'] as int?);

  int? get progressGTE => (_$data['progressGTE'] as int?);

  int? get progressLT => (_$data['progressLT'] as int?);

  int? get progressLTE => (_$data['progressLTE'] as int?);

  String? get finishedat => (_$data['finishedat'] as String?);

  String? get finishedatNEQ => (_$data['finishedatNEQ'] as String?);

  List<String>? get finishedatIn => (_$data['finishedatIn'] as List<String>?);

  List<String>? get finishedatNotIn =>
      (_$data['finishedatNotIn'] as List<String>?);

  String? get finishedatGT => (_$data['finishedatGT'] as String?);

  String? get finishedatGTE => (_$data['finishedatGTE'] as String?);

  String? get finishedatLT => (_$data['finishedatLT'] as String?);

  String? get finishedatLTE => (_$data['finishedatLTE'] as String?);

  bool? get finishedatIsNil => (_$data['finishedatIsNil'] as bool?);

  bool? get finishedatNotNil => (_$data['finishedatNotNil'] as bool?);

  String? get createdat => (_$data['createdat'] as String?);

  String? get createdatNEQ => (_$data['createdatNEQ'] as String?);

  List<String>? get createdatIn => (_$data['createdatIn'] as List<String>?);

  List<String>? get createdatNotIn =>
      (_$data['createdatNotIn'] as List<String>?);

  String? get createdatGT => (_$data['createdatGT'] as String?);

  String? get createdatGTE => (_$data['createdatGTE'] as String?);

  String? get createdatLT => (_$data['createdatLT'] as String?);

  String? get createdatLTE => (_$data['createdatLTE'] as String?);

  String? get updatedat => (_$data['updatedat'] as String?);

  String? get updatedatNEQ => (_$data['updatedatNEQ'] as String?);

  List<String>? get updatedatIn => (_$data['updatedatIn'] as List<String>?);

  List<String>? get updatedatNotIn =>
      (_$data['updatedatNotIn'] as List<String>?);

  String? get updatedatGT => (_$data['updatedatGT'] as String?);

  String? get updatedatGTE => (_$data['updatedatGTE'] as String?);

  String? get updatedatLT => (_$data['updatedatLT'] as String?);

  String? get updatedatLTE => (_$data['updatedatLTE'] as String?);

  bool? get hasUser => (_$data['hasUser'] as bool?);

  List<Input$UserWhereInput>? get hasUserWith =>
      (_$data['hasUserWith'] as List<Input$UserWhereInput>?);

  bool? get hasContent => (_$data['hasContent'] as bool?);

  List<Input$ContentWhereInput>? get hasContentWith =>
      (_$data['hasContentWith'] as List<Input$ContentWhereInput>?);

  bool? get hasEpisode => (_$data['hasEpisode'] as bool?);

  List<Input$ContentEpisodeWhereInput>? get hasEpisodeWith =>
      (_$data['hasEpisodeWith'] as List<Input$ContentEpisodeWhereInput>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('userID')) {
      final l$userID = userID;
      result$data['userID'] = l$userID;
    }
    if (_$data.containsKey('userIDNEQ')) {
      final l$userIDNEQ = userIDNEQ;
      result$data['userIDNEQ'] = l$userIDNEQ;
    }
    if (_$data.containsKey('userIDIn')) {
      final l$userIDIn = userIDIn;
      result$data['userIDIn'] = l$userIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('userIDNotIn')) {
      final l$userIDNotIn = userIDNotIn;
      result$data['userIDNotIn'] = l$userIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('contentID')) {
      final l$contentID = contentID;
      result$data['contentID'] = l$contentID;
    }
    if (_$data.containsKey('contentIDNEQ')) {
      final l$contentIDNEQ = contentIDNEQ;
      result$data['contentIDNEQ'] = l$contentIDNEQ;
    }
    if (_$data.containsKey('contentIDIn')) {
      final l$contentIDIn = contentIDIn;
      result$data['contentIDIn'] = l$contentIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('contentIDNotIn')) {
      final l$contentIDNotIn = contentIDNotIn;
      result$data['contentIDNotIn'] = l$contentIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('episodeID')) {
      final l$episodeID = episodeID;
      result$data['episodeID'] = l$episodeID;
    }
    if (_$data.containsKey('episodeIDNEQ')) {
      final l$episodeIDNEQ = episodeIDNEQ;
      result$data['episodeIDNEQ'] = l$episodeIDNEQ;
    }
    if (_$data.containsKey('episodeIDIn')) {
      final l$episodeIDIn = episodeIDIn;
      result$data['episodeIDIn'] = l$episodeIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('episodeIDNotIn')) {
      final l$episodeIDNotIn = episodeIDNotIn;
      result$data['episodeIDNotIn'] = l$episodeIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('contentType')) {
      final l$contentType = contentType;
      result$data['contentType'] = l$contentType == null
          ? null
          : toJson$Enum$ContentProgressContentType(l$contentType);
    }
    if (_$data.containsKey('contentTypeNEQ')) {
      final l$contentTypeNEQ = contentTypeNEQ;
      result$data['contentTypeNEQ'] = l$contentTypeNEQ == null
          ? null
          : toJson$Enum$ContentProgressContentType(l$contentTypeNEQ);
    }
    if (_$data.containsKey('contentTypeIn')) {
      final l$contentTypeIn = contentTypeIn;
      result$data['contentTypeIn'] = l$contentTypeIn
          ?.map((e) => toJson$Enum$ContentProgressContentType(e))
          .toList();
    }
    if (_$data.containsKey('contentTypeNotIn')) {
      final l$contentTypeNotIn = contentTypeNotIn;
      result$data['contentTypeNotIn'] = l$contentTypeNotIn
          ?.map((e) => toJson$Enum$ContentProgressContentType(e))
          .toList();
    }
    if (_$data.containsKey('progress')) {
      final l$progress = progress;
      result$data['progress'] = l$progress;
    }
    if (_$data.containsKey('progressNEQ')) {
      final l$progressNEQ = progressNEQ;
      result$data['progressNEQ'] = l$progressNEQ;
    }
    if (_$data.containsKey('progressIn')) {
      final l$progressIn = progressIn;
      result$data['progressIn'] = l$progressIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('progressNotIn')) {
      final l$progressNotIn = progressNotIn;
      result$data['progressNotIn'] = l$progressNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('progressGT')) {
      final l$progressGT = progressGT;
      result$data['progressGT'] = l$progressGT;
    }
    if (_$data.containsKey('progressGTE')) {
      final l$progressGTE = progressGTE;
      result$data['progressGTE'] = l$progressGTE;
    }
    if (_$data.containsKey('progressLT')) {
      final l$progressLT = progressLT;
      result$data['progressLT'] = l$progressLT;
    }
    if (_$data.containsKey('progressLTE')) {
      final l$progressLTE = progressLTE;
      result$data['progressLTE'] = l$progressLTE;
    }
    if (_$data.containsKey('finishedat')) {
      final l$finishedat = finishedat;
      result$data['finishedat'] = l$finishedat;
    }
    if (_$data.containsKey('finishedatNEQ')) {
      final l$finishedatNEQ = finishedatNEQ;
      result$data['finishedatNEQ'] = l$finishedatNEQ;
    }
    if (_$data.containsKey('finishedatIn')) {
      final l$finishedatIn = finishedatIn;
      result$data['finishedatIn'] = l$finishedatIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('finishedatNotIn')) {
      final l$finishedatNotIn = finishedatNotIn;
      result$data['finishedatNotIn'] =
          l$finishedatNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('finishedatGT')) {
      final l$finishedatGT = finishedatGT;
      result$data['finishedatGT'] = l$finishedatGT;
    }
    if (_$data.containsKey('finishedatGTE')) {
      final l$finishedatGTE = finishedatGTE;
      result$data['finishedatGTE'] = l$finishedatGTE;
    }
    if (_$data.containsKey('finishedatLT')) {
      final l$finishedatLT = finishedatLT;
      result$data['finishedatLT'] = l$finishedatLT;
    }
    if (_$data.containsKey('finishedatLTE')) {
      final l$finishedatLTE = finishedatLTE;
      result$data['finishedatLTE'] = l$finishedatLTE;
    }
    if (_$data.containsKey('finishedatIsNil')) {
      final l$finishedatIsNil = finishedatIsNil;
      result$data['finishedatIsNil'] = l$finishedatIsNil;
    }
    if (_$data.containsKey('finishedatNotNil')) {
      final l$finishedatNotNil = finishedatNotNil;
      result$data['finishedatNotNil'] = l$finishedatNotNil;
    }
    if (_$data.containsKey('createdat')) {
      final l$createdat = createdat;
      result$data['createdat'] = l$createdat;
    }
    if (_$data.containsKey('createdatNEQ')) {
      final l$createdatNEQ = createdatNEQ;
      result$data['createdatNEQ'] = l$createdatNEQ;
    }
    if (_$data.containsKey('createdatIn')) {
      final l$createdatIn = createdatIn;
      result$data['createdatIn'] = l$createdatIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('createdatNotIn')) {
      final l$createdatNotIn = createdatNotIn;
      result$data['createdatNotIn'] = l$createdatNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('createdatGT')) {
      final l$createdatGT = createdatGT;
      result$data['createdatGT'] = l$createdatGT;
    }
    if (_$data.containsKey('createdatGTE')) {
      final l$createdatGTE = createdatGTE;
      result$data['createdatGTE'] = l$createdatGTE;
    }
    if (_$data.containsKey('createdatLT')) {
      final l$createdatLT = createdatLT;
      result$data['createdatLT'] = l$createdatLT;
    }
    if (_$data.containsKey('createdatLTE')) {
      final l$createdatLTE = createdatLTE;
      result$data['createdatLTE'] = l$createdatLTE;
    }
    if (_$data.containsKey('updatedat')) {
      final l$updatedat = updatedat;
      result$data['updatedat'] = l$updatedat;
    }
    if (_$data.containsKey('updatedatNEQ')) {
      final l$updatedatNEQ = updatedatNEQ;
      result$data['updatedatNEQ'] = l$updatedatNEQ;
    }
    if (_$data.containsKey('updatedatIn')) {
      final l$updatedatIn = updatedatIn;
      result$data['updatedatIn'] = l$updatedatIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('updatedatNotIn')) {
      final l$updatedatNotIn = updatedatNotIn;
      result$data['updatedatNotIn'] = l$updatedatNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('updatedatGT')) {
      final l$updatedatGT = updatedatGT;
      result$data['updatedatGT'] = l$updatedatGT;
    }
    if (_$data.containsKey('updatedatGTE')) {
      final l$updatedatGTE = updatedatGTE;
      result$data['updatedatGTE'] = l$updatedatGTE;
    }
    if (_$data.containsKey('updatedatLT')) {
      final l$updatedatLT = updatedatLT;
      result$data['updatedatLT'] = l$updatedatLT;
    }
    if (_$data.containsKey('updatedatLTE')) {
      final l$updatedatLTE = updatedatLTE;
      result$data['updatedatLTE'] = l$updatedatLTE;
    }
    if (_$data.containsKey('hasUser')) {
      final l$hasUser = hasUser;
      result$data['hasUser'] = l$hasUser;
    }
    if (_$data.containsKey('hasUserWith')) {
      final l$hasUserWith = hasUserWith;
      result$data['hasUserWith'] =
          l$hasUserWith?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('hasContent')) {
      final l$hasContent = hasContent;
      result$data['hasContent'] = l$hasContent;
    }
    if (_$data.containsKey('hasContentWith')) {
      final l$hasContentWith = hasContentWith;
      result$data['hasContentWith'] =
          l$hasContentWith?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('hasEpisode')) {
      final l$hasEpisode = hasEpisode;
      result$data['hasEpisode'] = l$hasEpisode;
    }
    if (_$data.containsKey('hasEpisodeWith')) {
      final l$hasEpisodeWith = hasEpisodeWith;
      result$data['hasEpisodeWith'] =
          l$hasEpisodeWith?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$ContentProgressWhereInput<Input$ContentProgressWhereInput>
      get copyWith => CopyWith$Input$ContentProgressWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$ContentProgressWhereInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$userID = userID;
    final lOther$userID = other.userID;
    if (_$data.containsKey('userID') != other._$data.containsKey('userID')) {
      return false;
    }
    if (l$userID != lOther$userID) {
      return false;
    }
    final l$userIDNEQ = userIDNEQ;
    final lOther$userIDNEQ = other.userIDNEQ;
    if (_$data.containsKey('userIDNEQ') !=
        other._$data.containsKey('userIDNEQ')) {
      return false;
    }
    if (l$userIDNEQ != lOther$userIDNEQ) {
      return false;
    }
    final l$userIDIn = userIDIn;
    final lOther$userIDIn = other.userIDIn;
    if (_$data.containsKey('userIDIn') !=
        other._$data.containsKey('userIDIn')) {
      return false;
    }
    if (l$userIDIn != null && lOther$userIDIn != null) {
      if (l$userIDIn.length != lOther$userIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$userIDIn.length; i++) {
        final l$userIDIn$entry = l$userIDIn[i];
        final lOther$userIDIn$entry = lOther$userIDIn[i];
        if (l$userIDIn$entry != lOther$userIDIn$entry) {
          return false;
        }
      }
    } else if (l$userIDIn != lOther$userIDIn) {
      return false;
    }
    final l$userIDNotIn = userIDNotIn;
    final lOther$userIDNotIn = other.userIDNotIn;
    if (_$data.containsKey('userIDNotIn') !=
        other._$data.containsKey('userIDNotIn')) {
      return false;
    }
    if (l$userIDNotIn != null && lOther$userIDNotIn != null) {
      if (l$userIDNotIn.length != lOther$userIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$userIDNotIn.length; i++) {
        final l$userIDNotIn$entry = l$userIDNotIn[i];
        final lOther$userIDNotIn$entry = lOther$userIDNotIn[i];
        if (l$userIDNotIn$entry != lOther$userIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$userIDNotIn != lOther$userIDNotIn) {
      return false;
    }
    final l$contentID = contentID;
    final lOther$contentID = other.contentID;
    if (_$data.containsKey('contentID') !=
        other._$data.containsKey('contentID')) {
      return false;
    }
    if (l$contentID != lOther$contentID) {
      return false;
    }
    final l$contentIDNEQ = contentIDNEQ;
    final lOther$contentIDNEQ = other.contentIDNEQ;
    if (_$data.containsKey('contentIDNEQ') !=
        other._$data.containsKey('contentIDNEQ')) {
      return false;
    }
    if (l$contentIDNEQ != lOther$contentIDNEQ) {
      return false;
    }
    final l$contentIDIn = contentIDIn;
    final lOther$contentIDIn = other.contentIDIn;
    if (_$data.containsKey('contentIDIn') !=
        other._$data.containsKey('contentIDIn')) {
      return false;
    }
    if (l$contentIDIn != null && lOther$contentIDIn != null) {
      if (l$contentIDIn.length != lOther$contentIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$contentIDIn.length; i++) {
        final l$contentIDIn$entry = l$contentIDIn[i];
        final lOther$contentIDIn$entry = lOther$contentIDIn[i];
        if (l$contentIDIn$entry != lOther$contentIDIn$entry) {
          return false;
        }
      }
    } else if (l$contentIDIn != lOther$contentIDIn) {
      return false;
    }
    final l$contentIDNotIn = contentIDNotIn;
    final lOther$contentIDNotIn = other.contentIDNotIn;
    if (_$data.containsKey('contentIDNotIn') !=
        other._$data.containsKey('contentIDNotIn')) {
      return false;
    }
    if (l$contentIDNotIn != null && lOther$contentIDNotIn != null) {
      if (l$contentIDNotIn.length != lOther$contentIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$contentIDNotIn.length; i++) {
        final l$contentIDNotIn$entry = l$contentIDNotIn[i];
        final lOther$contentIDNotIn$entry = lOther$contentIDNotIn[i];
        if (l$contentIDNotIn$entry != lOther$contentIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$contentIDNotIn != lOther$contentIDNotIn) {
      return false;
    }
    final l$episodeID = episodeID;
    final lOther$episodeID = other.episodeID;
    if (_$data.containsKey('episodeID') !=
        other._$data.containsKey('episodeID')) {
      return false;
    }
    if (l$episodeID != lOther$episodeID) {
      return false;
    }
    final l$episodeIDNEQ = episodeIDNEQ;
    final lOther$episodeIDNEQ = other.episodeIDNEQ;
    if (_$data.containsKey('episodeIDNEQ') !=
        other._$data.containsKey('episodeIDNEQ')) {
      return false;
    }
    if (l$episodeIDNEQ != lOther$episodeIDNEQ) {
      return false;
    }
    final l$episodeIDIn = episodeIDIn;
    final lOther$episodeIDIn = other.episodeIDIn;
    if (_$data.containsKey('episodeIDIn') !=
        other._$data.containsKey('episodeIDIn')) {
      return false;
    }
    if (l$episodeIDIn != null && lOther$episodeIDIn != null) {
      if (l$episodeIDIn.length != lOther$episodeIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$episodeIDIn.length; i++) {
        final l$episodeIDIn$entry = l$episodeIDIn[i];
        final lOther$episodeIDIn$entry = lOther$episodeIDIn[i];
        if (l$episodeIDIn$entry != lOther$episodeIDIn$entry) {
          return false;
        }
      }
    } else if (l$episodeIDIn != lOther$episodeIDIn) {
      return false;
    }
    final l$episodeIDNotIn = episodeIDNotIn;
    final lOther$episodeIDNotIn = other.episodeIDNotIn;
    if (_$data.containsKey('episodeIDNotIn') !=
        other._$data.containsKey('episodeIDNotIn')) {
      return false;
    }
    if (l$episodeIDNotIn != null && lOther$episodeIDNotIn != null) {
      if (l$episodeIDNotIn.length != lOther$episodeIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$episodeIDNotIn.length; i++) {
        final l$episodeIDNotIn$entry = l$episodeIDNotIn[i];
        final lOther$episodeIDNotIn$entry = lOther$episodeIDNotIn[i];
        if (l$episodeIDNotIn$entry != lOther$episodeIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$episodeIDNotIn != lOther$episodeIDNotIn) {
      return false;
    }
    final l$contentType = contentType;
    final lOther$contentType = other.contentType;
    if (_$data.containsKey('contentType') !=
        other._$data.containsKey('contentType')) {
      return false;
    }
    if (l$contentType != lOther$contentType) {
      return false;
    }
    final l$contentTypeNEQ = contentTypeNEQ;
    final lOther$contentTypeNEQ = other.contentTypeNEQ;
    if (_$data.containsKey('contentTypeNEQ') !=
        other._$data.containsKey('contentTypeNEQ')) {
      return false;
    }
    if (l$contentTypeNEQ != lOther$contentTypeNEQ) {
      return false;
    }
    final l$contentTypeIn = contentTypeIn;
    final lOther$contentTypeIn = other.contentTypeIn;
    if (_$data.containsKey('contentTypeIn') !=
        other._$data.containsKey('contentTypeIn')) {
      return false;
    }
    if (l$contentTypeIn != null && lOther$contentTypeIn != null) {
      if (l$contentTypeIn.length != lOther$contentTypeIn.length) {
        return false;
      }
      for (int i = 0; i < l$contentTypeIn.length; i++) {
        final l$contentTypeIn$entry = l$contentTypeIn[i];
        final lOther$contentTypeIn$entry = lOther$contentTypeIn[i];
        if (l$contentTypeIn$entry != lOther$contentTypeIn$entry) {
          return false;
        }
      }
    } else if (l$contentTypeIn != lOther$contentTypeIn) {
      return false;
    }
    final l$contentTypeNotIn = contentTypeNotIn;
    final lOther$contentTypeNotIn = other.contentTypeNotIn;
    if (_$data.containsKey('contentTypeNotIn') !=
        other._$data.containsKey('contentTypeNotIn')) {
      return false;
    }
    if (l$contentTypeNotIn != null && lOther$contentTypeNotIn != null) {
      if (l$contentTypeNotIn.length != lOther$contentTypeNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$contentTypeNotIn.length; i++) {
        final l$contentTypeNotIn$entry = l$contentTypeNotIn[i];
        final lOther$contentTypeNotIn$entry = lOther$contentTypeNotIn[i];
        if (l$contentTypeNotIn$entry != lOther$contentTypeNotIn$entry) {
          return false;
        }
      }
    } else if (l$contentTypeNotIn != lOther$contentTypeNotIn) {
      return false;
    }
    final l$progress = progress;
    final lOther$progress = other.progress;
    if (_$data.containsKey('progress') !=
        other._$data.containsKey('progress')) {
      return false;
    }
    if (l$progress != lOther$progress) {
      return false;
    }
    final l$progressNEQ = progressNEQ;
    final lOther$progressNEQ = other.progressNEQ;
    if (_$data.containsKey('progressNEQ') !=
        other._$data.containsKey('progressNEQ')) {
      return false;
    }
    if (l$progressNEQ != lOther$progressNEQ) {
      return false;
    }
    final l$progressIn = progressIn;
    final lOther$progressIn = other.progressIn;
    if (_$data.containsKey('progressIn') !=
        other._$data.containsKey('progressIn')) {
      return false;
    }
    if (l$progressIn != null && lOther$progressIn != null) {
      if (l$progressIn.length != lOther$progressIn.length) {
        return false;
      }
      for (int i = 0; i < l$progressIn.length; i++) {
        final l$progressIn$entry = l$progressIn[i];
        final lOther$progressIn$entry = lOther$progressIn[i];
        if (l$progressIn$entry != lOther$progressIn$entry) {
          return false;
        }
      }
    } else if (l$progressIn != lOther$progressIn) {
      return false;
    }
    final l$progressNotIn = progressNotIn;
    final lOther$progressNotIn = other.progressNotIn;
    if (_$data.containsKey('progressNotIn') !=
        other._$data.containsKey('progressNotIn')) {
      return false;
    }
    if (l$progressNotIn != null && lOther$progressNotIn != null) {
      if (l$progressNotIn.length != lOther$progressNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$progressNotIn.length; i++) {
        final l$progressNotIn$entry = l$progressNotIn[i];
        final lOther$progressNotIn$entry = lOther$progressNotIn[i];
        if (l$progressNotIn$entry != lOther$progressNotIn$entry) {
          return false;
        }
      }
    } else if (l$progressNotIn != lOther$progressNotIn) {
      return false;
    }
    final l$progressGT = progressGT;
    final lOther$progressGT = other.progressGT;
    if (_$data.containsKey('progressGT') !=
        other._$data.containsKey('progressGT')) {
      return false;
    }
    if (l$progressGT != lOther$progressGT) {
      return false;
    }
    final l$progressGTE = progressGTE;
    final lOther$progressGTE = other.progressGTE;
    if (_$data.containsKey('progressGTE') !=
        other._$data.containsKey('progressGTE')) {
      return false;
    }
    if (l$progressGTE != lOther$progressGTE) {
      return false;
    }
    final l$progressLT = progressLT;
    final lOther$progressLT = other.progressLT;
    if (_$data.containsKey('progressLT') !=
        other._$data.containsKey('progressLT')) {
      return false;
    }
    if (l$progressLT != lOther$progressLT) {
      return false;
    }
    final l$progressLTE = progressLTE;
    final lOther$progressLTE = other.progressLTE;
    if (_$data.containsKey('progressLTE') !=
        other._$data.containsKey('progressLTE')) {
      return false;
    }
    if (l$progressLTE != lOther$progressLTE) {
      return false;
    }
    final l$finishedat = finishedat;
    final lOther$finishedat = other.finishedat;
    if (_$data.containsKey('finishedat') !=
        other._$data.containsKey('finishedat')) {
      return false;
    }
    if (l$finishedat != lOther$finishedat) {
      return false;
    }
    final l$finishedatNEQ = finishedatNEQ;
    final lOther$finishedatNEQ = other.finishedatNEQ;
    if (_$data.containsKey('finishedatNEQ') !=
        other._$data.containsKey('finishedatNEQ')) {
      return false;
    }
    if (l$finishedatNEQ != lOther$finishedatNEQ) {
      return false;
    }
    final l$finishedatIn = finishedatIn;
    final lOther$finishedatIn = other.finishedatIn;
    if (_$data.containsKey('finishedatIn') !=
        other._$data.containsKey('finishedatIn')) {
      return false;
    }
    if (l$finishedatIn != null && lOther$finishedatIn != null) {
      if (l$finishedatIn.length != lOther$finishedatIn.length) {
        return false;
      }
      for (int i = 0; i < l$finishedatIn.length; i++) {
        final l$finishedatIn$entry = l$finishedatIn[i];
        final lOther$finishedatIn$entry = lOther$finishedatIn[i];
        if (l$finishedatIn$entry != lOther$finishedatIn$entry) {
          return false;
        }
      }
    } else if (l$finishedatIn != lOther$finishedatIn) {
      return false;
    }
    final l$finishedatNotIn = finishedatNotIn;
    final lOther$finishedatNotIn = other.finishedatNotIn;
    if (_$data.containsKey('finishedatNotIn') !=
        other._$data.containsKey('finishedatNotIn')) {
      return false;
    }
    if (l$finishedatNotIn != null && lOther$finishedatNotIn != null) {
      if (l$finishedatNotIn.length != lOther$finishedatNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$finishedatNotIn.length; i++) {
        final l$finishedatNotIn$entry = l$finishedatNotIn[i];
        final lOther$finishedatNotIn$entry = lOther$finishedatNotIn[i];
        if (l$finishedatNotIn$entry != lOther$finishedatNotIn$entry) {
          return false;
        }
      }
    } else if (l$finishedatNotIn != lOther$finishedatNotIn) {
      return false;
    }
    final l$finishedatGT = finishedatGT;
    final lOther$finishedatGT = other.finishedatGT;
    if (_$data.containsKey('finishedatGT') !=
        other._$data.containsKey('finishedatGT')) {
      return false;
    }
    if (l$finishedatGT != lOther$finishedatGT) {
      return false;
    }
    final l$finishedatGTE = finishedatGTE;
    final lOther$finishedatGTE = other.finishedatGTE;
    if (_$data.containsKey('finishedatGTE') !=
        other._$data.containsKey('finishedatGTE')) {
      return false;
    }
    if (l$finishedatGTE != lOther$finishedatGTE) {
      return false;
    }
    final l$finishedatLT = finishedatLT;
    final lOther$finishedatLT = other.finishedatLT;
    if (_$data.containsKey('finishedatLT') !=
        other._$data.containsKey('finishedatLT')) {
      return false;
    }
    if (l$finishedatLT != lOther$finishedatLT) {
      return false;
    }
    final l$finishedatLTE = finishedatLTE;
    final lOther$finishedatLTE = other.finishedatLTE;
    if (_$data.containsKey('finishedatLTE') !=
        other._$data.containsKey('finishedatLTE')) {
      return false;
    }
    if (l$finishedatLTE != lOther$finishedatLTE) {
      return false;
    }
    final l$finishedatIsNil = finishedatIsNil;
    final lOther$finishedatIsNil = other.finishedatIsNil;
    if (_$data.containsKey('finishedatIsNil') !=
        other._$data.containsKey('finishedatIsNil')) {
      return false;
    }
    if (l$finishedatIsNil != lOther$finishedatIsNil) {
      return false;
    }
    final l$finishedatNotNil = finishedatNotNil;
    final lOther$finishedatNotNil = other.finishedatNotNil;
    if (_$data.containsKey('finishedatNotNil') !=
        other._$data.containsKey('finishedatNotNil')) {
      return false;
    }
    if (l$finishedatNotNil != lOther$finishedatNotNil) {
      return false;
    }
    final l$createdat = createdat;
    final lOther$createdat = other.createdat;
    if (_$data.containsKey('createdat') !=
        other._$data.containsKey('createdat')) {
      return false;
    }
    if (l$createdat != lOther$createdat) {
      return false;
    }
    final l$createdatNEQ = createdatNEQ;
    final lOther$createdatNEQ = other.createdatNEQ;
    if (_$data.containsKey('createdatNEQ') !=
        other._$data.containsKey('createdatNEQ')) {
      return false;
    }
    if (l$createdatNEQ != lOther$createdatNEQ) {
      return false;
    }
    final l$createdatIn = createdatIn;
    final lOther$createdatIn = other.createdatIn;
    if (_$data.containsKey('createdatIn') !=
        other._$data.containsKey('createdatIn')) {
      return false;
    }
    if (l$createdatIn != null && lOther$createdatIn != null) {
      if (l$createdatIn.length != lOther$createdatIn.length) {
        return false;
      }
      for (int i = 0; i < l$createdatIn.length; i++) {
        final l$createdatIn$entry = l$createdatIn[i];
        final lOther$createdatIn$entry = lOther$createdatIn[i];
        if (l$createdatIn$entry != lOther$createdatIn$entry) {
          return false;
        }
      }
    } else if (l$createdatIn != lOther$createdatIn) {
      return false;
    }
    final l$createdatNotIn = createdatNotIn;
    final lOther$createdatNotIn = other.createdatNotIn;
    if (_$data.containsKey('createdatNotIn') !=
        other._$data.containsKey('createdatNotIn')) {
      return false;
    }
    if (l$createdatNotIn != null && lOther$createdatNotIn != null) {
      if (l$createdatNotIn.length != lOther$createdatNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$createdatNotIn.length; i++) {
        final l$createdatNotIn$entry = l$createdatNotIn[i];
        final lOther$createdatNotIn$entry = lOther$createdatNotIn[i];
        if (l$createdatNotIn$entry != lOther$createdatNotIn$entry) {
          return false;
        }
      }
    } else if (l$createdatNotIn != lOther$createdatNotIn) {
      return false;
    }
    final l$createdatGT = createdatGT;
    final lOther$createdatGT = other.createdatGT;
    if (_$data.containsKey('createdatGT') !=
        other._$data.containsKey('createdatGT')) {
      return false;
    }
    if (l$createdatGT != lOther$createdatGT) {
      return false;
    }
    final l$createdatGTE = createdatGTE;
    final lOther$createdatGTE = other.createdatGTE;
    if (_$data.containsKey('createdatGTE') !=
        other._$data.containsKey('createdatGTE')) {
      return false;
    }
    if (l$createdatGTE != lOther$createdatGTE) {
      return false;
    }
    final l$createdatLT = createdatLT;
    final lOther$createdatLT = other.createdatLT;
    if (_$data.containsKey('createdatLT') !=
        other._$data.containsKey('createdatLT')) {
      return false;
    }
    if (l$createdatLT != lOther$createdatLT) {
      return false;
    }
    final l$createdatLTE = createdatLTE;
    final lOther$createdatLTE = other.createdatLTE;
    if (_$data.containsKey('createdatLTE') !=
        other._$data.containsKey('createdatLTE')) {
      return false;
    }
    if (l$createdatLTE != lOther$createdatLTE) {
      return false;
    }
    final l$updatedat = updatedat;
    final lOther$updatedat = other.updatedat;
    if (_$data.containsKey('updatedat') !=
        other._$data.containsKey('updatedat')) {
      return false;
    }
    if (l$updatedat != lOther$updatedat) {
      return false;
    }
    final l$updatedatNEQ = updatedatNEQ;
    final lOther$updatedatNEQ = other.updatedatNEQ;
    if (_$data.containsKey('updatedatNEQ') !=
        other._$data.containsKey('updatedatNEQ')) {
      return false;
    }
    if (l$updatedatNEQ != lOther$updatedatNEQ) {
      return false;
    }
    final l$updatedatIn = updatedatIn;
    final lOther$updatedatIn = other.updatedatIn;
    if (_$data.containsKey('updatedatIn') !=
        other._$data.containsKey('updatedatIn')) {
      return false;
    }
    if (l$updatedatIn != null && lOther$updatedatIn != null) {
      if (l$updatedatIn.length != lOther$updatedatIn.length) {
        return false;
      }
      for (int i = 0; i < l$updatedatIn.length; i++) {
        final l$updatedatIn$entry = l$updatedatIn[i];
        final lOther$updatedatIn$entry = lOther$updatedatIn[i];
        if (l$updatedatIn$entry != lOther$updatedatIn$entry) {
          return false;
        }
      }
    } else if (l$updatedatIn != lOther$updatedatIn) {
      return false;
    }
    final l$updatedatNotIn = updatedatNotIn;
    final lOther$updatedatNotIn = other.updatedatNotIn;
    if (_$data.containsKey('updatedatNotIn') !=
        other._$data.containsKey('updatedatNotIn')) {
      return false;
    }
    if (l$updatedatNotIn != null && lOther$updatedatNotIn != null) {
      if (l$updatedatNotIn.length != lOther$updatedatNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$updatedatNotIn.length; i++) {
        final l$updatedatNotIn$entry = l$updatedatNotIn[i];
        final lOther$updatedatNotIn$entry = lOther$updatedatNotIn[i];
        if (l$updatedatNotIn$entry != lOther$updatedatNotIn$entry) {
          return false;
        }
      }
    } else if (l$updatedatNotIn != lOther$updatedatNotIn) {
      return false;
    }
    final l$updatedatGT = updatedatGT;
    final lOther$updatedatGT = other.updatedatGT;
    if (_$data.containsKey('updatedatGT') !=
        other._$data.containsKey('updatedatGT')) {
      return false;
    }
    if (l$updatedatGT != lOther$updatedatGT) {
      return false;
    }
    final l$updatedatGTE = updatedatGTE;
    final lOther$updatedatGTE = other.updatedatGTE;
    if (_$data.containsKey('updatedatGTE') !=
        other._$data.containsKey('updatedatGTE')) {
      return false;
    }
    if (l$updatedatGTE != lOther$updatedatGTE) {
      return false;
    }
    final l$updatedatLT = updatedatLT;
    final lOther$updatedatLT = other.updatedatLT;
    if (_$data.containsKey('updatedatLT') !=
        other._$data.containsKey('updatedatLT')) {
      return false;
    }
    if (l$updatedatLT != lOther$updatedatLT) {
      return false;
    }
    final l$updatedatLTE = updatedatLTE;
    final lOther$updatedatLTE = other.updatedatLTE;
    if (_$data.containsKey('updatedatLTE') !=
        other._$data.containsKey('updatedatLTE')) {
      return false;
    }
    if (l$updatedatLTE != lOther$updatedatLTE) {
      return false;
    }
    final l$hasUser = hasUser;
    final lOther$hasUser = other.hasUser;
    if (_$data.containsKey('hasUser') != other._$data.containsKey('hasUser')) {
      return false;
    }
    if (l$hasUser != lOther$hasUser) {
      return false;
    }
    final l$hasUserWith = hasUserWith;
    final lOther$hasUserWith = other.hasUserWith;
    if (_$data.containsKey('hasUserWith') !=
        other._$data.containsKey('hasUserWith')) {
      return false;
    }
    if (l$hasUserWith != null && lOther$hasUserWith != null) {
      if (l$hasUserWith.length != lOther$hasUserWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasUserWith.length; i++) {
        final l$hasUserWith$entry = l$hasUserWith[i];
        final lOther$hasUserWith$entry = lOther$hasUserWith[i];
        if (l$hasUserWith$entry != lOther$hasUserWith$entry) {
          return false;
        }
      }
    } else if (l$hasUserWith != lOther$hasUserWith) {
      return false;
    }
    final l$hasContent = hasContent;
    final lOther$hasContent = other.hasContent;
    if (_$data.containsKey('hasContent') !=
        other._$data.containsKey('hasContent')) {
      return false;
    }
    if (l$hasContent != lOther$hasContent) {
      return false;
    }
    final l$hasContentWith = hasContentWith;
    final lOther$hasContentWith = other.hasContentWith;
    if (_$data.containsKey('hasContentWith') !=
        other._$data.containsKey('hasContentWith')) {
      return false;
    }
    if (l$hasContentWith != null && lOther$hasContentWith != null) {
      if (l$hasContentWith.length != lOther$hasContentWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasContentWith.length; i++) {
        final l$hasContentWith$entry = l$hasContentWith[i];
        final lOther$hasContentWith$entry = lOther$hasContentWith[i];
        if (l$hasContentWith$entry != lOther$hasContentWith$entry) {
          return false;
        }
      }
    } else if (l$hasContentWith != lOther$hasContentWith) {
      return false;
    }
    final l$hasEpisode = hasEpisode;
    final lOther$hasEpisode = other.hasEpisode;
    if (_$data.containsKey('hasEpisode') !=
        other._$data.containsKey('hasEpisode')) {
      return false;
    }
    if (l$hasEpisode != lOther$hasEpisode) {
      return false;
    }
    final l$hasEpisodeWith = hasEpisodeWith;
    final lOther$hasEpisodeWith = other.hasEpisodeWith;
    if (_$data.containsKey('hasEpisodeWith') !=
        other._$data.containsKey('hasEpisodeWith')) {
      return false;
    }
    if (l$hasEpisodeWith != null && lOther$hasEpisodeWith != null) {
      if (l$hasEpisodeWith.length != lOther$hasEpisodeWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasEpisodeWith.length; i++) {
        final l$hasEpisodeWith$entry = l$hasEpisodeWith[i];
        final lOther$hasEpisodeWith$entry = lOther$hasEpisodeWith[i];
        if (l$hasEpisodeWith$entry != lOther$hasEpisodeWith$entry) {
          return false;
        }
      }
    } else if (l$hasEpisodeWith != lOther$hasEpisodeWith) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$userID = userID;
    final l$userIDNEQ = userIDNEQ;
    final l$userIDIn = userIDIn;
    final l$userIDNotIn = userIDNotIn;
    final l$contentID = contentID;
    final l$contentIDNEQ = contentIDNEQ;
    final l$contentIDIn = contentIDIn;
    final l$contentIDNotIn = contentIDNotIn;
    final l$episodeID = episodeID;
    final l$episodeIDNEQ = episodeIDNEQ;
    final l$episodeIDIn = episodeIDIn;
    final l$episodeIDNotIn = episodeIDNotIn;
    final l$contentType = contentType;
    final l$contentTypeNEQ = contentTypeNEQ;
    final l$contentTypeIn = contentTypeIn;
    final l$contentTypeNotIn = contentTypeNotIn;
    final l$progress = progress;
    final l$progressNEQ = progressNEQ;
    final l$progressIn = progressIn;
    final l$progressNotIn = progressNotIn;
    final l$progressGT = progressGT;
    final l$progressGTE = progressGTE;
    final l$progressLT = progressLT;
    final l$progressLTE = progressLTE;
    final l$finishedat = finishedat;
    final l$finishedatNEQ = finishedatNEQ;
    final l$finishedatIn = finishedatIn;
    final l$finishedatNotIn = finishedatNotIn;
    final l$finishedatGT = finishedatGT;
    final l$finishedatGTE = finishedatGTE;
    final l$finishedatLT = finishedatLT;
    final l$finishedatLTE = finishedatLTE;
    final l$finishedatIsNil = finishedatIsNil;
    final l$finishedatNotNil = finishedatNotNil;
    final l$createdat = createdat;
    final l$createdatNEQ = createdatNEQ;
    final l$createdatIn = createdatIn;
    final l$createdatNotIn = createdatNotIn;
    final l$createdatGT = createdatGT;
    final l$createdatGTE = createdatGTE;
    final l$createdatLT = createdatLT;
    final l$createdatLTE = createdatLTE;
    final l$updatedat = updatedat;
    final l$updatedatNEQ = updatedatNEQ;
    final l$updatedatIn = updatedatIn;
    final l$updatedatNotIn = updatedatNotIn;
    final l$updatedatGT = updatedatGT;
    final l$updatedatGTE = updatedatGTE;
    final l$updatedatLT = updatedatLT;
    final l$updatedatLTE = updatedatLTE;
    final l$hasUser = hasUser;
    final l$hasUserWith = hasUserWith;
    final l$hasContent = hasContent;
    final l$hasContentWith = hasContentWith;
    final l$hasEpisode = hasEpisode;
    final l$hasEpisodeWith = hasEpisodeWith;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('userID') ? l$userID : const {},
      _$data.containsKey('userIDNEQ') ? l$userIDNEQ : const {},
      _$data.containsKey('userIDIn')
          ? l$userIDIn == null
              ? null
              : Object.hashAll(l$userIDIn.map((v) => v))
          : const {},
      _$data.containsKey('userIDNotIn')
          ? l$userIDNotIn == null
              ? null
              : Object.hashAll(l$userIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('contentID') ? l$contentID : const {},
      _$data.containsKey('contentIDNEQ') ? l$contentIDNEQ : const {},
      _$data.containsKey('contentIDIn')
          ? l$contentIDIn == null
              ? null
              : Object.hashAll(l$contentIDIn.map((v) => v))
          : const {},
      _$data.containsKey('contentIDNotIn')
          ? l$contentIDNotIn == null
              ? null
              : Object.hashAll(l$contentIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('episodeID') ? l$episodeID : const {},
      _$data.containsKey('episodeIDNEQ') ? l$episodeIDNEQ : const {},
      _$data.containsKey('episodeIDIn')
          ? l$episodeIDIn == null
              ? null
              : Object.hashAll(l$episodeIDIn.map((v) => v))
          : const {},
      _$data.containsKey('episodeIDNotIn')
          ? l$episodeIDNotIn == null
              ? null
              : Object.hashAll(l$episodeIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('contentType') ? l$contentType : const {},
      _$data.containsKey('contentTypeNEQ') ? l$contentTypeNEQ : const {},
      _$data.containsKey('contentTypeIn')
          ? l$contentTypeIn == null
              ? null
              : Object.hashAll(l$contentTypeIn.map((v) => v))
          : const {},
      _$data.containsKey('contentTypeNotIn')
          ? l$contentTypeNotIn == null
              ? null
              : Object.hashAll(l$contentTypeNotIn.map((v) => v))
          : const {},
      _$data.containsKey('progress') ? l$progress : const {},
      _$data.containsKey('progressNEQ') ? l$progressNEQ : const {},
      _$data.containsKey('progressIn')
          ? l$progressIn == null
              ? null
              : Object.hashAll(l$progressIn.map((v) => v))
          : const {},
      _$data.containsKey('progressNotIn')
          ? l$progressNotIn == null
              ? null
              : Object.hashAll(l$progressNotIn.map((v) => v))
          : const {},
      _$data.containsKey('progressGT') ? l$progressGT : const {},
      _$data.containsKey('progressGTE') ? l$progressGTE : const {},
      _$data.containsKey('progressLT') ? l$progressLT : const {},
      _$data.containsKey('progressLTE') ? l$progressLTE : const {},
      _$data.containsKey('finishedat') ? l$finishedat : const {},
      _$data.containsKey('finishedatNEQ') ? l$finishedatNEQ : const {},
      _$data.containsKey('finishedatIn')
          ? l$finishedatIn == null
              ? null
              : Object.hashAll(l$finishedatIn.map((v) => v))
          : const {},
      _$data.containsKey('finishedatNotIn')
          ? l$finishedatNotIn == null
              ? null
              : Object.hashAll(l$finishedatNotIn.map((v) => v))
          : const {},
      _$data.containsKey('finishedatGT') ? l$finishedatGT : const {},
      _$data.containsKey('finishedatGTE') ? l$finishedatGTE : const {},
      _$data.containsKey('finishedatLT') ? l$finishedatLT : const {},
      _$data.containsKey('finishedatLTE') ? l$finishedatLTE : const {},
      _$data.containsKey('finishedatIsNil') ? l$finishedatIsNil : const {},
      _$data.containsKey('finishedatNotNil') ? l$finishedatNotNil : const {},
      _$data.containsKey('createdat') ? l$createdat : const {},
      _$data.containsKey('createdatNEQ') ? l$createdatNEQ : const {},
      _$data.containsKey('createdatIn')
          ? l$createdatIn == null
              ? null
              : Object.hashAll(l$createdatIn.map((v) => v))
          : const {},
      _$data.containsKey('createdatNotIn')
          ? l$createdatNotIn == null
              ? null
              : Object.hashAll(l$createdatNotIn.map((v) => v))
          : const {},
      _$data.containsKey('createdatGT') ? l$createdatGT : const {},
      _$data.containsKey('createdatGTE') ? l$createdatGTE : const {},
      _$data.containsKey('createdatLT') ? l$createdatLT : const {},
      _$data.containsKey('createdatLTE') ? l$createdatLTE : const {},
      _$data.containsKey('updatedat') ? l$updatedat : const {},
      _$data.containsKey('updatedatNEQ') ? l$updatedatNEQ : const {},
      _$data.containsKey('updatedatIn')
          ? l$updatedatIn == null
              ? null
              : Object.hashAll(l$updatedatIn.map((v) => v))
          : const {},
      _$data.containsKey('updatedatNotIn')
          ? l$updatedatNotIn == null
              ? null
              : Object.hashAll(l$updatedatNotIn.map((v) => v))
          : const {},
      _$data.containsKey('updatedatGT') ? l$updatedatGT : const {},
      _$data.containsKey('updatedatGTE') ? l$updatedatGTE : const {},
      _$data.containsKey('updatedatLT') ? l$updatedatLT : const {},
      _$data.containsKey('updatedatLTE') ? l$updatedatLTE : const {},
      _$data.containsKey('hasUser') ? l$hasUser : const {},
      _$data.containsKey('hasUserWith')
          ? l$hasUserWith == null
              ? null
              : Object.hashAll(l$hasUserWith.map((v) => v))
          : const {},
      _$data.containsKey('hasContent') ? l$hasContent : const {},
      _$data.containsKey('hasContentWith')
          ? l$hasContentWith == null
              ? null
              : Object.hashAll(l$hasContentWith.map((v) => v))
          : const {},
      _$data.containsKey('hasEpisode') ? l$hasEpisode : const {},
      _$data.containsKey('hasEpisodeWith')
          ? l$hasEpisodeWith == null
              ? null
              : Object.hashAll(l$hasEpisodeWith.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentProgressWhereInput<TRes> {
  factory CopyWith$Input$ContentProgressWhereInput(
    Input$ContentProgressWhereInput instance,
    TRes Function(Input$ContentProgressWhereInput) then,
  ) = _CopyWithImpl$Input$ContentProgressWhereInput;

  factory CopyWith$Input$ContentProgressWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentProgressWhereInput;

  TRes call({
    Input$ContentProgressWhereInput? not,
    List<Input$ContentProgressWhereInput>? and,
    List<Input$ContentProgressWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? userID,
    String? userIDNEQ,
    List<String>? userIDIn,
    List<String>? userIDNotIn,
    String? contentID,
    String? contentIDNEQ,
    List<String>? contentIDIn,
    List<String>? contentIDNotIn,
    String? episodeID,
    String? episodeIDNEQ,
    List<String>? episodeIDIn,
    List<String>? episodeIDNotIn,
    Enum$ContentProgressContentType? contentType,
    Enum$ContentProgressContentType? contentTypeNEQ,
    List<Enum$ContentProgressContentType>? contentTypeIn,
    List<Enum$ContentProgressContentType>? contentTypeNotIn,
    int? progress,
    int? progressNEQ,
    List<int>? progressIn,
    List<int>? progressNotIn,
    int? progressGT,
    int? progressGTE,
    int? progressLT,
    int? progressLTE,
    String? finishedat,
    String? finishedatNEQ,
    List<String>? finishedatIn,
    List<String>? finishedatNotIn,
    String? finishedatGT,
    String? finishedatGTE,
    String? finishedatLT,
    String? finishedatLTE,
    bool? finishedatIsNil,
    bool? finishedatNotNil,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    bool? hasUser,
    List<Input$UserWhereInput>? hasUserWith,
    bool? hasContent,
    List<Input$ContentWhereInput>? hasContentWith,
    bool? hasEpisode,
    List<Input$ContentEpisodeWhereInput>? hasEpisodeWith,
  });
  CopyWith$Input$ContentProgressWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$ContentProgressWhereInput>? Function(
              Iterable<
                  CopyWith$Input$ContentProgressWhereInput<
                      Input$ContentProgressWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$ContentProgressWhereInput>? Function(
              Iterable<
                  CopyWith$Input$ContentProgressWhereInput<
                      Input$ContentProgressWhereInput>>?)
          _fn);
  TRes hasUserWith(
      Iterable<Input$UserWhereInput>? Function(
              Iterable<CopyWith$Input$UserWhereInput<Input$UserWhereInput>>?)
          _fn);
  TRes hasContentWith(
      Iterable<Input$ContentWhereInput>? Function(
              Iterable<
                  CopyWith$Input$ContentWhereInput<Input$ContentWhereInput>>?)
          _fn);
  TRes hasEpisodeWith(
      Iterable<Input$ContentEpisodeWhereInput>? Function(
              Iterable<
                  CopyWith$Input$ContentEpisodeWhereInput<
                      Input$ContentEpisodeWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$ContentProgressWhereInput<TRes>
    implements CopyWith$Input$ContentProgressWhereInput<TRes> {
  _CopyWithImpl$Input$ContentProgressWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContentProgressWhereInput _instance;

  final TRes Function(Input$ContentProgressWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? userID = _undefined,
    Object? userIDNEQ = _undefined,
    Object? userIDIn = _undefined,
    Object? userIDNotIn = _undefined,
    Object? contentID = _undefined,
    Object? contentIDNEQ = _undefined,
    Object? contentIDIn = _undefined,
    Object? contentIDNotIn = _undefined,
    Object? episodeID = _undefined,
    Object? episodeIDNEQ = _undefined,
    Object? episodeIDIn = _undefined,
    Object? episodeIDNotIn = _undefined,
    Object? contentType = _undefined,
    Object? contentTypeNEQ = _undefined,
    Object? contentTypeIn = _undefined,
    Object? contentTypeNotIn = _undefined,
    Object? progress = _undefined,
    Object? progressNEQ = _undefined,
    Object? progressIn = _undefined,
    Object? progressNotIn = _undefined,
    Object? progressGT = _undefined,
    Object? progressGTE = _undefined,
    Object? progressLT = _undefined,
    Object? progressLTE = _undefined,
    Object? finishedat = _undefined,
    Object? finishedatNEQ = _undefined,
    Object? finishedatIn = _undefined,
    Object? finishedatNotIn = _undefined,
    Object? finishedatGT = _undefined,
    Object? finishedatGTE = _undefined,
    Object? finishedatLT = _undefined,
    Object? finishedatLTE = _undefined,
    Object? finishedatIsNil = _undefined,
    Object? finishedatNotNil = _undefined,
    Object? createdat = _undefined,
    Object? createdatNEQ = _undefined,
    Object? createdatIn = _undefined,
    Object? createdatNotIn = _undefined,
    Object? createdatGT = _undefined,
    Object? createdatGTE = _undefined,
    Object? createdatLT = _undefined,
    Object? createdatLTE = _undefined,
    Object? updatedat = _undefined,
    Object? updatedatNEQ = _undefined,
    Object? updatedatIn = _undefined,
    Object? updatedatNotIn = _undefined,
    Object? updatedatGT = _undefined,
    Object? updatedatGTE = _undefined,
    Object? updatedatLT = _undefined,
    Object? updatedatLTE = _undefined,
    Object? hasUser = _undefined,
    Object? hasUserWith = _undefined,
    Object? hasContent = _undefined,
    Object? hasContentWith = _undefined,
    Object? hasEpisode = _undefined,
    Object? hasEpisodeWith = _undefined,
  }) =>
      _then(Input$ContentProgressWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$ContentProgressWhereInput?),
        if (and != _undefined)
          'and': (and as List<Input$ContentProgressWhereInput>?),
        if (or != _undefined)
          'or': (or as List<Input$ContentProgressWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (userID != _undefined) 'userID': (userID as String?),
        if (userIDNEQ != _undefined) 'userIDNEQ': (userIDNEQ as String?),
        if (userIDIn != _undefined) 'userIDIn': (userIDIn as List<String>?),
        if (userIDNotIn != _undefined)
          'userIDNotIn': (userIDNotIn as List<String>?),
        if (contentID != _undefined) 'contentID': (contentID as String?),
        if (contentIDNEQ != _undefined)
          'contentIDNEQ': (contentIDNEQ as String?),
        if (contentIDIn != _undefined)
          'contentIDIn': (contentIDIn as List<String>?),
        if (contentIDNotIn != _undefined)
          'contentIDNotIn': (contentIDNotIn as List<String>?),
        if (episodeID != _undefined) 'episodeID': (episodeID as String?),
        if (episodeIDNEQ != _undefined)
          'episodeIDNEQ': (episodeIDNEQ as String?),
        if (episodeIDIn != _undefined)
          'episodeIDIn': (episodeIDIn as List<String>?),
        if (episodeIDNotIn != _undefined)
          'episodeIDNotIn': (episodeIDNotIn as List<String>?),
        if (contentType != _undefined)
          'contentType': (contentType as Enum$ContentProgressContentType?),
        if (contentTypeNEQ != _undefined)
          'contentTypeNEQ':
              (contentTypeNEQ as Enum$ContentProgressContentType?),
        if (contentTypeIn != _undefined)
          'contentTypeIn':
              (contentTypeIn as List<Enum$ContentProgressContentType>?),
        if (contentTypeNotIn != _undefined)
          'contentTypeNotIn':
              (contentTypeNotIn as List<Enum$ContentProgressContentType>?),
        if (progress != _undefined) 'progress': (progress as int?),
        if (progressNEQ != _undefined) 'progressNEQ': (progressNEQ as int?),
        if (progressIn != _undefined) 'progressIn': (progressIn as List<int>?),
        if (progressNotIn != _undefined)
          'progressNotIn': (progressNotIn as List<int>?),
        if (progressGT != _undefined) 'progressGT': (progressGT as int?),
        if (progressGTE != _undefined) 'progressGTE': (progressGTE as int?),
        if (progressLT != _undefined) 'progressLT': (progressLT as int?),
        if (progressLTE != _undefined) 'progressLTE': (progressLTE as int?),
        if (finishedat != _undefined) 'finishedat': (finishedat as String?),
        if (finishedatNEQ != _undefined)
          'finishedatNEQ': (finishedatNEQ as String?),
        if (finishedatIn != _undefined)
          'finishedatIn': (finishedatIn as List<String>?),
        if (finishedatNotIn != _undefined)
          'finishedatNotIn': (finishedatNotIn as List<String>?),
        if (finishedatGT != _undefined)
          'finishedatGT': (finishedatGT as String?),
        if (finishedatGTE != _undefined)
          'finishedatGTE': (finishedatGTE as String?),
        if (finishedatLT != _undefined)
          'finishedatLT': (finishedatLT as String?),
        if (finishedatLTE != _undefined)
          'finishedatLTE': (finishedatLTE as String?),
        if (finishedatIsNil != _undefined)
          'finishedatIsNil': (finishedatIsNil as bool?),
        if (finishedatNotNil != _undefined)
          'finishedatNotNil': (finishedatNotNil as bool?),
        if (createdat != _undefined) 'createdat': (createdat as String?),
        if (createdatNEQ != _undefined)
          'createdatNEQ': (createdatNEQ as String?),
        if (createdatIn != _undefined)
          'createdatIn': (createdatIn as List<String>?),
        if (createdatNotIn != _undefined)
          'createdatNotIn': (createdatNotIn as List<String>?),
        if (createdatGT != _undefined) 'createdatGT': (createdatGT as String?),
        if (createdatGTE != _undefined)
          'createdatGTE': (createdatGTE as String?),
        if (createdatLT != _undefined) 'createdatLT': (createdatLT as String?),
        if (createdatLTE != _undefined)
          'createdatLTE': (createdatLTE as String?),
        if (updatedat != _undefined) 'updatedat': (updatedat as String?),
        if (updatedatNEQ != _undefined)
          'updatedatNEQ': (updatedatNEQ as String?),
        if (updatedatIn != _undefined)
          'updatedatIn': (updatedatIn as List<String>?),
        if (updatedatNotIn != _undefined)
          'updatedatNotIn': (updatedatNotIn as List<String>?),
        if (updatedatGT != _undefined) 'updatedatGT': (updatedatGT as String?),
        if (updatedatGTE != _undefined)
          'updatedatGTE': (updatedatGTE as String?),
        if (updatedatLT != _undefined) 'updatedatLT': (updatedatLT as String?),
        if (updatedatLTE != _undefined)
          'updatedatLTE': (updatedatLTE as String?),
        if (hasUser != _undefined) 'hasUser': (hasUser as bool?),
        if (hasUserWith != _undefined)
          'hasUserWith': (hasUserWith as List<Input$UserWhereInput>?),
        if (hasContent != _undefined) 'hasContent': (hasContent as bool?),
        if (hasContentWith != _undefined)
          'hasContentWith': (hasContentWith as List<Input$ContentWhereInput>?),
        if (hasEpisode != _undefined) 'hasEpisode': (hasEpisode as bool?),
        if (hasEpisodeWith != _undefined)
          'hasEpisodeWith':
              (hasEpisodeWith as List<Input$ContentEpisodeWhereInput>?),
      }));

  CopyWith$Input$ContentProgressWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$ContentProgressWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentProgressWhereInput(
            local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$ContentProgressWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$ContentProgressWhereInput<
                          Input$ContentProgressWhereInput>>?)
              _fn) =>
      call(
          and: _fn(_instance.and
              ?.map((e) => CopyWith$Input$ContentProgressWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes or(
          Iterable<Input$ContentProgressWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$ContentProgressWhereInput<
                          Input$ContentProgressWhereInput>>?)
              _fn) =>
      call(
          or: _fn(
              _instance.or?.map((e) => CopyWith$Input$ContentProgressWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasUserWith(
          Iterable<Input$UserWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UserWhereInput<Input$UserWhereInput>>?)
              _fn) =>
      call(
          hasUserWith: _fn(
              _instance.hasUserWith?.map((e) => CopyWith$Input$UserWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasContentWith(
          Iterable<Input$ContentWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$ContentWhereInput<
                          Input$ContentWhereInput>>?)
              _fn) =>
      call(
          hasContentWith: _fn(_instance.hasContentWith
              ?.map((e) => CopyWith$Input$ContentWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasEpisodeWith(
          Iterable<Input$ContentEpisodeWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$ContentEpisodeWhereInput<
                          Input$ContentEpisodeWhereInput>>?)
              _fn) =>
      call(
          hasEpisodeWith: _fn(_instance.hasEpisodeWith
              ?.map((e) => CopyWith$Input$ContentEpisodeWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$ContentProgressWhereInput<TRes>
    implements CopyWith$Input$ContentProgressWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContentProgressWhereInput(this._res);

  TRes _res;

  call({
    Input$ContentProgressWhereInput? not,
    List<Input$ContentProgressWhereInput>? and,
    List<Input$ContentProgressWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? userID,
    String? userIDNEQ,
    List<String>? userIDIn,
    List<String>? userIDNotIn,
    String? contentID,
    String? contentIDNEQ,
    List<String>? contentIDIn,
    List<String>? contentIDNotIn,
    String? episodeID,
    String? episodeIDNEQ,
    List<String>? episodeIDIn,
    List<String>? episodeIDNotIn,
    Enum$ContentProgressContentType? contentType,
    Enum$ContentProgressContentType? contentTypeNEQ,
    List<Enum$ContentProgressContentType>? contentTypeIn,
    List<Enum$ContentProgressContentType>? contentTypeNotIn,
    int? progress,
    int? progressNEQ,
    List<int>? progressIn,
    List<int>? progressNotIn,
    int? progressGT,
    int? progressGTE,
    int? progressLT,
    int? progressLTE,
    String? finishedat,
    String? finishedatNEQ,
    List<String>? finishedatIn,
    List<String>? finishedatNotIn,
    String? finishedatGT,
    String? finishedatGTE,
    String? finishedatLT,
    String? finishedatLTE,
    bool? finishedatIsNil,
    bool? finishedatNotNil,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    bool? hasUser,
    List<Input$UserWhereInput>? hasUserWith,
    bool? hasContent,
    List<Input$ContentWhereInput>? hasContentWith,
    bool? hasEpisode,
    List<Input$ContentEpisodeWhereInput>? hasEpisodeWith,
  }) =>
      _res;

  CopyWith$Input$ContentProgressWhereInput<TRes> get not =>
      CopyWith$Input$ContentProgressWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;

  hasUserWith(_fn) => _res;

  hasContentWith(_fn) => _res;

  hasEpisodeWith(_fn) => _res;
}

class Input$ContentWhereInput {
  factory Input$ContentWhereInput({
    Input$ContentWhereInput? not,
    List<Input$ContentWhereInput>? and,
    List<Input$ContentWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    Enum$ContentContentType? type,
    Enum$ContentContentType? typeNEQ,
    List<Enum$ContentContentType>? typeIn,
    List<Enum$ContentContentType>? typeNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    String? source,
    String? sourceNEQ,
    List<String>? sourceIn,
    List<String>? sourceNotIn,
    String? sourceGT,
    String? sourceGTE,
    String? sourceLT,
    String? sourceLTE,
    String? sourceContains,
    String? sourceHasPrefix,
    String? sourceHasSuffix,
    String? sourceEqualFold,
    String? sourceContainsFold,
    String? sourceurl,
    String? sourceurlNEQ,
    List<String>? sourceurlIn,
    List<String>? sourceurlNotIn,
    String? sourceurlGT,
    String? sourceurlGTE,
    String? sourceurlLT,
    String? sourceurlLTE,
    String? sourceurlContains,
    String? sourceurlHasPrefix,
    String? sourceurlHasSuffix,
    String? sourceurlEqualFold,
    String? sourceurlContainsFold,
    String? licence,
    String? licenceNEQ,
    List<String>? licenceIn,
    List<String>? licenceNotIn,
    String? licenceGT,
    String? licenceGTE,
    String? licenceLT,
    String? licenceLTE,
    String? licenceContains,
    String? licenceHasPrefix,
    String? licenceHasSuffix,
    String? licenceEqualFold,
    String? licenceContainsFold,
    String? licenceurl,
    String? licenceurlNEQ,
    List<String>? licenceurlIn,
    List<String>? licenceurlNotIn,
    String? licenceurlGT,
    String? licenceurlGTE,
    String? licenceurlLT,
    String? licenceurlLTE,
    String? licenceurlContains,
    String? licenceurlHasPrefix,
    String? licenceurlHasSuffix,
    String? licenceurlEqualFold,
    String? licenceurlContainsFold,
    bool? ishidden,
    bool? ishiddenNEQ,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    int? episodescount,
    int? episodescountNEQ,
    List<int>? episodescountIn,
    List<int>? episodescountNotIn,
    int? episodescountGT,
    int? episodescountGTE,
    int? episodescountLT,
    int? episodescountLTE,
    bool? hasEpisodes,
    List<Input$ContentEpisodeWhereInput>? hasEpisodesWith,
  }) =>
      Input$ContentWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (type != null) r'type': type,
        if (typeNEQ != null) r'typeNEQ': typeNEQ,
        if (typeIn != null) r'typeIn': typeIn,
        if (typeNotIn != null) r'typeNotIn': typeNotIn,
        if (iconimage != null) r'iconimage': iconimage,
        if (iconimageNEQ != null) r'iconimageNEQ': iconimageNEQ,
        if (iconimageIn != null) r'iconimageIn': iconimageIn,
        if (iconimageNotIn != null) r'iconimageNotIn': iconimageNotIn,
        if (iconimageGT != null) r'iconimageGT': iconimageGT,
        if (iconimageGTE != null) r'iconimageGTE': iconimageGTE,
        if (iconimageLT != null) r'iconimageLT': iconimageLT,
        if (iconimageLTE != null) r'iconimageLTE': iconimageLTE,
        if (iconimageContains != null) r'iconimageContains': iconimageContains,
        if (iconimageHasPrefix != null)
          r'iconimageHasPrefix': iconimageHasPrefix,
        if (iconimageHasSuffix != null)
          r'iconimageHasSuffix': iconimageHasSuffix,
        if (iconimageEqualFold != null)
          r'iconimageEqualFold': iconimageEqualFold,
        if (iconimageContainsFold != null)
          r'iconimageContainsFold': iconimageContainsFold,
        if (coverimage != null) r'coverimage': coverimage,
        if (coverimageNEQ != null) r'coverimageNEQ': coverimageNEQ,
        if (coverimageIn != null) r'coverimageIn': coverimageIn,
        if (coverimageNotIn != null) r'coverimageNotIn': coverimageNotIn,
        if (coverimageGT != null) r'coverimageGT': coverimageGT,
        if (coverimageGTE != null) r'coverimageGTE': coverimageGTE,
        if (coverimageLT != null) r'coverimageLT': coverimageLT,
        if (coverimageLTE != null) r'coverimageLTE': coverimageLTE,
        if (coverimageContains != null)
          r'coverimageContains': coverimageContains,
        if (coverimageHasPrefix != null)
          r'coverimageHasPrefix': coverimageHasPrefix,
        if (coverimageHasSuffix != null)
          r'coverimageHasSuffix': coverimageHasSuffix,
        if (coverimageEqualFold != null)
          r'coverimageEqualFold': coverimageEqualFold,
        if (coverimageContainsFold != null)
          r'coverimageContainsFold': coverimageContainsFold,
        if (title != null) r'title': title,
        if (titleNEQ != null) r'titleNEQ': titleNEQ,
        if (titleIn != null) r'titleIn': titleIn,
        if (titleNotIn != null) r'titleNotIn': titleNotIn,
        if (titleGT != null) r'titleGT': titleGT,
        if (titleGTE != null) r'titleGTE': titleGTE,
        if (titleLT != null) r'titleLT': titleLT,
        if (titleLTE != null) r'titleLTE': titleLTE,
        if (titleContains != null) r'titleContains': titleContains,
        if (titleHasPrefix != null) r'titleHasPrefix': titleHasPrefix,
        if (titleHasSuffix != null) r'titleHasSuffix': titleHasSuffix,
        if (titleEqualFold != null) r'titleEqualFold': titleEqualFold,
        if (titleContainsFold != null) r'titleContainsFold': titleContainsFold,
        if (subtitle != null) r'subtitle': subtitle,
        if (subtitleNEQ != null) r'subtitleNEQ': subtitleNEQ,
        if (subtitleIn != null) r'subtitleIn': subtitleIn,
        if (subtitleNotIn != null) r'subtitleNotIn': subtitleNotIn,
        if (subtitleGT != null) r'subtitleGT': subtitleGT,
        if (subtitleGTE != null) r'subtitleGTE': subtitleGTE,
        if (subtitleLT != null) r'subtitleLT': subtitleLT,
        if (subtitleLTE != null) r'subtitleLTE': subtitleLTE,
        if (subtitleContains != null) r'subtitleContains': subtitleContains,
        if (subtitleHasPrefix != null) r'subtitleHasPrefix': subtitleHasPrefix,
        if (subtitleHasSuffix != null) r'subtitleHasSuffix': subtitleHasSuffix,
        if (subtitleEqualFold != null) r'subtitleEqualFold': subtitleEqualFold,
        if (subtitleContainsFold != null)
          r'subtitleContainsFold': subtitleContainsFold,
        if (description != null) r'description': description,
        if (descriptionNEQ != null) r'descriptionNEQ': descriptionNEQ,
        if (descriptionIn != null) r'descriptionIn': descriptionIn,
        if (descriptionNotIn != null) r'descriptionNotIn': descriptionNotIn,
        if (descriptionGT != null) r'descriptionGT': descriptionGT,
        if (descriptionGTE != null) r'descriptionGTE': descriptionGTE,
        if (descriptionLT != null) r'descriptionLT': descriptionLT,
        if (descriptionLTE != null) r'descriptionLTE': descriptionLTE,
        if (descriptionContains != null)
          r'descriptionContains': descriptionContains,
        if (descriptionHasPrefix != null)
          r'descriptionHasPrefix': descriptionHasPrefix,
        if (descriptionHasSuffix != null)
          r'descriptionHasSuffix': descriptionHasSuffix,
        if (descriptionEqualFold != null)
          r'descriptionEqualFold': descriptionEqualFold,
        if (descriptionContainsFold != null)
          r'descriptionContainsFold': descriptionContainsFold,
        if (source != null) r'source': source,
        if (sourceNEQ != null) r'sourceNEQ': sourceNEQ,
        if (sourceIn != null) r'sourceIn': sourceIn,
        if (sourceNotIn != null) r'sourceNotIn': sourceNotIn,
        if (sourceGT != null) r'sourceGT': sourceGT,
        if (sourceGTE != null) r'sourceGTE': sourceGTE,
        if (sourceLT != null) r'sourceLT': sourceLT,
        if (sourceLTE != null) r'sourceLTE': sourceLTE,
        if (sourceContains != null) r'sourceContains': sourceContains,
        if (sourceHasPrefix != null) r'sourceHasPrefix': sourceHasPrefix,
        if (sourceHasSuffix != null) r'sourceHasSuffix': sourceHasSuffix,
        if (sourceEqualFold != null) r'sourceEqualFold': sourceEqualFold,
        if (sourceContainsFold != null)
          r'sourceContainsFold': sourceContainsFold,
        if (sourceurl != null) r'sourceurl': sourceurl,
        if (sourceurlNEQ != null) r'sourceurlNEQ': sourceurlNEQ,
        if (sourceurlIn != null) r'sourceurlIn': sourceurlIn,
        if (sourceurlNotIn != null) r'sourceurlNotIn': sourceurlNotIn,
        if (sourceurlGT != null) r'sourceurlGT': sourceurlGT,
        if (sourceurlGTE != null) r'sourceurlGTE': sourceurlGTE,
        if (sourceurlLT != null) r'sourceurlLT': sourceurlLT,
        if (sourceurlLTE != null) r'sourceurlLTE': sourceurlLTE,
        if (sourceurlContains != null) r'sourceurlContains': sourceurlContains,
        if (sourceurlHasPrefix != null)
          r'sourceurlHasPrefix': sourceurlHasPrefix,
        if (sourceurlHasSuffix != null)
          r'sourceurlHasSuffix': sourceurlHasSuffix,
        if (sourceurlEqualFold != null)
          r'sourceurlEqualFold': sourceurlEqualFold,
        if (sourceurlContainsFold != null)
          r'sourceurlContainsFold': sourceurlContainsFold,
        if (licence != null) r'licence': licence,
        if (licenceNEQ != null) r'licenceNEQ': licenceNEQ,
        if (licenceIn != null) r'licenceIn': licenceIn,
        if (licenceNotIn != null) r'licenceNotIn': licenceNotIn,
        if (licenceGT != null) r'licenceGT': licenceGT,
        if (licenceGTE != null) r'licenceGTE': licenceGTE,
        if (licenceLT != null) r'licenceLT': licenceLT,
        if (licenceLTE != null) r'licenceLTE': licenceLTE,
        if (licenceContains != null) r'licenceContains': licenceContains,
        if (licenceHasPrefix != null) r'licenceHasPrefix': licenceHasPrefix,
        if (licenceHasSuffix != null) r'licenceHasSuffix': licenceHasSuffix,
        if (licenceEqualFold != null) r'licenceEqualFold': licenceEqualFold,
        if (licenceContainsFold != null)
          r'licenceContainsFold': licenceContainsFold,
        if (licenceurl != null) r'licenceurl': licenceurl,
        if (licenceurlNEQ != null) r'licenceurlNEQ': licenceurlNEQ,
        if (licenceurlIn != null) r'licenceurlIn': licenceurlIn,
        if (licenceurlNotIn != null) r'licenceurlNotIn': licenceurlNotIn,
        if (licenceurlGT != null) r'licenceurlGT': licenceurlGT,
        if (licenceurlGTE != null) r'licenceurlGTE': licenceurlGTE,
        if (licenceurlLT != null) r'licenceurlLT': licenceurlLT,
        if (licenceurlLTE != null) r'licenceurlLTE': licenceurlLTE,
        if (licenceurlContains != null)
          r'licenceurlContains': licenceurlContains,
        if (licenceurlHasPrefix != null)
          r'licenceurlHasPrefix': licenceurlHasPrefix,
        if (licenceurlHasSuffix != null)
          r'licenceurlHasSuffix': licenceurlHasSuffix,
        if (licenceurlEqualFold != null)
          r'licenceurlEqualFold': licenceurlEqualFold,
        if (licenceurlContainsFold != null)
          r'licenceurlContainsFold': licenceurlContainsFold,
        if (ishidden != null) r'ishidden': ishidden,
        if (ishiddenNEQ != null) r'ishiddenNEQ': ishiddenNEQ,
        if (order != null) r'order': order,
        if (orderNEQ != null) r'orderNEQ': orderNEQ,
        if (orderIn != null) r'orderIn': orderIn,
        if (orderNotIn != null) r'orderNotIn': orderNotIn,
        if (orderGT != null) r'orderGT': orderGT,
        if (orderGTE != null) r'orderGTE': orderGTE,
        if (orderLT != null) r'orderLT': orderLT,
        if (orderLTE != null) r'orderLTE': orderLTE,
        if (episodescount != null) r'episodescount': episodescount,
        if (episodescountNEQ != null) r'episodescountNEQ': episodescountNEQ,
        if (episodescountIn != null) r'episodescountIn': episodescountIn,
        if (episodescountNotIn != null)
          r'episodescountNotIn': episodescountNotIn,
        if (episodescountGT != null) r'episodescountGT': episodescountGT,
        if (episodescountGTE != null) r'episodescountGTE': episodescountGTE,
        if (episodescountLT != null) r'episodescountLT': episodescountLT,
        if (episodescountLTE != null) r'episodescountLTE': episodescountLTE,
        if (hasEpisodes != null) r'hasEpisodes': hasEpisodes,
        if (hasEpisodesWith != null) r'hasEpisodesWith': hasEpisodesWith,
      });

  Input$ContentWhereInput._(this._$data);

  factory Input$ContentWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$ContentWhereInput.fromJson((l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map((e) =>
              Input$ContentWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map((e) =>
              Input$ContentWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = l$type == null
          ? null
          : fromJson$Enum$ContentContentType((l$type as String));
    }
    if (data.containsKey('typeNEQ')) {
      final l$typeNEQ = data['typeNEQ'];
      result$data['typeNEQ'] = l$typeNEQ == null
          ? null
          : fromJson$Enum$ContentContentType((l$typeNEQ as String));
    }
    if (data.containsKey('typeIn')) {
      final l$typeIn = data['typeIn'];
      result$data['typeIn'] = (l$typeIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$ContentContentType((e as String)))
          .toList();
    }
    if (data.containsKey('typeNotIn')) {
      final l$typeNotIn = data['typeNotIn'];
      result$data['typeNotIn'] = (l$typeNotIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$ContentContentType((e as String)))
          .toList();
    }
    if (data.containsKey('iconimage')) {
      final l$iconimage = data['iconimage'];
      result$data['iconimage'] = (l$iconimage as String?);
    }
    if (data.containsKey('iconimageNEQ')) {
      final l$iconimageNEQ = data['iconimageNEQ'];
      result$data['iconimageNEQ'] = (l$iconimageNEQ as String?);
    }
    if (data.containsKey('iconimageIn')) {
      final l$iconimageIn = data['iconimageIn'];
      result$data['iconimageIn'] =
          (l$iconimageIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('iconimageNotIn')) {
      final l$iconimageNotIn = data['iconimageNotIn'];
      result$data['iconimageNotIn'] = (l$iconimageNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('iconimageGT')) {
      final l$iconimageGT = data['iconimageGT'];
      result$data['iconimageGT'] = (l$iconimageGT as String?);
    }
    if (data.containsKey('iconimageGTE')) {
      final l$iconimageGTE = data['iconimageGTE'];
      result$data['iconimageGTE'] = (l$iconimageGTE as String?);
    }
    if (data.containsKey('iconimageLT')) {
      final l$iconimageLT = data['iconimageLT'];
      result$data['iconimageLT'] = (l$iconimageLT as String?);
    }
    if (data.containsKey('iconimageLTE')) {
      final l$iconimageLTE = data['iconimageLTE'];
      result$data['iconimageLTE'] = (l$iconimageLTE as String?);
    }
    if (data.containsKey('iconimageContains')) {
      final l$iconimageContains = data['iconimageContains'];
      result$data['iconimageContains'] = (l$iconimageContains as String?);
    }
    if (data.containsKey('iconimageHasPrefix')) {
      final l$iconimageHasPrefix = data['iconimageHasPrefix'];
      result$data['iconimageHasPrefix'] = (l$iconimageHasPrefix as String?);
    }
    if (data.containsKey('iconimageHasSuffix')) {
      final l$iconimageHasSuffix = data['iconimageHasSuffix'];
      result$data['iconimageHasSuffix'] = (l$iconimageHasSuffix as String?);
    }
    if (data.containsKey('iconimageEqualFold')) {
      final l$iconimageEqualFold = data['iconimageEqualFold'];
      result$data['iconimageEqualFold'] = (l$iconimageEqualFold as String?);
    }
    if (data.containsKey('iconimageContainsFold')) {
      final l$iconimageContainsFold = data['iconimageContainsFold'];
      result$data['iconimageContainsFold'] =
          (l$iconimageContainsFold as String?);
    }
    if (data.containsKey('coverimage')) {
      final l$coverimage = data['coverimage'];
      result$data['coverimage'] = (l$coverimage as String?);
    }
    if (data.containsKey('coverimageNEQ')) {
      final l$coverimageNEQ = data['coverimageNEQ'];
      result$data['coverimageNEQ'] = (l$coverimageNEQ as String?);
    }
    if (data.containsKey('coverimageIn')) {
      final l$coverimageIn = data['coverimageIn'];
      result$data['coverimageIn'] = (l$coverimageIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('coverimageNotIn')) {
      final l$coverimageNotIn = data['coverimageNotIn'];
      result$data['coverimageNotIn'] = (l$coverimageNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('coverimageGT')) {
      final l$coverimageGT = data['coverimageGT'];
      result$data['coverimageGT'] = (l$coverimageGT as String?);
    }
    if (data.containsKey('coverimageGTE')) {
      final l$coverimageGTE = data['coverimageGTE'];
      result$data['coverimageGTE'] = (l$coverimageGTE as String?);
    }
    if (data.containsKey('coverimageLT')) {
      final l$coverimageLT = data['coverimageLT'];
      result$data['coverimageLT'] = (l$coverimageLT as String?);
    }
    if (data.containsKey('coverimageLTE')) {
      final l$coverimageLTE = data['coverimageLTE'];
      result$data['coverimageLTE'] = (l$coverimageLTE as String?);
    }
    if (data.containsKey('coverimageContains')) {
      final l$coverimageContains = data['coverimageContains'];
      result$data['coverimageContains'] = (l$coverimageContains as String?);
    }
    if (data.containsKey('coverimageHasPrefix')) {
      final l$coverimageHasPrefix = data['coverimageHasPrefix'];
      result$data['coverimageHasPrefix'] = (l$coverimageHasPrefix as String?);
    }
    if (data.containsKey('coverimageHasSuffix')) {
      final l$coverimageHasSuffix = data['coverimageHasSuffix'];
      result$data['coverimageHasSuffix'] = (l$coverimageHasSuffix as String?);
    }
    if (data.containsKey('coverimageEqualFold')) {
      final l$coverimageEqualFold = data['coverimageEqualFold'];
      result$data['coverimageEqualFold'] = (l$coverimageEqualFold as String?);
    }
    if (data.containsKey('coverimageContainsFold')) {
      final l$coverimageContainsFold = data['coverimageContainsFold'];
      result$data['coverimageContainsFold'] =
          (l$coverimageContainsFold as String?);
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] = (l$title as String?);
    }
    if (data.containsKey('titleNEQ')) {
      final l$titleNEQ = data['titleNEQ'];
      result$data['titleNEQ'] = (l$titleNEQ as String?);
    }
    if (data.containsKey('titleIn')) {
      final l$titleIn = data['titleIn'];
      result$data['titleIn'] =
          (l$titleIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleNotIn')) {
      final l$titleNotIn = data['titleNotIn'];
      result$data['titleNotIn'] =
          (l$titleNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleGT')) {
      final l$titleGT = data['titleGT'];
      result$data['titleGT'] = (l$titleGT as String?);
    }
    if (data.containsKey('titleGTE')) {
      final l$titleGTE = data['titleGTE'];
      result$data['titleGTE'] = (l$titleGTE as String?);
    }
    if (data.containsKey('titleLT')) {
      final l$titleLT = data['titleLT'];
      result$data['titleLT'] = (l$titleLT as String?);
    }
    if (data.containsKey('titleLTE')) {
      final l$titleLTE = data['titleLTE'];
      result$data['titleLTE'] = (l$titleLTE as String?);
    }
    if (data.containsKey('titleContains')) {
      final l$titleContains = data['titleContains'];
      result$data['titleContains'] = (l$titleContains as String?);
    }
    if (data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = data['titleHasPrefix'];
      result$data['titleHasPrefix'] = (l$titleHasPrefix as String?);
    }
    if (data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = data['titleHasSuffix'];
      result$data['titleHasSuffix'] = (l$titleHasSuffix as String?);
    }
    if (data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = data['titleEqualFold'];
      result$data['titleEqualFold'] = (l$titleEqualFold as String?);
    }
    if (data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = data['titleContainsFold'];
      result$data['titleContainsFold'] = (l$titleContainsFold as String?);
    }
    if (data.containsKey('subtitle')) {
      final l$subtitle = data['subtitle'];
      result$data['subtitle'] = (l$subtitle as String?);
    }
    if (data.containsKey('subtitleNEQ')) {
      final l$subtitleNEQ = data['subtitleNEQ'];
      result$data['subtitleNEQ'] = (l$subtitleNEQ as String?);
    }
    if (data.containsKey('subtitleIn')) {
      final l$subtitleIn = data['subtitleIn'];
      result$data['subtitleIn'] =
          (l$subtitleIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('subtitleNotIn')) {
      final l$subtitleNotIn = data['subtitleNotIn'];
      result$data['subtitleNotIn'] = (l$subtitleNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('subtitleGT')) {
      final l$subtitleGT = data['subtitleGT'];
      result$data['subtitleGT'] = (l$subtitleGT as String?);
    }
    if (data.containsKey('subtitleGTE')) {
      final l$subtitleGTE = data['subtitleGTE'];
      result$data['subtitleGTE'] = (l$subtitleGTE as String?);
    }
    if (data.containsKey('subtitleLT')) {
      final l$subtitleLT = data['subtitleLT'];
      result$data['subtitleLT'] = (l$subtitleLT as String?);
    }
    if (data.containsKey('subtitleLTE')) {
      final l$subtitleLTE = data['subtitleLTE'];
      result$data['subtitleLTE'] = (l$subtitleLTE as String?);
    }
    if (data.containsKey('subtitleContains')) {
      final l$subtitleContains = data['subtitleContains'];
      result$data['subtitleContains'] = (l$subtitleContains as String?);
    }
    if (data.containsKey('subtitleHasPrefix')) {
      final l$subtitleHasPrefix = data['subtitleHasPrefix'];
      result$data['subtitleHasPrefix'] = (l$subtitleHasPrefix as String?);
    }
    if (data.containsKey('subtitleHasSuffix')) {
      final l$subtitleHasSuffix = data['subtitleHasSuffix'];
      result$data['subtitleHasSuffix'] = (l$subtitleHasSuffix as String?);
    }
    if (data.containsKey('subtitleEqualFold')) {
      final l$subtitleEqualFold = data['subtitleEqualFold'];
      result$data['subtitleEqualFold'] = (l$subtitleEqualFold as String?);
    }
    if (data.containsKey('subtitleContainsFold')) {
      final l$subtitleContainsFold = data['subtitleContainsFold'];
      result$data['subtitleContainsFold'] = (l$subtitleContainsFold as String?);
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = (l$description as String?);
    }
    if (data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = data['descriptionNEQ'];
      result$data['descriptionNEQ'] = (l$descriptionNEQ as String?);
    }
    if (data.containsKey('descriptionIn')) {
      final l$descriptionIn = data['descriptionIn'];
      result$data['descriptionIn'] = (l$descriptionIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = data['descriptionNotIn'];
      result$data['descriptionNotIn'] = (l$descriptionNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionGT')) {
      final l$descriptionGT = data['descriptionGT'];
      result$data['descriptionGT'] = (l$descriptionGT as String?);
    }
    if (data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = data['descriptionGTE'];
      result$data['descriptionGTE'] = (l$descriptionGTE as String?);
    }
    if (data.containsKey('descriptionLT')) {
      final l$descriptionLT = data['descriptionLT'];
      result$data['descriptionLT'] = (l$descriptionLT as String?);
    }
    if (data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = data['descriptionLTE'];
      result$data['descriptionLTE'] = (l$descriptionLTE as String?);
    }
    if (data.containsKey('descriptionContains')) {
      final l$descriptionContains = data['descriptionContains'];
      result$data['descriptionContains'] = (l$descriptionContains as String?);
    }
    if (data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = data['descriptionHasPrefix'];
      result$data['descriptionHasPrefix'] = (l$descriptionHasPrefix as String?);
    }
    if (data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = data['descriptionHasSuffix'];
      result$data['descriptionHasSuffix'] = (l$descriptionHasSuffix as String?);
    }
    if (data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = data['descriptionEqualFold'];
      result$data['descriptionEqualFold'] = (l$descriptionEqualFold as String?);
    }
    if (data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = data['descriptionContainsFold'];
      result$data['descriptionContainsFold'] =
          (l$descriptionContainsFold as String?);
    }
    if (data.containsKey('source')) {
      final l$source = data['source'];
      result$data['source'] = (l$source as String?);
    }
    if (data.containsKey('sourceNEQ')) {
      final l$sourceNEQ = data['sourceNEQ'];
      result$data['sourceNEQ'] = (l$sourceNEQ as String?);
    }
    if (data.containsKey('sourceIn')) {
      final l$sourceIn = data['sourceIn'];
      result$data['sourceIn'] =
          (l$sourceIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('sourceNotIn')) {
      final l$sourceNotIn = data['sourceNotIn'];
      result$data['sourceNotIn'] =
          (l$sourceNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('sourceGT')) {
      final l$sourceGT = data['sourceGT'];
      result$data['sourceGT'] = (l$sourceGT as String?);
    }
    if (data.containsKey('sourceGTE')) {
      final l$sourceGTE = data['sourceGTE'];
      result$data['sourceGTE'] = (l$sourceGTE as String?);
    }
    if (data.containsKey('sourceLT')) {
      final l$sourceLT = data['sourceLT'];
      result$data['sourceLT'] = (l$sourceLT as String?);
    }
    if (data.containsKey('sourceLTE')) {
      final l$sourceLTE = data['sourceLTE'];
      result$data['sourceLTE'] = (l$sourceLTE as String?);
    }
    if (data.containsKey('sourceContains')) {
      final l$sourceContains = data['sourceContains'];
      result$data['sourceContains'] = (l$sourceContains as String?);
    }
    if (data.containsKey('sourceHasPrefix')) {
      final l$sourceHasPrefix = data['sourceHasPrefix'];
      result$data['sourceHasPrefix'] = (l$sourceHasPrefix as String?);
    }
    if (data.containsKey('sourceHasSuffix')) {
      final l$sourceHasSuffix = data['sourceHasSuffix'];
      result$data['sourceHasSuffix'] = (l$sourceHasSuffix as String?);
    }
    if (data.containsKey('sourceEqualFold')) {
      final l$sourceEqualFold = data['sourceEqualFold'];
      result$data['sourceEqualFold'] = (l$sourceEqualFold as String?);
    }
    if (data.containsKey('sourceContainsFold')) {
      final l$sourceContainsFold = data['sourceContainsFold'];
      result$data['sourceContainsFold'] = (l$sourceContainsFold as String?);
    }
    if (data.containsKey('sourceurl')) {
      final l$sourceurl = data['sourceurl'];
      result$data['sourceurl'] = (l$sourceurl as String?);
    }
    if (data.containsKey('sourceurlNEQ')) {
      final l$sourceurlNEQ = data['sourceurlNEQ'];
      result$data['sourceurlNEQ'] = (l$sourceurlNEQ as String?);
    }
    if (data.containsKey('sourceurlIn')) {
      final l$sourceurlIn = data['sourceurlIn'];
      result$data['sourceurlIn'] =
          (l$sourceurlIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('sourceurlNotIn')) {
      final l$sourceurlNotIn = data['sourceurlNotIn'];
      result$data['sourceurlNotIn'] = (l$sourceurlNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('sourceurlGT')) {
      final l$sourceurlGT = data['sourceurlGT'];
      result$data['sourceurlGT'] = (l$sourceurlGT as String?);
    }
    if (data.containsKey('sourceurlGTE')) {
      final l$sourceurlGTE = data['sourceurlGTE'];
      result$data['sourceurlGTE'] = (l$sourceurlGTE as String?);
    }
    if (data.containsKey('sourceurlLT')) {
      final l$sourceurlLT = data['sourceurlLT'];
      result$data['sourceurlLT'] = (l$sourceurlLT as String?);
    }
    if (data.containsKey('sourceurlLTE')) {
      final l$sourceurlLTE = data['sourceurlLTE'];
      result$data['sourceurlLTE'] = (l$sourceurlLTE as String?);
    }
    if (data.containsKey('sourceurlContains')) {
      final l$sourceurlContains = data['sourceurlContains'];
      result$data['sourceurlContains'] = (l$sourceurlContains as String?);
    }
    if (data.containsKey('sourceurlHasPrefix')) {
      final l$sourceurlHasPrefix = data['sourceurlHasPrefix'];
      result$data['sourceurlHasPrefix'] = (l$sourceurlHasPrefix as String?);
    }
    if (data.containsKey('sourceurlHasSuffix')) {
      final l$sourceurlHasSuffix = data['sourceurlHasSuffix'];
      result$data['sourceurlHasSuffix'] = (l$sourceurlHasSuffix as String?);
    }
    if (data.containsKey('sourceurlEqualFold')) {
      final l$sourceurlEqualFold = data['sourceurlEqualFold'];
      result$data['sourceurlEqualFold'] = (l$sourceurlEqualFold as String?);
    }
    if (data.containsKey('sourceurlContainsFold')) {
      final l$sourceurlContainsFold = data['sourceurlContainsFold'];
      result$data['sourceurlContainsFold'] =
          (l$sourceurlContainsFold as String?);
    }
    if (data.containsKey('licence')) {
      final l$licence = data['licence'];
      result$data['licence'] = (l$licence as String?);
    }
    if (data.containsKey('licenceNEQ')) {
      final l$licenceNEQ = data['licenceNEQ'];
      result$data['licenceNEQ'] = (l$licenceNEQ as String?);
    }
    if (data.containsKey('licenceIn')) {
      final l$licenceIn = data['licenceIn'];
      result$data['licenceIn'] =
          (l$licenceIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('licenceNotIn')) {
      final l$licenceNotIn = data['licenceNotIn'];
      result$data['licenceNotIn'] = (l$licenceNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('licenceGT')) {
      final l$licenceGT = data['licenceGT'];
      result$data['licenceGT'] = (l$licenceGT as String?);
    }
    if (data.containsKey('licenceGTE')) {
      final l$licenceGTE = data['licenceGTE'];
      result$data['licenceGTE'] = (l$licenceGTE as String?);
    }
    if (data.containsKey('licenceLT')) {
      final l$licenceLT = data['licenceLT'];
      result$data['licenceLT'] = (l$licenceLT as String?);
    }
    if (data.containsKey('licenceLTE')) {
      final l$licenceLTE = data['licenceLTE'];
      result$data['licenceLTE'] = (l$licenceLTE as String?);
    }
    if (data.containsKey('licenceContains')) {
      final l$licenceContains = data['licenceContains'];
      result$data['licenceContains'] = (l$licenceContains as String?);
    }
    if (data.containsKey('licenceHasPrefix')) {
      final l$licenceHasPrefix = data['licenceHasPrefix'];
      result$data['licenceHasPrefix'] = (l$licenceHasPrefix as String?);
    }
    if (data.containsKey('licenceHasSuffix')) {
      final l$licenceHasSuffix = data['licenceHasSuffix'];
      result$data['licenceHasSuffix'] = (l$licenceHasSuffix as String?);
    }
    if (data.containsKey('licenceEqualFold')) {
      final l$licenceEqualFold = data['licenceEqualFold'];
      result$data['licenceEqualFold'] = (l$licenceEqualFold as String?);
    }
    if (data.containsKey('licenceContainsFold')) {
      final l$licenceContainsFold = data['licenceContainsFold'];
      result$data['licenceContainsFold'] = (l$licenceContainsFold as String?);
    }
    if (data.containsKey('licenceurl')) {
      final l$licenceurl = data['licenceurl'];
      result$data['licenceurl'] = (l$licenceurl as String?);
    }
    if (data.containsKey('licenceurlNEQ')) {
      final l$licenceurlNEQ = data['licenceurlNEQ'];
      result$data['licenceurlNEQ'] = (l$licenceurlNEQ as String?);
    }
    if (data.containsKey('licenceurlIn')) {
      final l$licenceurlIn = data['licenceurlIn'];
      result$data['licenceurlIn'] = (l$licenceurlIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('licenceurlNotIn')) {
      final l$licenceurlNotIn = data['licenceurlNotIn'];
      result$data['licenceurlNotIn'] = (l$licenceurlNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('licenceurlGT')) {
      final l$licenceurlGT = data['licenceurlGT'];
      result$data['licenceurlGT'] = (l$licenceurlGT as String?);
    }
    if (data.containsKey('licenceurlGTE')) {
      final l$licenceurlGTE = data['licenceurlGTE'];
      result$data['licenceurlGTE'] = (l$licenceurlGTE as String?);
    }
    if (data.containsKey('licenceurlLT')) {
      final l$licenceurlLT = data['licenceurlLT'];
      result$data['licenceurlLT'] = (l$licenceurlLT as String?);
    }
    if (data.containsKey('licenceurlLTE')) {
      final l$licenceurlLTE = data['licenceurlLTE'];
      result$data['licenceurlLTE'] = (l$licenceurlLTE as String?);
    }
    if (data.containsKey('licenceurlContains')) {
      final l$licenceurlContains = data['licenceurlContains'];
      result$data['licenceurlContains'] = (l$licenceurlContains as String?);
    }
    if (data.containsKey('licenceurlHasPrefix')) {
      final l$licenceurlHasPrefix = data['licenceurlHasPrefix'];
      result$data['licenceurlHasPrefix'] = (l$licenceurlHasPrefix as String?);
    }
    if (data.containsKey('licenceurlHasSuffix')) {
      final l$licenceurlHasSuffix = data['licenceurlHasSuffix'];
      result$data['licenceurlHasSuffix'] = (l$licenceurlHasSuffix as String?);
    }
    if (data.containsKey('licenceurlEqualFold')) {
      final l$licenceurlEqualFold = data['licenceurlEqualFold'];
      result$data['licenceurlEqualFold'] = (l$licenceurlEqualFold as String?);
    }
    if (data.containsKey('licenceurlContainsFold')) {
      final l$licenceurlContainsFold = data['licenceurlContainsFold'];
      result$data['licenceurlContainsFold'] =
          (l$licenceurlContainsFold as String?);
    }
    if (data.containsKey('ishidden')) {
      final l$ishidden = data['ishidden'];
      result$data['ishidden'] = (l$ishidden as bool?);
    }
    if (data.containsKey('ishiddenNEQ')) {
      final l$ishiddenNEQ = data['ishiddenNEQ'];
      result$data['ishiddenNEQ'] = (l$ishiddenNEQ as bool?);
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = (l$order as int?);
    }
    if (data.containsKey('orderNEQ')) {
      final l$orderNEQ = data['orderNEQ'];
      result$data['orderNEQ'] = (l$orderNEQ as int?);
    }
    if (data.containsKey('orderIn')) {
      final l$orderIn = data['orderIn'];
      result$data['orderIn'] =
          (l$orderIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderNotIn')) {
      final l$orderNotIn = data['orderNotIn'];
      result$data['orderNotIn'] =
          (l$orderNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderGT')) {
      final l$orderGT = data['orderGT'];
      result$data['orderGT'] = (l$orderGT as int?);
    }
    if (data.containsKey('orderGTE')) {
      final l$orderGTE = data['orderGTE'];
      result$data['orderGTE'] = (l$orderGTE as int?);
    }
    if (data.containsKey('orderLT')) {
      final l$orderLT = data['orderLT'];
      result$data['orderLT'] = (l$orderLT as int?);
    }
    if (data.containsKey('orderLTE')) {
      final l$orderLTE = data['orderLTE'];
      result$data['orderLTE'] = (l$orderLTE as int?);
    }
    if (data.containsKey('episodescount')) {
      final l$episodescount = data['episodescount'];
      result$data['episodescount'] = (l$episodescount as int?);
    }
    if (data.containsKey('episodescountNEQ')) {
      final l$episodescountNEQ = data['episodescountNEQ'];
      result$data['episodescountNEQ'] = (l$episodescountNEQ as int?);
    }
    if (data.containsKey('episodescountIn')) {
      final l$episodescountIn = data['episodescountIn'];
      result$data['episodescountIn'] = (l$episodescountIn as List<dynamic>?)
          ?.map((e) => (e as int))
          .toList();
    }
    if (data.containsKey('episodescountNotIn')) {
      final l$episodescountNotIn = data['episodescountNotIn'];
      result$data['episodescountNotIn'] =
          (l$episodescountNotIn as List<dynamic>?)
              ?.map((e) => (e as int))
              .toList();
    }
    if (data.containsKey('episodescountGT')) {
      final l$episodescountGT = data['episodescountGT'];
      result$data['episodescountGT'] = (l$episodescountGT as int?);
    }
    if (data.containsKey('episodescountGTE')) {
      final l$episodescountGTE = data['episodescountGTE'];
      result$data['episodescountGTE'] = (l$episodescountGTE as int?);
    }
    if (data.containsKey('episodescountLT')) {
      final l$episodescountLT = data['episodescountLT'];
      result$data['episodescountLT'] = (l$episodescountLT as int?);
    }
    if (data.containsKey('episodescountLTE')) {
      final l$episodescountLTE = data['episodescountLTE'];
      result$data['episodescountLTE'] = (l$episodescountLTE as int?);
    }
    if (data.containsKey('hasEpisodes')) {
      final l$hasEpisodes = data['hasEpisodes'];
      result$data['hasEpisodes'] = (l$hasEpisodes as bool?);
    }
    if (data.containsKey('hasEpisodesWith')) {
      final l$hasEpisodesWith = data['hasEpisodesWith'];
      result$data['hasEpisodesWith'] = (l$hasEpisodesWith as List<dynamic>?)
          ?.map((e) => Input$ContentEpisodeWhereInput.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    return Input$ContentWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentWhereInput? get not =>
      (_$data['not'] as Input$ContentWhereInput?);

  List<Input$ContentWhereInput>? get and =>
      (_$data['and'] as List<Input$ContentWhereInput>?);

  List<Input$ContentWhereInput>? get or =>
      (_$data['or'] as List<Input$ContentWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  Enum$ContentContentType? get type =>
      (_$data['type'] as Enum$ContentContentType?);

  Enum$ContentContentType? get typeNEQ =>
      (_$data['typeNEQ'] as Enum$ContentContentType?);

  List<Enum$ContentContentType>? get typeIn =>
      (_$data['typeIn'] as List<Enum$ContentContentType>?);

  List<Enum$ContentContentType>? get typeNotIn =>
      (_$data['typeNotIn'] as List<Enum$ContentContentType>?);

  String? get iconimage => (_$data['iconimage'] as String?);

  String? get iconimageNEQ => (_$data['iconimageNEQ'] as String?);

  List<String>? get iconimageIn => (_$data['iconimageIn'] as List<String>?);

  List<String>? get iconimageNotIn =>
      (_$data['iconimageNotIn'] as List<String>?);

  String? get iconimageGT => (_$data['iconimageGT'] as String?);

  String? get iconimageGTE => (_$data['iconimageGTE'] as String?);

  String? get iconimageLT => (_$data['iconimageLT'] as String?);

  String? get iconimageLTE => (_$data['iconimageLTE'] as String?);

  String? get iconimageContains => (_$data['iconimageContains'] as String?);

  String? get iconimageHasPrefix => (_$data['iconimageHasPrefix'] as String?);

  String? get iconimageHasSuffix => (_$data['iconimageHasSuffix'] as String?);

  String? get iconimageEqualFold => (_$data['iconimageEqualFold'] as String?);

  String? get iconimageContainsFold =>
      (_$data['iconimageContainsFold'] as String?);

  String? get coverimage => (_$data['coverimage'] as String?);

  String? get coverimageNEQ => (_$data['coverimageNEQ'] as String?);

  List<String>? get coverimageIn => (_$data['coverimageIn'] as List<String>?);

  List<String>? get coverimageNotIn =>
      (_$data['coverimageNotIn'] as List<String>?);

  String? get coverimageGT => (_$data['coverimageGT'] as String?);

  String? get coverimageGTE => (_$data['coverimageGTE'] as String?);

  String? get coverimageLT => (_$data['coverimageLT'] as String?);

  String? get coverimageLTE => (_$data['coverimageLTE'] as String?);

  String? get coverimageContains => (_$data['coverimageContains'] as String?);

  String? get coverimageHasPrefix => (_$data['coverimageHasPrefix'] as String?);

  String? get coverimageHasSuffix => (_$data['coverimageHasSuffix'] as String?);

  String? get coverimageEqualFold => (_$data['coverimageEqualFold'] as String?);

  String? get coverimageContainsFold =>
      (_$data['coverimageContainsFold'] as String?);

  String? get title => (_$data['title'] as String?);

  String? get titleNEQ => (_$data['titleNEQ'] as String?);

  List<String>? get titleIn => (_$data['titleIn'] as List<String>?);

  List<String>? get titleNotIn => (_$data['titleNotIn'] as List<String>?);

  String? get titleGT => (_$data['titleGT'] as String?);

  String? get titleGTE => (_$data['titleGTE'] as String?);

  String? get titleLT => (_$data['titleLT'] as String?);

  String? get titleLTE => (_$data['titleLTE'] as String?);

  String? get titleContains => (_$data['titleContains'] as String?);

  String? get titleHasPrefix => (_$data['titleHasPrefix'] as String?);

  String? get titleHasSuffix => (_$data['titleHasSuffix'] as String?);

  String? get titleEqualFold => (_$data['titleEqualFold'] as String?);

  String? get titleContainsFold => (_$data['titleContainsFold'] as String?);

  String? get subtitle => (_$data['subtitle'] as String?);

  String? get subtitleNEQ => (_$data['subtitleNEQ'] as String?);

  List<String>? get subtitleIn => (_$data['subtitleIn'] as List<String>?);

  List<String>? get subtitleNotIn => (_$data['subtitleNotIn'] as List<String>?);

  String? get subtitleGT => (_$data['subtitleGT'] as String?);

  String? get subtitleGTE => (_$data['subtitleGTE'] as String?);

  String? get subtitleLT => (_$data['subtitleLT'] as String?);

  String? get subtitleLTE => (_$data['subtitleLTE'] as String?);

  String? get subtitleContains => (_$data['subtitleContains'] as String?);

  String? get subtitleHasPrefix => (_$data['subtitleHasPrefix'] as String?);

  String? get subtitleHasSuffix => (_$data['subtitleHasSuffix'] as String?);

  String? get subtitleEqualFold => (_$data['subtitleEqualFold'] as String?);

  String? get subtitleContainsFold =>
      (_$data['subtitleContainsFold'] as String?);

  String? get description => (_$data['description'] as String?);

  String? get descriptionNEQ => (_$data['descriptionNEQ'] as String?);

  List<String>? get descriptionIn => (_$data['descriptionIn'] as List<String>?);

  List<String>? get descriptionNotIn =>
      (_$data['descriptionNotIn'] as List<String>?);

  String? get descriptionGT => (_$data['descriptionGT'] as String?);

  String? get descriptionGTE => (_$data['descriptionGTE'] as String?);

  String? get descriptionLT => (_$data['descriptionLT'] as String?);

  String? get descriptionLTE => (_$data['descriptionLTE'] as String?);

  String? get descriptionContains => (_$data['descriptionContains'] as String?);

  String? get descriptionHasPrefix =>
      (_$data['descriptionHasPrefix'] as String?);

  String? get descriptionHasSuffix =>
      (_$data['descriptionHasSuffix'] as String?);

  String? get descriptionEqualFold =>
      (_$data['descriptionEqualFold'] as String?);

  String? get descriptionContainsFold =>
      (_$data['descriptionContainsFold'] as String?);

  String? get source => (_$data['source'] as String?);

  String? get sourceNEQ => (_$data['sourceNEQ'] as String?);

  List<String>? get sourceIn => (_$data['sourceIn'] as List<String>?);

  List<String>? get sourceNotIn => (_$data['sourceNotIn'] as List<String>?);

  String? get sourceGT => (_$data['sourceGT'] as String?);

  String? get sourceGTE => (_$data['sourceGTE'] as String?);

  String? get sourceLT => (_$data['sourceLT'] as String?);

  String? get sourceLTE => (_$data['sourceLTE'] as String?);

  String? get sourceContains => (_$data['sourceContains'] as String?);

  String? get sourceHasPrefix => (_$data['sourceHasPrefix'] as String?);

  String? get sourceHasSuffix => (_$data['sourceHasSuffix'] as String?);

  String? get sourceEqualFold => (_$data['sourceEqualFold'] as String?);

  String? get sourceContainsFold => (_$data['sourceContainsFold'] as String?);

  String? get sourceurl => (_$data['sourceurl'] as String?);

  String? get sourceurlNEQ => (_$data['sourceurlNEQ'] as String?);

  List<String>? get sourceurlIn => (_$data['sourceurlIn'] as List<String>?);

  List<String>? get sourceurlNotIn =>
      (_$data['sourceurlNotIn'] as List<String>?);

  String? get sourceurlGT => (_$data['sourceurlGT'] as String?);

  String? get sourceurlGTE => (_$data['sourceurlGTE'] as String?);

  String? get sourceurlLT => (_$data['sourceurlLT'] as String?);

  String? get sourceurlLTE => (_$data['sourceurlLTE'] as String?);

  String? get sourceurlContains => (_$data['sourceurlContains'] as String?);

  String? get sourceurlHasPrefix => (_$data['sourceurlHasPrefix'] as String?);

  String? get sourceurlHasSuffix => (_$data['sourceurlHasSuffix'] as String?);

  String? get sourceurlEqualFold => (_$data['sourceurlEqualFold'] as String?);

  String? get sourceurlContainsFold =>
      (_$data['sourceurlContainsFold'] as String?);

  String? get licence => (_$data['licence'] as String?);

  String? get licenceNEQ => (_$data['licenceNEQ'] as String?);

  List<String>? get licenceIn => (_$data['licenceIn'] as List<String>?);

  List<String>? get licenceNotIn => (_$data['licenceNotIn'] as List<String>?);

  String? get licenceGT => (_$data['licenceGT'] as String?);

  String? get licenceGTE => (_$data['licenceGTE'] as String?);

  String? get licenceLT => (_$data['licenceLT'] as String?);

  String? get licenceLTE => (_$data['licenceLTE'] as String?);

  String? get licenceContains => (_$data['licenceContains'] as String?);

  String? get licenceHasPrefix => (_$data['licenceHasPrefix'] as String?);

  String? get licenceHasSuffix => (_$data['licenceHasSuffix'] as String?);

  String? get licenceEqualFold => (_$data['licenceEqualFold'] as String?);

  String? get licenceContainsFold => (_$data['licenceContainsFold'] as String?);

  String? get licenceurl => (_$data['licenceurl'] as String?);

  String? get licenceurlNEQ => (_$data['licenceurlNEQ'] as String?);

  List<String>? get licenceurlIn => (_$data['licenceurlIn'] as List<String>?);

  List<String>? get licenceurlNotIn =>
      (_$data['licenceurlNotIn'] as List<String>?);

  String? get licenceurlGT => (_$data['licenceurlGT'] as String?);

  String? get licenceurlGTE => (_$data['licenceurlGTE'] as String?);

  String? get licenceurlLT => (_$data['licenceurlLT'] as String?);

  String? get licenceurlLTE => (_$data['licenceurlLTE'] as String?);

  String? get licenceurlContains => (_$data['licenceurlContains'] as String?);

  String? get licenceurlHasPrefix => (_$data['licenceurlHasPrefix'] as String?);

  String? get licenceurlHasSuffix => (_$data['licenceurlHasSuffix'] as String?);

  String? get licenceurlEqualFold => (_$data['licenceurlEqualFold'] as String?);

  String? get licenceurlContainsFold =>
      (_$data['licenceurlContainsFold'] as String?);

  bool? get ishidden => (_$data['ishidden'] as bool?);

  bool? get ishiddenNEQ => (_$data['ishiddenNEQ'] as bool?);

  int? get order => (_$data['order'] as int?);

  int? get orderNEQ => (_$data['orderNEQ'] as int?);

  List<int>? get orderIn => (_$data['orderIn'] as List<int>?);

  List<int>? get orderNotIn => (_$data['orderNotIn'] as List<int>?);

  int? get orderGT => (_$data['orderGT'] as int?);

  int? get orderGTE => (_$data['orderGTE'] as int?);

  int? get orderLT => (_$data['orderLT'] as int?);

  int? get orderLTE => (_$data['orderLTE'] as int?);

  int? get episodescount => (_$data['episodescount'] as int?);

  int? get episodescountNEQ => (_$data['episodescountNEQ'] as int?);

  List<int>? get episodescountIn => (_$data['episodescountIn'] as List<int>?);

  List<int>? get episodescountNotIn =>
      (_$data['episodescountNotIn'] as List<int>?);

  int? get episodescountGT => (_$data['episodescountGT'] as int?);

  int? get episodescountGTE => (_$data['episodescountGTE'] as int?);

  int? get episodescountLT => (_$data['episodescountLT'] as int?);

  int? get episodescountLTE => (_$data['episodescountLTE'] as int?);

  bool? get hasEpisodes => (_$data['hasEpisodes'] as bool?);

  List<Input$ContentEpisodeWhereInput>? get hasEpisodesWith =>
      (_$data['hasEpisodesWith'] as List<Input$ContentEpisodeWhereInput>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] =
          l$type == null ? null : toJson$Enum$ContentContentType(l$type);
    }
    if (_$data.containsKey('typeNEQ')) {
      final l$typeNEQ = typeNEQ;
      result$data['typeNEQ'] =
          l$typeNEQ == null ? null : toJson$Enum$ContentContentType(l$typeNEQ);
    }
    if (_$data.containsKey('typeIn')) {
      final l$typeIn = typeIn;
      result$data['typeIn'] =
          l$typeIn?.map((e) => toJson$Enum$ContentContentType(e)).toList();
    }
    if (_$data.containsKey('typeNotIn')) {
      final l$typeNotIn = typeNotIn;
      result$data['typeNotIn'] =
          l$typeNotIn?.map((e) => toJson$Enum$ContentContentType(e)).toList();
    }
    if (_$data.containsKey('iconimage')) {
      final l$iconimage = iconimage;
      result$data['iconimage'] = l$iconimage;
    }
    if (_$data.containsKey('iconimageNEQ')) {
      final l$iconimageNEQ = iconimageNEQ;
      result$data['iconimageNEQ'] = l$iconimageNEQ;
    }
    if (_$data.containsKey('iconimageIn')) {
      final l$iconimageIn = iconimageIn;
      result$data['iconimageIn'] = l$iconimageIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimageNotIn')) {
      final l$iconimageNotIn = iconimageNotIn;
      result$data['iconimageNotIn'] = l$iconimageNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimageGT')) {
      final l$iconimageGT = iconimageGT;
      result$data['iconimageGT'] = l$iconimageGT;
    }
    if (_$data.containsKey('iconimageGTE')) {
      final l$iconimageGTE = iconimageGTE;
      result$data['iconimageGTE'] = l$iconimageGTE;
    }
    if (_$data.containsKey('iconimageLT')) {
      final l$iconimageLT = iconimageLT;
      result$data['iconimageLT'] = l$iconimageLT;
    }
    if (_$data.containsKey('iconimageLTE')) {
      final l$iconimageLTE = iconimageLTE;
      result$data['iconimageLTE'] = l$iconimageLTE;
    }
    if (_$data.containsKey('iconimageContains')) {
      final l$iconimageContains = iconimageContains;
      result$data['iconimageContains'] = l$iconimageContains;
    }
    if (_$data.containsKey('iconimageHasPrefix')) {
      final l$iconimageHasPrefix = iconimageHasPrefix;
      result$data['iconimageHasPrefix'] = l$iconimageHasPrefix;
    }
    if (_$data.containsKey('iconimageHasSuffix')) {
      final l$iconimageHasSuffix = iconimageHasSuffix;
      result$data['iconimageHasSuffix'] = l$iconimageHasSuffix;
    }
    if (_$data.containsKey('iconimageEqualFold')) {
      final l$iconimageEqualFold = iconimageEqualFold;
      result$data['iconimageEqualFold'] = l$iconimageEqualFold;
    }
    if (_$data.containsKey('iconimageContainsFold')) {
      final l$iconimageContainsFold = iconimageContainsFold;
      result$data['iconimageContainsFold'] = l$iconimageContainsFold;
    }
    if (_$data.containsKey('coverimage')) {
      final l$coverimage = coverimage;
      result$data['coverimage'] = l$coverimage;
    }
    if (_$data.containsKey('coverimageNEQ')) {
      final l$coverimageNEQ = coverimageNEQ;
      result$data['coverimageNEQ'] = l$coverimageNEQ;
    }
    if (_$data.containsKey('coverimageIn')) {
      final l$coverimageIn = coverimageIn;
      result$data['coverimageIn'] = l$coverimageIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('coverimageNotIn')) {
      final l$coverimageNotIn = coverimageNotIn;
      result$data['coverimageNotIn'] =
          l$coverimageNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('coverimageGT')) {
      final l$coverimageGT = coverimageGT;
      result$data['coverimageGT'] = l$coverimageGT;
    }
    if (_$data.containsKey('coverimageGTE')) {
      final l$coverimageGTE = coverimageGTE;
      result$data['coverimageGTE'] = l$coverimageGTE;
    }
    if (_$data.containsKey('coverimageLT')) {
      final l$coverimageLT = coverimageLT;
      result$data['coverimageLT'] = l$coverimageLT;
    }
    if (_$data.containsKey('coverimageLTE')) {
      final l$coverimageLTE = coverimageLTE;
      result$data['coverimageLTE'] = l$coverimageLTE;
    }
    if (_$data.containsKey('coverimageContains')) {
      final l$coverimageContains = coverimageContains;
      result$data['coverimageContains'] = l$coverimageContains;
    }
    if (_$data.containsKey('coverimageHasPrefix')) {
      final l$coverimageHasPrefix = coverimageHasPrefix;
      result$data['coverimageHasPrefix'] = l$coverimageHasPrefix;
    }
    if (_$data.containsKey('coverimageHasSuffix')) {
      final l$coverimageHasSuffix = coverimageHasSuffix;
      result$data['coverimageHasSuffix'] = l$coverimageHasSuffix;
    }
    if (_$data.containsKey('coverimageEqualFold')) {
      final l$coverimageEqualFold = coverimageEqualFold;
      result$data['coverimageEqualFold'] = l$coverimageEqualFold;
    }
    if (_$data.containsKey('coverimageContainsFold')) {
      final l$coverimageContainsFold = coverimageContainsFold;
      result$data['coverimageContainsFold'] = l$coverimageContainsFold;
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] = l$title;
    }
    if (_$data.containsKey('titleNEQ')) {
      final l$titleNEQ = titleNEQ;
      result$data['titleNEQ'] = l$titleNEQ;
    }
    if (_$data.containsKey('titleIn')) {
      final l$titleIn = titleIn;
      result$data['titleIn'] = l$titleIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleNotIn')) {
      final l$titleNotIn = titleNotIn;
      result$data['titleNotIn'] = l$titleNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleGT')) {
      final l$titleGT = titleGT;
      result$data['titleGT'] = l$titleGT;
    }
    if (_$data.containsKey('titleGTE')) {
      final l$titleGTE = titleGTE;
      result$data['titleGTE'] = l$titleGTE;
    }
    if (_$data.containsKey('titleLT')) {
      final l$titleLT = titleLT;
      result$data['titleLT'] = l$titleLT;
    }
    if (_$data.containsKey('titleLTE')) {
      final l$titleLTE = titleLTE;
      result$data['titleLTE'] = l$titleLTE;
    }
    if (_$data.containsKey('titleContains')) {
      final l$titleContains = titleContains;
      result$data['titleContains'] = l$titleContains;
    }
    if (_$data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = titleHasPrefix;
      result$data['titleHasPrefix'] = l$titleHasPrefix;
    }
    if (_$data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = titleHasSuffix;
      result$data['titleHasSuffix'] = l$titleHasSuffix;
    }
    if (_$data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = titleEqualFold;
      result$data['titleEqualFold'] = l$titleEqualFold;
    }
    if (_$data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = titleContainsFold;
      result$data['titleContainsFold'] = l$titleContainsFold;
    }
    if (_$data.containsKey('subtitle')) {
      final l$subtitle = subtitle;
      result$data['subtitle'] = l$subtitle;
    }
    if (_$data.containsKey('subtitleNEQ')) {
      final l$subtitleNEQ = subtitleNEQ;
      result$data['subtitleNEQ'] = l$subtitleNEQ;
    }
    if (_$data.containsKey('subtitleIn')) {
      final l$subtitleIn = subtitleIn;
      result$data['subtitleIn'] = l$subtitleIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('subtitleNotIn')) {
      final l$subtitleNotIn = subtitleNotIn;
      result$data['subtitleNotIn'] = l$subtitleNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('subtitleGT')) {
      final l$subtitleGT = subtitleGT;
      result$data['subtitleGT'] = l$subtitleGT;
    }
    if (_$data.containsKey('subtitleGTE')) {
      final l$subtitleGTE = subtitleGTE;
      result$data['subtitleGTE'] = l$subtitleGTE;
    }
    if (_$data.containsKey('subtitleLT')) {
      final l$subtitleLT = subtitleLT;
      result$data['subtitleLT'] = l$subtitleLT;
    }
    if (_$data.containsKey('subtitleLTE')) {
      final l$subtitleLTE = subtitleLTE;
      result$data['subtitleLTE'] = l$subtitleLTE;
    }
    if (_$data.containsKey('subtitleContains')) {
      final l$subtitleContains = subtitleContains;
      result$data['subtitleContains'] = l$subtitleContains;
    }
    if (_$data.containsKey('subtitleHasPrefix')) {
      final l$subtitleHasPrefix = subtitleHasPrefix;
      result$data['subtitleHasPrefix'] = l$subtitleHasPrefix;
    }
    if (_$data.containsKey('subtitleHasSuffix')) {
      final l$subtitleHasSuffix = subtitleHasSuffix;
      result$data['subtitleHasSuffix'] = l$subtitleHasSuffix;
    }
    if (_$data.containsKey('subtitleEqualFold')) {
      final l$subtitleEqualFold = subtitleEqualFold;
      result$data['subtitleEqualFold'] = l$subtitleEqualFold;
    }
    if (_$data.containsKey('subtitleContainsFold')) {
      final l$subtitleContainsFold = subtitleContainsFold;
      result$data['subtitleContainsFold'] = l$subtitleContainsFold;
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] = l$description;
    }
    if (_$data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = descriptionNEQ;
      result$data['descriptionNEQ'] = l$descriptionNEQ;
    }
    if (_$data.containsKey('descriptionIn')) {
      final l$descriptionIn = descriptionIn;
      result$data['descriptionIn'] = l$descriptionIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = descriptionNotIn;
      result$data['descriptionNotIn'] =
          l$descriptionNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionGT')) {
      final l$descriptionGT = descriptionGT;
      result$data['descriptionGT'] = l$descriptionGT;
    }
    if (_$data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = descriptionGTE;
      result$data['descriptionGTE'] = l$descriptionGTE;
    }
    if (_$data.containsKey('descriptionLT')) {
      final l$descriptionLT = descriptionLT;
      result$data['descriptionLT'] = l$descriptionLT;
    }
    if (_$data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = descriptionLTE;
      result$data['descriptionLTE'] = l$descriptionLTE;
    }
    if (_$data.containsKey('descriptionContains')) {
      final l$descriptionContains = descriptionContains;
      result$data['descriptionContains'] = l$descriptionContains;
    }
    if (_$data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = descriptionHasPrefix;
      result$data['descriptionHasPrefix'] = l$descriptionHasPrefix;
    }
    if (_$data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = descriptionHasSuffix;
      result$data['descriptionHasSuffix'] = l$descriptionHasSuffix;
    }
    if (_$data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = descriptionEqualFold;
      result$data['descriptionEqualFold'] = l$descriptionEqualFold;
    }
    if (_$data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = descriptionContainsFold;
      result$data['descriptionContainsFold'] = l$descriptionContainsFold;
    }
    if (_$data.containsKey('source')) {
      final l$source = source;
      result$data['source'] = l$source;
    }
    if (_$data.containsKey('sourceNEQ')) {
      final l$sourceNEQ = sourceNEQ;
      result$data['sourceNEQ'] = l$sourceNEQ;
    }
    if (_$data.containsKey('sourceIn')) {
      final l$sourceIn = sourceIn;
      result$data['sourceIn'] = l$sourceIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('sourceNotIn')) {
      final l$sourceNotIn = sourceNotIn;
      result$data['sourceNotIn'] = l$sourceNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('sourceGT')) {
      final l$sourceGT = sourceGT;
      result$data['sourceGT'] = l$sourceGT;
    }
    if (_$data.containsKey('sourceGTE')) {
      final l$sourceGTE = sourceGTE;
      result$data['sourceGTE'] = l$sourceGTE;
    }
    if (_$data.containsKey('sourceLT')) {
      final l$sourceLT = sourceLT;
      result$data['sourceLT'] = l$sourceLT;
    }
    if (_$data.containsKey('sourceLTE')) {
      final l$sourceLTE = sourceLTE;
      result$data['sourceLTE'] = l$sourceLTE;
    }
    if (_$data.containsKey('sourceContains')) {
      final l$sourceContains = sourceContains;
      result$data['sourceContains'] = l$sourceContains;
    }
    if (_$data.containsKey('sourceHasPrefix')) {
      final l$sourceHasPrefix = sourceHasPrefix;
      result$data['sourceHasPrefix'] = l$sourceHasPrefix;
    }
    if (_$data.containsKey('sourceHasSuffix')) {
      final l$sourceHasSuffix = sourceHasSuffix;
      result$data['sourceHasSuffix'] = l$sourceHasSuffix;
    }
    if (_$data.containsKey('sourceEqualFold')) {
      final l$sourceEqualFold = sourceEqualFold;
      result$data['sourceEqualFold'] = l$sourceEqualFold;
    }
    if (_$data.containsKey('sourceContainsFold')) {
      final l$sourceContainsFold = sourceContainsFold;
      result$data['sourceContainsFold'] = l$sourceContainsFold;
    }
    if (_$data.containsKey('sourceurl')) {
      final l$sourceurl = sourceurl;
      result$data['sourceurl'] = l$sourceurl;
    }
    if (_$data.containsKey('sourceurlNEQ')) {
      final l$sourceurlNEQ = sourceurlNEQ;
      result$data['sourceurlNEQ'] = l$sourceurlNEQ;
    }
    if (_$data.containsKey('sourceurlIn')) {
      final l$sourceurlIn = sourceurlIn;
      result$data['sourceurlIn'] = l$sourceurlIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('sourceurlNotIn')) {
      final l$sourceurlNotIn = sourceurlNotIn;
      result$data['sourceurlNotIn'] = l$sourceurlNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('sourceurlGT')) {
      final l$sourceurlGT = sourceurlGT;
      result$data['sourceurlGT'] = l$sourceurlGT;
    }
    if (_$data.containsKey('sourceurlGTE')) {
      final l$sourceurlGTE = sourceurlGTE;
      result$data['sourceurlGTE'] = l$sourceurlGTE;
    }
    if (_$data.containsKey('sourceurlLT')) {
      final l$sourceurlLT = sourceurlLT;
      result$data['sourceurlLT'] = l$sourceurlLT;
    }
    if (_$data.containsKey('sourceurlLTE')) {
      final l$sourceurlLTE = sourceurlLTE;
      result$data['sourceurlLTE'] = l$sourceurlLTE;
    }
    if (_$data.containsKey('sourceurlContains')) {
      final l$sourceurlContains = sourceurlContains;
      result$data['sourceurlContains'] = l$sourceurlContains;
    }
    if (_$data.containsKey('sourceurlHasPrefix')) {
      final l$sourceurlHasPrefix = sourceurlHasPrefix;
      result$data['sourceurlHasPrefix'] = l$sourceurlHasPrefix;
    }
    if (_$data.containsKey('sourceurlHasSuffix')) {
      final l$sourceurlHasSuffix = sourceurlHasSuffix;
      result$data['sourceurlHasSuffix'] = l$sourceurlHasSuffix;
    }
    if (_$data.containsKey('sourceurlEqualFold')) {
      final l$sourceurlEqualFold = sourceurlEqualFold;
      result$data['sourceurlEqualFold'] = l$sourceurlEqualFold;
    }
    if (_$data.containsKey('sourceurlContainsFold')) {
      final l$sourceurlContainsFold = sourceurlContainsFold;
      result$data['sourceurlContainsFold'] = l$sourceurlContainsFold;
    }
    if (_$data.containsKey('licence')) {
      final l$licence = licence;
      result$data['licence'] = l$licence;
    }
    if (_$data.containsKey('licenceNEQ')) {
      final l$licenceNEQ = licenceNEQ;
      result$data['licenceNEQ'] = l$licenceNEQ;
    }
    if (_$data.containsKey('licenceIn')) {
      final l$licenceIn = licenceIn;
      result$data['licenceIn'] = l$licenceIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('licenceNotIn')) {
      final l$licenceNotIn = licenceNotIn;
      result$data['licenceNotIn'] = l$licenceNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('licenceGT')) {
      final l$licenceGT = licenceGT;
      result$data['licenceGT'] = l$licenceGT;
    }
    if (_$data.containsKey('licenceGTE')) {
      final l$licenceGTE = licenceGTE;
      result$data['licenceGTE'] = l$licenceGTE;
    }
    if (_$data.containsKey('licenceLT')) {
      final l$licenceLT = licenceLT;
      result$data['licenceLT'] = l$licenceLT;
    }
    if (_$data.containsKey('licenceLTE')) {
      final l$licenceLTE = licenceLTE;
      result$data['licenceLTE'] = l$licenceLTE;
    }
    if (_$data.containsKey('licenceContains')) {
      final l$licenceContains = licenceContains;
      result$data['licenceContains'] = l$licenceContains;
    }
    if (_$data.containsKey('licenceHasPrefix')) {
      final l$licenceHasPrefix = licenceHasPrefix;
      result$data['licenceHasPrefix'] = l$licenceHasPrefix;
    }
    if (_$data.containsKey('licenceHasSuffix')) {
      final l$licenceHasSuffix = licenceHasSuffix;
      result$data['licenceHasSuffix'] = l$licenceHasSuffix;
    }
    if (_$data.containsKey('licenceEqualFold')) {
      final l$licenceEqualFold = licenceEqualFold;
      result$data['licenceEqualFold'] = l$licenceEqualFold;
    }
    if (_$data.containsKey('licenceContainsFold')) {
      final l$licenceContainsFold = licenceContainsFold;
      result$data['licenceContainsFold'] = l$licenceContainsFold;
    }
    if (_$data.containsKey('licenceurl')) {
      final l$licenceurl = licenceurl;
      result$data['licenceurl'] = l$licenceurl;
    }
    if (_$data.containsKey('licenceurlNEQ')) {
      final l$licenceurlNEQ = licenceurlNEQ;
      result$data['licenceurlNEQ'] = l$licenceurlNEQ;
    }
    if (_$data.containsKey('licenceurlIn')) {
      final l$licenceurlIn = licenceurlIn;
      result$data['licenceurlIn'] = l$licenceurlIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('licenceurlNotIn')) {
      final l$licenceurlNotIn = licenceurlNotIn;
      result$data['licenceurlNotIn'] =
          l$licenceurlNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('licenceurlGT')) {
      final l$licenceurlGT = licenceurlGT;
      result$data['licenceurlGT'] = l$licenceurlGT;
    }
    if (_$data.containsKey('licenceurlGTE')) {
      final l$licenceurlGTE = licenceurlGTE;
      result$data['licenceurlGTE'] = l$licenceurlGTE;
    }
    if (_$data.containsKey('licenceurlLT')) {
      final l$licenceurlLT = licenceurlLT;
      result$data['licenceurlLT'] = l$licenceurlLT;
    }
    if (_$data.containsKey('licenceurlLTE')) {
      final l$licenceurlLTE = licenceurlLTE;
      result$data['licenceurlLTE'] = l$licenceurlLTE;
    }
    if (_$data.containsKey('licenceurlContains')) {
      final l$licenceurlContains = licenceurlContains;
      result$data['licenceurlContains'] = l$licenceurlContains;
    }
    if (_$data.containsKey('licenceurlHasPrefix')) {
      final l$licenceurlHasPrefix = licenceurlHasPrefix;
      result$data['licenceurlHasPrefix'] = l$licenceurlHasPrefix;
    }
    if (_$data.containsKey('licenceurlHasSuffix')) {
      final l$licenceurlHasSuffix = licenceurlHasSuffix;
      result$data['licenceurlHasSuffix'] = l$licenceurlHasSuffix;
    }
    if (_$data.containsKey('licenceurlEqualFold')) {
      final l$licenceurlEqualFold = licenceurlEqualFold;
      result$data['licenceurlEqualFold'] = l$licenceurlEqualFold;
    }
    if (_$data.containsKey('licenceurlContainsFold')) {
      final l$licenceurlContainsFold = licenceurlContainsFold;
      result$data['licenceurlContainsFold'] = l$licenceurlContainsFold;
    }
    if (_$data.containsKey('ishidden')) {
      final l$ishidden = ishidden;
      result$data['ishidden'] = l$ishidden;
    }
    if (_$data.containsKey('ishiddenNEQ')) {
      final l$ishiddenNEQ = ishiddenNEQ;
      result$data['ishiddenNEQ'] = l$ishiddenNEQ;
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order;
    }
    if (_$data.containsKey('orderNEQ')) {
      final l$orderNEQ = orderNEQ;
      result$data['orderNEQ'] = l$orderNEQ;
    }
    if (_$data.containsKey('orderIn')) {
      final l$orderIn = orderIn;
      result$data['orderIn'] = l$orderIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderNotIn')) {
      final l$orderNotIn = orderNotIn;
      result$data['orderNotIn'] = l$orderNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderGT')) {
      final l$orderGT = orderGT;
      result$data['orderGT'] = l$orderGT;
    }
    if (_$data.containsKey('orderGTE')) {
      final l$orderGTE = orderGTE;
      result$data['orderGTE'] = l$orderGTE;
    }
    if (_$data.containsKey('orderLT')) {
      final l$orderLT = orderLT;
      result$data['orderLT'] = l$orderLT;
    }
    if (_$data.containsKey('orderLTE')) {
      final l$orderLTE = orderLTE;
      result$data['orderLTE'] = l$orderLTE;
    }
    if (_$data.containsKey('episodescount')) {
      final l$episodescount = episodescount;
      result$data['episodescount'] = l$episodescount;
    }
    if (_$data.containsKey('episodescountNEQ')) {
      final l$episodescountNEQ = episodescountNEQ;
      result$data['episodescountNEQ'] = l$episodescountNEQ;
    }
    if (_$data.containsKey('episodescountIn')) {
      final l$episodescountIn = episodescountIn;
      result$data['episodescountIn'] =
          l$episodescountIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('episodescountNotIn')) {
      final l$episodescountNotIn = episodescountNotIn;
      result$data['episodescountNotIn'] =
          l$episodescountNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('episodescountGT')) {
      final l$episodescountGT = episodescountGT;
      result$data['episodescountGT'] = l$episodescountGT;
    }
    if (_$data.containsKey('episodescountGTE')) {
      final l$episodescountGTE = episodescountGTE;
      result$data['episodescountGTE'] = l$episodescountGTE;
    }
    if (_$data.containsKey('episodescountLT')) {
      final l$episodescountLT = episodescountLT;
      result$data['episodescountLT'] = l$episodescountLT;
    }
    if (_$data.containsKey('episodescountLTE')) {
      final l$episodescountLTE = episodescountLTE;
      result$data['episodescountLTE'] = l$episodescountLTE;
    }
    if (_$data.containsKey('hasEpisodes')) {
      final l$hasEpisodes = hasEpisodes;
      result$data['hasEpisodes'] = l$hasEpisodes;
    }
    if (_$data.containsKey('hasEpisodesWith')) {
      final l$hasEpisodesWith = hasEpisodesWith;
      result$data['hasEpisodesWith'] =
          l$hasEpisodesWith?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$ContentWhereInput<Input$ContentWhereInput> get copyWith =>
      CopyWith$Input$ContentWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$ContentWhereInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$typeNEQ = typeNEQ;
    final lOther$typeNEQ = other.typeNEQ;
    if (_$data.containsKey('typeNEQ') != other._$data.containsKey('typeNEQ')) {
      return false;
    }
    if (l$typeNEQ != lOther$typeNEQ) {
      return false;
    }
    final l$typeIn = typeIn;
    final lOther$typeIn = other.typeIn;
    if (_$data.containsKey('typeIn') != other._$data.containsKey('typeIn')) {
      return false;
    }
    if (l$typeIn != null && lOther$typeIn != null) {
      if (l$typeIn.length != lOther$typeIn.length) {
        return false;
      }
      for (int i = 0; i < l$typeIn.length; i++) {
        final l$typeIn$entry = l$typeIn[i];
        final lOther$typeIn$entry = lOther$typeIn[i];
        if (l$typeIn$entry != lOther$typeIn$entry) {
          return false;
        }
      }
    } else if (l$typeIn != lOther$typeIn) {
      return false;
    }
    final l$typeNotIn = typeNotIn;
    final lOther$typeNotIn = other.typeNotIn;
    if (_$data.containsKey('typeNotIn') !=
        other._$data.containsKey('typeNotIn')) {
      return false;
    }
    if (l$typeNotIn != null && lOther$typeNotIn != null) {
      if (l$typeNotIn.length != lOther$typeNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$typeNotIn.length; i++) {
        final l$typeNotIn$entry = l$typeNotIn[i];
        final lOther$typeNotIn$entry = lOther$typeNotIn[i];
        if (l$typeNotIn$entry != lOther$typeNotIn$entry) {
          return false;
        }
      }
    } else if (l$typeNotIn != lOther$typeNotIn) {
      return false;
    }
    final l$iconimage = iconimage;
    final lOther$iconimage = other.iconimage;
    if (_$data.containsKey('iconimage') !=
        other._$data.containsKey('iconimage')) {
      return false;
    }
    if (l$iconimage != lOther$iconimage) {
      return false;
    }
    final l$iconimageNEQ = iconimageNEQ;
    final lOther$iconimageNEQ = other.iconimageNEQ;
    if (_$data.containsKey('iconimageNEQ') !=
        other._$data.containsKey('iconimageNEQ')) {
      return false;
    }
    if (l$iconimageNEQ != lOther$iconimageNEQ) {
      return false;
    }
    final l$iconimageIn = iconimageIn;
    final lOther$iconimageIn = other.iconimageIn;
    if (_$data.containsKey('iconimageIn') !=
        other._$data.containsKey('iconimageIn')) {
      return false;
    }
    if (l$iconimageIn != null && lOther$iconimageIn != null) {
      if (l$iconimageIn.length != lOther$iconimageIn.length) {
        return false;
      }
      for (int i = 0; i < l$iconimageIn.length; i++) {
        final l$iconimageIn$entry = l$iconimageIn[i];
        final lOther$iconimageIn$entry = lOther$iconimageIn[i];
        if (l$iconimageIn$entry != lOther$iconimageIn$entry) {
          return false;
        }
      }
    } else if (l$iconimageIn != lOther$iconimageIn) {
      return false;
    }
    final l$iconimageNotIn = iconimageNotIn;
    final lOther$iconimageNotIn = other.iconimageNotIn;
    if (_$data.containsKey('iconimageNotIn') !=
        other._$data.containsKey('iconimageNotIn')) {
      return false;
    }
    if (l$iconimageNotIn != null && lOther$iconimageNotIn != null) {
      if (l$iconimageNotIn.length != lOther$iconimageNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$iconimageNotIn.length; i++) {
        final l$iconimageNotIn$entry = l$iconimageNotIn[i];
        final lOther$iconimageNotIn$entry = lOther$iconimageNotIn[i];
        if (l$iconimageNotIn$entry != lOther$iconimageNotIn$entry) {
          return false;
        }
      }
    } else if (l$iconimageNotIn != lOther$iconimageNotIn) {
      return false;
    }
    final l$iconimageGT = iconimageGT;
    final lOther$iconimageGT = other.iconimageGT;
    if (_$data.containsKey('iconimageGT') !=
        other._$data.containsKey('iconimageGT')) {
      return false;
    }
    if (l$iconimageGT != lOther$iconimageGT) {
      return false;
    }
    final l$iconimageGTE = iconimageGTE;
    final lOther$iconimageGTE = other.iconimageGTE;
    if (_$data.containsKey('iconimageGTE') !=
        other._$data.containsKey('iconimageGTE')) {
      return false;
    }
    if (l$iconimageGTE != lOther$iconimageGTE) {
      return false;
    }
    final l$iconimageLT = iconimageLT;
    final lOther$iconimageLT = other.iconimageLT;
    if (_$data.containsKey('iconimageLT') !=
        other._$data.containsKey('iconimageLT')) {
      return false;
    }
    if (l$iconimageLT != lOther$iconimageLT) {
      return false;
    }
    final l$iconimageLTE = iconimageLTE;
    final lOther$iconimageLTE = other.iconimageLTE;
    if (_$data.containsKey('iconimageLTE') !=
        other._$data.containsKey('iconimageLTE')) {
      return false;
    }
    if (l$iconimageLTE != lOther$iconimageLTE) {
      return false;
    }
    final l$iconimageContains = iconimageContains;
    final lOther$iconimageContains = other.iconimageContains;
    if (_$data.containsKey('iconimageContains') !=
        other._$data.containsKey('iconimageContains')) {
      return false;
    }
    if (l$iconimageContains != lOther$iconimageContains) {
      return false;
    }
    final l$iconimageHasPrefix = iconimageHasPrefix;
    final lOther$iconimageHasPrefix = other.iconimageHasPrefix;
    if (_$data.containsKey('iconimageHasPrefix') !=
        other._$data.containsKey('iconimageHasPrefix')) {
      return false;
    }
    if (l$iconimageHasPrefix != lOther$iconimageHasPrefix) {
      return false;
    }
    final l$iconimageHasSuffix = iconimageHasSuffix;
    final lOther$iconimageHasSuffix = other.iconimageHasSuffix;
    if (_$data.containsKey('iconimageHasSuffix') !=
        other._$data.containsKey('iconimageHasSuffix')) {
      return false;
    }
    if (l$iconimageHasSuffix != lOther$iconimageHasSuffix) {
      return false;
    }
    final l$iconimageEqualFold = iconimageEqualFold;
    final lOther$iconimageEqualFold = other.iconimageEqualFold;
    if (_$data.containsKey('iconimageEqualFold') !=
        other._$data.containsKey('iconimageEqualFold')) {
      return false;
    }
    if (l$iconimageEqualFold != lOther$iconimageEqualFold) {
      return false;
    }
    final l$iconimageContainsFold = iconimageContainsFold;
    final lOther$iconimageContainsFold = other.iconimageContainsFold;
    if (_$data.containsKey('iconimageContainsFold') !=
        other._$data.containsKey('iconimageContainsFold')) {
      return false;
    }
    if (l$iconimageContainsFold != lOther$iconimageContainsFold) {
      return false;
    }
    final l$coverimage = coverimage;
    final lOther$coverimage = other.coverimage;
    if (_$data.containsKey('coverimage') !=
        other._$data.containsKey('coverimage')) {
      return false;
    }
    if (l$coverimage != lOther$coverimage) {
      return false;
    }
    final l$coverimageNEQ = coverimageNEQ;
    final lOther$coverimageNEQ = other.coverimageNEQ;
    if (_$data.containsKey('coverimageNEQ') !=
        other._$data.containsKey('coverimageNEQ')) {
      return false;
    }
    if (l$coverimageNEQ != lOther$coverimageNEQ) {
      return false;
    }
    final l$coverimageIn = coverimageIn;
    final lOther$coverimageIn = other.coverimageIn;
    if (_$data.containsKey('coverimageIn') !=
        other._$data.containsKey('coverimageIn')) {
      return false;
    }
    if (l$coverimageIn != null && lOther$coverimageIn != null) {
      if (l$coverimageIn.length != lOther$coverimageIn.length) {
        return false;
      }
      for (int i = 0; i < l$coverimageIn.length; i++) {
        final l$coverimageIn$entry = l$coverimageIn[i];
        final lOther$coverimageIn$entry = lOther$coverimageIn[i];
        if (l$coverimageIn$entry != lOther$coverimageIn$entry) {
          return false;
        }
      }
    } else if (l$coverimageIn != lOther$coverimageIn) {
      return false;
    }
    final l$coverimageNotIn = coverimageNotIn;
    final lOther$coverimageNotIn = other.coverimageNotIn;
    if (_$data.containsKey('coverimageNotIn') !=
        other._$data.containsKey('coverimageNotIn')) {
      return false;
    }
    if (l$coverimageNotIn != null && lOther$coverimageNotIn != null) {
      if (l$coverimageNotIn.length != lOther$coverimageNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$coverimageNotIn.length; i++) {
        final l$coverimageNotIn$entry = l$coverimageNotIn[i];
        final lOther$coverimageNotIn$entry = lOther$coverimageNotIn[i];
        if (l$coverimageNotIn$entry != lOther$coverimageNotIn$entry) {
          return false;
        }
      }
    } else if (l$coverimageNotIn != lOther$coverimageNotIn) {
      return false;
    }
    final l$coverimageGT = coverimageGT;
    final lOther$coverimageGT = other.coverimageGT;
    if (_$data.containsKey('coverimageGT') !=
        other._$data.containsKey('coverimageGT')) {
      return false;
    }
    if (l$coverimageGT != lOther$coverimageGT) {
      return false;
    }
    final l$coverimageGTE = coverimageGTE;
    final lOther$coverimageGTE = other.coverimageGTE;
    if (_$data.containsKey('coverimageGTE') !=
        other._$data.containsKey('coverimageGTE')) {
      return false;
    }
    if (l$coverimageGTE != lOther$coverimageGTE) {
      return false;
    }
    final l$coverimageLT = coverimageLT;
    final lOther$coverimageLT = other.coverimageLT;
    if (_$data.containsKey('coverimageLT') !=
        other._$data.containsKey('coverimageLT')) {
      return false;
    }
    if (l$coverimageLT != lOther$coverimageLT) {
      return false;
    }
    final l$coverimageLTE = coverimageLTE;
    final lOther$coverimageLTE = other.coverimageLTE;
    if (_$data.containsKey('coverimageLTE') !=
        other._$data.containsKey('coverimageLTE')) {
      return false;
    }
    if (l$coverimageLTE != lOther$coverimageLTE) {
      return false;
    }
    final l$coverimageContains = coverimageContains;
    final lOther$coverimageContains = other.coverimageContains;
    if (_$data.containsKey('coverimageContains') !=
        other._$data.containsKey('coverimageContains')) {
      return false;
    }
    if (l$coverimageContains != lOther$coverimageContains) {
      return false;
    }
    final l$coverimageHasPrefix = coverimageHasPrefix;
    final lOther$coverimageHasPrefix = other.coverimageHasPrefix;
    if (_$data.containsKey('coverimageHasPrefix') !=
        other._$data.containsKey('coverimageHasPrefix')) {
      return false;
    }
    if (l$coverimageHasPrefix != lOther$coverimageHasPrefix) {
      return false;
    }
    final l$coverimageHasSuffix = coverimageHasSuffix;
    final lOther$coverimageHasSuffix = other.coverimageHasSuffix;
    if (_$data.containsKey('coverimageHasSuffix') !=
        other._$data.containsKey('coverimageHasSuffix')) {
      return false;
    }
    if (l$coverimageHasSuffix != lOther$coverimageHasSuffix) {
      return false;
    }
    final l$coverimageEqualFold = coverimageEqualFold;
    final lOther$coverimageEqualFold = other.coverimageEqualFold;
    if (_$data.containsKey('coverimageEqualFold') !=
        other._$data.containsKey('coverimageEqualFold')) {
      return false;
    }
    if (l$coverimageEqualFold != lOther$coverimageEqualFold) {
      return false;
    }
    final l$coverimageContainsFold = coverimageContainsFold;
    final lOther$coverimageContainsFold = other.coverimageContainsFold;
    if (_$data.containsKey('coverimageContainsFold') !=
        other._$data.containsKey('coverimageContainsFold')) {
      return false;
    }
    if (l$coverimageContainsFold != lOther$coverimageContainsFold) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$titleNEQ = titleNEQ;
    final lOther$titleNEQ = other.titleNEQ;
    if (_$data.containsKey('titleNEQ') !=
        other._$data.containsKey('titleNEQ')) {
      return false;
    }
    if (l$titleNEQ != lOther$titleNEQ) {
      return false;
    }
    final l$titleIn = titleIn;
    final lOther$titleIn = other.titleIn;
    if (_$data.containsKey('titleIn') != other._$data.containsKey('titleIn')) {
      return false;
    }
    if (l$titleIn != null && lOther$titleIn != null) {
      if (l$titleIn.length != lOther$titleIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleIn.length; i++) {
        final l$titleIn$entry = l$titleIn[i];
        final lOther$titleIn$entry = lOther$titleIn[i];
        if (l$titleIn$entry != lOther$titleIn$entry) {
          return false;
        }
      }
    } else if (l$titleIn != lOther$titleIn) {
      return false;
    }
    final l$titleNotIn = titleNotIn;
    final lOther$titleNotIn = other.titleNotIn;
    if (_$data.containsKey('titleNotIn') !=
        other._$data.containsKey('titleNotIn')) {
      return false;
    }
    if (l$titleNotIn != null && lOther$titleNotIn != null) {
      if (l$titleNotIn.length != lOther$titleNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleNotIn.length; i++) {
        final l$titleNotIn$entry = l$titleNotIn[i];
        final lOther$titleNotIn$entry = lOther$titleNotIn[i];
        if (l$titleNotIn$entry != lOther$titleNotIn$entry) {
          return false;
        }
      }
    } else if (l$titleNotIn != lOther$titleNotIn) {
      return false;
    }
    final l$titleGT = titleGT;
    final lOther$titleGT = other.titleGT;
    if (_$data.containsKey('titleGT') != other._$data.containsKey('titleGT')) {
      return false;
    }
    if (l$titleGT != lOther$titleGT) {
      return false;
    }
    final l$titleGTE = titleGTE;
    final lOther$titleGTE = other.titleGTE;
    if (_$data.containsKey('titleGTE') !=
        other._$data.containsKey('titleGTE')) {
      return false;
    }
    if (l$titleGTE != lOther$titleGTE) {
      return false;
    }
    final l$titleLT = titleLT;
    final lOther$titleLT = other.titleLT;
    if (_$data.containsKey('titleLT') != other._$data.containsKey('titleLT')) {
      return false;
    }
    if (l$titleLT != lOther$titleLT) {
      return false;
    }
    final l$titleLTE = titleLTE;
    final lOther$titleLTE = other.titleLTE;
    if (_$data.containsKey('titleLTE') !=
        other._$data.containsKey('titleLTE')) {
      return false;
    }
    if (l$titleLTE != lOther$titleLTE) {
      return false;
    }
    final l$titleContains = titleContains;
    final lOther$titleContains = other.titleContains;
    if (_$data.containsKey('titleContains') !=
        other._$data.containsKey('titleContains')) {
      return false;
    }
    if (l$titleContains != lOther$titleContains) {
      return false;
    }
    final l$titleHasPrefix = titleHasPrefix;
    final lOther$titleHasPrefix = other.titleHasPrefix;
    if (_$data.containsKey('titleHasPrefix') !=
        other._$data.containsKey('titleHasPrefix')) {
      return false;
    }
    if (l$titleHasPrefix != lOther$titleHasPrefix) {
      return false;
    }
    final l$titleHasSuffix = titleHasSuffix;
    final lOther$titleHasSuffix = other.titleHasSuffix;
    if (_$data.containsKey('titleHasSuffix') !=
        other._$data.containsKey('titleHasSuffix')) {
      return false;
    }
    if (l$titleHasSuffix != lOther$titleHasSuffix) {
      return false;
    }
    final l$titleEqualFold = titleEqualFold;
    final lOther$titleEqualFold = other.titleEqualFold;
    if (_$data.containsKey('titleEqualFold') !=
        other._$data.containsKey('titleEqualFold')) {
      return false;
    }
    if (l$titleEqualFold != lOther$titleEqualFold) {
      return false;
    }
    final l$titleContainsFold = titleContainsFold;
    final lOther$titleContainsFold = other.titleContainsFold;
    if (_$data.containsKey('titleContainsFold') !=
        other._$data.containsKey('titleContainsFold')) {
      return false;
    }
    if (l$titleContainsFold != lOther$titleContainsFold) {
      return false;
    }
    final l$subtitle = subtitle;
    final lOther$subtitle = other.subtitle;
    if (_$data.containsKey('subtitle') !=
        other._$data.containsKey('subtitle')) {
      return false;
    }
    if (l$subtitle != lOther$subtitle) {
      return false;
    }
    final l$subtitleNEQ = subtitleNEQ;
    final lOther$subtitleNEQ = other.subtitleNEQ;
    if (_$data.containsKey('subtitleNEQ') !=
        other._$data.containsKey('subtitleNEQ')) {
      return false;
    }
    if (l$subtitleNEQ != lOther$subtitleNEQ) {
      return false;
    }
    final l$subtitleIn = subtitleIn;
    final lOther$subtitleIn = other.subtitleIn;
    if (_$data.containsKey('subtitleIn') !=
        other._$data.containsKey('subtitleIn')) {
      return false;
    }
    if (l$subtitleIn != null && lOther$subtitleIn != null) {
      if (l$subtitleIn.length != lOther$subtitleIn.length) {
        return false;
      }
      for (int i = 0; i < l$subtitleIn.length; i++) {
        final l$subtitleIn$entry = l$subtitleIn[i];
        final lOther$subtitleIn$entry = lOther$subtitleIn[i];
        if (l$subtitleIn$entry != lOther$subtitleIn$entry) {
          return false;
        }
      }
    } else if (l$subtitleIn != lOther$subtitleIn) {
      return false;
    }
    final l$subtitleNotIn = subtitleNotIn;
    final lOther$subtitleNotIn = other.subtitleNotIn;
    if (_$data.containsKey('subtitleNotIn') !=
        other._$data.containsKey('subtitleNotIn')) {
      return false;
    }
    if (l$subtitleNotIn != null && lOther$subtitleNotIn != null) {
      if (l$subtitleNotIn.length != lOther$subtitleNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$subtitleNotIn.length; i++) {
        final l$subtitleNotIn$entry = l$subtitleNotIn[i];
        final lOther$subtitleNotIn$entry = lOther$subtitleNotIn[i];
        if (l$subtitleNotIn$entry != lOther$subtitleNotIn$entry) {
          return false;
        }
      }
    } else if (l$subtitleNotIn != lOther$subtitleNotIn) {
      return false;
    }
    final l$subtitleGT = subtitleGT;
    final lOther$subtitleGT = other.subtitleGT;
    if (_$data.containsKey('subtitleGT') !=
        other._$data.containsKey('subtitleGT')) {
      return false;
    }
    if (l$subtitleGT != lOther$subtitleGT) {
      return false;
    }
    final l$subtitleGTE = subtitleGTE;
    final lOther$subtitleGTE = other.subtitleGTE;
    if (_$data.containsKey('subtitleGTE') !=
        other._$data.containsKey('subtitleGTE')) {
      return false;
    }
    if (l$subtitleGTE != lOther$subtitleGTE) {
      return false;
    }
    final l$subtitleLT = subtitleLT;
    final lOther$subtitleLT = other.subtitleLT;
    if (_$data.containsKey('subtitleLT') !=
        other._$data.containsKey('subtitleLT')) {
      return false;
    }
    if (l$subtitleLT != lOther$subtitleLT) {
      return false;
    }
    final l$subtitleLTE = subtitleLTE;
    final lOther$subtitleLTE = other.subtitleLTE;
    if (_$data.containsKey('subtitleLTE') !=
        other._$data.containsKey('subtitleLTE')) {
      return false;
    }
    if (l$subtitleLTE != lOther$subtitleLTE) {
      return false;
    }
    final l$subtitleContains = subtitleContains;
    final lOther$subtitleContains = other.subtitleContains;
    if (_$data.containsKey('subtitleContains') !=
        other._$data.containsKey('subtitleContains')) {
      return false;
    }
    if (l$subtitleContains != lOther$subtitleContains) {
      return false;
    }
    final l$subtitleHasPrefix = subtitleHasPrefix;
    final lOther$subtitleHasPrefix = other.subtitleHasPrefix;
    if (_$data.containsKey('subtitleHasPrefix') !=
        other._$data.containsKey('subtitleHasPrefix')) {
      return false;
    }
    if (l$subtitleHasPrefix != lOther$subtitleHasPrefix) {
      return false;
    }
    final l$subtitleHasSuffix = subtitleHasSuffix;
    final lOther$subtitleHasSuffix = other.subtitleHasSuffix;
    if (_$data.containsKey('subtitleHasSuffix') !=
        other._$data.containsKey('subtitleHasSuffix')) {
      return false;
    }
    if (l$subtitleHasSuffix != lOther$subtitleHasSuffix) {
      return false;
    }
    final l$subtitleEqualFold = subtitleEqualFold;
    final lOther$subtitleEqualFold = other.subtitleEqualFold;
    if (_$data.containsKey('subtitleEqualFold') !=
        other._$data.containsKey('subtitleEqualFold')) {
      return false;
    }
    if (l$subtitleEqualFold != lOther$subtitleEqualFold) {
      return false;
    }
    final l$subtitleContainsFold = subtitleContainsFold;
    final lOther$subtitleContainsFold = other.subtitleContainsFold;
    if (_$data.containsKey('subtitleContainsFold') !=
        other._$data.containsKey('subtitleContainsFold')) {
      return false;
    }
    if (l$subtitleContainsFold != lOther$subtitleContainsFold) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$descriptionNEQ = descriptionNEQ;
    final lOther$descriptionNEQ = other.descriptionNEQ;
    if (_$data.containsKey('descriptionNEQ') !=
        other._$data.containsKey('descriptionNEQ')) {
      return false;
    }
    if (l$descriptionNEQ != lOther$descriptionNEQ) {
      return false;
    }
    final l$descriptionIn = descriptionIn;
    final lOther$descriptionIn = other.descriptionIn;
    if (_$data.containsKey('descriptionIn') !=
        other._$data.containsKey('descriptionIn')) {
      return false;
    }
    if (l$descriptionIn != null && lOther$descriptionIn != null) {
      if (l$descriptionIn.length != lOther$descriptionIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionIn.length; i++) {
        final l$descriptionIn$entry = l$descriptionIn[i];
        final lOther$descriptionIn$entry = lOther$descriptionIn[i];
        if (l$descriptionIn$entry != lOther$descriptionIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionIn != lOther$descriptionIn) {
      return false;
    }
    final l$descriptionNotIn = descriptionNotIn;
    final lOther$descriptionNotIn = other.descriptionNotIn;
    if (_$data.containsKey('descriptionNotIn') !=
        other._$data.containsKey('descriptionNotIn')) {
      return false;
    }
    if (l$descriptionNotIn != null && lOther$descriptionNotIn != null) {
      if (l$descriptionNotIn.length != lOther$descriptionNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionNotIn.length; i++) {
        final l$descriptionNotIn$entry = l$descriptionNotIn[i];
        final lOther$descriptionNotIn$entry = lOther$descriptionNotIn[i];
        if (l$descriptionNotIn$entry != lOther$descriptionNotIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionNotIn != lOther$descriptionNotIn) {
      return false;
    }
    final l$descriptionGT = descriptionGT;
    final lOther$descriptionGT = other.descriptionGT;
    if (_$data.containsKey('descriptionGT') !=
        other._$data.containsKey('descriptionGT')) {
      return false;
    }
    if (l$descriptionGT != lOther$descriptionGT) {
      return false;
    }
    final l$descriptionGTE = descriptionGTE;
    final lOther$descriptionGTE = other.descriptionGTE;
    if (_$data.containsKey('descriptionGTE') !=
        other._$data.containsKey('descriptionGTE')) {
      return false;
    }
    if (l$descriptionGTE != lOther$descriptionGTE) {
      return false;
    }
    final l$descriptionLT = descriptionLT;
    final lOther$descriptionLT = other.descriptionLT;
    if (_$data.containsKey('descriptionLT') !=
        other._$data.containsKey('descriptionLT')) {
      return false;
    }
    if (l$descriptionLT != lOther$descriptionLT) {
      return false;
    }
    final l$descriptionLTE = descriptionLTE;
    final lOther$descriptionLTE = other.descriptionLTE;
    if (_$data.containsKey('descriptionLTE') !=
        other._$data.containsKey('descriptionLTE')) {
      return false;
    }
    if (l$descriptionLTE != lOther$descriptionLTE) {
      return false;
    }
    final l$descriptionContains = descriptionContains;
    final lOther$descriptionContains = other.descriptionContains;
    if (_$data.containsKey('descriptionContains') !=
        other._$data.containsKey('descriptionContains')) {
      return false;
    }
    if (l$descriptionContains != lOther$descriptionContains) {
      return false;
    }
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final lOther$descriptionHasPrefix = other.descriptionHasPrefix;
    if (_$data.containsKey('descriptionHasPrefix') !=
        other._$data.containsKey('descriptionHasPrefix')) {
      return false;
    }
    if (l$descriptionHasPrefix != lOther$descriptionHasPrefix) {
      return false;
    }
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final lOther$descriptionHasSuffix = other.descriptionHasSuffix;
    if (_$data.containsKey('descriptionHasSuffix') !=
        other._$data.containsKey('descriptionHasSuffix')) {
      return false;
    }
    if (l$descriptionHasSuffix != lOther$descriptionHasSuffix) {
      return false;
    }
    final l$descriptionEqualFold = descriptionEqualFold;
    final lOther$descriptionEqualFold = other.descriptionEqualFold;
    if (_$data.containsKey('descriptionEqualFold') !=
        other._$data.containsKey('descriptionEqualFold')) {
      return false;
    }
    if (l$descriptionEqualFold != lOther$descriptionEqualFold) {
      return false;
    }
    final l$descriptionContainsFold = descriptionContainsFold;
    final lOther$descriptionContainsFold = other.descriptionContainsFold;
    if (_$data.containsKey('descriptionContainsFold') !=
        other._$data.containsKey('descriptionContainsFold')) {
      return false;
    }
    if (l$descriptionContainsFold != lOther$descriptionContainsFold) {
      return false;
    }
    final l$source = source;
    final lOther$source = other.source;
    if (_$data.containsKey('source') != other._$data.containsKey('source')) {
      return false;
    }
    if (l$source != lOther$source) {
      return false;
    }
    final l$sourceNEQ = sourceNEQ;
    final lOther$sourceNEQ = other.sourceNEQ;
    if (_$data.containsKey('sourceNEQ') !=
        other._$data.containsKey('sourceNEQ')) {
      return false;
    }
    if (l$sourceNEQ != lOther$sourceNEQ) {
      return false;
    }
    final l$sourceIn = sourceIn;
    final lOther$sourceIn = other.sourceIn;
    if (_$data.containsKey('sourceIn') !=
        other._$data.containsKey('sourceIn')) {
      return false;
    }
    if (l$sourceIn != null && lOther$sourceIn != null) {
      if (l$sourceIn.length != lOther$sourceIn.length) {
        return false;
      }
      for (int i = 0; i < l$sourceIn.length; i++) {
        final l$sourceIn$entry = l$sourceIn[i];
        final lOther$sourceIn$entry = lOther$sourceIn[i];
        if (l$sourceIn$entry != lOther$sourceIn$entry) {
          return false;
        }
      }
    } else if (l$sourceIn != lOther$sourceIn) {
      return false;
    }
    final l$sourceNotIn = sourceNotIn;
    final lOther$sourceNotIn = other.sourceNotIn;
    if (_$data.containsKey('sourceNotIn') !=
        other._$data.containsKey('sourceNotIn')) {
      return false;
    }
    if (l$sourceNotIn != null && lOther$sourceNotIn != null) {
      if (l$sourceNotIn.length != lOther$sourceNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$sourceNotIn.length; i++) {
        final l$sourceNotIn$entry = l$sourceNotIn[i];
        final lOther$sourceNotIn$entry = lOther$sourceNotIn[i];
        if (l$sourceNotIn$entry != lOther$sourceNotIn$entry) {
          return false;
        }
      }
    } else if (l$sourceNotIn != lOther$sourceNotIn) {
      return false;
    }
    final l$sourceGT = sourceGT;
    final lOther$sourceGT = other.sourceGT;
    if (_$data.containsKey('sourceGT') !=
        other._$data.containsKey('sourceGT')) {
      return false;
    }
    if (l$sourceGT != lOther$sourceGT) {
      return false;
    }
    final l$sourceGTE = sourceGTE;
    final lOther$sourceGTE = other.sourceGTE;
    if (_$data.containsKey('sourceGTE') !=
        other._$data.containsKey('sourceGTE')) {
      return false;
    }
    if (l$sourceGTE != lOther$sourceGTE) {
      return false;
    }
    final l$sourceLT = sourceLT;
    final lOther$sourceLT = other.sourceLT;
    if (_$data.containsKey('sourceLT') !=
        other._$data.containsKey('sourceLT')) {
      return false;
    }
    if (l$sourceLT != lOther$sourceLT) {
      return false;
    }
    final l$sourceLTE = sourceLTE;
    final lOther$sourceLTE = other.sourceLTE;
    if (_$data.containsKey('sourceLTE') !=
        other._$data.containsKey('sourceLTE')) {
      return false;
    }
    if (l$sourceLTE != lOther$sourceLTE) {
      return false;
    }
    final l$sourceContains = sourceContains;
    final lOther$sourceContains = other.sourceContains;
    if (_$data.containsKey('sourceContains') !=
        other._$data.containsKey('sourceContains')) {
      return false;
    }
    if (l$sourceContains != lOther$sourceContains) {
      return false;
    }
    final l$sourceHasPrefix = sourceHasPrefix;
    final lOther$sourceHasPrefix = other.sourceHasPrefix;
    if (_$data.containsKey('sourceHasPrefix') !=
        other._$data.containsKey('sourceHasPrefix')) {
      return false;
    }
    if (l$sourceHasPrefix != lOther$sourceHasPrefix) {
      return false;
    }
    final l$sourceHasSuffix = sourceHasSuffix;
    final lOther$sourceHasSuffix = other.sourceHasSuffix;
    if (_$data.containsKey('sourceHasSuffix') !=
        other._$data.containsKey('sourceHasSuffix')) {
      return false;
    }
    if (l$sourceHasSuffix != lOther$sourceHasSuffix) {
      return false;
    }
    final l$sourceEqualFold = sourceEqualFold;
    final lOther$sourceEqualFold = other.sourceEqualFold;
    if (_$data.containsKey('sourceEqualFold') !=
        other._$data.containsKey('sourceEqualFold')) {
      return false;
    }
    if (l$sourceEqualFold != lOther$sourceEqualFold) {
      return false;
    }
    final l$sourceContainsFold = sourceContainsFold;
    final lOther$sourceContainsFold = other.sourceContainsFold;
    if (_$data.containsKey('sourceContainsFold') !=
        other._$data.containsKey('sourceContainsFold')) {
      return false;
    }
    if (l$sourceContainsFold != lOther$sourceContainsFold) {
      return false;
    }
    final l$sourceurl = sourceurl;
    final lOther$sourceurl = other.sourceurl;
    if (_$data.containsKey('sourceurl') !=
        other._$data.containsKey('sourceurl')) {
      return false;
    }
    if (l$sourceurl != lOther$sourceurl) {
      return false;
    }
    final l$sourceurlNEQ = sourceurlNEQ;
    final lOther$sourceurlNEQ = other.sourceurlNEQ;
    if (_$data.containsKey('sourceurlNEQ') !=
        other._$data.containsKey('sourceurlNEQ')) {
      return false;
    }
    if (l$sourceurlNEQ != lOther$sourceurlNEQ) {
      return false;
    }
    final l$sourceurlIn = sourceurlIn;
    final lOther$sourceurlIn = other.sourceurlIn;
    if (_$data.containsKey('sourceurlIn') !=
        other._$data.containsKey('sourceurlIn')) {
      return false;
    }
    if (l$sourceurlIn != null && lOther$sourceurlIn != null) {
      if (l$sourceurlIn.length != lOther$sourceurlIn.length) {
        return false;
      }
      for (int i = 0; i < l$sourceurlIn.length; i++) {
        final l$sourceurlIn$entry = l$sourceurlIn[i];
        final lOther$sourceurlIn$entry = lOther$sourceurlIn[i];
        if (l$sourceurlIn$entry != lOther$sourceurlIn$entry) {
          return false;
        }
      }
    } else if (l$sourceurlIn != lOther$sourceurlIn) {
      return false;
    }
    final l$sourceurlNotIn = sourceurlNotIn;
    final lOther$sourceurlNotIn = other.sourceurlNotIn;
    if (_$data.containsKey('sourceurlNotIn') !=
        other._$data.containsKey('sourceurlNotIn')) {
      return false;
    }
    if (l$sourceurlNotIn != null && lOther$sourceurlNotIn != null) {
      if (l$sourceurlNotIn.length != lOther$sourceurlNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$sourceurlNotIn.length; i++) {
        final l$sourceurlNotIn$entry = l$sourceurlNotIn[i];
        final lOther$sourceurlNotIn$entry = lOther$sourceurlNotIn[i];
        if (l$sourceurlNotIn$entry != lOther$sourceurlNotIn$entry) {
          return false;
        }
      }
    } else if (l$sourceurlNotIn != lOther$sourceurlNotIn) {
      return false;
    }
    final l$sourceurlGT = sourceurlGT;
    final lOther$sourceurlGT = other.sourceurlGT;
    if (_$data.containsKey('sourceurlGT') !=
        other._$data.containsKey('sourceurlGT')) {
      return false;
    }
    if (l$sourceurlGT != lOther$sourceurlGT) {
      return false;
    }
    final l$sourceurlGTE = sourceurlGTE;
    final lOther$sourceurlGTE = other.sourceurlGTE;
    if (_$data.containsKey('sourceurlGTE') !=
        other._$data.containsKey('sourceurlGTE')) {
      return false;
    }
    if (l$sourceurlGTE != lOther$sourceurlGTE) {
      return false;
    }
    final l$sourceurlLT = sourceurlLT;
    final lOther$sourceurlLT = other.sourceurlLT;
    if (_$data.containsKey('sourceurlLT') !=
        other._$data.containsKey('sourceurlLT')) {
      return false;
    }
    if (l$sourceurlLT != lOther$sourceurlLT) {
      return false;
    }
    final l$sourceurlLTE = sourceurlLTE;
    final lOther$sourceurlLTE = other.sourceurlLTE;
    if (_$data.containsKey('sourceurlLTE') !=
        other._$data.containsKey('sourceurlLTE')) {
      return false;
    }
    if (l$sourceurlLTE != lOther$sourceurlLTE) {
      return false;
    }
    final l$sourceurlContains = sourceurlContains;
    final lOther$sourceurlContains = other.sourceurlContains;
    if (_$data.containsKey('sourceurlContains') !=
        other._$data.containsKey('sourceurlContains')) {
      return false;
    }
    if (l$sourceurlContains != lOther$sourceurlContains) {
      return false;
    }
    final l$sourceurlHasPrefix = sourceurlHasPrefix;
    final lOther$sourceurlHasPrefix = other.sourceurlHasPrefix;
    if (_$data.containsKey('sourceurlHasPrefix') !=
        other._$data.containsKey('sourceurlHasPrefix')) {
      return false;
    }
    if (l$sourceurlHasPrefix != lOther$sourceurlHasPrefix) {
      return false;
    }
    final l$sourceurlHasSuffix = sourceurlHasSuffix;
    final lOther$sourceurlHasSuffix = other.sourceurlHasSuffix;
    if (_$data.containsKey('sourceurlHasSuffix') !=
        other._$data.containsKey('sourceurlHasSuffix')) {
      return false;
    }
    if (l$sourceurlHasSuffix != lOther$sourceurlHasSuffix) {
      return false;
    }
    final l$sourceurlEqualFold = sourceurlEqualFold;
    final lOther$sourceurlEqualFold = other.sourceurlEqualFold;
    if (_$data.containsKey('sourceurlEqualFold') !=
        other._$data.containsKey('sourceurlEqualFold')) {
      return false;
    }
    if (l$sourceurlEqualFold != lOther$sourceurlEqualFold) {
      return false;
    }
    final l$sourceurlContainsFold = sourceurlContainsFold;
    final lOther$sourceurlContainsFold = other.sourceurlContainsFold;
    if (_$data.containsKey('sourceurlContainsFold') !=
        other._$data.containsKey('sourceurlContainsFold')) {
      return false;
    }
    if (l$sourceurlContainsFold != lOther$sourceurlContainsFold) {
      return false;
    }
    final l$licence = licence;
    final lOther$licence = other.licence;
    if (_$data.containsKey('licence') != other._$data.containsKey('licence')) {
      return false;
    }
    if (l$licence != lOther$licence) {
      return false;
    }
    final l$licenceNEQ = licenceNEQ;
    final lOther$licenceNEQ = other.licenceNEQ;
    if (_$data.containsKey('licenceNEQ') !=
        other._$data.containsKey('licenceNEQ')) {
      return false;
    }
    if (l$licenceNEQ != lOther$licenceNEQ) {
      return false;
    }
    final l$licenceIn = licenceIn;
    final lOther$licenceIn = other.licenceIn;
    if (_$data.containsKey('licenceIn') !=
        other._$data.containsKey('licenceIn')) {
      return false;
    }
    if (l$licenceIn != null && lOther$licenceIn != null) {
      if (l$licenceIn.length != lOther$licenceIn.length) {
        return false;
      }
      for (int i = 0; i < l$licenceIn.length; i++) {
        final l$licenceIn$entry = l$licenceIn[i];
        final lOther$licenceIn$entry = lOther$licenceIn[i];
        if (l$licenceIn$entry != lOther$licenceIn$entry) {
          return false;
        }
      }
    } else if (l$licenceIn != lOther$licenceIn) {
      return false;
    }
    final l$licenceNotIn = licenceNotIn;
    final lOther$licenceNotIn = other.licenceNotIn;
    if (_$data.containsKey('licenceNotIn') !=
        other._$data.containsKey('licenceNotIn')) {
      return false;
    }
    if (l$licenceNotIn != null && lOther$licenceNotIn != null) {
      if (l$licenceNotIn.length != lOther$licenceNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$licenceNotIn.length; i++) {
        final l$licenceNotIn$entry = l$licenceNotIn[i];
        final lOther$licenceNotIn$entry = lOther$licenceNotIn[i];
        if (l$licenceNotIn$entry != lOther$licenceNotIn$entry) {
          return false;
        }
      }
    } else if (l$licenceNotIn != lOther$licenceNotIn) {
      return false;
    }
    final l$licenceGT = licenceGT;
    final lOther$licenceGT = other.licenceGT;
    if (_$data.containsKey('licenceGT') !=
        other._$data.containsKey('licenceGT')) {
      return false;
    }
    if (l$licenceGT != lOther$licenceGT) {
      return false;
    }
    final l$licenceGTE = licenceGTE;
    final lOther$licenceGTE = other.licenceGTE;
    if (_$data.containsKey('licenceGTE') !=
        other._$data.containsKey('licenceGTE')) {
      return false;
    }
    if (l$licenceGTE != lOther$licenceGTE) {
      return false;
    }
    final l$licenceLT = licenceLT;
    final lOther$licenceLT = other.licenceLT;
    if (_$data.containsKey('licenceLT') !=
        other._$data.containsKey('licenceLT')) {
      return false;
    }
    if (l$licenceLT != lOther$licenceLT) {
      return false;
    }
    final l$licenceLTE = licenceLTE;
    final lOther$licenceLTE = other.licenceLTE;
    if (_$data.containsKey('licenceLTE') !=
        other._$data.containsKey('licenceLTE')) {
      return false;
    }
    if (l$licenceLTE != lOther$licenceLTE) {
      return false;
    }
    final l$licenceContains = licenceContains;
    final lOther$licenceContains = other.licenceContains;
    if (_$data.containsKey('licenceContains') !=
        other._$data.containsKey('licenceContains')) {
      return false;
    }
    if (l$licenceContains != lOther$licenceContains) {
      return false;
    }
    final l$licenceHasPrefix = licenceHasPrefix;
    final lOther$licenceHasPrefix = other.licenceHasPrefix;
    if (_$data.containsKey('licenceHasPrefix') !=
        other._$data.containsKey('licenceHasPrefix')) {
      return false;
    }
    if (l$licenceHasPrefix != lOther$licenceHasPrefix) {
      return false;
    }
    final l$licenceHasSuffix = licenceHasSuffix;
    final lOther$licenceHasSuffix = other.licenceHasSuffix;
    if (_$data.containsKey('licenceHasSuffix') !=
        other._$data.containsKey('licenceHasSuffix')) {
      return false;
    }
    if (l$licenceHasSuffix != lOther$licenceHasSuffix) {
      return false;
    }
    final l$licenceEqualFold = licenceEqualFold;
    final lOther$licenceEqualFold = other.licenceEqualFold;
    if (_$data.containsKey('licenceEqualFold') !=
        other._$data.containsKey('licenceEqualFold')) {
      return false;
    }
    if (l$licenceEqualFold != lOther$licenceEqualFold) {
      return false;
    }
    final l$licenceContainsFold = licenceContainsFold;
    final lOther$licenceContainsFold = other.licenceContainsFold;
    if (_$data.containsKey('licenceContainsFold') !=
        other._$data.containsKey('licenceContainsFold')) {
      return false;
    }
    if (l$licenceContainsFold != lOther$licenceContainsFold) {
      return false;
    }
    final l$licenceurl = licenceurl;
    final lOther$licenceurl = other.licenceurl;
    if (_$data.containsKey('licenceurl') !=
        other._$data.containsKey('licenceurl')) {
      return false;
    }
    if (l$licenceurl != lOther$licenceurl) {
      return false;
    }
    final l$licenceurlNEQ = licenceurlNEQ;
    final lOther$licenceurlNEQ = other.licenceurlNEQ;
    if (_$data.containsKey('licenceurlNEQ') !=
        other._$data.containsKey('licenceurlNEQ')) {
      return false;
    }
    if (l$licenceurlNEQ != lOther$licenceurlNEQ) {
      return false;
    }
    final l$licenceurlIn = licenceurlIn;
    final lOther$licenceurlIn = other.licenceurlIn;
    if (_$data.containsKey('licenceurlIn') !=
        other._$data.containsKey('licenceurlIn')) {
      return false;
    }
    if (l$licenceurlIn != null && lOther$licenceurlIn != null) {
      if (l$licenceurlIn.length != lOther$licenceurlIn.length) {
        return false;
      }
      for (int i = 0; i < l$licenceurlIn.length; i++) {
        final l$licenceurlIn$entry = l$licenceurlIn[i];
        final lOther$licenceurlIn$entry = lOther$licenceurlIn[i];
        if (l$licenceurlIn$entry != lOther$licenceurlIn$entry) {
          return false;
        }
      }
    } else if (l$licenceurlIn != lOther$licenceurlIn) {
      return false;
    }
    final l$licenceurlNotIn = licenceurlNotIn;
    final lOther$licenceurlNotIn = other.licenceurlNotIn;
    if (_$data.containsKey('licenceurlNotIn') !=
        other._$data.containsKey('licenceurlNotIn')) {
      return false;
    }
    if (l$licenceurlNotIn != null && lOther$licenceurlNotIn != null) {
      if (l$licenceurlNotIn.length != lOther$licenceurlNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$licenceurlNotIn.length; i++) {
        final l$licenceurlNotIn$entry = l$licenceurlNotIn[i];
        final lOther$licenceurlNotIn$entry = lOther$licenceurlNotIn[i];
        if (l$licenceurlNotIn$entry != lOther$licenceurlNotIn$entry) {
          return false;
        }
      }
    } else if (l$licenceurlNotIn != lOther$licenceurlNotIn) {
      return false;
    }
    final l$licenceurlGT = licenceurlGT;
    final lOther$licenceurlGT = other.licenceurlGT;
    if (_$data.containsKey('licenceurlGT') !=
        other._$data.containsKey('licenceurlGT')) {
      return false;
    }
    if (l$licenceurlGT != lOther$licenceurlGT) {
      return false;
    }
    final l$licenceurlGTE = licenceurlGTE;
    final lOther$licenceurlGTE = other.licenceurlGTE;
    if (_$data.containsKey('licenceurlGTE') !=
        other._$data.containsKey('licenceurlGTE')) {
      return false;
    }
    if (l$licenceurlGTE != lOther$licenceurlGTE) {
      return false;
    }
    final l$licenceurlLT = licenceurlLT;
    final lOther$licenceurlLT = other.licenceurlLT;
    if (_$data.containsKey('licenceurlLT') !=
        other._$data.containsKey('licenceurlLT')) {
      return false;
    }
    if (l$licenceurlLT != lOther$licenceurlLT) {
      return false;
    }
    final l$licenceurlLTE = licenceurlLTE;
    final lOther$licenceurlLTE = other.licenceurlLTE;
    if (_$data.containsKey('licenceurlLTE') !=
        other._$data.containsKey('licenceurlLTE')) {
      return false;
    }
    if (l$licenceurlLTE != lOther$licenceurlLTE) {
      return false;
    }
    final l$licenceurlContains = licenceurlContains;
    final lOther$licenceurlContains = other.licenceurlContains;
    if (_$data.containsKey('licenceurlContains') !=
        other._$data.containsKey('licenceurlContains')) {
      return false;
    }
    if (l$licenceurlContains != lOther$licenceurlContains) {
      return false;
    }
    final l$licenceurlHasPrefix = licenceurlHasPrefix;
    final lOther$licenceurlHasPrefix = other.licenceurlHasPrefix;
    if (_$data.containsKey('licenceurlHasPrefix') !=
        other._$data.containsKey('licenceurlHasPrefix')) {
      return false;
    }
    if (l$licenceurlHasPrefix != lOther$licenceurlHasPrefix) {
      return false;
    }
    final l$licenceurlHasSuffix = licenceurlHasSuffix;
    final lOther$licenceurlHasSuffix = other.licenceurlHasSuffix;
    if (_$data.containsKey('licenceurlHasSuffix') !=
        other._$data.containsKey('licenceurlHasSuffix')) {
      return false;
    }
    if (l$licenceurlHasSuffix != lOther$licenceurlHasSuffix) {
      return false;
    }
    final l$licenceurlEqualFold = licenceurlEqualFold;
    final lOther$licenceurlEqualFold = other.licenceurlEqualFold;
    if (_$data.containsKey('licenceurlEqualFold') !=
        other._$data.containsKey('licenceurlEqualFold')) {
      return false;
    }
    if (l$licenceurlEqualFold != lOther$licenceurlEqualFold) {
      return false;
    }
    final l$licenceurlContainsFold = licenceurlContainsFold;
    final lOther$licenceurlContainsFold = other.licenceurlContainsFold;
    if (_$data.containsKey('licenceurlContainsFold') !=
        other._$data.containsKey('licenceurlContainsFold')) {
      return false;
    }
    if (l$licenceurlContainsFold != lOther$licenceurlContainsFold) {
      return false;
    }
    final l$ishidden = ishidden;
    final lOther$ishidden = other.ishidden;
    if (_$data.containsKey('ishidden') !=
        other._$data.containsKey('ishidden')) {
      return false;
    }
    if (l$ishidden != lOther$ishidden) {
      return false;
    }
    final l$ishiddenNEQ = ishiddenNEQ;
    final lOther$ishiddenNEQ = other.ishiddenNEQ;
    if (_$data.containsKey('ishiddenNEQ') !=
        other._$data.containsKey('ishiddenNEQ')) {
      return false;
    }
    if (l$ishiddenNEQ != lOther$ishiddenNEQ) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$orderNEQ = orderNEQ;
    final lOther$orderNEQ = other.orderNEQ;
    if (_$data.containsKey('orderNEQ') !=
        other._$data.containsKey('orderNEQ')) {
      return false;
    }
    if (l$orderNEQ != lOther$orderNEQ) {
      return false;
    }
    final l$orderIn = orderIn;
    final lOther$orderIn = other.orderIn;
    if (_$data.containsKey('orderIn') != other._$data.containsKey('orderIn')) {
      return false;
    }
    if (l$orderIn != null && lOther$orderIn != null) {
      if (l$orderIn.length != lOther$orderIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderIn.length; i++) {
        final l$orderIn$entry = l$orderIn[i];
        final lOther$orderIn$entry = lOther$orderIn[i];
        if (l$orderIn$entry != lOther$orderIn$entry) {
          return false;
        }
      }
    } else if (l$orderIn != lOther$orderIn) {
      return false;
    }
    final l$orderNotIn = orderNotIn;
    final lOther$orderNotIn = other.orderNotIn;
    if (_$data.containsKey('orderNotIn') !=
        other._$data.containsKey('orderNotIn')) {
      return false;
    }
    if (l$orderNotIn != null && lOther$orderNotIn != null) {
      if (l$orderNotIn.length != lOther$orderNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderNotIn.length; i++) {
        final l$orderNotIn$entry = l$orderNotIn[i];
        final lOther$orderNotIn$entry = lOther$orderNotIn[i];
        if (l$orderNotIn$entry != lOther$orderNotIn$entry) {
          return false;
        }
      }
    } else if (l$orderNotIn != lOther$orderNotIn) {
      return false;
    }
    final l$orderGT = orderGT;
    final lOther$orderGT = other.orderGT;
    if (_$data.containsKey('orderGT') != other._$data.containsKey('orderGT')) {
      return false;
    }
    if (l$orderGT != lOther$orderGT) {
      return false;
    }
    final l$orderGTE = orderGTE;
    final lOther$orderGTE = other.orderGTE;
    if (_$data.containsKey('orderGTE') !=
        other._$data.containsKey('orderGTE')) {
      return false;
    }
    if (l$orderGTE != lOther$orderGTE) {
      return false;
    }
    final l$orderLT = orderLT;
    final lOther$orderLT = other.orderLT;
    if (_$data.containsKey('orderLT') != other._$data.containsKey('orderLT')) {
      return false;
    }
    if (l$orderLT != lOther$orderLT) {
      return false;
    }
    final l$orderLTE = orderLTE;
    final lOther$orderLTE = other.orderLTE;
    if (_$data.containsKey('orderLTE') !=
        other._$data.containsKey('orderLTE')) {
      return false;
    }
    if (l$orderLTE != lOther$orderLTE) {
      return false;
    }
    final l$episodescount = episodescount;
    final lOther$episodescount = other.episodescount;
    if (_$data.containsKey('episodescount') !=
        other._$data.containsKey('episodescount')) {
      return false;
    }
    if (l$episodescount != lOther$episodescount) {
      return false;
    }
    final l$episodescountNEQ = episodescountNEQ;
    final lOther$episodescountNEQ = other.episodescountNEQ;
    if (_$data.containsKey('episodescountNEQ') !=
        other._$data.containsKey('episodescountNEQ')) {
      return false;
    }
    if (l$episodescountNEQ != lOther$episodescountNEQ) {
      return false;
    }
    final l$episodescountIn = episodescountIn;
    final lOther$episodescountIn = other.episodescountIn;
    if (_$data.containsKey('episodescountIn') !=
        other._$data.containsKey('episodescountIn')) {
      return false;
    }
    if (l$episodescountIn != null && lOther$episodescountIn != null) {
      if (l$episodescountIn.length != lOther$episodescountIn.length) {
        return false;
      }
      for (int i = 0; i < l$episodescountIn.length; i++) {
        final l$episodescountIn$entry = l$episodescountIn[i];
        final lOther$episodescountIn$entry = lOther$episodescountIn[i];
        if (l$episodescountIn$entry != lOther$episodescountIn$entry) {
          return false;
        }
      }
    } else if (l$episodescountIn != lOther$episodescountIn) {
      return false;
    }
    final l$episodescountNotIn = episodescountNotIn;
    final lOther$episodescountNotIn = other.episodescountNotIn;
    if (_$data.containsKey('episodescountNotIn') !=
        other._$data.containsKey('episodescountNotIn')) {
      return false;
    }
    if (l$episodescountNotIn != null && lOther$episodescountNotIn != null) {
      if (l$episodescountNotIn.length != lOther$episodescountNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$episodescountNotIn.length; i++) {
        final l$episodescountNotIn$entry = l$episodescountNotIn[i];
        final lOther$episodescountNotIn$entry = lOther$episodescountNotIn[i];
        if (l$episodescountNotIn$entry != lOther$episodescountNotIn$entry) {
          return false;
        }
      }
    } else if (l$episodescountNotIn != lOther$episodescountNotIn) {
      return false;
    }
    final l$episodescountGT = episodescountGT;
    final lOther$episodescountGT = other.episodescountGT;
    if (_$data.containsKey('episodescountGT') !=
        other._$data.containsKey('episodescountGT')) {
      return false;
    }
    if (l$episodescountGT != lOther$episodescountGT) {
      return false;
    }
    final l$episodescountGTE = episodescountGTE;
    final lOther$episodescountGTE = other.episodescountGTE;
    if (_$data.containsKey('episodescountGTE') !=
        other._$data.containsKey('episodescountGTE')) {
      return false;
    }
    if (l$episodescountGTE != lOther$episodescountGTE) {
      return false;
    }
    final l$episodescountLT = episodescountLT;
    final lOther$episodescountLT = other.episodescountLT;
    if (_$data.containsKey('episodescountLT') !=
        other._$data.containsKey('episodescountLT')) {
      return false;
    }
    if (l$episodescountLT != lOther$episodescountLT) {
      return false;
    }
    final l$episodescountLTE = episodescountLTE;
    final lOther$episodescountLTE = other.episodescountLTE;
    if (_$data.containsKey('episodescountLTE') !=
        other._$data.containsKey('episodescountLTE')) {
      return false;
    }
    if (l$episodescountLTE != lOther$episodescountLTE) {
      return false;
    }
    final l$hasEpisodes = hasEpisodes;
    final lOther$hasEpisodes = other.hasEpisodes;
    if (_$data.containsKey('hasEpisodes') !=
        other._$data.containsKey('hasEpisodes')) {
      return false;
    }
    if (l$hasEpisodes != lOther$hasEpisodes) {
      return false;
    }
    final l$hasEpisodesWith = hasEpisodesWith;
    final lOther$hasEpisodesWith = other.hasEpisodesWith;
    if (_$data.containsKey('hasEpisodesWith') !=
        other._$data.containsKey('hasEpisodesWith')) {
      return false;
    }
    if (l$hasEpisodesWith != null && lOther$hasEpisodesWith != null) {
      if (l$hasEpisodesWith.length != lOther$hasEpisodesWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasEpisodesWith.length; i++) {
        final l$hasEpisodesWith$entry = l$hasEpisodesWith[i];
        final lOther$hasEpisodesWith$entry = lOther$hasEpisodesWith[i];
        if (l$hasEpisodesWith$entry != lOther$hasEpisodesWith$entry) {
          return false;
        }
      }
    } else if (l$hasEpisodesWith != lOther$hasEpisodesWith) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$type = type;
    final l$typeNEQ = typeNEQ;
    final l$typeIn = typeIn;
    final l$typeNotIn = typeNotIn;
    final l$iconimage = iconimage;
    final l$iconimageNEQ = iconimageNEQ;
    final l$iconimageIn = iconimageIn;
    final l$iconimageNotIn = iconimageNotIn;
    final l$iconimageGT = iconimageGT;
    final l$iconimageGTE = iconimageGTE;
    final l$iconimageLT = iconimageLT;
    final l$iconimageLTE = iconimageLTE;
    final l$iconimageContains = iconimageContains;
    final l$iconimageHasPrefix = iconimageHasPrefix;
    final l$iconimageHasSuffix = iconimageHasSuffix;
    final l$iconimageEqualFold = iconimageEqualFold;
    final l$iconimageContainsFold = iconimageContainsFold;
    final l$coverimage = coverimage;
    final l$coverimageNEQ = coverimageNEQ;
    final l$coverimageIn = coverimageIn;
    final l$coverimageNotIn = coverimageNotIn;
    final l$coverimageGT = coverimageGT;
    final l$coverimageGTE = coverimageGTE;
    final l$coverimageLT = coverimageLT;
    final l$coverimageLTE = coverimageLTE;
    final l$coverimageContains = coverimageContains;
    final l$coverimageHasPrefix = coverimageHasPrefix;
    final l$coverimageHasSuffix = coverimageHasSuffix;
    final l$coverimageEqualFold = coverimageEqualFold;
    final l$coverimageContainsFold = coverimageContainsFold;
    final l$title = title;
    final l$titleNEQ = titleNEQ;
    final l$titleIn = titleIn;
    final l$titleNotIn = titleNotIn;
    final l$titleGT = titleGT;
    final l$titleGTE = titleGTE;
    final l$titleLT = titleLT;
    final l$titleLTE = titleLTE;
    final l$titleContains = titleContains;
    final l$titleHasPrefix = titleHasPrefix;
    final l$titleHasSuffix = titleHasSuffix;
    final l$titleEqualFold = titleEqualFold;
    final l$titleContainsFold = titleContainsFold;
    final l$subtitle = subtitle;
    final l$subtitleNEQ = subtitleNEQ;
    final l$subtitleIn = subtitleIn;
    final l$subtitleNotIn = subtitleNotIn;
    final l$subtitleGT = subtitleGT;
    final l$subtitleGTE = subtitleGTE;
    final l$subtitleLT = subtitleLT;
    final l$subtitleLTE = subtitleLTE;
    final l$subtitleContains = subtitleContains;
    final l$subtitleHasPrefix = subtitleHasPrefix;
    final l$subtitleHasSuffix = subtitleHasSuffix;
    final l$subtitleEqualFold = subtitleEqualFold;
    final l$subtitleContainsFold = subtitleContainsFold;
    final l$description = description;
    final l$descriptionNEQ = descriptionNEQ;
    final l$descriptionIn = descriptionIn;
    final l$descriptionNotIn = descriptionNotIn;
    final l$descriptionGT = descriptionGT;
    final l$descriptionGTE = descriptionGTE;
    final l$descriptionLT = descriptionLT;
    final l$descriptionLTE = descriptionLTE;
    final l$descriptionContains = descriptionContains;
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final l$descriptionEqualFold = descriptionEqualFold;
    final l$descriptionContainsFold = descriptionContainsFold;
    final l$source = source;
    final l$sourceNEQ = sourceNEQ;
    final l$sourceIn = sourceIn;
    final l$sourceNotIn = sourceNotIn;
    final l$sourceGT = sourceGT;
    final l$sourceGTE = sourceGTE;
    final l$sourceLT = sourceLT;
    final l$sourceLTE = sourceLTE;
    final l$sourceContains = sourceContains;
    final l$sourceHasPrefix = sourceHasPrefix;
    final l$sourceHasSuffix = sourceHasSuffix;
    final l$sourceEqualFold = sourceEqualFold;
    final l$sourceContainsFold = sourceContainsFold;
    final l$sourceurl = sourceurl;
    final l$sourceurlNEQ = sourceurlNEQ;
    final l$sourceurlIn = sourceurlIn;
    final l$sourceurlNotIn = sourceurlNotIn;
    final l$sourceurlGT = sourceurlGT;
    final l$sourceurlGTE = sourceurlGTE;
    final l$sourceurlLT = sourceurlLT;
    final l$sourceurlLTE = sourceurlLTE;
    final l$sourceurlContains = sourceurlContains;
    final l$sourceurlHasPrefix = sourceurlHasPrefix;
    final l$sourceurlHasSuffix = sourceurlHasSuffix;
    final l$sourceurlEqualFold = sourceurlEqualFold;
    final l$sourceurlContainsFold = sourceurlContainsFold;
    final l$licence = licence;
    final l$licenceNEQ = licenceNEQ;
    final l$licenceIn = licenceIn;
    final l$licenceNotIn = licenceNotIn;
    final l$licenceGT = licenceGT;
    final l$licenceGTE = licenceGTE;
    final l$licenceLT = licenceLT;
    final l$licenceLTE = licenceLTE;
    final l$licenceContains = licenceContains;
    final l$licenceHasPrefix = licenceHasPrefix;
    final l$licenceHasSuffix = licenceHasSuffix;
    final l$licenceEqualFold = licenceEqualFold;
    final l$licenceContainsFold = licenceContainsFold;
    final l$licenceurl = licenceurl;
    final l$licenceurlNEQ = licenceurlNEQ;
    final l$licenceurlIn = licenceurlIn;
    final l$licenceurlNotIn = licenceurlNotIn;
    final l$licenceurlGT = licenceurlGT;
    final l$licenceurlGTE = licenceurlGTE;
    final l$licenceurlLT = licenceurlLT;
    final l$licenceurlLTE = licenceurlLTE;
    final l$licenceurlContains = licenceurlContains;
    final l$licenceurlHasPrefix = licenceurlHasPrefix;
    final l$licenceurlHasSuffix = licenceurlHasSuffix;
    final l$licenceurlEqualFold = licenceurlEqualFold;
    final l$licenceurlContainsFold = licenceurlContainsFold;
    final l$ishidden = ishidden;
    final l$ishiddenNEQ = ishiddenNEQ;
    final l$order = order;
    final l$orderNEQ = orderNEQ;
    final l$orderIn = orderIn;
    final l$orderNotIn = orderNotIn;
    final l$orderGT = orderGT;
    final l$orderGTE = orderGTE;
    final l$orderLT = orderLT;
    final l$orderLTE = orderLTE;
    final l$episodescount = episodescount;
    final l$episodescountNEQ = episodescountNEQ;
    final l$episodescountIn = episodescountIn;
    final l$episodescountNotIn = episodescountNotIn;
    final l$episodescountGT = episodescountGT;
    final l$episodescountGTE = episodescountGTE;
    final l$episodescountLT = episodescountLT;
    final l$episodescountLTE = episodescountLTE;
    final l$hasEpisodes = hasEpisodes;
    final l$hasEpisodesWith = hasEpisodesWith;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('typeNEQ') ? l$typeNEQ : const {},
      _$data.containsKey('typeIn')
          ? l$typeIn == null
              ? null
              : Object.hashAll(l$typeIn.map((v) => v))
          : const {},
      _$data.containsKey('typeNotIn')
          ? l$typeNotIn == null
              ? null
              : Object.hashAll(l$typeNotIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimage') ? l$iconimage : const {},
      _$data.containsKey('iconimageNEQ') ? l$iconimageNEQ : const {},
      _$data.containsKey('iconimageIn')
          ? l$iconimageIn == null
              ? null
              : Object.hashAll(l$iconimageIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimageNotIn')
          ? l$iconimageNotIn == null
              ? null
              : Object.hashAll(l$iconimageNotIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimageGT') ? l$iconimageGT : const {},
      _$data.containsKey('iconimageGTE') ? l$iconimageGTE : const {},
      _$data.containsKey('iconimageLT') ? l$iconimageLT : const {},
      _$data.containsKey('iconimageLTE') ? l$iconimageLTE : const {},
      _$data.containsKey('iconimageContains') ? l$iconimageContains : const {},
      _$data.containsKey('iconimageHasPrefix')
          ? l$iconimageHasPrefix
          : const {},
      _$data.containsKey('iconimageHasSuffix')
          ? l$iconimageHasSuffix
          : const {},
      _$data.containsKey('iconimageEqualFold')
          ? l$iconimageEqualFold
          : const {},
      _$data.containsKey('iconimageContainsFold')
          ? l$iconimageContainsFold
          : const {},
      _$data.containsKey('coverimage') ? l$coverimage : const {},
      _$data.containsKey('coverimageNEQ') ? l$coverimageNEQ : const {},
      _$data.containsKey('coverimageIn')
          ? l$coverimageIn == null
              ? null
              : Object.hashAll(l$coverimageIn.map((v) => v))
          : const {},
      _$data.containsKey('coverimageNotIn')
          ? l$coverimageNotIn == null
              ? null
              : Object.hashAll(l$coverimageNotIn.map((v) => v))
          : const {},
      _$data.containsKey('coverimageGT') ? l$coverimageGT : const {},
      _$data.containsKey('coverimageGTE') ? l$coverimageGTE : const {},
      _$data.containsKey('coverimageLT') ? l$coverimageLT : const {},
      _$data.containsKey('coverimageLTE') ? l$coverimageLTE : const {},
      _$data.containsKey('coverimageContains')
          ? l$coverimageContains
          : const {},
      _$data.containsKey('coverimageHasPrefix')
          ? l$coverimageHasPrefix
          : const {},
      _$data.containsKey('coverimageHasSuffix')
          ? l$coverimageHasSuffix
          : const {},
      _$data.containsKey('coverimageEqualFold')
          ? l$coverimageEqualFold
          : const {},
      _$data.containsKey('coverimageContainsFold')
          ? l$coverimageContainsFold
          : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('titleNEQ') ? l$titleNEQ : const {},
      _$data.containsKey('titleIn')
          ? l$titleIn == null
              ? null
              : Object.hashAll(l$titleIn.map((v) => v))
          : const {},
      _$data.containsKey('titleNotIn')
          ? l$titleNotIn == null
              ? null
              : Object.hashAll(l$titleNotIn.map((v) => v))
          : const {},
      _$data.containsKey('titleGT') ? l$titleGT : const {},
      _$data.containsKey('titleGTE') ? l$titleGTE : const {},
      _$data.containsKey('titleLT') ? l$titleLT : const {},
      _$data.containsKey('titleLTE') ? l$titleLTE : const {},
      _$data.containsKey('titleContains') ? l$titleContains : const {},
      _$data.containsKey('titleHasPrefix') ? l$titleHasPrefix : const {},
      _$data.containsKey('titleHasSuffix') ? l$titleHasSuffix : const {},
      _$data.containsKey('titleEqualFold') ? l$titleEqualFold : const {},
      _$data.containsKey('titleContainsFold') ? l$titleContainsFold : const {},
      _$data.containsKey('subtitle') ? l$subtitle : const {},
      _$data.containsKey('subtitleNEQ') ? l$subtitleNEQ : const {},
      _$data.containsKey('subtitleIn')
          ? l$subtitleIn == null
              ? null
              : Object.hashAll(l$subtitleIn.map((v) => v))
          : const {},
      _$data.containsKey('subtitleNotIn')
          ? l$subtitleNotIn == null
              ? null
              : Object.hashAll(l$subtitleNotIn.map((v) => v))
          : const {},
      _$data.containsKey('subtitleGT') ? l$subtitleGT : const {},
      _$data.containsKey('subtitleGTE') ? l$subtitleGTE : const {},
      _$data.containsKey('subtitleLT') ? l$subtitleLT : const {},
      _$data.containsKey('subtitleLTE') ? l$subtitleLTE : const {},
      _$data.containsKey('subtitleContains') ? l$subtitleContains : const {},
      _$data.containsKey('subtitleHasPrefix') ? l$subtitleHasPrefix : const {},
      _$data.containsKey('subtitleHasSuffix') ? l$subtitleHasSuffix : const {},
      _$data.containsKey('subtitleEqualFold') ? l$subtitleEqualFold : const {},
      _$data.containsKey('subtitleContainsFold')
          ? l$subtitleContainsFold
          : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('descriptionNEQ') ? l$descriptionNEQ : const {},
      _$data.containsKey('descriptionIn')
          ? l$descriptionIn == null
              ? null
              : Object.hashAll(l$descriptionIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionNotIn')
          ? l$descriptionNotIn == null
              ? null
              : Object.hashAll(l$descriptionNotIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionGT') ? l$descriptionGT : const {},
      _$data.containsKey('descriptionGTE') ? l$descriptionGTE : const {},
      _$data.containsKey('descriptionLT') ? l$descriptionLT : const {},
      _$data.containsKey('descriptionLTE') ? l$descriptionLTE : const {},
      _$data.containsKey('descriptionContains')
          ? l$descriptionContains
          : const {},
      _$data.containsKey('descriptionHasPrefix')
          ? l$descriptionHasPrefix
          : const {},
      _$data.containsKey('descriptionHasSuffix')
          ? l$descriptionHasSuffix
          : const {},
      _$data.containsKey('descriptionEqualFold')
          ? l$descriptionEqualFold
          : const {},
      _$data.containsKey('descriptionContainsFold')
          ? l$descriptionContainsFold
          : const {},
      _$data.containsKey('source') ? l$source : const {},
      _$data.containsKey('sourceNEQ') ? l$sourceNEQ : const {},
      _$data.containsKey('sourceIn')
          ? l$sourceIn == null
              ? null
              : Object.hashAll(l$sourceIn.map((v) => v))
          : const {},
      _$data.containsKey('sourceNotIn')
          ? l$sourceNotIn == null
              ? null
              : Object.hashAll(l$sourceNotIn.map((v) => v))
          : const {},
      _$data.containsKey('sourceGT') ? l$sourceGT : const {},
      _$data.containsKey('sourceGTE') ? l$sourceGTE : const {},
      _$data.containsKey('sourceLT') ? l$sourceLT : const {},
      _$data.containsKey('sourceLTE') ? l$sourceLTE : const {},
      _$data.containsKey('sourceContains') ? l$sourceContains : const {},
      _$data.containsKey('sourceHasPrefix') ? l$sourceHasPrefix : const {},
      _$data.containsKey('sourceHasSuffix') ? l$sourceHasSuffix : const {},
      _$data.containsKey('sourceEqualFold') ? l$sourceEqualFold : const {},
      _$data.containsKey('sourceContainsFold')
          ? l$sourceContainsFold
          : const {},
      _$data.containsKey('sourceurl') ? l$sourceurl : const {},
      _$data.containsKey('sourceurlNEQ') ? l$sourceurlNEQ : const {},
      _$data.containsKey('sourceurlIn')
          ? l$sourceurlIn == null
              ? null
              : Object.hashAll(l$sourceurlIn.map((v) => v))
          : const {},
      _$data.containsKey('sourceurlNotIn')
          ? l$sourceurlNotIn == null
              ? null
              : Object.hashAll(l$sourceurlNotIn.map((v) => v))
          : const {},
      _$data.containsKey('sourceurlGT') ? l$sourceurlGT : const {},
      _$data.containsKey('sourceurlGTE') ? l$sourceurlGTE : const {},
      _$data.containsKey('sourceurlLT') ? l$sourceurlLT : const {},
      _$data.containsKey('sourceurlLTE') ? l$sourceurlLTE : const {},
      _$data.containsKey('sourceurlContains') ? l$sourceurlContains : const {},
      _$data.containsKey('sourceurlHasPrefix')
          ? l$sourceurlHasPrefix
          : const {},
      _$data.containsKey('sourceurlHasSuffix')
          ? l$sourceurlHasSuffix
          : const {},
      _$data.containsKey('sourceurlEqualFold')
          ? l$sourceurlEqualFold
          : const {},
      _$data.containsKey('sourceurlContainsFold')
          ? l$sourceurlContainsFold
          : const {},
      _$data.containsKey('licence') ? l$licence : const {},
      _$data.containsKey('licenceNEQ') ? l$licenceNEQ : const {},
      _$data.containsKey('licenceIn')
          ? l$licenceIn == null
              ? null
              : Object.hashAll(l$licenceIn.map((v) => v))
          : const {},
      _$data.containsKey('licenceNotIn')
          ? l$licenceNotIn == null
              ? null
              : Object.hashAll(l$licenceNotIn.map((v) => v))
          : const {},
      _$data.containsKey('licenceGT') ? l$licenceGT : const {},
      _$data.containsKey('licenceGTE') ? l$licenceGTE : const {},
      _$data.containsKey('licenceLT') ? l$licenceLT : const {},
      _$data.containsKey('licenceLTE') ? l$licenceLTE : const {},
      _$data.containsKey('licenceContains') ? l$licenceContains : const {},
      _$data.containsKey('licenceHasPrefix') ? l$licenceHasPrefix : const {},
      _$data.containsKey('licenceHasSuffix') ? l$licenceHasSuffix : const {},
      _$data.containsKey('licenceEqualFold') ? l$licenceEqualFold : const {},
      _$data.containsKey('licenceContainsFold')
          ? l$licenceContainsFold
          : const {},
      _$data.containsKey('licenceurl') ? l$licenceurl : const {},
      _$data.containsKey('licenceurlNEQ') ? l$licenceurlNEQ : const {},
      _$data.containsKey('licenceurlIn')
          ? l$licenceurlIn == null
              ? null
              : Object.hashAll(l$licenceurlIn.map((v) => v))
          : const {},
      _$data.containsKey('licenceurlNotIn')
          ? l$licenceurlNotIn == null
              ? null
              : Object.hashAll(l$licenceurlNotIn.map((v) => v))
          : const {},
      _$data.containsKey('licenceurlGT') ? l$licenceurlGT : const {},
      _$data.containsKey('licenceurlGTE') ? l$licenceurlGTE : const {},
      _$data.containsKey('licenceurlLT') ? l$licenceurlLT : const {},
      _$data.containsKey('licenceurlLTE') ? l$licenceurlLTE : const {},
      _$data.containsKey('licenceurlContains')
          ? l$licenceurlContains
          : const {},
      _$data.containsKey('licenceurlHasPrefix')
          ? l$licenceurlHasPrefix
          : const {},
      _$data.containsKey('licenceurlHasSuffix')
          ? l$licenceurlHasSuffix
          : const {},
      _$data.containsKey('licenceurlEqualFold')
          ? l$licenceurlEqualFold
          : const {},
      _$data.containsKey('licenceurlContainsFold')
          ? l$licenceurlContainsFold
          : const {},
      _$data.containsKey('ishidden') ? l$ishidden : const {},
      _$data.containsKey('ishiddenNEQ') ? l$ishiddenNEQ : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('orderNEQ') ? l$orderNEQ : const {},
      _$data.containsKey('orderIn')
          ? l$orderIn == null
              ? null
              : Object.hashAll(l$orderIn.map((v) => v))
          : const {},
      _$data.containsKey('orderNotIn')
          ? l$orderNotIn == null
              ? null
              : Object.hashAll(l$orderNotIn.map((v) => v))
          : const {},
      _$data.containsKey('orderGT') ? l$orderGT : const {},
      _$data.containsKey('orderGTE') ? l$orderGTE : const {},
      _$data.containsKey('orderLT') ? l$orderLT : const {},
      _$data.containsKey('orderLTE') ? l$orderLTE : const {},
      _$data.containsKey('episodescount') ? l$episodescount : const {},
      _$data.containsKey('episodescountNEQ') ? l$episodescountNEQ : const {},
      _$data.containsKey('episodescountIn')
          ? l$episodescountIn == null
              ? null
              : Object.hashAll(l$episodescountIn.map((v) => v))
          : const {},
      _$data.containsKey('episodescountNotIn')
          ? l$episodescountNotIn == null
              ? null
              : Object.hashAll(l$episodescountNotIn.map((v) => v))
          : const {},
      _$data.containsKey('episodescountGT') ? l$episodescountGT : const {},
      _$data.containsKey('episodescountGTE') ? l$episodescountGTE : const {},
      _$data.containsKey('episodescountLT') ? l$episodescountLT : const {},
      _$data.containsKey('episodescountLTE') ? l$episodescountLTE : const {},
      _$data.containsKey('hasEpisodes') ? l$hasEpisodes : const {},
      _$data.containsKey('hasEpisodesWith')
          ? l$hasEpisodesWith == null
              ? null
              : Object.hashAll(l$hasEpisodesWith.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentWhereInput<TRes> {
  factory CopyWith$Input$ContentWhereInput(
    Input$ContentWhereInput instance,
    TRes Function(Input$ContentWhereInput) then,
  ) = _CopyWithImpl$Input$ContentWhereInput;

  factory CopyWith$Input$ContentWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentWhereInput;

  TRes call({
    Input$ContentWhereInput? not,
    List<Input$ContentWhereInput>? and,
    List<Input$ContentWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    Enum$ContentContentType? type,
    Enum$ContentContentType? typeNEQ,
    List<Enum$ContentContentType>? typeIn,
    List<Enum$ContentContentType>? typeNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    String? source,
    String? sourceNEQ,
    List<String>? sourceIn,
    List<String>? sourceNotIn,
    String? sourceGT,
    String? sourceGTE,
    String? sourceLT,
    String? sourceLTE,
    String? sourceContains,
    String? sourceHasPrefix,
    String? sourceHasSuffix,
    String? sourceEqualFold,
    String? sourceContainsFold,
    String? sourceurl,
    String? sourceurlNEQ,
    List<String>? sourceurlIn,
    List<String>? sourceurlNotIn,
    String? sourceurlGT,
    String? sourceurlGTE,
    String? sourceurlLT,
    String? sourceurlLTE,
    String? sourceurlContains,
    String? sourceurlHasPrefix,
    String? sourceurlHasSuffix,
    String? sourceurlEqualFold,
    String? sourceurlContainsFold,
    String? licence,
    String? licenceNEQ,
    List<String>? licenceIn,
    List<String>? licenceNotIn,
    String? licenceGT,
    String? licenceGTE,
    String? licenceLT,
    String? licenceLTE,
    String? licenceContains,
    String? licenceHasPrefix,
    String? licenceHasSuffix,
    String? licenceEqualFold,
    String? licenceContainsFold,
    String? licenceurl,
    String? licenceurlNEQ,
    List<String>? licenceurlIn,
    List<String>? licenceurlNotIn,
    String? licenceurlGT,
    String? licenceurlGTE,
    String? licenceurlLT,
    String? licenceurlLTE,
    String? licenceurlContains,
    String? licenceurlHasPrefix,
    String? licenceurlHasSuffix,
    String? licenceurlEqualFold,
    String? licenceurlContainsFold,
    bool? ishidden,
    bool? ishiddenNEQ,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    int? episodescount,
    int? episodescountNEQ,
    List<int>? episodescountIn,
    List<int>? episodescountNotIn,
    int? episodescountGT,
    int? episodescountGTE,
    int? episodescountLT,
    int? episodescountLTE,
    bool? hasEpisodes,
    List<Input$ContentEpisodeWhereInput>? hasEpisodesWith,
  });
  CopyWith$Input$ContentWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$ContentWhereInput>? Function(
              Iterable<
                  CopyWith$Input$ContentWhereInput<Input$ContentWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$ContentWhereInput>? Function(
              Iterable<
                  CopyWith$Input$ContentWhereInput<Input$ContentWhereInput>>?)
          _fn);
  TRes hasEpisodesWith(
      Iterable<Input$ContentEpisodeWhereInput>? Function(
              Iterable<
                  CopyWith$Input$ContentEpisodeWhereInput<
                      Input$ContentEpisodeWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$ContentWhereInput<TRes>
    implements CopyWith$Input$ContentWhereInput<TRes> {
  _CopyWithImpl$Input$ContentWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContentWhereInput _instance;

  final TRes Function(Input$ContentWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? type = _undefined,
    Object? typeNEQ = _undefined,
    Object? typeIn = _undefined,
    Object? typeNotIn = _undefined,
    Object? iconimage = _undefined,
    Object? iconimageNEQ = _undefined,
    Object? iconimageIn = _undefined,
    Object? iconimageNotIn = _undefined,
    Object? iconimageGT = _undefined,
    Object? iconimageGTE = _undefined,
    Object? iconimageLT = _undefined,
    Object? iconimageLTE = _undefined,
    Object? iconimageContains = _undefined,
    Object? iconimageHasPrefix = _undefined,
    Object? iconimageHasSuffix = _undefined,
    Object? iconimageEqualFold = _undefined,
    Object? iconimageContainsFold = _undefined,
    Object? coverimage = _undefined,
    Object? coverimageNEQ = _undefined,
    Object? coverimageIn = _undefined,
    Object? coverimageNotIn = _undefined,
    Object? coverimageGT = _undefined,
    Object? coverimageGTE = _undefined,
    Object? coverimageLT = _undefined,
    Object? coverimageLTE = _undefined,
    Object? coverimageContains = _undefined,
    Object? coverimageHasPrefix = _undefined,
    Object? coverimageHasSuffix = _undefined,
    Object? coverimageEqualFold = _undefined,
    Object? coverimageContainsFold = _undefined,
    Object? title = _undefined,
    Object? titleNEQ = _undefined,
    Object? titleIn = _undefined,
    Object? titleNotIn = _undefined,
    Object? titleGT = _undefined,
    Object? titleGTE = _undefined,
    Object? titleLT = _undefined,
    Object? titleLTE = _undefined,
    Object? titleContains = _undefined,
    Object? titleHasPrefix = _undefined,
    Object? titleHasSuffix = _undefined,
    Object? titleEqualFold = _undefined,
    Object? titleContainsFold = _undefined,
    Object? subtitle = _undefined,
    Object? subtitleNEQ = _undefined,
    Object? subtitleIn = _undefined,
    Object? subtitleNotIn = _undefined,
    Object? subtitleGT = _undefined,
    Object? subtitleGTE = _undefined,
    Object? subtitleLT = _undefined,
    Object? subtitleLTE = _undefined,
    Object? subtitleContains = _undefined,
    Object? subtitleHasPrefix = _undefined,
    Object? subtitleHasSuffix = _undefined,
    Object? subtitleEqualFold = _undefined,
    Object? subtitleContainsFold = _undefined,
    Object? description = _undefined,
    Object? descriptionNEQ = _undefined,
    Object? descriptionIn = _undefined,
    Object? descriptionNotIn = _undefined,
    Object? descriptionGT = _undefined,
    Object? descriptionGTE = _undefined,
    Object? descriptionLT = _undefined,
    Object? descriptionLTE = _undefined,
    Object? descriptionContains = _undefined,
    Object? descriptionHasPrefix = _undefined,
    Object? descriptionHasSuffix = _undefined,
    Object? descriptionEqualFold = _undefined,
    Object? descriptionContainsFold = _undefined,
    Object? source = _undefined,
    Object? sourceNEQ = _undefined,
    Object? sourceIn = _undefined,
    Object? sourceNotIn = _undefined,
    Object? sourceGT = _undefined,
    Object? sourceGTE = _undefined,
    Object? sourceLT = _undefined,
    Object? sourceLTE = _undefined,
    Object? sourceContains = _undefined,
    Object? sourceHasPrefix = _undefined,
    Object? sourceHasSuffix = _undefined,
    Object? sourceEqualFold = _undefined,
    Object? sourceContainsFold = _undefined,
    Object? sourceurl = _undefined,
    Object? sourceurlNEQ = _undefined,
    Object? sourceurlIn = _undefined,
    Object? sourceurlNotIn = _undefined,
    Object? sourceurlGT = _undefined,
    Object? sourceurlGTE = _undefined,
    Object? sourceurlLT = _undefined,
    Object? sourceurlLTE = _undefined,
    Object? sourceurlContains = _undefined,
    Object? sourceurlHasPrefix = _undefined,
    Object? sourceurlHasSuffix = _undefined,
    Object? sourceurlEqualFold = _undefined,
    Object? sourceurlContainsFold = _undefined,
    Object? licence = _undefined,
    Object? licenceNEQ = _undefined,
    Object? licenceIn = _undefined,
    Object? licenceNotIn = _undefined,
    Object? licenceGT = _undefined,
    Object? licenceGTE = _undefined,
    Object? licenceLT = _undefined,
    Object? licenceLTE = _undefined,
    Object? licenceContains = _undefined,
    Object? licenceHasPrefix = _undefined,
    Object? licenceHasSuffix = _undefined,
    Object? licenceEqualFold = _undefined,
    Object? licenceContainsFold = _undefined,
    Object? licenceurl = _undefined,
    Object? licenceurlNEQ = _undefined,
    Object? licenceurlIn = _undefined,
    Object? licenceurlNotIn = _undefined,
    Object? licenceurlGT = _undefined,
    Object? licenceurlGTE = _undefined,
    Object? licenceurlLT = _undefined,
    Object? licenceurlLTE = _undefined,
    Object? licenceurlContains = _undefined,
    Object? licenceurlHasPrefix = _undefined,
    Object? licenceurlHasSuffix = _undefined,
    Object? licenceurlEqualFold = _undefined,
    Object? licenceurlContainsFold = _undefined,
    Object? ishidden = _undefined,
    Object? ishiddenNEQ = _undefined,
    Object? order = _undefined,
    Object? orderNEQ = _undefined,
    Object? orderIn = _undefined,
    Object? orderNotIn = _undefined,
    Object? orderGT = _undefined,
    Object? orderGTE = _undefined,
    Object? orderLT = _undefined,
    Object? orderLTE = _undefined,
    Object? episodescount = _undefined,
    Object? episodescountNEQ = _undefined,
    Object? episodescountIn = _undefined,
    Object? episodescountNotIn = _undefined,
    Object? episodescountGT = _undefined,
    Object? episodescountGTE = _undefined,
    Object? episodescountLT = _undefined,
    Object? episodescountLTE = _undefined,
    Object? hasEpisodes = _undefined,
    Object? hasEpisodesWith = _undefined,
  }) =>
      _then(Input$ContentWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$ContentWhereInput?),
        if (and != _undefined) 'and': (and as List<Input$ContentWhereInput>?),
        if (or != _undefined) 'or': (or as List<Input$ContentWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (type != _undefined) 'type': (type as Enum$ContentContentType?),
        if (typeNEQ != _undefined)
          'typeNEQ': (typeNEQ as Enum$ContentContentType?),
        if (typeIn != _undefined)
          'typeIn': (typeIn as List<Enum$ContentContentType>?),
        if (typeNotIn != _undefined)
          'typeNotIn': (typeNotIn as List<Enum$ContentContentType>?),
        if (iconimage != _undefined) 'iconimage': (iconimage as String?),
        if (iconimageNEQ != _undefined)
          'iconimageNEQ': (iconimageNEQ as String?),
        if (iconimageIn != _undefined)
          'iconimageIn': (iconimageIn as List<String>?),
        if (iconimageNotIn != _undefined)
          'iconimageNotIn': (iconimageNotIn as List<String>?),
        if (iconimageGT != _undefined) 'iconimageGT': (iconimageGT as String?),
        if (iconimageGTE != _undefined)
          'iconimageGTE': (iconimageGTE as String?),
        if (iconimageLT != _undefined) 'iconimageLT': (iconimageLT as String?),
        if (iconimageLTE != _undefined)
          'iconimageLTE': (iconimageLTE as String?),
        if (iconimageContains != _undefined)
          'iconimageContains': (iconimageContains as String?),
        if (iconimageHasPrefix != _undefined)
          'iconimageHasPrefix': (iconimageHasPrefix as String?),
        if (iconimageHasSuffix != _undefined)
          'iconimageHasSuffix': (iconimageHasSuffix as String?),
        if (iconimageEqualFold != _undefined)
          'iconimageEqualFold': (iconimageEqualFold as String?),
        if (iconimageContainsFold != _undefined)
          'iconimageContainsFold': (iconimageContainsFold as String?),
        if (coverimage != _undefined) 'coverimage': (coverimage as String?),
        if (coverimageNEQ != _undefined)
          'coverimageNEQ': (coverimageNEQ as String?),
        if (coverimageIn != _undefined)
          'coverimageIn': (coverimageIn as List<String>?),
        if (coverimageNotIn != _undefined)
          'coverimageNotIn': (coverimageNotIn as List<String>?),
        if (coverimageGT != _undefined)
          'coverimageGT': (coverimageGT as String?),
        if (coverimageGTE != _undefined)
          'coverimageGTE': (coverimageGTE as String?),
        if (coverimageLT != _undefined)
          'coverimageLT': (coverimageLT as String?),
        if (coverimageLTE != _undefined)
          'coverimageLTE': (coverimageLTE as String?),
        if (coverimageContains != _undefined)
          'coverimageContains': (coverimageContains as String?),
        if (coverimageHasPrefix != _undefined)
          'coverimageHasPrefix': (coverimageHasPrefix as String?),
        if (coverimageHasSuffix != _undefined)
          'coverimageHasSuffix': (coverimageHasSuffix as String?),
        if (coverimageEqualFold != _undefined)
          'coverimageEqualFold': (coverimageEqualFold as String?),
        if (coverimageContainsFold != _undefined)
          'coverimageContainsFold': (coverimageContainsFold as String?),
        if (title != _undefined) 'title': (title as String?),
        if (titleNEQ != _undefined) 'titleNEQ': (titleNEQ as String?),
        if (titleIn != _undefined) 'titleIn': (titleIn as List<String>?),
        if (titleNotIn != _undefined)
          'titleNotIn': (titleNotIn as List<String>?),
        if (titleGT != _undefined) 'titleGT': (titleGT as String?),
        if (titleGTE != _undefined) 'titleGTE': (titleGTE as String?),
        if (titleLT != _undefined) 'titleLT': (titleLT as String?),
        if (titleLTE != _undefined) 'titleLTE': (titleLTE as String?),
        if (titleContains != _undefined)
          'titleContains': (titleContains as String?),
        if (titleHasPrefix != _undefined)
          'titleHasPrefix': (titleHasPrefix as String?),
        if (titleHasSuffix != _undefined)
          'titleHasSuffix': (titleHasSuffix as String?),
        if (titleEqualFold != _undefined)
          'titleEqualFold': (titleEqualFold as String?),
        if (titleContainsFold != _undefined)
          'titleContainsFold': (titleContainsFold as String?),
        if (subtitle != _undefined) 'subtitle': (subtitle as String?),
        if (subtitleNEQ != _undefined) 'subtitleNEQ': (subtitleNEQ as String?),
        if (subtitleIn != _undefined)
          'subtitleIn': (subtitleIn as List<String>?),
        if (subtitleNotIn != _undefined)
          'subtitleNotIn': (subtitleNotIn as List<String>?),
        if (subtitleGT != _undefined) 'subtitleGT': (subtitleGT as String?),
        if (subtitleGTE != _undefined) 'subtitleGTE': (subtitleGTE as String?),
        if (subtitleLT != _undefined) 'subtitleLT': (subtitleLT as String?),
        if (subtitleLTE != _undefined) 'subtitleLTE': (subtitleLTE as String?),
        if (subtitleContains != _undefined)
          'subtitleContains': (subtitleContains as String?),
        if (subtitleHasPrefix != _undefined)
          'subtitleHasPrefix': (subtitleHasPrefix as String?),
        if (subtitleHasSuffix != _undefined)
          'subtitleHasSuffix': (subtitleHasSuffix as String?),
        if (subtitleEqualFold != _undefined)
          'subtitleEqualFold': (subtitleEqualFold as String?),
        if (subtitleContainsFold != _undefined)
          'subtitleContainsFold': (subtitleContainsFold as String?),
        if (description != _undefined) 'description': (description as String?),
        if (descriptionNEQ != _undefined)
          'descriptionNEQ': (descriptionNEQ as String?),
        if (descriptionIn != _undefined)
          'descriptionIn': (descriptionIn as List<String>?),
        if (descriptionNotIn != _undefined)
          'descriptionNotIn': (descriptionNotIn as List<String>?),
        if (descriptionGT != _undefined)
          'descriptionGT': (descriptionGT as String?),
        if (descriptionGTE != _undefined)
          'descriptionGTE': (descriptionGTE as String?),
        if (descriptionLT != _undefined)
          'descriptionLT': (descriptionLT as String?),
        if (descriptionLTE != _undefined)
          'descriptionLTE': (descriptionLTE as String?),
        if (descriptionContains != _undefined)
          'descriptionContains': (descriptionContains as String?),
        if (descriptionHasPrefix != _undefined)
          'descriptionHasPrefix': (descriptionHasPrefix as String?),
        if (descriptionHasSuffix != _undefined)
          'descriptionHasSuffix': (descriptionHasSuffix as String?),
        if (descriptionEqualFold != _undefined)
          'descriptionEqualFold': (descriptionEqualFold as String?),
        if (descriptionContainsFold != _undefined)
          'descriptionContainsFold': (descriptionContainsFold as String?),
        if (source != _undefined) 'source': (source as String?),
        if (sourceNEQ != _undefined) 'sourceNEQ': (sourceNEQ as String?),
        if (sourceIn != _undefined) 'sourceIn': (sourceIn as List<String>?),
        if (sourceNotIn != _undefined)
          'sourceNotIn': (sourceNotIn as List<String>?),
        if (sourceGT != _undefined) 'sourceGT': (sourceGT as String?),
        if (sourceGTE != _undefined) 'sourceGTE': (sourceGTE as String?),
        if (sourceLT != _undefined) 'sourceLT': (sourceLT as String?),
        if (sourceLTE != _undefined) 'sourceLTE': (sourceLTE as String?),
        if (sourceContains != _undefined)
          'sourceContains': (sourceContains as String?),
        if (sourceHasPrefix != _undefined)
          'sourceHasPrefix': (sourceHasPrefix as String?),
        if (sourceHasSuffix != _undefined)
          'sourceHasSuffix': (sourceHasSuffix as String?),
        if (sourceEqualFold != _undefined)
          'sourceEqualFold': (sourceEqualFold as String?),
        if (sourceContainsFold != _undefined)
          'sourceContainsFold': (sourceContainsFold as String?),
        if (sourceurl != _undefined) 'sourceurl': (sourceurl as String?),
        if (sourceurlNEQ != _undefined)
          'sourceurlNEQ': (sourceurlNEQ as String?),
        if (sourceurlIn != _undefined)
          'sourceurlIn': (sourceurlIn as List<String>?),
        if (sourceurlNotIn != _undefined)
          'sourceurlNotIn': (sourceurlNotIn as List<String>?),
        if (sourceurlGT != _undefined) 'sourceurlGT': (sourceurlGT as String?),
        if (sourceurlGTE != _undefined)
          'sourceurlGTE': (sourceurlGTE as String?),
        if (sourceurlLT != _undefined) 'sourceurlLT': (sourceurlLT as String?),
        if (sourceurlLTE != _undefined)
          'sourceurlLTE': (sourceurlLTE as String?),
        if (sourceurlContains != _undefined)
          'sourceurlContains': (sourceurlContains as String?),
        if (sourceurlHasPrefix != _undefined)
          'sourceurlHasPrefix': (sourceurlHasPrefix as String?),
        if (sourceurlHasSuffix != _undefined)
          'sourceurlHasSuffix': (sourceurlHasSuffix as String?),
        if (sourceurlEqualFold != _undefined)
          'sourceurlEqualFold': (sourceurlEqualFold as String?),
        if (sourceurlContainsFold != _undefined)
          'sourceurlContainsFold': (sourceurlContainsFold as String?),
        if (licence != _undefined) 'licence': (licence as String?),
        if (licenceNEQ != _undefined) 'licenceNEQ': (licenceNEQ as String?),
        if (licenceIn != _undefined) 'licenceIn': (licenceIn as List<String>?),
        if (licenceNotIn != _undefined)
          'licenceNotIn': (licenceNotIn as List<String>?),
        if (licenceGT != _undefined) 'licenceGT': (licenceGT as String?),
        if (licenceGTE != _undefined) 'licenceGTE': (licenceGTE as String?),
        if (licenceLT != _undefined) 'licenceLT': (licenceLT as String?),
        if (licenceLTE != _undefined) 'licenceLTE': (licenceLTE as String?),
        if (licenceContains != _undefined)
          'licenceContains': (licenceContains as String?),
        if (licenceHasPrefix != _undefined)
          'licenceHasPrefix': (licenceHasPrefix as String?),
        if (licenceHasSuffix != _undefined)
          'licenceHasSuffix': (licenceHasSuffix as String?),
        if (licenceEqualFold != _undefined)
          'licenceEqualFold': (licenceEqualFold as String?),
        if (licenceContainsFold != _undefined)
          'licenceContainsFold': (licenceContainsFold as String?),
        if (licenceurl != _undefined) 'licenceurl': (licenceurl as String?),
        if (licenceurlNEQ != _undefined)
          'licenceurlNEQ': (licenceurlNEQ as String?),
        if (licenceurlIn != _undefined)
          'licenceurlIn': (licenceurlIn as List<String>?),
        if (licenceurlNotIn != _undefined)
          'licenceurlNotIn': (licenceurlNotIn as List<String>?),
        if (licenceurlGT != _undefined)
          'licenceurlGT': (licenceurlGT as String?),
        if (licenceurlGTE != _undefined)
          'licenceurlGTE': (licenceurlGTE as String?),
        if (licenceurlLT != _undefined)
          'licenceurlLT': (licenceurlLT as String?),
        if (licenceurlLTE != _undefined)
          'licenceurlLTE': (licenceurlLTE as String?),
        if (licenceurlContains != _undefined)
          'licenceurlContains': (licenceurlContains as String?),
        if (licenceurlHasPrefix != _undefined)
          'licenceurlHasPrefix': (licenceurlHasPrefix as String?),
        if (licenceurlHasSuffix != _undefined)
          'licenceurlHasSuffix': (licenceurlHasSuffix as String?),
        if (licenceurlEqualFold != _undefined)
          'licenceurlEqualFold': (licenceurlEqualFold as String?),
        if (licenceurlContainsFold != _undefined)
          'licenceurlContainsFold': (licenceurlContainsFold as String?),
        if (ishidden != _undefined) 'ishidden': (ishidden as bool?),
        if (ishiddenNEQ != _undefined) 'ishiddenNEQ': (ishiddenNEQ as bool?),
        if (order != _undefined) 'order': (order as int?),
        if (orderNEQ != _undefined) 'orderNEQ': (orderNEQ as int?),
        if (orderIn != _undefined) 'orderIn': (orderIn as List<int>?),
        if (orderNotIn != _undefined) 'orderNotIn': (orderNotIn as List<int>?),
        if (orderGT != _undefined) 'orderGT': (orderGT as int?),
        if (orderGTE != _undefined) 'orderGTE': (orderGTE as int?),
        if (orderLT != _undefined) 'orderLT': (orderLT as int?),
        if (orderLTE != _undefined) 'orderLTE': (orderLTE as int?),
        if (episodescount != _undefined)
          'episodescount': (episodescount as int?),
        if (episodescountNEQ != _undefined)
          'episodescountNEQ': (episodescountNEQ as int?),
        if (episodescountIn != _undefined)
          'episodescountIn': (episodescountIn as List<int>?),
        if (episodescountNotIn != _undefined)
          'episodescountNotIn': (episodescountNotIn as List<int>?),
        if (episodescountGT != _undefined)
          'episodescountGT': (episodescountGT as int?),
        if (episodescountGTE != _undefined)
          'episodescountGTE': (episodescountGTE as int?),
        if (episodescountLT != _undefined)
          'episodescountLT': (episodescountLT as int?),
        if (episodescountLTE != _undefined)
          'episodescountLTE': (episodescountLTE as int?),
        if (hasEpisodes != _undefined) 'hasEpisodes': (hasEpisodes as bool?),
        if (hasEpisodesWith != _undefined)
          'hasEpisodesWith':
              (hasEpisodesWith as List<Input$ContentEpisodeWhereInput>?),
      }));

  CopyWith$Input$ContentWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$ContentWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentWhereInput(local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$ContentWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$ContentWhereInput<
                          Input$ContentWhereInput>>?)
              _fn) =>
      call(
          and: _fn(_instance.and?.map((e) => CopyWith$Input$ContentWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes or(
          Iterable<Input$ContentWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$ContentWhereInput<
                          Input$ContentWhereInput>>?)
              _fn) =>
      call(
          or: _fn(_instance.or?.map((e) => CopyWith$Input$ContentWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes hasEpisodesWith(
          Iterable<Input$ContentEpisodeWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$ContentEpisodeWhereInput<
                          Input$ContentEpisodeWhereInput>>?)
              _fn) =>
      call(
          hasEpisodesWith: _fn(_instance.hasEpisodesWith
              ?.map((e) => CopyWith$Input$ContentEpisodeWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$ContentWhereInput<TRes>
    implements CopyWith$Input$ContentWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContentWhereInput(this._res);

  TRes _res;

  call({
    Input$ContentWhereInput? not,
    List<Input$ContentWhereInput>? and,
    List<Input$ContentWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    Enum$ContentContentType? type,
    Enum$ContentContentType? typeNEQ,
    List<Enum$ContentContentType>? typeIn,
    List<Enum$ContentContentType>? typeNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    String? source,
    String? sourceNEQ,
    List<String>? sourceIn,
    List<String>? sourceNotIn,
    String? sourceGT,
    String? sourceGTE,
    String? sourceLT,
    String? sourceLTE,
    String? sourceContains,
    String? sourceHasPrefix,
    String? sourceHasSuffix,
    String? sourceEqualFold,
    String? sourceContainsFold,
    String? sourceurl,
    String? sourceurlNEQ,
    List<String>? sourceurlIn,
    List<String>? sourceurlNotIn,
    String? sourceurlGT,
    String? sourceurlGTE,
    String? sourceurlLT,
    String? sourceurlLTE,
    String? sourceurlContains,
    String? sourceurlHasPrefix,
    String? sourceurlHasSuffix,
    String? sourceurlEqualFold,
    String? sourceurlContainsFold,
    String? licence,
    String? licenceNEQ,
    List<String>? licenceIn,
    List<String>? licenceNotIn,
    String? licenceGT,
    String? licenceGTE,
    String? licenceLT,
    String? licenceLTE,
    String? licenceContains,
    String? licenceHasPrefix,
    String? licenceHasSuffix,
    String? licenceEqualFold,
    String? licenceContainsFold,
    String? licenceurl,
    String? licenceurlNEQ,
    List<String>? licenceurlIn,
    List<String>? licenceurlNotIn,
    String? licenceurlGT,
    String? licenceurlGTE,
    String? licenceurlLT,
    String? licenceurlLTE,
    String? licenceurlContains,
    String? licenceurlHasPrefix,
    String? licenceurlHasSuffix,
    String? licenceurlEqualFold,
    String? licenceurlContainsFold,
    bool? ishidden,
    bool? ishiddenNEQ,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    int? episodescount,
    int? episodescountNEQ,
    List<int>? episodescountIn,
    List<int>? episodescountNotIn,
    int? episodescountGT,
    int? episodescountGTE,
    int? episodescountLT,
    int? episodescountLTE,
    bool? hasEpisodes,
    List<Input$ContentEpisodeWhereInput>? hasEpisodesWith,
  }) =>
      _res;

  CopyWith$Input$ContentWhereInput<TRes> get not =>
      CopyWith$Input$ContentWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;

  hasEpisodesWith(_fn) => _res;
}

class Input$CourseOrder {
  factory Input$CourseOrder({
    Enum$OrderDirection? direction,
    required Enum$CourseOrderField field,
  }) =>
      Input$CourseOrder._({
        if (direction != null) r'direction': direction,
        r'field': field,
      });

  Input$CourseOrder._(this._$data);

  factory Input$CourseOrder.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('direction')) {
      final l$direction = data['direction'];
      result$data['direction'] =
          fromJson$Enum$OrderDirection((l$direction as String));
    }
    final l$field = data['field'];
    result$data['field'] = fromJson$Enum$CourseOrderField((l$field as String));
    return Input$CourseOrder._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderDirection? get direction =>
      (_$data['direction'] as Enum$OrderDirection?);

  Enum$CourseOrderField get field => (_$data['field'] as Enum$CourseOrderField);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('direction')) {
      final l$direction = direction;
      result$data['direction'] =
          toJson$Enum$OrderDirection((l$direction as Enum$OrderDirection));
    }
    final l$field = field;
    result$data['field'] = toJson$Enum$CourseOrderField(l$field);
    return result$data;
  }

  CopyWith$Input$CourseOrder<Input$CourseOrder> get copyWith =>
      CopyWith$Input$CourseOrder(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$CourseOrder) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$direction = direction;
    final lOther$direction = other.direction;
    if (_$data.containsKey('direction') !=
        other._$data.containsKey('direction')) {
      return false;
    }
    if (l$direction != lOther$direction) {
      return false;
    }
    final l$field = field;
    final lOther$field = other.field;
    if (l$field != lOther$field) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$direction = direction;
    final l$field = field;
    return Object.hashAll([
      _$data.containsKey('direction') ? l$direction : const {},
      l$field,
    ]);
  }
}

abstract class CopyWith$Input$CourseOrder<TRes> {
  factory CopyWith$Input$CourseOrder(
    Input$CourseOrder instance,
    TRes Function(Input$CourseOrder) then,
  ) = _CopyWithImpl$Input$CourseOrder;

  factory CopyWith$Input$CourseOrder.stub(TRes res) =
      _CopyWithStubImpl$Input$CourseOrder;

  TRes call({
    Enum$OrderDirection? direction,
    Enum$CourseOrderField? field,
  });
}

class _CopyWithImpl$Input$CourseOrder<TRes>
    implements CopyWith$Input$CourseOrder<TRes> {
  _CopyWithImpl$Input$CourseOrder(
    this._instance,
    this._then,
  );

  final Input$CourseOrder _instance;

  final TRes Function(Input$CourseOrder) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? direction = _undefined,
    Object? field = _undefined,
  }) =>
      _then(Input$CourseOrder._({
        ..._instance._$data,
        if (direction != _undefined && direction != null)
          'direction': (direction as Enum$OrderDirection),
        if (field != _undefined && field != null)
          'field': (field as Enum$CourseOrderField),
      }));
}

class _CopyWithStubImpl$Input$CourseOrder<TRes>
    implements CopyWith$Input$CourseOrder<TRes> {
  _CopyWithStubImpl$Input$CourseOrder(this._res);

  TRes _res;

  call({
    Enum$OrderDirection? direction,
    Enum$CourseOrderField? field,
  }) =>
      _res;
}

class Input$CourseWhereInput {
  factory Input$CourseWhereInput({
    Input$CourseWhereInput? not,
    List<Input$CourseWhereInput>? and,
    List<Input$CourseWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    String? color,
    String? colorNEQ,
    List<String>? colorIn,
    List<String>? colorNotIn,
    String? colorGT,
    String? colorGTE,
    String? colorLT,
    String? colorLTE,
    String? colorContains,
    String? colorHasPrefix,
    String? colorHasSuffix,
    String? colorEqualFold,
    String? colorContainsFold,
    bool? active,
    bool? activeNEQ,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasUnits,
    List<Input$UnitWhereInput>? hasUnitsWith,
  }) =>
      Input$CourseWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (iconimage != null) r'iconimage': iconimage,
        if (iconimageNEQ != null) r'iconimageNEQ': iconimageNEQ,
        if (iconimageIn != null) r'iconimageIn': iconimageIn,
        if (iconimageNotIn != null) r'iconimageNotIn': iconimageNotIn,
        if (iconimageGT != null) r'iconimageGT': iconimageGT,
        if (iconimageGTE != null) r'iconimageGTE': iconimageGTE,
        if (iconimageLT != null) r'iconimageLT': iconimageLT,
        if (iconimageLTE != null) r'iconimageLTE': iconimageLTE,
        if (iconimageContains != null) r'iconimageContains': iconimageContains,
        if (iconimageHasPrefix != null)
          r'iconimageHasPrefix': iconimageHasPrefix,
        if (iconimageHasSuffix != null)
          r'iconimageHasSuffix': iconimageHasSuffix,
        if (iconimageEqualFold != null)
          r'iconimageEqualFold': iconimageEqualFold,
        if (iconimageContainsFold != null)
          r'iconimageContainsFold': iconimageContainsFold,
        if (coverimage != null) r'coverimage': coverimage,
        if (coverimageNEQ != null) r'coverimageNEQ': coverimageNEQ,
        if (coverimageIn != null) r'coverimageIn': coverimageIn,
        if (coverimageNotIn != null) r'coverimageNotIn': coverimageNotIn,
        if (coverimageGT != null) r'coverimageGT': coverimageGT,
        if (coverimageGTE != null) r'coverimageGTE': coverimageGTE,
        if (coverimageLT != null) r'coverimageLT': coverimageLT,
        if (coverimageLTE != null) r'coverimageLTE': coverimageLTE,
        if (coverimageContains != null)
          r'coverimageContains': coverimageContains,
        if (coverimageHasPrefix != null)
          r'coverimageHasPrefix': coverimageHasPrefix,
        if (coverimageHasSuffix != null)
          r'coverimageHasSuffix': coverimageHasSuffix,
        if (coverimageEqualFold != null)
          r'coverimageEqualFold': coverimageEqualFold,
        if (coverimageContainsFold != null)
          r'coverimageContainsFold': coverimageContainsFold,
        if (title != null) r'title': title,
        if (titleNEQ != null) r'titleNEQ': titleNEQ,
        if (titleIn != null) r'titleIn': titleIn,
        if (titleNotIn != null) r'titleNotIn': titleNotIn,
        if (titleGT != null) r'titleGT': titleGT,
        if (titleGTE != null) r'titleGTE': titleGTE,
        if (titleLT != null) r'titleLT': titleLT,
        if (titleLTE != null) r'titleLTE': titleLTE,
        if (titleContains != null) r'titleContains': titleContains,
        if (titleHasPrefix != null) r'titleHasPrefix': titleHasPrefix,
        if (titleHasSuffix != null) r'titleHasSuffix': titleHasSuffix,
        if (titleEqualFold != null) r'titleEqualFold': titleEqualFold,
        if (titleContainsFold != null) r'titleContainsFold': titleContainsFold,
        if (description != null) r'description': description,
        if (descriptionNEQ != null) r'descriptionNEQ': descriptionNEQ,
        if (descriptionIn != null) r'descriptionIn': descriptionIn,
        if (descriptionNotIn != null) r'descriptionNotIn': descriptionNotIn,
        if (descriptionGT != null) r'descriptionGT': descriptionGT,
        if (descriptionGTE != null) r'descriptionGTE': descriptionGTE,
        if (descriptionLT != null) r'descriptionLT': descriptionLT,
        if (descriptionLTE != null) r'descriptionLTE': descriptionLTE,
        if (descriptionContains != null)
          r'descriptionContains': descriptionContains,
        if (descriptionHasPrefix != null)
          r'descriptionHasPrefix': descriptionHasPrefix,
        if (descriptionHasSuffix != null)
          r'descriptionHasSuffix': descriptionHasSuffix,
        if (descriptionEqualFold != null)
          r'descriptionEqualFold': descriptionEqualFold,
        if (descriptionContainsFold != null)
          r'descriptionContainsFold': descriptionContainsFold,
        if (color != null) r'color': color,
        if (colorNEQ != null) r'colorNEQ': colorNEQ,
        if (colorIn != null) r'colorIn': colorIn,
        if (colorNotIn != null) r'colorNotIn': colorNotIn,
        if (colorGT != null) r'colorGT': colorGT,
        if (colorGTE != null) r'colorGTE': colorGTE,
        if (colorLT != null) r'colorLT': colorLT,
        if (colorLTE != null) r'colorLTE': colorLTE,
        if (colorContains != null) r'colorContains': colorContains,
        if (colorHasPrefix != null) r'colorHasPrefix': colorHasPrefix,
        if (colorHasSuffix != null) r'colorHasSuffix': colorHasSuffix,
        if (colorEqualFold != null) r'colorEqualFold': colorEqualFold,
        if (colorContainsFold != null) r'colorContainsFold': colorContainsFold,
        if (active != null) r'active': active,
        if (activeNEQ != null) r'activeNEQ': activeNEQ,
        if (order != null) r'order': order,
        if (orderNEQ != null) r'orderNEQ': orderNEQ,
        if (orderIn != null) r'orderIn': orderIn,
        if (orderNotIn != null) r'orderNotIn': orderNotIn,
        if (orderGT != null) r'orderGT': orderGT,
        if (orderGTE != null) r'orderGTE': orderGTE,
        if (orderLT != null) r'orderLT': orderLT,
        if (orderLTE != null) r'orderLTE': orderLTE,
        if (hasUnits != null) r'hasUnits': hasUnits,
        if (hasUnitsWith != null) r'hasUnitsWith': hasUnitsWith,
      });

  Input$CourseWhereInput._(this._$data);

  factory Input$CourseWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$CourseWhereInput.fromJson((l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map((e) =>
              Input$CourseWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map((e) =>
              Input$CourseWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('iconimage')) {
      final l$iconimage = data['iconimage'];
      result$data['iconimage'] = (l$iconimage as String?);
    }
    if (data.containsKey('iconimageNEQ')) {
      final l$iconimageNEQ = data['iconimageNEQ'];
      result$data['iconimageNEQ'] = (l$iconimageNEQ as String?);
    }
    if (data.containsKey('iconimageIn')) {
      final l$iconimageIn = data['iconimageIn'];
      result$data['iconimageIn'] =
          (l$iconimageIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('iconimageNotIn')) {
      final l$iconimageNotIn = data['iconimageNotIn'];
      result$data['iconimageNotIn'] = (l$iconimageNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('iconimageGT')) {
      final l$iconimageGT = data['iconimageGT'];
      result$data['iconimageGT'] = (l$iconimageGT as String?);
    }
    if (data.containsKey('iconimageGTE')) {
      final l$iconimageGTE = data['iconimageGTE'];
      result$data['iconimageGTE'] = (l$iconimageGTE as String?);
    }
    if (data.containsKey('iconimageLT')) {
      final l$iconimageLT = data['iconimageLT'];
      result$data['iconimageLT'] = (l$iconimageLT as String?);
    }
    if (data.containsKey('iconimageLTE')) {
      final l$iconimageLTE = data['iconimageLTE'];
      result$data['iconimageLTE'] = (l$iconimageLTE as String?);
    }
    if (data.containsKey('iconimageContains')) {
      final l$iconimageContains = data['iconimageContains'];
      result$data['iconimageContains'] = (l$iconimageContains as String?);
    }
    if (data.containsKey('iconimageHasPrefix')) {
      final l$iconimageHasPrefix = data['iconimageHasPrefix'];
      result$data['iconimageHasPrefix'] = (l$iconimageHasPrefix as String?);
    }
    if (data.containsKey('iconimageHasSuffix')) {
      final l$iconimageHasSuffix = data['iconimageHasSuffix'];
      result$data['iconimageHasSuffix'] = (l$iconimageHasSuffix as String?);
    }
    if (data.containsKey('iconimageEqualFold')) {
      final l$iconimageEqualFold = data['iconimageEqualFold'];
      result$data['iconimageEqualFold'] = (l$iconimageEqualFold as String?);
    }
    if (data.containsKey('iconimageContainsFold')) {
      final l$iconimageContainsFold = data['iconimageContainsFold'];
      result$data['iconimageContainsFold'] =
          (l$iconimageContainsFold as String?);
    }
    if (data.containsKey('coverimage')) {
      final l$coverimage = data['coverimage'];
      result$data['coverimage'] = (l$coverimage as String?);
    }
    if (data.containsKey('coverimageNEQ')) {
      final l$coverimageNEQ = data['coverimageNEQ'];
      result$data['coverimageNEQ'] = (l$coverimageNEQ as String?);
    }
    if (data.containsKey('coverimageIn')) {
      final l$coverimageIn = data['coverimageIn'];
      result$data['coverimageIn'] = (l$coverimageIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('coverimageNotIn')) {
      final l$coverimageNotIn = data['coverimageNotIn'];
      result$data['coverimageNotIn'] = (l$coverimageNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('coverimageGT')) {
      final l$coverimageGT = data['coverimageGT'];
      result$data['coverimageGT'] = (l$coverimageGT as String?);
    }
    if (data.containsKey('coverimageGTE')) {
      final l$coverimageGTE = data['coverimageGTE'];
      result$data['coverimageGTE'] = (l$coverimageGTE as String?);
    }
    if (data.containsKey('coverimageLT')) {
      final l$coverimageLT = data['coverimageLT'];
      result$data['coverimageLT'] = (l$coverimageLT as String?);
    }
    if (data.containsKey('coverimageLTE')) {
      final l$coverimageLTE = data['coverimageLTE'];
      result$data['coverimageLTE'] = (l$coverimageLTE as String?);
    }
    if (data.containsKey('coverimageContains')) {
      final l$coverimageContains = data['coverimageContains'];
      result$data['coverimageContains'] = (l$coverimageContains as String?);
    }
    if (data.containsKey('coverimageHasPrefix')) {
      final l$coverimageHasPrefix = data['coverimageHasPrefix'];
      result$data['coverimageHasPrefix'] = (l$coverimageHasPrefix as String?);
    }
    if (data.containsKey('coverimageHasSuffix')) {
      final l$coverimageHasSuffix = data['coverimageHasSuffix'];
      result$data['coverimageHasSuffix'] = (l$coverimageHasSuffix as String?);
    }
    if (data.containsKey('coverimageEqualFold')) {
      final l$coverimageEqualFold = data['coverimageEqualFold'];
      result$data['coverimageEqualFold'] = (l$coverimageEqualFold as String?);
    }
    if (data.containsKey('coverimageContainsFold')) {
      final l$coverimageContainsFold = data['coverimageContainsFold'];
      result$data['coverimageContainsFold'] =
          (l$coverimageContainsFold as String?);
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] = (l$title as String?);
    }
    if (data.containsKey('titleNEQ')) {
      final l$titleNEQ = data['titleNEQ'];
      result$data['titleNEQ'] = (l$titleNEQ as String?);
    }
    if (data.containsKey('titleIn')) {
      final l$titleIn = data['titleIn'];
      result$data['titleIn'] =
          (l$titleIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleNotIn')) {
      final l$titleNotIn = data['titleNotIn'];
      result$data['titleNotIn'] =
          (l$titleNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleGT')) {
      final l$titleGT = data['titleGT'];
      result$data['titleGT'] = (l$titleGT as String?);
    }
    if (data.containsKey('titleGTE')) {
      final l$titleGTE = data['titleGTE'];
      result$data['titleGTE'] = (l$titleGTE as String?);
    }
    if (data.containsKey('titleLT')) {
      final l$titleLT = data['titleLT'];
      result$data['titleLT'] = (l$titleLT as String?);
    }
    if (data.containsKey('titleLTE')) {
      final l$titleLTE = data['titleLTE'];
      result$data['titleLTE'] = (l$titleLTE as String?);
    }
    if (data.containsKey('titleContains')) {
      final l$titleContains = data['titleContains'];
      result$data['titleContains'] = (l$titleContains as String?);
    }
    if (data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = data['titleHasPrefix'];
      result$data['titleHasPrefix'] = (l$titleHasPrefix as String?);
    }
    if (data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = data['titleHasSuffix'];
      result$data['titleHasSuffix'] = (l$titleHasSuffix as String?);
    }
    if (data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = data['titleEqualFold'];
      result$data['titleEqualFold'] = (l$titleEqualFold as String?);
    }
    if (data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = data['titleContainsFold'];
      result$data['titleContainsFold'] = (l$titleContainsFold as String?);
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = (l$description as String?);
    }
    if (data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = data['descriptionNEQ'];
      result$data['descriptionNEQ'] = (l$descriptionNEQ as String?);
    }
    if (data.containsKey('descriptionIn')) {
      final l$descriptionIn = data['descriptionIn'];
      result$data['descriptionIn'] = (l$descriptionIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = data['descriptionNotIn'];
      result$data['descriptionNotIn'] = (l$descriptionNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionGT')) {
      final l$descriptionGT = data['descriptionGT'];
      result$data['descriptionGT'] = (l$descriptionGT as String?);
    }
    if (data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = data['descriptionGTE'];
      result$data['descriptionGTE'] = (l$descriptionGTE as String?);
    }
    if (data.containsKey('descriptionLT')) {
      final l$descriptionLT = data['descriptionLT'];
      result$data['descriptionLT'] = (l$descriptionLT as String?);
    }
    if (data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = data['descriptionLTE'];
      result$data['descriptionLTE'] = (l$descriptionLTE as String?);
    }
    if (data.containsKey('descriptionContains')) {
      final l$descriptionContains = data['descriptionContains'];
      result$data['descriptionContains'] = (l$descriptionContains as String?);
    }
    if (data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = data['descriptionHasPrefix'];
      result$data['descriptionHasPrefix'] = (l$descriptionHasPrefix as String?);
    }
    if (data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = data['descriptionHasSuffix'];
      result$data['descriptionHasSuffix'] = (l$descriptionHasSuffix as String?);
    }
    if (data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = data['descriptionEqualFold'];
      result$data['descriptionEqualFold'] = (l$descriptionEqualFold as String?);
    }
    if (data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = data['descriptionContainsFold'];
      result$data['descriptionContainsFold'] =
          (l$descriptionContainsFold as String?);
    }
    if (data.containsKey('color')) {
      final l$color = data['color'];
      result$data['color'] = (l$color as String?);
    }
    if (data.containsKey('colorNEQ')) {
      final l$colorNEQ = data['colorNEQ'];
      result$data['colorNEQ'] = (l$colorNEQ as String?);
    }
    if (data.containsKey('colorIn')) {
      final l$colorIn = data['colorIn'];
      result$data['colorIn'] =
          (l$colorIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('colorNotIn')) {
      final l$colorNotIn = data['colorNotIn'];
      result$data['colorNotIn'] =
          (l$colorNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('colorGT')) {
      final l$colorGT = data['colorGT'];
      result$data['colorGT'] = (l$colorGT as String?);
    }
    if (data.containsKey('colorGTE')) {
      final l$colorGTE = data['colorGTE'];
      result$data['colorGTE'] = (l$colorGTE as String?);
    }
    if (data.containsKey('colorLT')) {
      final l$colorLT = data['colorLT'];
      result$data['colorLT'] = (l$colorLT as String?);
    }
    if (data.containsKey('colorLTE')) {
      final l$colorLTE = data['colorLTE'];
      result$data['colorLTE'] = (l$colorLTE as String?);
    }
    if (data.containsKey('colorContains')) {
      final l$colorContains = data['colorContains'];
      result$data['colorContains'] = (l$colorContains as String?);
    }
    if (data.containsKey('colorHasPrefix')) {
      final l$colorHasPrefix = data['colorHasPrefix'];
      result$data['colorHasPrefix'] = (l$colorHasPrefix as String?);
    }
    if (data.containsKey('colorHasSuffix')) {
      final l$colorHasSuffix = data['colorHasSuffix'];
      result$data['colorHasSuffix'] = (l$colorHasSuffix as String?);
    }
    if (data.containsKey('colorEqualFold')) {
      final l$colorEqualFold = data['colorEqualFold'];
      result$data['colorEqualFold'] = (l$colorEqualFold as String?);
    }
    if (data.containsKey('colorContainsFold')) {
      final l$colorContainsFold = data['colorContainsFold'];
      result$data['colorContainsFold'] = (l$colorContainsFold as String?);
    }
    if (data.containsKey('active')) {
      final l$active = data['active'];
      result$data['active'] = (l$active as bool?);
    }
    if (data.containsKey('activeNEQ')) {
      final l$activeNEQ = data['activeNEQ'];
      result$data['activeNEQ'] = (l$activeNEQ as bool?);
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = (l$order as int?);
    }
    if (data.containsKey('orderNEQ')) {
      final l$orderNEQ = data['orderNEQ'];
      result$data['orderNEQ'] = (l$orderNEQ as int?);
    }
    if (data.containsKey('orderIn')) {
      final l$orderIn = data['orderIn'];
      result$data['orderIn'] =
          (l$orderIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderNotIn')) {
      final l$orderNotIn = data['orderNotIn'];
      result$data['orderNotIn'] =
          (l$orderNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderGT')) {
      final l$orderGT = data['orderGT'];
      result$data['orderGT'] = (l$orderGT as int?);
    }
    if (data.containsKey('orderGTE')) {
      final l$orderGTE = data['orderGTE'];
      result$data['orderGTE'] = (l$orderGTE as int?);
    }
    if (data.containsKey('orderLT')) {
      final l$orderLT = data['orderLT'];
      result$data['orderLT'] = (l$orderLT as int?);
    }
    if (data.containsKey('orderLTE')) {
      final l$orderLTE = data['orderLTE'];
      result$data['orderLTE'] = (l$orderLTE as int?);
    }
    if (data.containsKey('hasUnits')) {
      final l$hasUnits = data['hasUnits'];
      result$data['hasUnits'] = (l$hasUnits as bool?);
    }
    if (data.containsKey('hasUnitsWith')) {
      final l$hasUnitsWith = data['hasUnitsWith'];
      result$data['hasUnitsWith'] = (l$hasUnitsWith as List<dynamic>?)
          ?.map(
              (e) => Input$UnitWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    return Input$CourseWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$CourseWhereInput? get not => (_$data['not'] as Input$CourseWhereInput?);

  List<Input$CourseWhereInput>? get and =>
      (_$data['and'] as List<Input$CourseWhereInput>?);

  List<Input$CourseWhereInput>? get or =>
      (_$data['or'] as List<Input$CourseWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  String? get iconimage => (_$data['iconimage'] as String?);

  String? get iconimageNEQ => (_$data['iconimageNEQ'] as String?);

  List<String>? get iconimageIn => (_$data['iconimageIn'] as List<String>?);

  List<String>? get iconimageNotIn =>
      (_$data['iconimageNotIn'] as List<String>?);

  String? get iconimageGT => (_$data['iconimageGT'] as String?);

  String? get iconimageGTE => (_$data['iconimageGTE'] as String?);

  String? get iconimageLT => (_$data['iconimageLT'] as String?);

  String? get iconimageLTE => (_$data['iconimageLTE'] as String?);

  String? get iconimageContains => (_$data['iconimageContains'] as String?);

  String? get iconimageHasPrefix => (_$data['iconimageHasPrefix'] as String?);

  String? get iconimageHasSuffix => (_$data['iconimageHasSuffix'] as String?);

  String? get iconimageEqualFold => (_$data['iconimageEqualFold'] as String?);

  String? get iconimageContainsFold =>
      (_$data['iconimageContainsFold'] as String?);

  String? get coverimage => (_$data['coverimage'] as String?);

  String? get coverimageNEQ => (_$data['coverimageNEQ'] as String?);

  List<String>? get coverimageIn => (_$data['coverimageIn'] as List<String>?);

  List<String>? get coverimageNotIn =>
      (_$data['coverimageNotIn'] as List<String>?);

  String? get coverimageGT => (_$data['coverimageGT'] as String?);

  String? get coverimageGTE => (_$data['coverimageGTE'] as String?);

  String? get coverimageLT => (_$data['coverimageLT'] as String?);

  String? get coverimageLTE => (_$data['coverimageLTE'] as String?);

  String? get coverimageContains => (_$data['coverimageContains'] as String?);

  String? get coverimageHasPrefix => (_$data['coverimageHasPrefix'] as String?);

  String? get coverimageHasSuffix => (_$data['coverimageHasSuffix'] as String?);

  String? get coverimageEqualFold => (_$data['coverimageEqualFold'] as String?);

  String? get coverimageContainsFold =>
      (_$data['coverimageContainsFold'] as String?);

  String? get title => (_$data['title'] as String?);

  String? get titleNEQ => (_$data['titleNEQ'] as String?);

  List<String>? get titleIn => (_$data['titleIn'] as List<String>?);

  List<String>? get titleNotIn => (_$data['titleNotIn'] as List<String>?);

  String? get titleGT => (_$data['titleGT'] as String?);

  String? get titleGTE => (_$data['titleGTE'] as String?);

  String? get titleLT => (_$data['titleLT'] as String?);

  String? get titleLTE => (_$data['titleLTE'] as String?);

  String? get titleContains => (_$data['titleContains'] as String?);

  String? get titleHasPrefix => (_$data['titleHasPrefix'] as String?);

  String? get titleHasSuffix => (_$data['titleHasSuffix'] as String?);

  String? get titleEqualFold => (_$data['titleEqualFold'] as String?);

  String? get titleContainsFold => (_$data['titleContainsFold'] as String?);

  String? get description => (_$data['description'] as String?);

  String? get descriptionNEQ => (_$data['descriptionNEQ'] as String?);

  List<String>? get descriptionIn => (_$data['descriptionIn'] as List<String>?);

  List<String>? get descriptionNotIn =>
      (_$data['descriptionNotIn'] as List<String>?);

  String? get descriptionGT => (_$data['descriptionGT'] as String?);

  String? get descriptionGTE => (_$data['descriptionGTE'] as String?);

  String? get descriptionLT => (_$data['descriptionLT'] as String?);

  String? get descriptionLTE => (_$data['descriptionLTE'] as String?);

  String? get descriptionContains => (_$data['descriptionContains'] as String?);

  String? get descriptionHasPrefix =>
      (_$data['descriptionHasPrefix'] as String?);

  String? get descriptionHasSuffix =>
      (_$data['descriptionHasSuffix'] as String?);

  String? get descriptionEqualFold =>
      (_$data['descriptionEqualFold'] as String?);

  String? get descriptionContainsFold =>
      (_$data['descriptionContainsFold'] as String?);

  String? get color => (_$data['color'] as String?);

  String? get colorNEQ => (_$data['colorNEQ'] as String?);

  List<String>? get colorIn => (_$data['colorIn'] as List<String>?);

  List<String>? get colorNotIn => (_$data['colorNotIn'] as List<String>?);

  String? get colorGT => (_$data['colorGT'] as String?);

  String? get colorGTE => (_$data['colorGTE'] as String?);

  String? get colorLT => (_$data['colorLT'] as String?);

  String? get colorLTE => (_$data['colorLTE'] as String?);

  String? get colorContains => (_$data['colorContains'] as String?);

  String? get colorHasPrefix => (_$data['colorHasPrefix'] as String?);

  String? get colorHasSuffix => (_$data['colorHasSuffix'] as String?);

  String? get colorEqualFold => (_$data['colorEqualFold'] as String?);

  String? get colorContainsFold => (_$data['colorContainsFold'] as String?);

  bool? get active => (_$data['active'] as bool?);

  bool? get activeNEQ => (_$data['activeNEQ'] as bool?);

  int? get order => (_$data['order'] as int?);

  int? get orderNEQ => (_$data['orderNEQ'] as int?);

  List<int>? get orderIn => (_$data['orderIn'] as List<int>?);

  List<int>? get orderNotIn => (_$data['orderNotIn'] as List<int>?);

  int? get orderGT => (_$data['orderGT'] as int?);

  int? get orderGTE => (_$data['orderGTE'] as int?);

  int? get orderLT => (_$data['orderLT'] as int?);

  int? get orderLTE => (_$data['orderLTE'] as int?);

  bool? get hasUnits => (_$data['hasUnits'] as bool?);

  List<Input$UnitWhereInput>? get hasUnitsWith =>
      (_$data['hasUnitsWith'] as List<Input$UnitWhereInput>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('iconimage')) {
      final l$iconimage = iconimage;
      result$data['iconimage'] = l$iconimage;
    }
    if (_$data.containsKey('iconimageNEQ')) {
      final l$iconimageNEQ = iconimageNEQ;
      result$data['iconimageNEQ'] = l$iconimageNEQ;
    }
    if (_$data.containsKey('iconimageIn')) {
      final l$iconimageIn = iconimageIn;
      result$data['iconimageIn'] = l$iconimageIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimageNotIn')) {
      final l$iconimageNotIn = iconimageNotIn;
      result$data['iconimageNotIn'] = l$iconimageNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimageGT')) {
      final l$iconimageGT = iconimageGT;
      result$data['iconimageGT'] = l$iconimageGT;
    }
    if (_$data.containsKey('iconimageGTE')) {
      final l$iconimageGTE = iconimageGTE;
      result$data['iconimageGTE'] = l$iconimageGTE;
    }
    if (_$data.containsKey('iconimageLT')) {
      final l$iconimageLT = iconimageLT;
      result$data['iconimageLT'] = l$iconimageLT;
    }
    if (_$data.containsKey('iconimageLTE')) {
      final l$iconimageLTE = iconimageLTE;
      result$data['iconimageLTE'] = l$iconimageLTE;
    }
    if (_$data.containsKey('iconimageContains')) {
      final l$iconimageContains = iconimageContains;
      result$data['iconimageContains'] = l$iconimageContains;
    }
    if (_$data.containsKey('iconimageHasPrefix')) {
      final l$iconimageHasPrefix = iconimageHasPrefix;
      result$data['iconimageHasPrefix'] = l$iconimageHasPrefix;
    }
    if (_$data.containsKey('iconimageHasSuffix')) {
      final l$iconimageHasSuffix = iconimageHasSuffix;
      result$data['iconimageHasSuffix'] = l$iconimageHasSuffix;
    }
    if (_$data.containsKey('iconimageEqualFold')) {
      final l$iconimageEqualFold = iconimageEqualFold;
      result$data['iconimageEqualFold'] = l$iconimageEqualFold;
    }
    if (_$data.containsKey('iconimageContainsFold')) {
      final l$iconimageContainsFold = iconimageContainsFold;
      result$data['iconimageContainsFold'] = l$iconimageContainsFold;
    }
    if (_$data.containsKey('coverimage')) {
      final l$coverimage = coverimage;
      result$data['coverimage'] = l$coverimage;
    }
    if (_$data.containsKey('coverimageNEQ')) {
      final l$coverimageNEQ = coverimageNEQ;
      result$data['coverimageNEQ'] = l$coverimageNEQ;
    }
    if (_$data.containsKey('coverimageIn')) {
      final l$coverimageIn = coverimageIn;
      result$data['coverimageIn'] = l$coverimageIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('coverimageNotIn')) {
      final l$coverimageNotIn = coverimageNotIn;
      result$data['coverimageNotIn'] =
          l$coverimageNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('coverimageGT')) {
      final l$coverimageGT = coverimageGT;
      result$data['coverimageGT'] = l$coverimageGT;
    }
    if (_$data.containsKey('coverimageGTE')) {
      final l$coverimageGTE = coverimageGTE;
      result$data['coverimageGTE'] = l$coverimageGTE;
    }
    if (_$data.containsKey('coverimageLT')) {
      final l$coverimageLT = coverimageLT;
      result$data['coverimageLT'] = l$coverimageLT;
    }
    if (_$data.containsKey('coverimageLTE')) {
      final l$coverimageLTE = coverimageLTE;
      result$data['coverimageLTE'] = l$coverimageLTE;
    }
    if (_$data.containsKey('coverimageContains')) {
      final l$coverimageContains = coverimageContains;
      result$data['coverimageContains'] = l$coverimageContains;
    }
    if (_$data.containsKey('coverimageHasPrefix')) {
      final l$coverimageHasPrefix = coverimageHasPrefix;
      result$data['coverimageHasPrefix'] = l$coverimageHasPrefix;
    }
    if (_$data.containsKey('coverimageHasSuffix')) {
      final l$coverimageHasSuffix = coverimageHasSuffix;
      result$data['coverimageHasSuffix'] = l$coverimageHasSuffix;
    }
    if (_$data.containsKey('coverimageEqualFold')) {
      final l$coverimageEqualFold = coverimageEqualFold;
      result$data['coverimageEqualFold'] = l$coverimageEqualFold;
    }
    if (_$data.containsKey('coverimageContainsFold')) {
      final l$coverimageContainsFold = coverimageContainsFold;
      result$data['coverimageContainsFold'] = l$coverimageContainsFold;
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] = l$title;
    }
    if (_$data.containsKey('titleNEQ')) {
      final l$titleNEQ = titleNEQ;
      result$data['titleNEQ'] = l$titleNEQ;
    }
    if (_$data.containsKey('titleIn')) {
      final l$titleIn = titleIn;
      result$data['titleIn'] = l$titleIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleNotIn')) {
      final l$titleNotIn = titleNotIn;
      result$data['titleNotIn'] = l$titleNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleGT')) {
      final l$titleGT = titleGT;
      result$data['titleGT'] = l$titleGT;
    }
    if (_$data.containsKey('titleGTE')) {
      final l$titleGTE = titleGTE;
      result$data['titleGTE'] = l$titleGTE;
    }
    if (_$data.containsKey('titleLT')) {
      final l$titleLT = titleLT;
      result$data['titleLT'] = l$titleLT;
    }
    if (_$data.containsKey('titleLTE')) {
      final l$titleLTE = titleLTE;
      result$data['titleLTE'] = l$titleLTE;
    }
    if (_$data.containsKey('titleContains')) {
      final l$titleContains = titleContains;
      result$data['titleContains'] = l$titleContains;
    }
    if (_$data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = titleHasPrefix;
      result$data['titleHasPrefix'] = l$titleHasPrefix;
    }
    if (_$data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = titleHasSuffix;
      result$data['titleHasSuffix'] = l$titleHasSuffix;
    }
    if (_$data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = titleEqualFold;
      result$data['titleEqualFold'] = l$titleEqualFold;
    }
    if (_$data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = titleContainsFold;
      result$data['titleContainsFold'] = l$titleContainsFold;
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] = l$description;
    }
    if (_$data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = descriptionNEQ;
      result$data['descriptionNEQ'] = l$descriptionNEQ;
    }
    if (_$data.containsKey('descriptionIn')) {
      final l$descriptionIn = descriptionIn;
      result$data['descriptionIn'] = l$descriptionIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = descriptionNotIn;
      result$data['descriptionNotIn'] =
          l$descriptionNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionGT')) {
      final l$descriptionGT = descriptionGT;
      result$data['descriptionGT'] = l$descriptionGT;
    }
    if (_$data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = descriptionGTE;
      result$data['descriptionGTE'] = l$descriptionGTE;
    }
    if (_$data.containsKey('descriptionLT')) {
      final l$descriptionLT = descriptionLT;
      result$data['descriptionLT'] = l$descriptionLT;
    }
    if (_$data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = descriptionLTE;
      result$data['descriptionLTE'] = l$descriptionLTE;
    }
    if (_$data.containsKey('descriptionContains')) {
      final l$descriptionContains = descriptionContains;
      result$data['descriptionContains'] = l$descriptionContains;
    }
    if (_$data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = descriptionHasPrefix;
      result$data['descriptionHasPrefix'] = l$descriptionHasPrefix;
    }
    if (_$data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = descriptionHasSuffix;
      result$data['descriptionHasSuffix'] = l$descriptionHasSuffix;
    }
    if (_$data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = descriptionEqualFold;
      result$data['descriptionEqualFold'] = l$descriptionEqualFold;
    }
    if (_$data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = descriptionContainsFold;
      result$data['descriptionContainsFold'] = l$descriptionContainsFold;
    }
    if (_$data.containsKey('color')) {
      final l$color = color;
      result$data['color'] = l$color;
    }
    if (_$data.containsKey('colorNEQ')) {
      final l$colorNEQ = colorNEQ;
      result$data['colorNEQ'] = l$colorNEQ;
    }
    if (_$data.containsKey('colorIn')) {
      final l$colorIn = colorIn;
      result$data['colorIn'] = l$colorIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('colorNotIn')) {
      final l$colorNotIn = colorNotIn;
      result$data['colorNotIn'] = l$colorNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('colorGT')) {
      final l$colorGT = colorGT;
      result$data['colorGT'] = l$colorGT;
    }
    if (_$data.containsKey('colorGTE')) {
      final l$colorGTE = colorGTE;
      result$data['colorGTE'] = l$colorGTE;
    }
    if (_$data.containsKey('colorLT')) {
      final l$colorLT = colorLT;
      result$data['colorLT'] = l$colorLT;
    }
    if (_$data.containsKey('colorLTE')) {
      final l$colorLTE = colorLTE;
      result$data['colorLTE'] = l$colorLTE;
    }
    if (_$data.containsKey('colorContains')) {
      final l$colorContains = colorContains;
      result$data['colorContains'] = l$colorContains;
    }
    if (_$data.containsKey('colorHasPrefix')) {
      final l$colorHasPrefix = colorHasPrefix;
      result$data['colorHasPrefix'] = l$colorHasPrefix;
    }
    if (_$data.containsKey('colorHasSuffix')) {
      final l$colorHasSuffix = colorHasSuffix;
      result$data['colorHasSuffix'] = l$colorHasSuffix;
    }
    if (_$data.containsKey('colorEqualFold')) {
      final l$colorEqualFold = colorEqualFold;
      result$data['colorEqualFold'] = l$colorEqualFold;
    }
    if (_$data.containsKey('colorContainsFold')) {
      final l$colorContainsFold = colorContainsFold;
      result$data['colorContainsFold'] = l$colorContainsFold;
    }
    if (_$data.containsKey('active')) {
      final l$active = active;
      result$data['active'] = l$active;
    }
    if (_$data.containsKey('activeNEQ')) {
      final l$activeNEQ = activeNEQ;
      result$data['activeNEQ'] = l$activeNEQ;
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order;
    }
    if (_$data.containsKey('orderNEQ')) {
      final l$orderNEQ = orderNEQ;
      result$data['orderNEQ'] = l$orderNEQ;
    }
    if (_$data.containsKey('orderIn')) {
      final l$orderIn = orderIn;
      result$data['orderIn'] = l$orderIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderNotIn')) {
      final l$orderNotIn = orderNotIn;
      result$data['orderNotIn'] = l$orderNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderGT')) {
      final l$orderGT = orderGT;
      result$data['orderGT'] = l$orderGT;
    }
    if (_$data.containsKey('orderGTE')) {
      final l$orderGTE = orderGTE;
      result$data['orderGTE'] = l$orderGTE;
    }
    if (_$data.containsKey('orderLT')) {
      final l$orderLT = orderLT;
      result$data['orderLT'] = l$orderLT;
    }
    if (_$data.containsKey('orderLTE')) {
      final l$orderLTE = orderLTE;
      result$data['orderLTE'] = l$orderLTE;
    }
    if (_$data.containsKey('hasUnits')) {
      final l$hasUnits = hasUnits;
      result$data['hasUnits'] = l$hasUnits;
    }
    if (_$data.containsKey('hasUnitsWith')) {
      final l$hasUnitsWith = hasUnitsWith;
      result$data['hasUnitsWith'] =
          l$hasUnitsWith?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$CourseWhereInput<Input$CourseWhereInput> get copyWith =>
      CopyWith$Input$CourseWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$CourseWhereInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$iconimage = iconimage;
    final lOther$iconimage = other.iconimage;
    if (_$data.containsKey('iconimage') !=
        other._$data.containsKey('iconimage')) {
      return false;
    }
    if (l$iconimage != lOther$iconimage) {
      return false;
    }
    final l$iconimageNEQ = iconimageNEQ;
    final lOther$iconimageNEQ = other.iconimageNEQ;
    if (_$data.containsKey('iconimageNEQ') !=
        other._$data.containsKey('iconimageNEQ')) {
      return false;
    }
    if (l$iconimageNEQ != lOther$iconimageNEQ) {
      return false;
    }
    final l$iconimageIn = iconimageIn;
    final lOther$iconimageIn = other.iconimageIn;
    if (_$data.containsKey('iconimageIn') !=
        other._$data.containsKey('iconimageIn')) {
      return false;
    }
    if (l$iconimageIn != null && lOther$iconimageIn != null) {
      if (l$iconimageIn.length != lOther$iconimageIn.length) {
        return false;
      }
      for (int i = 0; i < l$iconimageIn.length; i++) {
        final l$iconimageIn$entry = l$iconimageIn[i];
        final lOther$iconimageIn$entry = lOther$iconimageIn[i];
        if (l$iconimageIn$entry != lOther$iconimageIn$entry) {
          return false;
        }
      }
    } else if (l$iconimageIn != lOther$iconimageIn) {
      return false;
    }
    final l$iconimageNotIn = iconimageNotIn;
    final lOther$iconimageNotIn = other.iconimageNotIn;
    if (_$data.containsKey('iconimageNotIn') !=
        other._$data.containsKey('iconimageNotIn')) {
      return false;
    }
    if (l$iconimageNotIn != null && lOther$iconimageNotIn != null) {
      if (l$iconimageNotIn.length != lOther$iconimageNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$iconimageNotIn.length; i++) {
        final l$iconimageNotIn$entry = l$iconimageNotIn[i];
        final lOther$iconimageNotIn$entry = lOther$iconimageNotIn[i];
        if (l$iconimageNotIn$entry != lOther$iconimageNotIn$entry) {
          return false;
        }
      }
    } else if (l$iconimageNotIn != lOther$iconimageNotIn) {
      return false;
    }
    final l$iconimageGT = iconimageGT;
    final lOther$iconimageGT = other.iconimageGT;
    if (_$data.containsKey('iconimageGT') !=
        other._$data.containsKey('iconimageGT')) {
      return false;
    }
    if (l$iconimageGT != lOther$iconimageGT) {
      return false;
    }
    final l$iconimageGTE = iconimageGTE;
    final lOther$iconimageGTE = other.iconimageGTE;
    if (_$data.containsKey('iconimageGTE') !=
        other._$data.containsKey('iconimageGTE')) {
      return false;
    }
    if (l$iconimageGTE != lOther$iconimageGTE) {
      return false;
    }
    final l$iconimageLT = iconimageLT;
    final lOther$iconimageLT = other.iconimageLT;
    if (_$data.containsKey('iconimageLT') !=
        other._$data.containsKey('iconimageLT')) {
      return false;
    }
    if (l$iconimageLT != lOther$iconimageLT) {
      return false;
    }
    final l$iconimageLTE = iconimageLTE;
    final lOther$iconimageLTE = other.iconimageLTE;
    if (_$data.containsKey('iconimageLTE') !=
        other._$data.containsKey('iconimageLTE')) {
      return false;
    }
    if (l$iconimageLTE != lOther$iconimageLTE) {
      return false;
    }
    final l$iconimageContains = iconimageContains;
    final lOther$iconimageContains = other.iconimageContains;
    if (_$data.containsKey('iconimageContains') !=
        other._$data.containsKey('iconimageContains')) {
      return false;
    }
    if (l$iconimageContains != lOther$iconimageContains) {
      return false;
    }
    final l$iconimageHasPrefix = iconimageHasPrefix;
    final lOther$iconimageHasPrefix = other.iconimageHasPrefix;
    if (_$data.containsKey('iconimageHasPrefix') !=
        other._$data.containsKey('iconimageHasPrefix')) {
      return false;
    }
    if (l$iconimageHasPrefix != lOther$iconimageHasPrefix) {
      return false;
    }
    final l$iconimageHasSuffix = iconimageHasSuffix;
    final lOther$iconimageHasSuffix = other.iconimageHasSuffix;
    if (_$data.containsKey('iconimageHasSuffix') !=
        other._$data.containsKey('iconimageHasSuffix')) {
      return false;
    }
    if (l$iconimageHasSuffix != lOther$iconimageHasSuffix) {
      return false;
    }
    final l$iconimageEqualFold = iconimageEqualFold;
    final lOther$iconimageEqualFold = other.iconimageEqualFold;
    if (_$data.containsKey('iconimageEqualFold') !=
        other._$data.containsKey('iconimageEqualFold')) {
      return false;
    }
    if (l$iconimageEqualFold != lOther$iconimageEqualFold) {
      return false;
    }
    final l$iconimageContainsFold = iconimageContainsFold;
    final lOther$iconimageContainsFold = other.iconimageContainsFold;
    if (_$data.containsKey('iconimageContainsFold') !=
        other._$data.containsKey('iconimageContainsFold')) {
      return false;
    }
    if (l$iconimageContainsFold != lOther$iconimageContainsFold) {
      return false;
    }
    final l$coverimage = coverimage;
    final lOther$coverimage = other.coverimage;
    if (_$data.containsKey('coverimage') !=
        other._$data.containsKey('coverimage')) {
      return false;
    }
    if (l$coverimage != lOther$coverimage) {
      return false;
    }
    final l$coverimageNEQ = coverimageNEQ;
    final lOther$coverimageNEQ = other.coverimageNEQ;
    if (_$data.containsKey('coverimageNEQ') !=
        other._$data.containsKey('coverimageNEQ')) {
      return false;
    }
    if (l$coverimageNEQ != lOther$coverimageNEQ) {
      return false;
    }
    final l$coverimageIn = coverimageIn;
    final lOther$coverimageIn = other.coverimageIn;
    if (_$data.containsKey('coverimageIn') !=
        other._$data.containsKey('coverimageIn')) {
      return false;
    }
    if (l$coverimageIn != null && lOther$coverimageIn != null) {
      if (l$coverimageIn.length != lOther$coverimageIn.length) {
        return false;
      }
      for (int i = 0; i < l$coverimageIn.length; i++) {
        final l$coverimageIn$entry = l$coverimageIn[i];
        final lOther$coverimageIn$entry = lOther$coverimageIn[i];
        if (l$coverimageIn$entry != lOther$coverimageIn$entry) {
          return false;
        }
      }
    } else if (l$coverimageIn != lOther$coverimageIn) {
      return false;
    }
    final l$coverimageNotIn = coverimageNotIn;
    final lOther$coverimageNotIn = other.coverimageNotIn;
    if (_$data.containsKey('coverimageNotIn') !=
        other._$data.containsKey('coverimageNotIn')) {
      return false;
    }
    if (l$coverimageNotIn != null && lOther$coverimageNotIn != null) {
      if (l$coverimageNotIn.length != lOther$coverimageNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$coverimageNotIn.length; i++) {
        final l$coverimageNotIn$entry = l$coverimageNotIn[i];
        final lOther$coverimageNotIn$entry = lOther$coverimageNotIn[i];
        if (l$coverimageNotIn$entry != lOther$coverimageNotIn$entry) {
          return false;
        }
      }
    } else if (l$coverimageNotIn != lOther$coverimageNotIn) {
      return false;
    }
    final l$coverimageGT = coverimageGT;
    final lOther$coverimageGT = other.coverimageGT;
    if (_$data.containsKey('coverimageGT') !=
        other._$data.containsKey('coverimageGT')) {
      return false;
    }
    if (l$coverimageGT != lOther$coverimageGT) {
      return false;
    }
    final l$coverimageGTE = coverimageGTE;
    final lOther$coverimageGTE = other.coverimageGTE;
    if (_$data.containsKey('coverimageGTE') !=
        other._$data.containsKey('coverimageGTE')) {
      return false;
    }
    if (l$coverimageGTE != lOther$coverimageGTE) {
      return false;
    }
    final l$coverimageLT = coverimageLT;
    final lOther$coverimageLT = other.coverimageLT;
    if (_$data.containsKey('coverimageLT') !=
        other._$data.containsKey('coverimageLT')) {
      return false;
    }
    if (l$coverimageLT != lOther$coverimageLT) {
      return false;
    }
    final l$coverimageLTE = coverimageLTE;
    final lOther$coverimageLTE = other.coverimageLTE;
    if (_$data.containsKey('coverimageLTE') !=
        other._$data.containsKey('coverimageLTE')) {
      return false;
    }
    if (l$coverimageLTE != lOther$coverimageLTE) {
      return false;
    }
    final l$coverimageContains = coverimageContains;
    final lOther$coverimageContains = other.coverimageContains;
    if (_$data.containsKey('coverimageContains') !=
        other._$data.containsKey('coverimageContains')) {
      return false;
    }
    if (l$coverimageContains != lOther$coverimageContains) {
      return false;
    }
    final l$coverimageHasPrefix = coverimageHasPrefix;
    final lOther$coverimageHasPrefix = other.coverimageHasPrefix;
    if (_$data.containsKey('coverimageHasPrefix') !=
        other._$data.containsKey('coverimageHasPrefix')) {
      return false;
    }
    if (l$coverimageHasPrefix != lOther$coverimageHasPrefix) {
      return false;
    }
    final l$coverimageHasSuffix = coverimageHasSuffix;
    final lOther$coverimageHasSuffix = other.coverimageHasSuffix;
    if (_$data.containsKey('coverimageHasSuffix') !=
        other._$data.containsKey('coverimageHasSuffix')) {
      return false;
    }
    if (l$coverimageHasSuffix != lOther$coverimageHasSuffix) {
      return false;
    }
    final l$coverimageEqualFold = coverimageEqualFold;
    final lOther$coverimageEqualFold = other.coverimageEqualFold;
    if (_$data.containsKey('coverimageEqualFold') !=
        other._$data.containsKey('coverimageEqualFold')) {
      return false;
    }
    if (l$coverimageEqualFold != lOther$coverimageEqualFold) {
      return false;
    }
    final l$coverimageContainsFold = coverimageContainsFold;
    final lOther$coverimageContainsFold = other.coverimageContainsFold;
    if (_$data.containsKey('coverimageContainsFold') !=
        other._$data.containsKey('coverimageContainsFold')) {
      return false;
    }
    if (l$coverimageContainsFold != lOther$coverimageContainsFold) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$titleNEQ = titleNEQ;
    final lOther$titleNEQ = other.titleNEQ;
    if (_$data.containsKey('titleNEQ') !=
        other._$data.containsKey('titleNEQ')) {
      return false;
    }
    if (l$titleNEQ != lOther$titleNEQ) {
      return false;
    }
    final l$titleIn = titleIn;
    final lOther$titleIn = other.titleIn;
    if (_$data.containsKey('titleIn') != other._$data.containsKey('titleIn')) {
      return false;
    }
    if (l$titleIn != null && lOther$titleIn != null) {
      if (l$titleIn.length != lOther$titleIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleIn.length; i++) {
        final l$titleIn$entry = l$titleIn[i];
        final lOther$titleIn$entry = lOther$titleIn[i];
        if (l$titleIn$entry != lOther$titleIn$entry) {
          return false;
        }
      }
    } else if (l$titleIn != lOther$titleIn) {
      return false;
    }
    final l$titleNotIn = titleNotIn;
    final lOther$titleNotIn = other.titleNotIn;
    if (_$data.containsKey('titleNotIn') !=
        other._$data.containsKey('titleNotIn')) {
      return false;
    }
    if (l$titleNotIn != null && lOther$titleNotIn != null) {
      if (l$titleNotIn.length != lOther$titleNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleNotIn.length; i++) {
        final l$titleNotIn$entry = l$titleNotIn[i];
        final lOther$titleNotIn$entry = lOther$titleNotIn[i];
        if (l$titleNotIn$entry != lOther$titleNotIn$entry) {
          return false;
        }
      }
    } else if (l$titleNotIn != lOther$titleNotIn) {
      return false;
    }
    final l$titleGT = titleGT;
    final lOther$titleGT = other.titleGT;
    if (_$data.containsKey('titleGT') != other._$data.containsKey('titleGT')) {
      return false;
    }
    if (l$titleGT != lOther$titleGT) {
      return false;
    }
    final l$titleGTE = titleGTE;
    final lOther$titleGTE = other.titleGTE;
    if (_$data.containsKey('titleGTE') !=
        other._$data.containsKey('titleGTE')) {
      return false;
    }
    if (l$titleGTE != lOther$titleGTE) {
      return false;
    }
    final l$titleLT = titleLT;
    final lOther$titleLT = other.titleLT;
    if (_$data.containsKey('titleLT') != other._$data.containsKey('titleLT')) {
      return false;
    }
    if (l$titleLT != lOther$titleLT) {
      return false;
    }
    final l$titleLTE = titleLTE;
    final lOther$titleLTE = other.titleLTE;
    if (_$data.containsKey('titleLTE') !=
        other._$data.containsKey('titleLTE')) {
      return false;
    }
    if (l$titleLTE != lOther$titleLTE) {
      return false;
    }
    final l$titleContains = titleContains;
    final lOther$titleContains = other.titleContains;
    if (_$data.containsKey('titleContains') !=
        other._$data.containsKey('titleContains')) {
      return false;
    }
    if (l$titleContains != lOther$titleContains) {
      return false;
    }
    final l$titleHasPrefix = titleHasPrefix;
    final lOther$titleHasPrefix = other.titleHasPrefix;
    if (_$data.containsKey('titleHasPrefix') !=
        other._$data.containsKey('titleHasPrefix')) {
      return false;
    }
    if (l$titleHasPrefix != lOther$titleHasPrefix) {
      return false;
    }
    final l$titleHasSuffix = titleHasSuffix;
    final lOther$titleHasSuffix = other.titleHasSuffix;
    if (_$data.containsKey('titleHasSuffix') !=
        other._$data.containsKey('titleHasSuffix')) {
      return false;
    }
    if (l$titleHasSuffix != lOther$titleHasSuffix) {
      return false;
    }
    final l$titleEqualFold = titleEqualFold;
    final lOther$titleEqualFold = other.titleEqualFold;
    if (_$data.containsKey('titleEqualFold') !=
        other._$data.containsKey('titleEqualFold')) {
      return false;
    }
    if (l$titleEqualFold != lOther$titleEqualFold) {
      return false;
    }
    final l$titleContainsFold = titleContainsFold;
    final lOther$titleContainsFold = other.titleContainsFold;
    if (_$data.containsKey('titleContainsFold') !=
        other._$data.containsKey('titleContainsFold')) {
      return false;
    }
    if (l$titleContainsFold != lOther$titleContainsFold) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$descriptionNEQ = descriptionNEQ;
    final lOther$descriptionNEQ = other.descriptionNEQ;
    if (_$data.containsKey('descriptionNEQ') !=
        other._$data.containsKey('descriptionNEQ')) {
      return false;
    }
    if (l$descriptionNEQ != lOther$descriptionNEQ) {
      return false;
    }
    final l$descriptionIn = descriptionIn;
    final lOther$descriptionIn = other.descriptionIn;
    if (_$data.containsKey('descriptionIn') !=
        other._$data.containsKey('descriptionIn')) {
      return false;
    }
    if (l$descriptionIn != null && lOther$descriptionIn != null) {
      if (l$descriptionIn.length != lOther$descriptionIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionIn.length; i++) {
        final l$descriptionIn$entry = l$descriptionIn[i];
        final lOther$descriptionIn$entry = lOther$descriptionIn[i];
        if (l$descriptionIn$entry != lOther$descriptionIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionIn != lOther$descriptionIn) {
      return false;
    }
    final l$descriptionNotIn = descriptionNotIn;
    final lOther$descriptionNotIn = other.descriptionNotIn;
    if (_$data.containsKey('descriptionNotIn') !=
        other._$data.containsKey('descriptionNotIn')) {
      return false;
    }
    if (l$descriptionNotIn != null && lOther$descriptionNotIn != null) {
      if (l$descriptionNotIn.length != lOther$descriptionNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionNotIn.length; i++) {
        final l$descriptionNotIn$entry = l$descriptionNotIn[i];
        final lOther$descriptionNotIn$entry = lOther$descriptionNotIn[i];
        if (l$descriptionNotIn$entry != lOther$descriptionNotIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionNotIn != lOther$descriptionNotIn) {
      return false;
    }
    final l$descriptionGT = descriptionGT;
    final lOther$descriptionGT = other.descriptionGT;
    if (_$data.containsKey('descriptionGT') !=
        other._$data.containsKey('descriptionGT')) {
      return false;
    }
    if (l$descriptionGT != lOther$descriptionGT) {
      return false;
    }
    final l$descriptionGTE = descriptionGTE;
    final lOther$descriptionGTE = other.descriptionGTE;
    if (_$data.containsKey('descriptionGTE') !=
        other._$data.containsKey('descriptionGTE')) {
      return false;
    }
    if (l$descriptionGTE != lOther$descriptionGTE) {
      return false;
    }
    final l$descriptionLT = descriptionLT;
    final lOther$descriptionLT = other.descriptionLT;
    if (_$data.containsKey('descriptionLT') !=
        other._$data.containsKey('descriptionLT')) {
      return false;
    }
    if (l$descriptionLT != lOther$descriptionLT) {
      return false;
    }
    final l$descriptionLTE = descriptionLTE;
    final lOther$descriptionLTE = other.descriptionLTE;
    if (_$data.containsKey('descriptionLTE') !=
        other._$data.containsKey('descriptionLTE')) {
      return false;
    }
    if (l$descriptionLTE != lOther$descriptionLTE) {
      return false;
    }
    final l$descriptionContains = descriptionContains;
    final lOther$descriptionContains = other.descriptionContains;
    if (_$data.containsKey('descriptionContains') !=
        other._$data.containsKey('descriptionContains')) {
      return false;
    }
    if (l$descriptionContains != lOther$descriptionContains) {
      return false;
    }
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final lOther$descriptionHasPrefix = other.descriptionHasPrefix;
    if (_$data.containsKey('descriptionHasPrefix') !=
        other._$data.containsKey('descriptionHasPrefix')) {
      return false;
    }
    if (l$descriptionHasPrefix != lOther$descriptionHasPrefix) {
      return false;
    }
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final lOther$descriptionHasSuffix = other.descriptionHasSuffix;
    if (_$data.containsKey('descriptionHasSuffix') !=
        other._$data.containsKey('descriptionHasSuffix')) {
      return false;
    }
    if (l$descriptionHasSuffix != lOther$descriptionHasSuffix) {
      return false;
    }
    final l$descriptionEqualFold = descriptionEqualFold;
    final lOther$descriptionEqualFold = other.descriptionEqualFold;
    if (_$data.containsKey('descriptionEqualFold') !=
        other._$data.containsKey('descriptionEqualFold')) {
      return false;
    }
    if (l$descriptionEqualFold != lOther$descriptionEqualFold) {
      return false;
    }
    final l$descriptionContainsFold = descriptionContainsFold;
    final lOther$descriptionContainsFold = other.descriptionContainsFold;
    if (_$data.containsKey('descriptionContainsFold') !=
        other._$data.containsKey('descriptionContainsFold')) {
      return false;
    }
    if (l$descriptionContainsFold != lOther$descriptionContainsFold) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (_$data.containsKey('color') != other._$data.containsKey('color')) {
      return false;
    }
    if (l$color != lOther$color) {
      return false;
    }
    final l$colorNEQ = colorNEQ;
    final lOther$colorNEQ = other.colorNEQ;
    if (_$data.containsKey('colorNEQ') !=
        other._$data.containsKey('colorNEQ')) {
      return false;
    }
    if (l$colorNEQ != lOther$colorNEQ) {
      return false;
    }
    final l$colorIn = colorIn;
    final lOther$colorIn = other.colorIn;
    if (_$data.containsKey('colorIn') != other._$data.containsKey('colorIn')) {
      return false;
    }
    if (l$colorIn != null && lOther$colorIn != null) {
      if (l$colorIn.length != lOther$colorIn.length) {
        return false;
      }
      for (int i = 0; i < l$colorIn.length; i++) {
        final l$colorIn$entry = l$colorIn[i];
        final lOther$colorIn$entry = lOther$colorIn[i];
        if (l$colorIn$entry != lOther$colorIn$entry) {
          return false;
        }
      }
    } else if (l$colorIn != lOther$colorIn) {
      return false;
    }
    final l$colorNotIn = colorNotIn;
    final lOther$colorNotIn = other.colorNotIn;
    if (_$data.containsKey('colorNotIn') !=
        other._$data.containsKey('colorNotIn')) {
      return false;
    }
    if (l$colorNotIn != null && lOther$colorNotIn != null) {
      if (l$colorNotIn.length != lOther$colorNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$colorNotIn.length; i++) {
        final l$colorNotIn$entry = l$colorNotIn[i];
        final lOther$colorNotIn$entry = lOther$colorNotIn[i];
        if (l$colorNotIn$entry != lOther$colorNotIn$entry) {
          return false;
        }
      }
    } else if (l$colorNotIn != lOther$colorNotIn) {
      return false;
    }
    final l$colorGT = colorGT;
    final lOther$colorGT = other.colorGT;
    if (_$data.containsKey('colorGT') != other._$data.containsKey('colorGT')) {
      return false;
    }
    if (l$colorGT != lOther$colorGT) {
      return false;
    }
    final l$colorGTE = colorGTE;
    final lOther$colorGTE = other.colorGTE;
    if (_$data.containsKey('colorGTE') !=
        other._$data.containsKey('colorGTE')) {
      return false;
    }
    if (l$colorGTE != lOther$colorGTE) {
      return false;
    }
    final l$colorLT = colorLT;
    final lOther$colorLT = other.colorLT;
    if (_$data.containsKey('colorLT') != other._$data.containsKey('colorLT')) {
      return false;
    }
    if (l$colorLT != lOther$colorLT) {
      return false;
    }
    final l$colorLTE = colorLTE;
    final lOther$colorLTE = other.colorLTE;
    if (_$data.containsKey('colorLTE') !=
        other._$data.containsKey('colorLTE')) {
      return false;
    }
    if (l$colorLTE != lOther$colorLTE) {
      return false;
    }
    final l$colorContains = colorContains;
    final lOther$colorContains = other.colorContains;
    if (_$data.containsKey('colorContains') !=
        other._$data.containsKey('colorContains')) {
      return false;
    }
    if (l$colorContains != lOther$colorContains) {
      return false;
    }
    final l$colorHasPrefix = colorHasPrefix;
    final lOther$colorHasPrefix = other.colorHasPrefix;
    if (_$data.containsKey('colorHasPrefix') !=
        other._$data.containsKey('colorHasPrefix')) {
      return false;
    }
    if (l$colorHasPrefix != lOther$colorHasPrefix) {
      return false;
    }
    final l$colorHasSuffix = colorHasSuffix;
    final lOther$colorHasSuffix = other.colorHasSuffix;
    if (_$data.containsKey('colorHasSuffix') !=
        other._$data.containsKey('colorHasSuffix')) {
      return false;
    }
    if (l$colorHasSuffix != lOther$colorHasSuffix) {
      return false;
    }
    final l$colorEqualFold = colorEqualFold;
    final lOther$colorEqualFold = other.colorEqualFold;
    if (_$data.containsKey('colorEqualFold') !=
        other._$data.containsKey('colorEqualFold')) {
      return false;
    }
    if (l$colorEqualFold != lOther$colorEqualFold) {
      return false;
    }
    final l$colorContainsFold = colorContainsFold;
    final lOther$colorContainsFold = other.colorContainsFold;
    if (_$data.containsKey('colorContainsFold') !=
        other._$data.containsKey('colorContainsFold')) {
      return false;
    }
    if (l$colorContainsFold != lOther$colorContainsFold) {
      return false;
    }
    final l$active = active;
    final lOther$active = other.active;
    if (_$data.containsKey('active') != other._$data.containsKey('active')) {
      return false;
    }
    if (l$active != lOther$active) {
      return false;
    }
    final l$activeNEQ = activeNEQ;
    final lOther$activeNEQ = other.activeNEQ;
    if (_$data.containsKey('activeNEQ') !=
        other._$data.containsKey('activeNEQ')) {
      return false;
    }
    if (l$activeNEQ != lOther$activeNEQ) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$orderNEQ = orderNEQ;
    final lOther$orderNEQ = other.orderNEQ;
    if (_$data.containsKey('orderNEQ') !=
        other._$data.containsKey('orderNEQ')) {
      return false;
    }
    if (l$orderNEQ != lOther$orderNEQ) {
      return false;
    }
    final l$orderIn = orderIn;
    final lOther$orderIn = other.orderIn;
    if (_$data.containsKey('orderIn') != other._$data.containsKey('orderIn')) {
      return false;
    }
    if (l$orderIn != null && lOther$orderIn != null) {
      if (l$orderIn.length != lOther$orderIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderIn.length; i++) {
        final l$orderIn$entry = l$orderIn[i];
        final lOther$orderIn$entry = lOther$orderIn[i];
        if (l$orderIn$entry != lOther$orderIn$entry) {
          return false;
        }
      }
    } else if (l$orderIn != lOther$orderIn) {
      return false;
    }
    final l$orderNotIn = orderNotIn;
    final lOther$orderNotIn = other.orderNotIn;
    if (_$data.containsKey('orderNotIn') !=
        other._$data.containsKey('orderNotIn')) {
      return false;
    }
    if (l$orderNotIn != null && lOther$orderNotIn != null) {
      if (l$orderNotIn.length != lOther$orderNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderNotIn.length; i++) {
        final l$orderNotIn$entry = l$orderNotIn[i];
        final lOther$orderNotIn$entry = lOther$orderNotIn[i];
        if (l$orderNotIn$entry != lOther$orderNotIn$entry) {
          return false;
        }
      }
    } else if (l$orderNotIn != lOther$orderNotIn) {
      return false;
    }
    final l$orderGT = orderGT;
    final lOther$orderGT = other.orderGT;
    if (_$data.containsKey('orderGT') != other._$data.containsKey('orderGT')) {
      return false;
    }
    if (l$orderGT != lOther$orderGT) {
      return false;
    }
    final l$orderGTE = orderGTE;
    final lOther$orderGTE = other.orderGTE;
    if (_$data.containsKey('orderGTE') !=
        other._$data.containsKey('orderGTE')) {
      return false;
    }
    if (l$orderGTE != lOther$orderGTE) {
      return false;
    }
    final l$orderLT = orderLT;
    final lOther$orderLT = other.orderLT;
    if (_$data.containsKey('orderLT') != other._$data.containsKey('orderLT')) {
      return false;
    }
    if (l$orderLT != lOther$orderLT) {
      return false;
    }
    final l$orderLTE = orderLTE;
    final lOther$orderLTE = other.orderLTE;
    if (_$data.containsKey('orderLTE') !=
        other._$data.containsKey('orderLTE')) {
      return false;
    }
    if (l$orderLTE != lOther$orderLTE) {
      return false;
    }
    final l$hasUnits = hasUnits;
    final lOther$hasUnits = other.hasUnits;
    if (_$data.containsKey('hasUnits') !=
        other._$data.containsKey('hasUnits')) {
      return false;
    }
    if (l$hasUnits != lOther$hasUnits) {
      return false;
    }
    final l$hasUnitsWith = hasUnitsWith;
    final lOther$hasUnitsWith = other.hasUnitsWith;
    if (_$data.containsKey('hasUnitsWith') !=
        other._$data.containsKey('hasUnitsWith')) {
      return false;
    }
    if (l$hasUnitsWith != null && lOther$hasUnitsWith != null) {
      if (l$hasUnitsWith.length != lOther$hasUnitsWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasUnitsWith.length; i++) {
        final l$hasUnitsWith$entry = l$hasUnitsWith[i];
        final lOther$hasUnitsWith$entry = lOther$hasUnitsWith[i];
        if (l$hasUnitsWith$entry != lOther$hasUnitsWith$entry) {
          return false;
        }
      }
    } else if (l$hasUnitsWith != lOther$hasUnitsWith) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$iconimage = iconimage;
    final l$iconimageNEQ = iconimageNEQ;
    final l$iconimageIn = iconimageIn;
    final l$iconimageNotIn = iconimageNotIn;
    final l$iconimageGT = iconimageGT;
    final l$iconimageGTE = iconimageGTE;
    final l$iconimageLT = iconimageLT;
    final l$iconimageLTE = iconimageLTE;
    final l$iconimageContains = iconimageContains;
    final l$iconimageHasPrefix = iconimageHasPrefix;
    final l$iconimageHasSuffix = iconimageHasSuffix;
    final l$iconimageEqualFold = iconimageEqualFold;
    final l$iconimageContainsFold = iconimageContainsFold;
    final l$coverimage = coverimage;
    final l$coverimageNEQ = coverimageNEQ;
    final l$coverimageIn = coverimageIn;
    final l$coverimageNotIn = coverimageNotIn;
    final l$coverimageGT = coverimageGT;
    final l$coverimageGTE = coverimageGTE;
    final l$coverimageLT = coverimageLT;
    final l$coverimageLTE = coverimageLTE;
    final l$coverimageContains = coverimageContains;
    final l$coverimageHasPrefix = coverimageHasPrefix;
    final l$coverimageHasSuffix = coverimageHasSuffix;
    final l$coverimageEqualFold = coverimageEqualFold;
    final l$coverimageContainsFold = coverimageContainsFold;
    final l$title = title;
    final l$titleNEQ = titleNEQ;
    final l$titleIn = titleIn;
    final l$titleNotIn = titleNotIn;
    final l$titleGT = titleGT;
    final l$titleGTE = titleGTE;
    final l$titleLT = titleLT;
    final l$titleLTE = titleLTE;
    final l$titleContains = titleContains;
    final l$titleHasPrefix = titleHasPrefix;
    final l$titleHasSuffix = titleHasSuffix;
    final l$titleEqualFold = titleEqualFold;
    final l$titleContainsFold = titleContainsFold;
    final l$description = description;
    final l$descriptionNEQ = descriptionNEQ;
    final l$descriptionIn = descriptionIn;
    final l$descriptionNotIn = descriptionNotIn;
    final l$descriptionGT = descriptionGT;
    final l$descriptionGTE = descriptionGTE;
    final l$descriptionLT = descriptionLT;
    final l$descriptionLTE = descriptionLTE;
    final l$descriptionContains = descriptionContains;
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final l$descriptionEqualFold = descriptionEqualFold;
    final l$descriptionContainsFold = descriptionContainsFold;
    final l$color = color;
    final l$colorNEQ = colorNEQ;
    final l$colorIn = colorIn;
    final l$colorNotIn = colorNotIn;
    final l$colorGT = colorGT;
    final l$colorGTE = colorGTE;
    final l$colorLT = colorLT;
    final l$colorLTE = colorLTE;
    final l$colorContains = colorContains;
    final l$colorHasPrefix = colorHasPrefix;
    final l$colorHasSuffix = colorHasSuffix;
    final l$colorEqualFold = colorEqualFold;
    final l$colorContainsFold = colorContainsFold;
    final l$active = active;
    final l$activeNEQ = activeNEQ;
    final l$order = order;
    final l$orderNEQ = orderNEQ;
    final l$orderIn = orderIn;
    final l$orderNotIn = orderNotIn;
    final l$orderGT = orderGT;
    final l$orderGTE = orderGTE;
    final l$orderLT = orderLT;
    final l$orderLTE = orderLTE;
    final l$hasUnits = hasUnits;
    final l$hasUnitsWith = hasUnitsWith;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('iconimage') ? l$iconimage : const {},
      _$data.containsKey('iconimageNEQ') ? l$iconimageNEQ : const {},
      _$data.containsKey('iconimageIn')
          ? l$iconimageIn == null
              ? null
              : Object.hashAll(l$iconimageIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimageNotIn')
          ? l$iconimageNotIn == null
              ? null
              : Object.hashAll(l$iconimageNotIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimageGT') ? l$iconimageGT : const {},
      _$data.containsKey('iconimageGTE') ? l$iconimageGTE : const {},
      _$data.containsKey('iconimageLT') ? l$iconimageLT : const {},
      _$data.containsKey('iconimageLTE') ? l$iconimageLTE : const {},
      _$data.containsKey('iconimageContains') ? l$iconimageContains : const {},
      _$data.containsKey('iconimageHasPrefix')
          ? l$iconimageHasPrefix
          : const {},
      _$data.containsKey('iconimageHasSuffix')
          ? l$iconimageHasSuffix
          : const {},
      _$data.containsKey('iconimageEqualFold')
          ? l$iconimageEqualFold
          : const {},
      _$data.containsKey('iconimageContainsFold')
          ? l$iconimageContainsFold
          : const {},
      _$data.containsKey('coverimage') ? l$coverimage : const {},
      _$data.containsKey('coverimageNEQ') ? l$coverimageNEQ : const {},
      _$data.containsKey('coverimageIn')
          ? l$coverimageIn == null
              ? null
              : Object.hashAll(l$coverimageIn.map((v) => v))
          : const {},
      _$data.containsKey('coverimageNotIn')
          ? l$coverimageNotIn == null
              ? null
              : Object.hashAll(l$coverimageNotIn.map((v) => v))
          : const {},
      _$data.containsKey('coverimageGT') ? l$coverimageGT : const {},
      _$data.containsKey('coverimageGTE') ? l$coverimageGTE : const {},
      _$data.containsKey('coverimageLT') ? l$coverimageLT : const {},
      _$data.containsKey('coverimageLTE') ? l$coverimageLTE : const {},
      _$data.containsKey('coverimageContains')
          ? l$coverimageContains
          : const {},
      _$data.containsKey('coverimageHasPrefix')
          ? l$coverimageHasPrefix
          : const {},
      _$data.containsKey('coverimageHasSuffix')
          ? l$coverimageHasSuffix
          : const {},
      _$data.containsKey('coverimageEqualFold')
          ? l$coverimageEqualFold
          : const {},
      _$data.containsKey('coverimageContainsFold')
          ? l$coverimageContainsFold
          : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('titleNEQ') ? l$titleNEQ : const {},
      _$data.containsKey('titleIn')
          ? l$titleIn == null
              ? null
              : Object.hashAll(l$titleIn.map((v) => v))
          : const {},
      _$data.containsKey('titleNotIn')
          ? l$titleNotIn == null
              ? null
              : Object.hashAll(l$titleNotIn.map((v) => v))
          : const {},
      _$data.containsKey('titleGT') ? l$titleGT : const {},
      _$data.containsKey('titleGTE') ? l$titleGTE : const {},
      _$data.containsKey('titleLT') ? l$titleLT : const {},
      _$data.containsKey('titleLTE') ? l$titleLTE : const {},
      _$data.containsKey('titleContains') ? l$titleContains : const {},
      _$data.containsKey('titleHasPrefix') ? l$titleHasPrefix : const {},
      _$data.containsKey('titleHasSuffix') ? l$titleHasSuffix : const {},
      _$data.containsKey('titleEqualFold') ? l$titleEqualFold : const {},
      _$data.containsKey('titleContainsFold') ? l$titleContainsFold : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('descriptionNEQ') ? l$descriptionNEQ : const {},
      _$data.containsKey('descriptionIn')
          ? l$descriptionIn == null
              ? null
              : Object.hashAll(l$descriptionIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionNotIn')
          ? l$descriptionNotIn == null
              ? null
              : Object.hashAll(l$descriptionNotIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionGT') ? l$descriptionGT : const {},
      _$data.containsKey('descriptionGTE') ? l$descriptionGTE : const {},
      _$data.containsKey('descriptionLT') ? l$descriptionLT : const {},
      _$data.containsKey('descriptionLTE') ? l$descriptionLTE : const {},
      _$data.containsKey('descriptionContains')
          ? l$descriptionContains
          : const {},
      _$data.containsKey('descriptionHasPrefix')
          ? l$descriptionHasPrefix
          : const {},
      _$data.containsKey('descriptionHasSuffix')
          ? l$descriptionHasSuffix
          : const {},
      _$data.containsKey('descriptionEqualFold')
          ? l$descriptionEqualFold
          : const {},
      _$data.containsKey('descriptionContainsFold')
          ? l$descriptionContainsFold
          : const {},
      _$data.containsKey('color') ? l$color : const {},
      _$data.containsKey('colorNEQ') ? l$colorNEQ : const {},
      _$data.containsKey('colorIn')
          ? l$colorIn == null
              ? null
              : Object.hashAll(l$colorIn.map((v) => v))
          : const {},
      _$data.containsKey('colorNotIn')
          ? l$colorNotIn == null
              ? null
              : Object.hashAll(l$colorNotIn.map((v) => v))
          : const {},
      _$data.containsKey('colorGT') ? l$colorGT : const {},
      _$data.containsKey('colorGTE') ? l$colorGTE : const {},
      _$data.containsKey('colorLT') ? l$colorLT : const {},
      _$data.containsKey('colorLTE') ? l$colorLTE : const {},
      _$data.containsKey('colorContains') ? l$colorContains : const {},
      _$data.containsKey('colorHasPrefix') ? l$colorHasPrefix : const {},
      _$data.containsKey('colorHasSuffix') ? l$colorHasSuffix : const {},
      _$data.containsKey('colorEqualFold') ? l$colorEqualFold : const {},
      _$data.containsKey('colorContainsFold') ? l$colorContainsFold : const {},
      _$data.containsKey('active') ? l$active : const {},
      _$data.containsKey('activeNEQ') ? l$activeNEQ : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('orderNEQ') ? l$orderNEQ : const {},
      _$data.containsKey('orderIn')
          ? l$orderIn == null
              ? null
              : Object.hashAll(l$orderIn.map((v) => v))
          : const {},
      _$data.containsKey('orderNotIn')
          ? l$orderNotIn == null
              ? null
              : Object.hashAll(l$orderNotIn.map((v) => v))
          : const {},
      _$data.containsKey('orderGT') ? l$orderGT : const {},
      _$data.containsKey('orderGTE') ? l$orderGTE : const {},
      _$data.containsKey('orderLT') ? l$orderLT : const {},
      _$data.containsKey('orderLTE') ? l$orderLTE : const {},
      _$data.containsKey('hasUnits') ? l$hasUnits : const {},
      _$data.containsKey('hasUnitsWith')
          ? l$hasUnitsWith == null
              ? null
              : Object.hashAll(l$hasUnitsWith.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$CourseWhereInput<TRes> {
  factory CopyWith$Input$CourseWhereInput(
    Input$CourseWhereInput instance,
    TRes Function(Input$CourseWhereInput) then,
  ) = _CopyWithImpl$Input$CourseWhereInput;

  factory CopyWith$Input$CourseWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$CourseWhereInput;

  TRes call({
    Input$CourseWhereInput? not,
    List<Input$CourseWhereInput>? and,
    List<Input$CourseWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    String? color,
    String? colorNEQ,
    List<String>? colorIn,
    List<String>? colorNotIn,
    String? colorGT,
    String? colorGTE,
    String? colorLT,
    String? colorLTE,
    String? colorContains,
    String? colorHasPrefix,
    String? colorHasSuffix,
    String? colorEqualFold,
    String? colorContainsFold,
    bool? active,
    bool? activeNEQ,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasUnits,
    List<Input$UnitWhereInput>? hasUnitsWith,
  });
  CopyWith$Input$CourseWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$CourseWhereInput>? Function(
              Iterable<
                  CopyWith$Input$CourseWhereInput<Input$CourseWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$CourseWhereInput>? Function(
              Iterable<
                  CopyWith$Input$CourseWhereInput<Input$CourseWhereInput>>?)
          _fn);
  TRes hasUnitsWith(
      Iterable<Input$UnitWhereInput>? Function(
              Iterable<CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$CourseWhereInput<TRes>
    implements CopyWith$Input$CourseWhereInput<TRes> {
  _CopyWithImpl$Input$CourseWhereInput(
    this._instance,
    this._then,
  );

  final Input$CourseWhereInput _instance;

  final TRes Function(Input$CourseWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? iconimage = _undefined,
    Object? iconimageNEQ = _undefined,
    Object? iconimageIn = _undefined,
    Object? iconimageNotIn = _undefined,
    Object? iconimageGT = _undefined,
    Object? iconimageGTE = _undefined,
    Object? iconimageLT = _undefined,
    Object? iconimageLTE = _undefined,
    Object? iconimageContains = _undefined,
    Object? iconimageHasPrefix = _undefined,
    Object? iconimageHasSuffix = _undefined,
    Object? iconimageEqualFold = _undefined,
    Object? iconimageContainsFold = _undefined,
    Object? coverimage = _undefined,
    Object? coverimageNEQ = _undefined,
    Object? coverimageIn = _undefined,
    Object? coverimageNotIn = _undefined,
    Object? coverimageGT = _undefined,
    Object? coverimageGTE = _undefined,
    Object? coverimageLT = _undefined,
    Object? coverimageLTE = _undefined,
    Object? coverimageContains = _undefined,
    Object? coverimageHasPrefix = _undefined,
    Object? coverimageHasSuffix = _undefined,
    Object? coverimageEqualFold = _undefined,
    Object? coverimageContainsFold = _undefined,
    Object? title = _undefined,
    Object? titleNEQ = _undefined,
    Object? titleIn = _undefined,
    Object? titleNotIn = _undefined,
    Object? titleGT = _undefined,
    Object? titleGTE = _undefined,
    Object? titleLT = _undefined,
    Object? titleLTE = _undefined,
    Object? titleContains = _undefined,
    Object? titleHasPrefix = _undefined,
    Object? titleHasSuffix = _undefined,
    Object? titleEqualFold = _undefined,
    Object? titleContainsFold = _undefined,
    Object? description = _undefined,
    Object? descriptionNEQ = _undefined,
    Object? descriptionIn = _undefined,
    Object? descriptionNotIn = _undefined,
    Object? descriptionGT = _undefined,
    Object? descriptionGTE = _undefined,
    Object? descriptionLT = _undefined,
    Object? descriptionLTE = _undefined,
    Object? descriptionContains = _undefined,
    Object? descriptionHasPrefix = _undefined,
    Object? descriptionHasSuffix = _undefined,
    Object? descriptionEqualFold = _undefined,
    Object? descriptionContainsFold = _undefined,
    Object? color = _undefined,
    Object? colorNEQ = _undefined,
    Object? colorIn = _undefined,
    Object? colorNotIn = _undefined,
    Object? colorGT = _undefined,
    Object? colorGTE = _undefined,
    Object? colorLT = _undefined,
    Object? colorLTE = _undefined,
    Object? colorContains = _undefined,
    Object? colorHasPrefix = _undefined,
    Object? colorHasSuffix = _undefined,
    Object? colorEqualFold = _undefined,
    Object? colorContainsFold = _undefined,
    Object? active = _undefined,
    Object? activeNEQ = _undefined,
    Object? order = _undefined,
    Object? orderNEQ = _undefined,
    Object? orderIn = _undefined,
    Object? orderNotIn = _undefined,
    Object? orderGT = _undefined,
    Object? orderGTE = _undefined,
    Object? orderLT = _undefined,
    Object? orderLTE = _undefined,
    Object? hasUnits = _undefined,
    Object? hasUnitsWith = _undefined,
  }) =>
      _then(Input$CourseWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$CourseWhereInput?),
        if (and != _undefined) 'and': (and as List<Input$CourseWhereInput>?),
        if (or != _undefined) 'or': (or as List<Input$CourseWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (iconimage != _undefined) 'iconimage': (iconimage as String?),
        if (iconimageNEQ != _undefined)
          'iconimageNEQ': (iconimageNEQ as String?),
        if (iconimageIn != _undefined)
          'iconimageIn': (iconimageIn as List<String>?),
        if (iconimageNotIn != _undefined)
          'iconimageNotIn': (iconimageNotIn as List<String>?),
        if (iconimageGT != _undefined) 'iconimageGT': (iconimageGT as String?),
        if (iconimageGTE != _undefined)
          'iconimageGTE': (iconimageGTE as String?),
        if (iconimageLT != _undefined) 'iconimageLT': (iconimageLT as String?),
        if (iconimageLTE != _undefined)
          'iconimageLTE': (iconimageLTE as String?),
        if (iconimageContains != _undefined)
          'iconimageContains': (iconimageContains as String?),
        if (iconimageHasPrefix != _undefined)
          'iconimageHasPrefix': (iconimageHasPrefix as String?),
        if (iconimageHasSuffix != _undefined)
          'iconimageHasSuffix': (iconimageHasSuffix as String?),
        if (iconimageEqualFold != _undefined)
          'iconimageEqualFold': (iconimageEqualFold as String?),
        if (iconimageContainsFold != _undefined)
          'iconimageContainsFold': (iconimageContainsFold as String?),
        if (coverimage != _undefined) 'coverimage': (coverimage as String?),
        if (coverimageNEQ != _undefined)
          'coverimageNEQ': (coverimageNEQ as String?),
        if (coverimageIn != _undefined)
          'coverimageIn': (coverimageIn as List<String>?),
        if (coverimageNotIn != _undefined)
          'coverimageNotIn': (coverimageNotIn as List<String>?),
        if (coverimageGT != _undefined)
          'coverimageGT': (coverimageGT as String?),
        if (coverimageGTE != _undefined)
          'coverimageGTE': (coverimageGTE as String?),
        if (coverimageLT != _undefined)
          'coverimageLT': (coverimageLT as String?),
        if (coverimageLTE != _undefined)
          'coverimageLTE': (coverimageLTE as String?),
        if (coverimageContains != _undefined)
          'coverimageContains': (coverimageContains as String?),
        if (coverimageHasPrefix != _undefined)
          'coverimageHasPrefix': (coverimageHasPrefix as String?),
        if (coverimageHasSuffix != _undefined)
          'coverimageHasSuffix': (coverimageHasSuffix as String?),
        if (coverimageEqualFold != _undefined)
          'coverimageEqualFold': (coverimageEqualFold as String?),
        if (coverimageContainsFold != _undefined)
          'coverimageContainsFold': (coverimageContainsFold as String?),
        if (title != _undefined) 'title': (title as String?),
        if (titleNEQ != _undefined) 'titleNEQ': (titleNEQ as String?),
        if (titleIn != _undefined) 'titleIn': (titleIn as List<String>?),
        if (titleNotIn != _undefined)
          'titleNotIn': (titleNotIn as List<String>?),
        if (titleGT != _undefined) 'titleGT': (titleGT as String?),
        if (titleGTE != _undefined) 'titleGTE': (titleGTE as String?),
        if (titleLT != _undefined) 'titleLT': (titleLT as String?),
        if (titleLTE != _undefined) 'titleLTE': (titleLTE as String?),
        if (titleContains != _undefined)
          'titleContains': (titleContains as String?),
        if (titleHasPrefix != _undefined)
          'titleHasPrefix': (titleHasPrefix as String?),
        if (titleHasSuffix != _undefined)
          'titleHasSuffix': (titleHasSuffix as String?),
        if (titleEqualFold != _undefined)
          'titleEqualFold': (titleEqualFold as String?),
        if (titleContainsFold != _undefined)
          'titleContainsFold': (titleContainsFold as String?),
        if (description != _undefined) 'description': (description as String?),
        if (descriptionNEQ != _undefined)
          'descriptionNEQ': (descriptionNEQ as String?),
        if (descriptionIn != _undefined)
          'descriptionIn': (descriptionIn as List<String>?),
        if (descriptionNotIn != _undefined)
          'descriptionNotIn': (descriptionNotIn as List<String>?),
        if (descriptionGT != _undefined)
          'descriptionGT': (descriptionGT as String?),
        if (descriptionGTE != _undefined)
          'descriptionGTE': (descriptionGTE as String?),
        if (descriptionLT != _undefined)
          'descriptionLT': (descriptionLT as String?),
        if (descriptionLTE != _undefined)
          'descriptionLTE': (descriptionLTE as String?),
        if (descriptionContains != _undefined)
          'descriptionContains': (descriptionContains as String?),
        if (descriptionHasPrefix != _undefined)
          'descriptionHasPrefix': (descriptionHasPrefix as String?),
        if (descriptionHasSuffix != _undefined)
          'descriptionHasSuffix': (descriptionHasSuffix as String?),
        if (descriptionEqualFold != _undefined)
          'descriptionEqualFold': (descriptionEqualFold as String?),
        if (descriptionContainsFold != _undefined)
          'descriptionContainsFold': (descriptionContainsFold as String?),
        if (color != _undefined) 'color': (color as String?),
        if (colorNEQ != _undefined) 'colorNEQ': (colorNEQ as String?),
        if (colorIn != _undefined) 'colorIn': (colorIn as List<String>?),
        if (colorNotIn != _undefined)
          'colorNotIn': (colorNotIn as List<String>?),
        if (colorGT != _undefined) 'colorGT': (colorGT as String?),
        if (colorGTE != _undefined) 'colorGTE': (colorGTE as String?),
        if (colorLT != _undefined) 'colorLT': (colorLT as String?),
        if (colorLTE != _undefined) 'colorLTE': (colorLTE as String?),
        if (colorContains != _undefined)
          'colorContains': (colorContains as String?),
        if (colorHasPrefix != _undefined)
          'colorHasPrefix': (colorHasPrefix as String?),
        if (colorHasSuffix != _undefined)
          'colorHasSuffix': (colorHasSuffix as String?),
        if (colorEqualFold != _undefined)
          'colorEqualFold': (colorEqualFold as String?),
        if (colorContainsFold != _undefined)
          'colorContainsFold': (colorContainsFold as String?),
        if (active != _undefined) 'active': (active as bool?),
        if (activeNEQ != _undefined) 'activeNEQ': (activeNEQ as bool?),
        if (order != _undefined) 'order': (order as int?),
        if (orderNEQ != _undefined) 'orderNEQ': (orderNEQ as int?),
        if (orderIn != _undefined) 'orderIn': (orderIn as List<int>?),
        if (orderNotIn != _undefined) 'orderNotIn': (orderNotIn as List<int>?),
        if (orderGT != _undefined) 'orderGT': (orderGT as int?),
        if (orderGTE != _undefined) 'orderGTE': (orderGTE as int?),
        if (orderLT != _undefined) 'orderLT': (orderLT as int?),
        if (orderLTE != _undefined) 'orderLTE': (orderLTE as int?),
        if (hasUnits != _undefined) 'hasUnits': (hasUnits as bool?),
        if (hasUnitsWith != _undefined)
          'hasUnitsWith': (hasUnitsWith as List<Input$UnitWhereInput>?),
      }));

  CopyWith$Input$CourseWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$CourseWhereInput.stub(_then(_instance))
        : CopyWith$Input$CourseWhereInput(local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$CourseWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$CourseWhereInput<Input$CourseWhereInput>>?)
              _fn) =>
      call(
          and: _fn(_instance.and?.map((e) => CopyWith$Input$CourseWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes or(
          Iterable<Input$CourseWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$CourseWhereInput<Input$CourseWhereInput>>?)
              _fn) =>
      call(
          or: _fn(_instance.or?.map((e) => CopyWith$Input$CourseWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes hasUnitsWith(
          Iterable<Input$UnitWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
              _fn) =>
      call(
          hasUnitsWith: _fn(
              _instance.hasUnitsWith?.map((e) => CopyWith$Input$UnitWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$CourseWhereInput<TRes>
    implements CopyWith$Input$CourseWhereInput<TRes> {
  _CopyWithStubImpl$Input$CourseWhereInput(this._res);

  TRes _res;

  call({
    Input$CourseWhereInput? not,
    List<Input$CourseWhereInput>? and,
    List<Input$CourseWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    String? color,
    String? colorNEQ,
    List<String>? colorIn,
    List<String>? colorNotIn,
    String? colorGT,
    String? colorGTE,
    String? colorLT,
    String? colorLTE,
    String? colorContains,
    String? colorHasPrefix,
    String? colorHasSuffix,
    String? colorEqualFold,
    String? colorContainsFold,
    bool? active,
    bool? activeNEQ,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasUnits,
    List<Input$UnitWhereInput>? hasUnitsWith,
  }) =>
      _res;

  CopyWith$Input$CourseWhereInput<TRes> get not =>
      CopyWith$Input$CourseWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;

  hasUnitsWith(_fn) => _res;
}

class Input$JournalRecordOrder {
  factory Input$JournalRecordOrder({
    Enum$OrderDirection? direction,
    required Enum$JournalRecordOrderField field,
  }) =>
      Input$JournalRecordOrder._({
        if (direction != null) r'direction': direction,
        r'field': field,
      });

  Input$JournalRecordOrder._(this._$data);

  factory Input$JournalRecordOrder.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('direction')) {
      final l$direction = data['direction'];
      result$data['direction'] =
          fromJson$Enum$OrderDirection((l$direction as String));
    }
    final l$field = data['field'];
    result$data['field'] =
        fromJson$Enum$JournalRecordOrderField((l$field as String));
    return Input$JournalRecordOrder._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderDirection? get direction =>
      (_$data['direction'] as Enum$OrderDirection?);

  Enum$JournalRecordOrderField get field =>
      (_$data['field'] as Enum$JournalRecordOrderField);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('direction')) {
      final l$direction = direction;
      result$data['direction'] =
          toJson$Enum$OrderDirection((l$direction as Enum$OrderDirection));
    }
    final l$field = field;
    result$data['field'] = toJson$Enum$JournalRecordOrderField(l$field);
    return result$data;
  }

  CopyWith$Input$JournalRecordOrder<Input$JournalRecordOrder> get copyWith =>
      CopyWith$Input$JournalRecordOrder(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$JournalRecordOrder) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$direction = direction;
    final lOther$direction = other.direction;
    if (_$data.containsKey('direction') !=
        other._$data.containsKey('direction')) {
      return false;
    }
    if (l$direction != lOther$direction) {
      return false;
    }
    final l$field = field;
    final lOther$field = other.field;
    if (l$field != lOther$field) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$direction = direction;
    final l$field = field;
    return Object.hashAll([
      _$data.containsKey('direction') ? l$direction : const {},
      l$field,
    ]);
  }
}

abstract class CopyWith$Input$JournalRecordOrder<TRes> {
  factory CopyWith$Input$JournalRecordOrder(
    Input$JournalRecordOrder instance,
    TRes Function(Input$JournalRecordOrder) then,
  ) = _CopyWithImpl$Input$JournalRecordOrder;

  factory CopyWith$Input$JournalRecordOrder.stub(TRes res) =
      _CopyWithStubImpl$Input$JournalRecordOrder;

  TRes call({
    Enum$OrderDirection? direction,
    Enum$JournalRecordOrderField? field,
  });
}

class _CopyWithImpl$Input$JournalRecordOrder<TRes>
    implements CopyWith$Input$JournalRecordOrder<TRes> {
  _CopyWithImpl$Input$JournalRecordOrder(
    this._instance,
    this._then,
  );

  final Input$JournalRecordOrder _instance;

  final TRes Function(Input$JournalRecordOrder) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? direction = _undefined,
    Object? field = _undefined,
  }) =>
      _then(Input$JournalRecordOrder._({
        ..._instance._$data,
        if (direction != _undefined && direction != null)
          'direction': (direction as Enum$OrderDirection),
        if (field != _undefined && field != null)
          'field': (field as Enum$JournalRecordOrderField),
      }));
}

class _CopyWithStubImpl$Input$JournalRecordOrder<TRes>
    implements CopyWith$Input$JournalRecordOrder<TRes> {
  _CopyWithStubImpl$Input$JournalRecordOrder(this._res);

  TRes _res;

  call({
    Enum$OrderDirection? direction,
    Enum$JournalRecordOrderField? field,
  }) =>
      _res;
}

class Input$JournalRecordWhereInput {
  factory Input$JournalRecordWhereInput({
    Input$JournalRecordWhereInput? not,
    List<Input$JournalRecordWhereInput>? and,
    List<Input$JournalRecordWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? userID,
    String? userIDNEQ,
    List<String>? userIDIn,
    List<String>? userIDNotIn,
    String? lessonID,
    String? lessonIDNEQ,
    List<String>? lessonIDIn,
    List<String>? lessonIDNotIn,
    bool? lessonIDIsNil,
    bool? lessonIDNotNil,
    String? datetime,
    String? datetimeNEQ,
    List<String>? datetimeIn,
    List<String>? datetimeNotIn,
    String? datetimeGT,
    String? datetimeGTE,
    String? datetimeLT,
    String? datetimeLTE,
    int? duration,
    int? durationNEQ,
    List<int>? durationIn,
    List<int>? durationNotIn,
    int? durationGT,
    int? durationGTE,
    int? durationLT,
    int? durationLTE,
    String? note,
    String? noteNEQ,
    List<String>? noteIn,
    List<String>? noteNotIn,
    String? noteGT,
    String? noteGTE,
    String? noteLT,
    String? noteLTE,
    String? noteContains,
    String? noteHasPrefix,
    String? noteHasSuffix,
    String? noteEqualFold,
    String? noteContainsFold,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    bool? hasUser,
    List<Input$UserWhereInput>? hasUserWith,
    bool? hasLesson,
    List<Input$LessonWhereInput>? hasLessonWith,
  }) =>
      Input$JournalRecordWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (userID != null) r'userID': userID,
        if (userIDNEQ != null) r'userIDNEQ': userIDNEQ,
        if (userIDIn != null) r'userIDIn': userIDIn,
        if (userIDNotIn != null) r'userIDNotIn': userIDNotIn,
        if (lessonID != null) r'lessonID': lessonID,
        if (lessonIDNEQ != null) r'lessonIDNEQ': lessonIDNEQ,
        if (lessonIDIn != null) r'lessonIDIn': lessonIDIn,
        if (lessonIDNotIn != null) r'lessonIDNotIn': lessonIDNotIn,
        if (lessonIDIsNil != null) r'lessonIDIsNil': lessonIDIsNil,
        if (lessonIDNotNil != null) r'lessonIDNotNil': lessonIDNotNil,
        if (datetime != null) r'datetime': datetime,
        if (datetimeNEQ != null) r'datetimeNEQ': datetimeNEQ,
        if (datetimeIn != null) r'datetimeIn': datetimeIn,
        if (datetimeNotIn != null) r'datetimeNotIn': datetimeNotIn,
        if (datetimeGT != null) r'datetimeGT': datetimeGT,
        if (datetimeGTE != null) r'datetimeGTE': datetimeGTE,
        if (datetimeLT != null) r'datetimeLT': datetimeLT,
        if (datetimeLTE != null) r'datetimeLTE': datetimeLTE,
        if (duration != null) r'duration': duration,
        if (durationNEQ != null) r'durationNEQ': durationNEQ,
        if (durationIn != null) r'durationIn': durationIn,
        if (durationNotIn != null) r'durationNotIn': durationNotIn,
        if (durationGT != null) r'durationGT': durationGT,
        if (durationGTE != null) r'durationGTE': durationGTE,
        if (durationLT != null) r'durationLT': durationLT,
        if (durationLTE != null) r'durationLTE': durationLTE,
        if (note != null) r'note': note,
        if (noteNEQ != null) r'noteNEQ': noteNEQ,
        if (noteIn != null) r'noteIn': noteIn,
        if (noteNotIn != null) r'noteNotIn': noteNotIn,
        if (noteGT != null) r'noteGT': noteGT,
        if (noteGTE != null) r'noteGTE': noteGTE,
        if (noteLT != null) r'noteLT': noteLT,
        if (noteLTE != null) r'noteLTE': noteLTE,
        if (noteContains != null) r'noteContains': noteContains,
        if (noteHasPrefix != null) r'noteHasPrefix': noteHasPrefix,
        if (noteHasSuffix != null) r'noteHasSuffix': noteHasSuffix,
        if (noteEqualFold != null) r'noteEqualFold': noteEqualFold,
        if (noteContainsFold != null) r'noteContainsFold': noteContainsFold,
        if (createdat != null) r'createdat': createdat,
        if (createdatNEQ != null) r'createdatNEQ': createdatNEQ,
        if (createdatIn != null) r'createdatIn': createdatIn,
        if (createdatNotIn != null) r'createdatNotIn': createdatNotIn,
        if (createdatGT != null) r'createdatGT': createdatGT,
        if (createdatGTE != null) r'createdatGTE': createdatGTE,
        if (createdatLT != null) r'createdatLT': createdatLT,
        if (createdatLTE != null) r'createdatLTE': createdatLTE,
        if (updatedat != null) r'updatedat': updatedat,
        if (updatedatNEQ != null) r'updatedatNEQ': updatedatNEQ,
        if (updatedatIn != null) r'updatedatIn': updatedatIn,
        if (updatedatNotIn != null) r'updatedatNotIn': updatedatNotIn,
        if (updatedatGT != null) r'updatedatGT': updatedatGT,
        if (updatedatGTE != null) r'updatedatGTE': updatedatGTE,
        if (updatedatLT != null) r'updatedatLT': updatedatLT,
        if (updatedatLTE != null) r'updatedatLTE': updatedatLTE,
        if (hasUser != null) r'hasUser': hasUser,
        if (hasUserWith != null) r'hasUserWith': hasUserWith,
        if (hasLesson != null) r'hasLesson': hasLesson,
        if (hasLessonWith != null) r'hasLessonWith': hasLessonWith,
      });

  Input$JournalRecordWhereInput._(this._$data);

  factory Input$JournalRecordWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$JournalRecordWhereInput.fromJson(
              (l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map((e) => Input$JournalRecordWhereInput.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map((e) => Input$JournalRecordWhereInput.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('userID')) {
      final l$userID = data['userID'];
      result$data['userID'] = (l$userID as String?);
    }
    if (data.containsKey('userIDNEQ')) {
      final l$userIDNEQ = data['userIDNEQ'];
      result$data['userIDNEQ'] = (l$userIDNEQ as String?);
    }
    if (data.containsKey('userIDIn')) {
      final l$userIDIn = data['userIDIn'];
      result$data['userIDIn'] =
          (l$userIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('userIDNotIn')) {
      final l$userIDNotIn = data['userIDNotIn'];
      result$data['userIDNotIn'] =
          (l$userIDNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('lessonID')) {
      final l$lessonID = data['lessonID'];
      result$data['lessonID'] = (l$lessonID as String?);
    }
    if (data.containsKey('lessonIDNEQ')) {
      final l$lessonIDNEQ = data['lessonIDNEQ'];
      result$data['lessonIDNEQ'] = (l$lessonIDNEQ as String?);
    }
    if (data.containsKey('lessonIDIn')) {
      final l$lessonIDIn = data['lessonIDIn'];
      result$data['lessonIDIn'] =
          (l$lessonIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('lessonIDNotIn')) {
      final l$lessonIDNotIn = data['lessonIDNotIn'];
      result$data['lessonIDNotIn'] = (l$lessonIDNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('lessonIDIsNil')) {
      final l$lessonIDIsNil = data['lessonIDIsNil'];
      result$data['lessonIDIsNil'] = (l$lessonIDIsNil as bool?);
    }
    if (data.containsKey('lessonIDNotNil')) {
      final l$lessonIDNotNil = data['lessonIDNotNil'];
      result$data['lessonIDNotNil'] = (l$lessonIDNotNil as bool?);
    }
    if (data.containsKey('datetime')) {
      final l$datetime = data['datetime'];
      result$data['datetime'] = (l$datetime as String?);
    }
    if (data.containsKey('datetimeNEQ')) {
      final l$datetimeNEQ = data['datetimeNEQ'];
      result$data['datetimeNEQ'] = (l$datetimeNEQ as String?);
    }
    if (data.containsKey('datetimeIn')) {
      final l$datetimeIn = data['datetimeIn'];
      result$data['datetimeIn'] =
          (l$datetimeIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('datetimeNotIn')) {
      final l$datetimeNotIn = data['datetimeNotIn'];
      result$data['datetimeNotIn'] = (l$datetimeNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('datetimeGT')) {
      final l$datetimeGT = data['datetimeGT'];
      result$data['datetimeGT'] = (l$datetimeGT as String?);
    }
    if (data.containsKey('datetimeGTE')) {
      final l$datetimeGTE = data['datetimeGTE'];
      result$data['datetimeGTE'] = (l$datetimeGTE as String?);
    }
    if (data.containsKey('datetimeLT')) {
      final l$datetimeLT = data['datetimeLT'];
      result$data['datetimeLT'] = (l$datetimeLT as String?);
    }
    if (data.containsKey('datetimeLTE')) {
      final l$datetimeLTE = data['datetimeLTE'];
      result$data['datetimeLTE'] = (l$datetimeLTE as String?);
    }
    if (data.containsKey('duration')) {
      final l$duration = data['duration'];
      result$data['duration'] = (l$duration as int?);
    }
    if (data.containsKey('durationNEQ')) {
      final l$durationNEQ = data['durationNEQ'];
      result$data['durationNEQ'] = (l$durationNEQ as int?);
    }
    if (data.containsKey('durationIn')) {
      final l$durationIn = data['durationIn'];
      result$data['durationIn'] =
          (l$durationIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('durationNotIn')) {
      final l$durationNotIn = data['durationNotIn'];
      result$data['durationNotIn'] =
          (l$durationNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('durationGT')) {
      final l$durationGT = data['durationGT'];
      result$data['durationGT'] = (l$durationGT as int?);
    }
    if (data.containsKey('durationGTE')) {
      final l$durationGTE = data['durationGTE'];
      result$data['durationGTE'] = (l$durationGTE as int?);
    }
    if (data.containsKey('durationLT')) {
      final l$durationLT = data['durationLT'];
      result$data['durationLT'] = (l$durationLT as int?);
    }
    if (data.containsKey('durationLTE')) {
      final l$durationLTE = data['durationLTE'];
      result$data['durationLTE'] = (l$durationLTE as int?);
    }
    if (data.containsKey('note')) {
      final l$note = data['note'];
      result$data['note'] = (l$note as String?);
    }
    if (data.containsKey('noteNEQ')) {
      final l$noteNEQ = data['noteNEQ'];
      result$data['noteNEQ'] = (l$noteNEQ as String?);
    }
    if (data.containsKey('noteIn')) {
      final l$noteIn = data['noteIn'];
      result$data['noteIn'] =
          (l$noteIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('noteNotIn')) {
      final l$noteNotIn = data['noteNotIn'];
      result$data['noteNotIn'] =
          (l$noteNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('noteGT')) {
      final l$noteGT = data['noteGT'];
      result$data['noteGT'] = (l$noteGT as String?);
    }
    if (data.containsKey('noteGTE')) {
      final l$noteGTE = data['noteGTE'];
      result$data['noteGTE'] = (l$noteGTE as String?);
    }
    if (data.containsKey('noteLT')) {
      final l$noteLT = data['noteLT'];
      result$data['noteLT'] = (l$noteLT as String?);
    }
    if (data.containsKey('noteLTE')) {
      final l$noteLTE = data['noteLTE'];
      result$data['noteLTE'] = (l$noteLTE as String?);
    }
    if (data.containsKey('noteContains')) {
      final l$noteContains = data['noteContains'];
      result$data['noteContains'] = (l$noteContains as String?);
    }
    if (data.containsKey('noteHasPrefix')) {
      final l$noteHasPrefix = data['noteHasPrefix'];
      result$data['noteHasPrefix'] = (l$noteHasPrefix as String?);
    }
    if (data.containsKey('noteHasSuffix')) {
      final l$noteHasSuffix = data['noteHasSuffix'];
      result$data['noteHasSuffix'] = (l$noteHasSuffix as String?);
    }
    if (data.containsKey('noteEqualFold')) {
      final l$noteEqualFold = data['noteEqualFold'];
      result$data['noteEqualFold'] = (l$noteEqualFold as String?);
    }
    if (data.containsKey('noteContainsFold')) {
      final l$noteContainsFold = data['noteContainsFold'];
      result$data['noteContainsFold'] = (l$noteContainsFold as String?);
    }
    if (data.containsKey('createdat')) {
      final l$createdat = data['createdat'];
      result$data['createdat'] = (l$createdat as String?);
    }
    if (data.containsKey('createdatNEQ')) {
      final l$createdatNEQ = data['createdatNEQ'];
      result$data['createdatNEQ'] = (l$createdatNEQ as String?);
    }
    if (data.containsKey('createdatIn')) {
      final l$createdatIn = data['createdatIn'];
      result$data['createdatIn'] =
          (l$createdatIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('createdatNotIn')) {
      final l$createdatNotIn = data['createdatNotIn'];
      result$data['createdatNotIn'] = (l$createdatNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('createdatGT')) {
      final l$createdatGT = data['createdatGT'];
      result$data['createdatGT'] = (l$createdatGT as String?);
    }
    if (data.containsKey('createdatGTE')) {
      final l$createdatGTE = data['createdatGTE'];
      result$data['createdatGTE'] = (l$createdatGTE as String?);
    }
    if (data.containsKey('createdatLT')) {
      final l$createdatLT = data['createdatLT'];
      result$data['createdatLT'] = (l$createdatLT as String?);
    }
    if (data.containsKey('createdatLTE')) {
      final l$createdatLTE = data['createdatLTE'];
      result$data['createdatLTE'] = (l$createdatLTE as String?);
    }
    if (data.containsKey('updatedat')) {
      final l$updatedat = data['updatedat'];
      result$data['updatedat'] = (l$updatedat as String?);
    }
    if (data.containsKey('updatedatNEQ')) {
      final l$updatedatNEQ = data['updatedatNEQ'];
      result$data['updatedatNEQ'] = (l$updatedatNEQ as String?);
    }
    if (data.containsKey('updatedatIn')) {
      final l$updatedatIn = data['updatedatIn'];
      result$data['updatedatIn'] =
          (l$updatedatIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('updatedatNotIn')) {
      final l$updatedatNotIn = data['updatedatNotIn'];
      result$data['updatedatNotIn'] = (l$updatedatNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('updatedatGT')) {
      final l$updatedatGT = data['updatedatGT'];
      result$data['updatedatGT'] = (l$updatedatGT as String?);
    }
    if (data.containsKey('updatedatGTE')) {
      final l$updatedatGTE = data['updatedatGTE'];
      result$data['updatedatGTE'] = (l$updatedatGTE as String?);
    }
    if (data.containsKey('updatedatLT')) {
      final l$updatedatLT = data['updatedatLT'];
      result$data['updatedatLT'] = (l$updatedatLT as String?);
    }
    if (data.containsKey('updatedatLTE')) {
      final l$updatedatLTE = data['updatedatLTE'];
      result$data['updatedatLTE'] = (l$updatedatLTE as String?);
    }
    if (data.containsKey('hasUser')) {
      final l$hasUser = data['hasUser'];
      result$data['hasUser'] = (l$hasUser as bool?);
    }
    if (data.containsKey('hasUserWith')) {
      final l$hasUserWith = data['hasUserWith'];
      result$data['hasUserWith'] = (l$hasUserWith as List<dynamic>?)
          ?.map(
              (e) => Input$UserWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('hasLesson')) {
      final l$hasLesson = data['hasLesson'];
      result$data['hasLesson'] = (l$hasLesson as bool?);
    }
    if (data.containsKey('hasLessonWith')) {
      final l$hasLessonWith = data['hasLessonWith'];
      result$data['hasLessonWith'] = (l$hasLessonWith as List<dynamic>?)
          ?.map((e) =>
              Input$LessonWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    return Input$JournalRecordWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$JournalRecordWhereInput? get not =>
      (_$data['not'] as Input$JournalRecordWhereInput?);

  List<Input$JournalRecordWhereInput>? get and =>
      (_$data['and'] as List<Input$JournalRecordWhereInput>?);

  List<Input$JournalRecordWhereInput>? get or =>
      (_$data['or'] as List<Input$JournalRecordWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  String? get userID => (_$data['userID'] as String?);

  String? get userIDNEQ => (_$data['userIDNEQ'] as String?);

  List<String>? get userIDIn => (_$data['userIDIn'] as List<String>?);

  List<String>? get userIDNotIn => (_$data['userIDNotIn'] as List<String>?);

  String? get lessonID => (_$data['lessonID'] as String?);

  String? get lessonIDNEQ => (_$data['lessonIDNEQ'] as String?);

  List<String>? get lessonIDIn => (_$data['lessonIDIn'] as List<String>?);

  List<String>? get lessonIDNotIn => (_$data['lessonIDNotIn'] as List<String>?);

  bool? get lessonIDIsNil => (_$data['lessonIDIsNil'] as bool?);

  bool? get lessonIDNotNil => (_$data['lessonIDNotNil'] as bool?);

  String? get datetime => (_$data['datetime'] as String?);

  String? get datetimeNEQ => (_$data['datetimeNEQ'] as String?);

  List<String>? get datetimeIn => (_$data['datetimeIn'] as List<String>?);

  List<String>? get datetimeNotIn => (_$data['datetimeNotIn'] as List<String>?);

  String? get datetimeGT => (_$data['datetimeGT'] as String?);

  String? get datetimeGTE => (_$data['datetimeGTE'] as String?);

  String? get datetimeLT => (_$data['datetimeLT'] as String?);

  String? get datetimeLTE => (_$data['datetimeLTE'] as String?);

  int? get duration => (_$data['duration'] as int?);

  int? get durationNEQ => (_$data['durationNEQ'] as int?);

  List<int>? get durationIn => (_$data['durationIn'] as List<int>?);

  List<int>? get durationNotIn => (_$data['durationNotIn'] as List<int>?);

  int? get durationGT => (_$data['durationGT'] as int?);

  int? get durationGTE => (_$data['durationGTE'] as int?);

  int? get durationLT => (_$data['durationLT'] as int?);

  int? get durationLTE => (_$data['durationLTE'] as int?);

  String? get note => (_$data['note'] as String?);

  String? get noteNEQ => (_$data['noteNEQ'] as String?);

  List<String>? get noteIn => (_$data['noteIn'] as List<String>?);

  List<String>? get noteNotIn => (_$data['noteNotIn'] as List<String>?);

  String? get noteGT => (_$data['noteGT'] as String?);

  String? get noteGTE => (_$data['noteGTE'] as String?);

  String? get noteLT => (_$data['noteLT'] as String?);

  String? get noteLTE => (_$data['noteLTE'] as String?);

  String? get noteContains => (_$data['noteContains'] as String?);

  String? get noteHasPrefix => (_$data['noteHasPrefix'] as String?);

  String? get noteHasSuffix => (_$data['noteHasSuffix'] as String?);

  String? get noteEqualFold => (_$data['noteEqualFold'] as String?);

  String? get noteContainsFold => (_$data['noteContainsFold'] as String?);

  String? get createdat => (_$data['createdat'] as String?);

  String? get createdatNEQ => (_$data['createdatNEQ'] as String?);

  List<String>? get createdatIn => (_$data['createdatIn'] as List<String>?);

  List<String>? get createdatNotIn =>
      (_$data['createdatNotIn'] as List<String>?);

  String? get createdatGT => (_$data['createdatGT'] as String?);

  String? get createdatGTE => (_$data['createdatGTE'] as String?);

  String? get createdatLT => (_$data['createdatLT'] as String?);

  String? get createdatLTE => (_$data['createdatLTE'] as String?);

  String? get updatedat => (_$data['updatedat'] as String?);

  String? get updatedatNEQ => (_$data['updatedatNEQ'] as String?);

  List<String>? get updatedatIn => (_$data['updatedatIn'] as List<String>?);

  List<String>? get updatedatNotIn =>
      (_$data['updatedatNotIn'] as List<String>?);

  String? get updatedatGT => (_$data['updatedatGT'] as String?);

  String? get updatedatGTE => (_$data['updatedatGTE'] as String?);

  String? get updatedatLT => (_$data['updatedatLT'] as String?);

  String? get updatedatLTE => (_$data['updatedatLTE'] as String?);

  bool? get hasUser => (_$data['hasUser'] as bool?);

  List<Input$UserWhereInput>? get hasUserWith =>
      (_$data['hasUserWith'] as List<Input$UserWhereInput>?);

  bool? get hasLesson => (_$data['hasLesson'] as bool?);

  List<Input$LessonWhereInput>? get hasLessonWith =>
      (_$data['hasLessonWith'] as List<Input$LessonWhereInput>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('userID')) {
      final l$userID = userID;
      result$data['userID'] = l$userID;
    }
    if (_$data.containsKey('userIDNEQ')) {
      final l$userIDNEQ = userIDNEQ;
      result$data['userIDNEQ'] = l$userIDNEQ;
    }
    if (_$data.containsKey('userIDIn')) {
      final l$userIDIn = userIDIn;
      result$data['userIDIn'] = l$userIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('userIDNotIn')) {
      final l$userIDNotIn = userIDNotIn;
      result$data['userIDNotIn'] = l$userIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('lessonID')) {
      final l$lessonID = lessonID;
      result$data['lessonID'] = l$lessonID;
    }
    if (_$data.containsKey('lessonIDNEQ')) {
      final l$lessonIDNEQ = lessonIDNEQ;
      result$data['lessonIDNEQ'] = l$lessonIDNEQ;
    }
    if (_$data.containsKey('lessonIDIn')) {
      final l$lessonIDIn = lessonIDIn;
      result$data['lessonIDIn'] = l$lessonIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('lessonIDNotIn')) {
      final l$lessonIDNotIn = lessonIDNotIn;
      result$data['lessonIDNotIn'] = l$lessonIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('lessonIDIsNil')) {
      final l$lessonIDIsNil = lessonIDIsNil;
      result$data['lessonIDIsNil'] = l$lessonIDIsNil;
    }
    if (_$data.containsKey('lessonIDNotNil')) {
      final l$lessonIDNotNil = lessonIDNotNil;
      result$data['lessonIDNotNil'] = l$lessonIDNotNil;
    }
    if (_$data.containsKey('datetime')) {
      final l$datetime = datetime;
      result$data['datetime'] = l$datetime;
    }
    if (_$data.containsKey('datetimeNEQ')) {
      final l$datetimeNEQ = datetimeNEQ;
      result$data['datetimeNEQ'] = l$datetimeNEQ;
    }
    if (_$data.containsKey('datetimeIn')) {
      final l$datetimeIn = datetimeIn;
      result$data['datetimeIn'] = l$datetimeIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('datetimeNotIn')) {
      final l$datetimeNotIn = datetimeNotIn;
      result$data['datetimeNotIn'] = l$datetimeNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('datetimeGT')) {
      final l$datetimeGT = datetimeGT;
      result$data['datetimeGT'] = l$datetimeGT;
    }
    if (_$data.containsKey('datetimeGTE')) {
      final l$datetimeGTE = datetimeGTE;
      result$data['datetimeGTE'] = l$datetimeGTE;
    }
    if (_$data.containsKey('datetimeLT')) {
      final l$datetimeLT = datetimeLT;
      result$data['datetimeLT'] = l$datetimeLT;
    }
    if (_$data.containsKey('datetimeLTE')) {
      final l$datetimeLTE = datetimeLTE;
      result$data['datetimeLTE'] = l$datetimeLTE;
    }
    if (_$data.containsKey('duration')) {
      final l$duration = duration;
      result$data['duration'] = l$duration;
    }
    if (_$data.containsKey('durationNEQ')) {
      final l$durationNEQ = durationNEQ;
      result$data['durationNEQ'] = l$durationNEQ;
    }
    if (_$data.containsKey('durationIn')) {
      final l$durationIn = durationIn;
      result$data['durationIn'] = l$durationIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('durationNotIn')) {
      final l$durationNotIn = durationNotIn;
      result$data['durationNotIn'] = l$durationNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('durationGT')) {
      final l$durationGT = durationGT;
      result$data['durationGT'] = l$durationGT;
    }
    if (_$data.containsKey('durationGTE')) {
      final l$durationGTE = durationGTE;
      result$data['durationGTE'] = l$durationGTE;
    }
    if (_$data.containsKey('durationLT')) {
      final l$durationLT = durationLT;
      result$data['durationLT'] = l$durationLT;
    }
    if (_$data.containsKey('durationLTE')) {
      final l$durationLTE = durationLTE;
      result$data['durationLTE'] = l$durationLTE;
    }
    if (_$data.containsKey('note')) {
      final l$note = note;
      result$data['note'] = l$note;
    }
    if (_$data.containsKey('noteNEQ')) {
      final l$noteNEQ = noteNEQ;
      result$data['noteNEQ'] = l$noteNEQ;
    }
    if (_$data.containsKey('noteIn')) {
      final l$noteIn = noteIn;
      result$data['noteIn'] = l$noteIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('noteNotIn')) {
      final l$noteNotIn = noteNotIn;
      result$data['noteNotIn'] = l$noteNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('noteGT')) {
      final l$noteGT = noteGT;
      result$data['noteGT'] = l$noteGT;
    }
    if (_$data.containsKey('noteGTE')) {
      final l$noteGTE = noteGTE;
      result$data['noteGTE'] = l$noteGTE;
    }
    if (_$data.containsKey('noteLT')) {
      final l$noteLT = noteLT;
      result$data['noteLT'] = l$noteLT;
    }
    if (_$data.containsKey('noteLTE')) {
      final l$noteLTE = noteLTE;
      result$data['noteLTE'] = l$noteLTE;
    }
    if (_$data.containsKey('noteContains')) {
      final l$noteContains = noteContains;
      result$data['noteContains'] = l$noteContains;
    }
    if (_$data.containsKey('noteHasPrefix')) {
      final l$noteHasPrefix = noteHasPrefix;
      result$data['noteHasPrefix'] = l$noteHasPrefix;
    }
    if (_$data.containsKey('noteHasSuffix')) {
      final l$noteHasSuffix = noteHasSuffix;
      result$data['noteHasSuffix'] = l$noteHasSuffix;
    }
    if (_$data.containsKey('noteEqualFold')) {
      final l$noteEqualFold = noteEqualFold;
      result$data['noteEqualFold'] = l$noteEqualFold;
    }
    if (_$data.containsKey('noteContainsFold')) {
      final l$noteContainsFold = noteContainsFold;
      result$data['noteContainsFold'] = l$noteContainsFold;
    }
    if (_$data.containsKey('createdat')) {
      final l$createdat = createdat;
      result$data['createdat'] = l$createdat;
    }
    if (_$data.containsKey('createdatNEQ')) {
      final l$createdatNEQ = createdatNEQ;
      result$data['createdatNEQ'] = l$createdatNEQ;
    }
    if (_$data.containsKey('createdatIn')) {
      final l$createdatIn = createdatIn;
      result$data['createdatIn'] = l$createdatIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('createdatNotIn')) {
      final l$createdatNotIn = createdatNotIn;
      result$data['createdatNotIn'] = l$createdatNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('createdatGT')) {
      final l$createdatGT = createdatGT;
      result$data['createdatGT'] = l$createdatGT;
    }
    if (_$data.containsKey('createdatGTE')) {
      final l$createdatGTE = createdatGTE;
      result$data['createdatGTE'] = l$createdatGTE;
    }
    if (_$data.containsKey('createdatLT')) {
      final l$createdatLT = createdatLT;
      result$data['createdatLT'] = l$createdatLT;
    }
    if (_$data.containsKey('createdatLTE')) {
      final l$createdatLTE = createdatLTE;
      result$data['createdatLTE'] = l$createdatLTE;
    }
    if (_$data.containsKey('updatedat')) {
      final l$updatedat = updatedat;
      result$data['updatedat'] = l$updatedat;
    }
    if (_$data.containsKey('updatedatNEQ')) {
      final l$updatedatNEQ = updatedatNEQ;
      result$data['updatedatNEQ'] = l$updatedatNEQ;
    }
    if (_$data.containsKey('updatedatIn')) {
      final l$updatedatIn = updatedatIn;
      result$data['updatedatIn'] = l$updatedatIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('updatedatNotIn')) {
      final l$updatedatNotIn = updatedatNotIn;
      result$data['updatedatNotIn'] = l$updatedatNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('updatedatGT')) {
      final l$updatedatGT = updatedatGT;
      result$data['updatedatGT'] = l$updatedatGT;
    }
    if (_$data.containsKey('updatedatGTE')) {
      final l$updatedatGTE = updatedatGTE;
      result$data['updatedatGTE'] = l$updatedatGTE;
    }
    if (_$data.containsKey('updatedatLT')) {
      final l$updatedatLT = updatedatLT;
      result$data['updatedatLT'] = l$updatedatLT;
    }
    if (_$data.containsKey('updatedatLTE')) {
      final l$updatedatLTE = updatedatLTE;
      result$data['updatedatLTE'] = l$updatedatLTE;
    }
    if (_$data.containsKey('hasUser')) {
      final l$hasUser = hasUser;
      result$data['hasUser'] = l$hasUser;
    }
    if (_$data.containsKey('hasUserWith')) {
      final l$hasUserWith = hasUserWith;
      result$data['hasUserWith'] =
          l$hasUserWith?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('hasLesson')) {
      final l$hasLesson = hasLesson;
      result$data['hasLesson'] = l$hasLesson;
    }
    if (_$data.containsKey('hasLessonWith')) {
      final l$hasLessonWith = hasLessonWith;
      result$data['hasLessonWith'] =
          l$hasLessonWith?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$JournalRecordWhereInput<Input$JournalRecordWhereInput>
      get copyWith => CopyWith$Input$JournalRecordWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$JournalRecordWhereInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$userID = userID;
    final lOther$userID = other.userID;
    if (_$data.containsKey('userID') != other._$data.containsKey('userID')) {
      return false;
    }
    if (l$userID != lOther$userID) {
      return false;
    }
    final l$userIDNEQ = userIDNEQ;
    final lOther$userIDNEQ = other.userIDNEQ;
    if (_$data.containsKey('userIDNEQ') !=
        other._$data.containsKey('userIDNEQ')) {
      return false;
    }
    if (l$userIDNEQ != lOther$userIDNEQ) {
      return false;
    }
    final l$userIDIn = userIDIn;
    final lOther$userIDIn = other.userIDIn;
    if (_$data.containsKey('userIDIn') !=
        other._$data.containsKey('userIDIn')) {
      return false;
    }
    if (l$userIDIn != null && lOther$userIDIn != null) {
      if (l$userIDIn.length != lOther$userIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$userIDIn.length; i++) {
        final l$userIDIn$entry = l$userIDIn[i];
        final lOther$userIDIn$entry = lOther$userIDIn[i];
        if (l$userIDIn$entry != lOther$userIDIn$entry) {
          return false;
        }
      }
    } else if (l$userIDIn != lOther$userIDIn) {
      return false;
    }
    final l$userIDNotIn = userIDNotIn;
    final lOther$userIDNotIn = other.userIDNotIn;
    if (_$data.containsKey('userIDNotIn') !=
        other._$data.containsKey('userIDNotIn')) {
      return false;
    }
    if (l$userIDNotIn != null && lOther$userIDNotIn != null) {
      if (l$userIDNotIn.length != lOther$userIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$userIDNotIn.length; i++) {
        final l$userIDNotIn$entry = l$userIDNotIn[i];
        final lOther$userIDNotIn$entry = lOther$userIDNotIn[i];
        if (l$userIDNotIn$entry != lOther$userIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$userIDNotIn != lOther$userIDNotIn) {
      return false;
    }
    final l$lessonID = lessonID;
    final lOther$lessonID = other.lessonID;
    if (_$data.containsKey('lessonID') !=
        other._$data.containsKey('lessonID')) {
      return false;
    }
    if (l$lessonID != lOther$lessonID) {
      return false;
    }
    final l$lessonIDNEQ = lessonIDNEQ;
    final lOther$lessonIDNEQ = other.lessonIDNEQ;
    if (_$data.containsKey('lessonIDNEQ') !=
        other._$data.containsKey('lessonIDNEQ')) {
      return false;
    }
    if (l$lessonIDNEQ != lOther$lessonIDNEQ) {
      return false;
    }
    final l$lessonIDIn = lessonIDIn;
    final lOther$lessonIDIn = other.lessonIDIn;
    if (_$data.containsKey('lessonIDIn') !=
        other._$data.containsKey('lessonIDIn')) {
      return false;
    }
    if (l$lessonIDIn != null && lOther$lessonIDIn != null) {
      if (l$lessonIDIn.length != lOther$lessonIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$lessonIDIn.length; i++) {
        final l$lessonIDIn$entry = l$lessonIDIn[i];
        final lOther$lessonIDIn$entry = lOther$lessonIDIn[i];
        if (l$lessonIDIn$entry != lOther$lessonIDIn$entry) {
          return false;
        }
      }
    } else if (l$lessonIDIn != lOther$lessonIDIn) {
      return false;
    }
    final l$lessonIDNotIn = lessonIDNotIn;
    final lOther$lessonIDNotIn = other.lessonIDNotIn;
    if (_$data.containsKey('lessonIDNotIn') !=
        other._$data.containsKey('lessonIDNotIn')) {
      return false;
    }
    if (l$lessonIDNotIn != null && lOther$lessonIDNotIn != null) {
      if (l$lessonIDNotIn.length != lOther$lessonIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$lessonIDNotIn.length; i++) {
        final l$lessonIDNotIn$entry = l$lessonIDNotIn[i];
        final lOther$lessonIDNotIn$entry = lOther$lessonIDNotIn[i];
        if (l$lessonIDNotIn$entry != lOther$lessonIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$lessonIDNotIn != lOther$lessonIDNotIn) {
      return false;
    }
    final l$lessonIDIsNil = lessonIDIsNil;
    final lOther$lessonIDIsNil = other.lessonIDIsNil;
    if (_$data.containsKey('lessonIDIsNil') !=
        other._$data.containsKey('lessonIDIsNil')) {
      return false;
    }
    if (l$lessonIDIsNil != lOther$lessonIDIsNil) {
      return false;
    }
    final l$lessonIDNotNil = lessonIDNotNil;
    final lOther$lessonIDNotNil = other.lessonIDNotNil;
    if (_$data.containsKey('lessonIDNotNil') !=
        other._$data.containsKey('lessonIDNotNil')) {
      return false;
    }
    if (l$lessonIDNotNil != lOther$lessonIDNotNil) {
      return false;
    }
    final l$datetime = datetime;
    final lOther$datetime = other.datetime;
    if (_$data.containsKey('datetime') !=
        other._$data.containsKey('datetime')) {
      return false;
    }
    if (l$datetime != lOther$datetime) {
      return false;
    }
    final l$datetimeNEQ = datetimeNEQ;
    final lOther$datetimeNEQ = other.datetimeNEQ;
    if (_$data.containsKey('datetimeNEQ') !=
        other._$data.containsKey('datetimeNEQ')) {
      return false;
    }
    if (l$datetimeNEQ != lOther$datetimeNEQ) {
      return false;
    }
    final l$datetimeIn = datetimeIn;
    final lOther$datetimeIn = other.datetimeIn;
    if (_$data.containsKey('datetimeIn') !=
        other._$data.containsKey('datetimeIn')) {
      return false;
    }
    if (l$datetimeIn != null && lOther$datetimeIn != null) {
      if (l$datetimeIn.length != lOther$datetimeIn.length) {
        return false;
      }
      for (int i = 0; i < l$datetimeIn.length; i++) {
        final l$datetimeIn$entry = l$datetimeIn[i];
        final lOther$datetimeIn$entry = lOther$datetimeIn[i];
        if (l$datetimeIn$entry != lOther$datetimeIn$entry) {
          return false;
        }
      }
    } else if (l$datetimeIn != lOther$datetimeIn) {
      return false;
    }
    final l$datetimeNotIn = datetimeNotIn;
    final lOther$datetimeNotIn = other.datetimeNotIn;
    if (_$data.containsKey('datetimeNotIn') !=
        other._$data.containsKey('datetimeNotIn')) {
      return false;
    }
    if (l$datetimeNotIn != null && lOther$datetimeNotIn != null) {
      if (l$datetimeNotIn.length != lOther$datetimeNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$datetimeNotIn.length; i++) {
        final l$datetimeNotIn$entry = l$datetimeNotIn[i];
        final lOther$datetimeNotIn$entry = lOther$datetimeNotIn[i];
        if (l$datetimeNotIn$entry != lOther$datetimeNotIn$entry) {
          return false;
        }
      }
    } else if (l$datetimeNotIn != lOther$datetimeNotIn) {
      return false;
    }
    final l$datetimeGT = datetimeGT;
    final lOther$datetimeGT = other.datetimeGT;
    if (_$data.containsKey('datetimeGT') !=
        other._$data.containsKey('datetimeGT')) {
      return false;
    }
    if (l$datetimeGT != lOther$datetimeGT) {
      return false;
    }
    final l$datetimeGTE = datetimeGTE;
    final lOther$datetimeGTE = other.datetimeGTE;
    if (_$data.containsKey('datetimeGTE') !=
        other._$data.containsKey('datetimeGTE')) {
      return false;
    }
    if (l$datetimeGTE != lOther$datetimeGTE) {
      return false;
    }
    final l$datetimeLT = datetimeLT;
    final lOther$datetimeLT = other.datetimeLT;
    if (_$data.containsKey('datetimeLT') !=
        other._$data.containsKey('datetimeLT')) {
      return false;
    }
    if (l$datetimeLT != lOther$datetimeLT) {
      return false;
    }
    final l$datetimeLTE = datetimeLTE;
    final lOther$datetimeLTE = other.datetimeLTE;
    if (_$data.containsKey('datetimeLTE') !=
        other._$data.containsKey('datetimeLTE')) {
      return false;
    }
    if (l$datetimeLTE != lOther$datetimeLTE) {
      return false;
    }
    final l$duration = duration;
    final lOther$duration = other.duration;
    if (_$data.containsKey('duration') !=
        other._$data.containsKey('duration')) {
      return false;
    }
    if (l$duration != lOther$duration) {
      return false;
    }
    final l$durationNEQ = durationNEQ;
    final lOther$durationNEQ = other.durationNEQ;
    if (_$data.containsKey('durationNEQ') !=
        other._$data.containsKey('durationNEQ')) {
      return false;
    }
    if (l$durationNEQ != lOther$durationNEQ) {
      return false;
    }
    final l$durationIn = durationIn;
    final lOther$durationIn = other.durationIn;
    if (_$data.containsKey('durationIn') !=
        other._$data.containsKey('durationIn')) {
      return false;
    }
    if (l$durationIn != null && lOther$durationIn != null) {
      if (l$durationIn.length != lOther$durationIn.length) {
        return false;
      }
      for (int i = 0; i < l$durationIn.length; i++) {
        final l$durationIn$entry = l$durationIn[i];
        final lOther$durationIn$entry = lOther$durationIn[i];
        if (l$durationIn$entry != lOther$durationIn$entry) {
          return false;
        }
      }
    } else if (l$durationIn != lOther$durationIn) {
      return false;
    }
    final l$durationNotIn = durationNotIn;
    final lOther$durationNotIn = other.durationNotIn;
    if (_$data.containsKey('durationNotIn') !=
        other._$data.containsKey('durationNotIn')) {
      return false;
    }
    if (l$durationNotIn != null && lOther$durationNotIn != null) {
      if (l$durationNotIn.length != lOther$durationNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$durationNotIn.length; i++) {
        final l$durationNotIn$entry = l$durationNotIn[i];
        final lOther$durationNotIn$entry = lOther$durationNotIn[i];
        if (l$durationNotIn$entry != lOther$durationNotIn$entry) {
          return false;
        }
      }
    } else if (l$durationNotIn != lOther$durationNotIn) {
      return false;
    }
    final l$durationGT = durationGT;
    final lOther$durationGT = other.durationGT;
    if (_$data.containsKey('durationGT') !=
        other._$data.containsKey('durationGT')) {
      return false;
    }
    if (l$durationGT != lOther$durationGT) {
      return false;
    }
    final l$durationGTE = durationGTE;
    final lOther$durationGTE = other.durationGTE;
    if (_$data.containsKey('durationGTE') !=
        other._$data.containsKey('durationGTE')) {
      return false;
    }
    if (l$durationGTE != lOther$durationGTE) {
      return false;
    }
    final l$durationLT = durationLT;
    final lOther$durationLT = other.durationLT;
    if (_$data.containsKey('durationLT') !=
        other._$data.containsKey('durationLT')) {
      return false;
    }
    if (l$durationLT != lOther$durationLT) {
      return false;
    }
    final l$durationLTE = durationLTE;
    final lOther$durationLTE = other.durationLTE;
    if (_$data.containsKey('durationLTE') !=
        other._$data.containsKey('durationLTE')) {
      return false;
    }
    if (l$durationLTE != lOther$durationLTE) {
      return false;
    }
    final l$note = note;
    final lOther$note = other.note;
    if (_$data.containsKey('note') != other._$data.containsKey('note')) {
      return false;
    }
    if (l$note != lOther$note) {
      return false;
    }
    final l$noteNEQ = noteNEQ;
    final lOther$noteNEQ = other.noteNEQ;
    if (_$data.containsKey('noteNEQ') != other._$data.containsKey('noteNEQ')) {
      return false;
    }
    if (l$noteNEQ != lOther$noteNEQ) {
      return false;
    }
    final l$noteIn = noteIn;
    final lOther$noteIn = other.noteIn;
    if (_$data.containsKey('noteIn') != other._$data.containsKey('noteIn')) {
      return false;
    }
    if (l$noteIn != null && lOther$noteIn != null) {
      if (l$noteIn.length != lOther$noteIn.length) {
        return false;
      }
      for (int i = 0; i < l$noteIn.length; i++) {
        final l$noteIn$entry = l$noteIn[i];
        final lOther$noteIn$entry = lOther$noteIn[i];
        if (l$noteIn$entry != lOther$noteIn$entry) {
          return false;
        }
      }
    } else if (l$noteIn != lOther$noteIn) {
      return false;
    }
    final l$noteNotIn = noteNotIn;
    final lOther$noteNotIn = other.noteNotIn;
    if (_$data.containsKey('noteNotIn') !=
        other._$data.containsKey('noteNotIn')) {
      return false;
    }
    if (l$noteNotIn != null && lOther$noteNotIn != null) {
      if (l$noteNotIn.length != lOther$noteNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$noteNotIn.length; i++) {
        final l$noteNotIn$entry = l$noteNotIn[i];
        final lOther$noteNotIn$entry = lOther$noteNotIn[i];
        if (l$noteNotIn$entry != lOther$noteNotIn$entry) {
          return false;
        }
      }
    } else if (l$noteNotIn != lOther$noteNotIn) {
      return false;
    }
    final l$noteGT = noteGT;
    final lOther$noteGT = other.noteGT;
    if (_$data.containsKey('noteGT') != other._$data.containsKey('noteGT')) {
      return false;
    }
    if (l$noteGT != lOther$noteGT) {
      return false;
    }
    final l$noteGTE = noteGTE;
    final lOther$noteGTE = other.noteGTE;
    if (_$data.containsKey('noteGTE') != other._$data.containsKey('noteGTE')) {
      return false;
    }
    if (l$noteGTE != lOther$noteGTE) {
      return false;
    }
    final l$noteLT = noteLT;
    final lOther$noteLT = other.noteLT;
    if (_$data.containsKey('noteLT') != other._$data.containsKey('noteLT')) {
      return false;
    }
    if (l$noteLT != lOther$noteLT) {
      return false;
    }
    final l$noteLTE = noteLTE;
    final lOther$noteLTE = other.noteLTE;
    if (_$data.containsKey('noteLTE') != other._$data.containsKey('noteLTE')) {
      return false;
    }
    if (l$noteLTE != lOther$noteLTE) {
      return false;
    }
    final l$noteContains = noteContains;
    final lOther$noteContains = other.noteContains;
    if (_$data.containsKey('noteContains') !=
        other._$data.containsKey('noteContains')) {
      return false;
    }
    if (l$noteContains != lOther$noteContains) {
      return false;
    }
    final l$noteHasPrefix = noteHasPrefix;
    final lOther$noteHasPrefix = other.noteHasPrefix;
    if (_$data.containsKey('noteHasPrefix') !=
        other._$data.containsKey('noteHasPrefix')) {
      return false;
    }
    if (l$noteHasPrefix != lOther$noteHasPrefix) {
      return false;
    }
    final l$noteHasSuffix = noteHasSuffix;
    final lOther$noteHasSuffix = other.noteHasSuffix;
    if (_$data.containsKey('noteHasSuffix') !=
        other._$data.containsKey('noteHasSuffix')) {
      return false;
    }
    if (l$noteHasSuffix != lOther$noteHasSuffix) {
      return false;
    }
    final l$noteEqualFold = noteEqualFold;
    final lOther$noteEqualFold = other.noteEqualFold;
    if (_$data.containsKey('noteEqualFold') !=
        other._$data.containsKey('noteEqualFold')) {
      return false;
    }
    if (l$noteEqualFold != lOther$noteEqualFold) {
      return false;
    }
    final l$noteContainsFold = noteContainsFold;
    final lOther$noteContainsFold = other.noteContainsFold;
    if (_$data.containsKey('noteContainsFold') !=
        other._$data.containsKey('noteContainsFold')) {
      return false;
    }
    if (l$noteContainsFold != lOther$noteContainsFold) {
      return false;
    }
    final l$createdat = createdat;
    final lOther$createdat = other.createdat;
    if (_$data.containsKey('createdat') !=
        other._$data.containsKey('createdat')) {
      return false;
    }
    if (l$createdat != lOther$createdat) {
      return false;
    }
    final l$createdatNEQ = createdatNEQ;
    final lOther$createdatNEQ = other.createdatNEQ;
    if (_$data.containsKey('createdatNEQ') !=
        other._$data.containsKey('createdatNEQ')) {
      return false;
    }
    if (l$createdatNEQ != lOther$createdatNEQ) {
      return false;
    }
    final l$createdatIn = createdatIn;
    final lOther$createdatIn = other.createdatIn;
    if (_$data.containsKey('createdatIn') !=
        other._$data.containsKey('createdatIn')) {
      return false;
    }
    if (l$createdatIn != null && lOther$createdatIn != null) {
      if (l$createdatIn.length != lOther$createdatIn.length) {
        return false;
      }
      for (int i = 0; i < l$createdatIn.length; i++) {
        final l$createdatIn$entry = l$createdatIn[i];
        final lOther$createdatIn$entry = lOther$createdatIn[i];
        if (l$createdatIn$entry != lOther$createdatIn$entry) {
          return false;
        }
      }
    } else if (l$createdatIn != lOther$createdatIn) {
      return false;
    }
    final l$createdatNotIn = createdatNotIn;
    final lOther$createdatNotIn = other.createdatNotIn;
    if (_$data.containsKey('createdatNotIn') !=
        other._$data.containsKey('createdatNotIn')) {
      return false;
    }
    if (l$createdatNotIn != null && lOther$createdatNotIn != null) {
      if (l$createdatNotIn.length != lOther$createdatNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$createdatNotIn.length; i++) {
        final l$createdatNotIn$entry = l$createdatNotIn[i];
        final lOther$createdatNotIn$entry = lOther$createdatNotIn[i];
        if (l$createdatNotIn$entry != lOther$createdatNotIn$entry) {
          return false;
        }
      }
    } else if (l$createdatNotIn != lOther$createdatNotIn) {
      return false;
    }
    final l$createdatGT = createdatGT;
    final lOther$createdatGT = other.createdatGT;
    if (_$data.containsKey('createdatGT') !=
        other._$data.containsKey('createdatGT')) {
      return false;
    }
    if (l$createdatGT != lOther$createdatGT) {
      return false;
    }
    final l$createdatGTE = createdatGTE;
    final lOther$createdatGTE = other.createdatGTE;
    if (_$data.containsKey('createdatGTE') !=
        other._$data.containsKey('createdatGTE')) {
      return false;
    }
    if (l$createdatGTE != lOther$createdatGTE) {
      return false;
    }
    final l$createdatLT = createdatLT;
    final lOther$createdatLT = other.createdatLT;
    if (_$data.containsKey('createdatLT') !=
        other._$data.containsKey('createdatLT')) {
      return false;
    }
    if (l$createdatLT != lOther$createdatLT) {
      return false;
    }
    final l$createdatLTE = createdatLTE;
    final lOther$createdatLTE = other.createdatLTE;
    if (_$data.containsKey('createdatLTE') !=
        other._$data.containsKey('createdatLTE')) {
      return false;
    }
    if (l$createdatLTE != lOther$createdatLTE) {
      return false;
    }
    final l$updatedat = updatedat;
    final lOther$updatedat = other.updatedat;
    if (_$data.containsKey('updatedat') !=
        other._$data.containsKey('updatedat')) {
      return false;
    }
    if (l$updatedat != lOther$updatedat) {
      return false;
    }
    final l$updatedatNEQ = updatedatNEQ;
    final lOther$updatedatNEQ = other.updatedatNEQ;
    if (_$data.containsKey('updatedatNEQ') !=
        other._$data.containsKey('updatedatNEQ')) {
      return false;
    }
    if (l$updatedatNEQ != lOther$updatedatNEQ) {
      return false;
    }
    final l$updatedatIn = updatedatIn;
    final lOther$updatedatIn = other.updatedatIn;
    if (_$data.containsKey('updatedatIn') !=
        other._$data.containsKey('updatedatIn')) {
      return false;
    }
    if (l$updatedatIn != null && lOther$updatedatIn != null) {
      if (l$updatedatIn.length != lOther$updatedatIn.length) {
        return false;
      }
      for (int i = 0; i < l$updatedatIn.length; i++) {
        final l$updatedatIn$entry = l$updatedatIn[i];
        final lOther$updatedatIn$entry = lOther$updatedatIn[i];
        if (l$updatedatIn$entry != lOther$updatedatIn$entry) {
          return false;
        }
      }
    } else if (l$updatedatIn != lOther$updatedatIn) {
      return false;
    }
    final l$updatedatNotIn = updatedatNotIn;
    final lOther$updatedatNotIn = other.updatedatNotIn;
    if (_$data.containsKey('updatedatNotIn') !=
        other._$data.containsKey('updatedatNotIn')) {
      return false;
    }
    if (l$updatedatNotIn != null && lOther$updatedatNotIn != null) {
      if (l$updatedatNotIn.length != lOther$updatedatNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$updatedatNotIn.length; i++) {
        final l$updatedatNotIn$entry = l$updatedatNotIn[i];
        final lOther$updatedatNotIn$entry = lOther$updatedatNotIn[i];
        if (l$updatedatNotIn$entry != lOther$updatedatNotIn$entry) {
          return false;
        }
      }
    } else if (l$updatedatNotIn != lOther$updatedatNotIn) {
      return false;
    }
    final l$updatedatGT = updatedatGT;
    final lOther$updatedatGT = other.updatedatGT;
    if (_$data.containsKey('updatedatGT') !=
        other._$data.containsKey('updatedatGT')) {
      return false;
    }
    if (l$updatedatGT != lOther$updatedatGT) {
      return false;
    }
    final l$updatedatGTE = updatedatGTE;
    final lOther$updatedatGTE = other.updatedatGTE;
    if (_$data.containsKey('updatedatGTE') !=
        other._$data.containsKey('updatedatGTE')) {
      return false;
    }
    if (l$updatedatGTE != lOther$updatedatGTE) {
      return false;
    }
    final l$updatedatLT = updatedatLT;
    final lOther$updatedatLT = other.updatedatLT;
    if (_$data.containsKey('updatedatLT') !=
        other._$data.containsKey('updatedatLT')) {
      return false;
    }
    if (l$updatedatLT != lOther$updatedatLT) {
      return false;
    }
    final l$updatedatLTE = updatedatLTE;
    final lOther$updatedatLTE = other.updatedatLTE;
    if (_$data.containsKey('updatedatLTE') !=
        other._$data.containsKey('updatedatLTE')) {
      return false;
    }
    if (l$updatedatLTE != lOther$updatedatLTE) {
      return false;
    }
    final l$hasUser = hasUser;
    final lOther$hasUser = other.hasUser;
    if (_$data.containsKey('hasUser') != other._$data.containsKey('hasUser')) {
      return false;
    }
    if (l$hasUser != lOther$hasUser) {
      return false;
    }
    final l$hasUserWith = hasUserWith;
    final lOther$hasUserWith = other.hasUserWith;
    if (_$data.containsKey('hasUserWith') !=
        other._$data.containsKey('hasUserWith')) {
      return false;
    }
    if (l$hasUserWith != null && lOther$hasUserWith != null) {
      if (l$hasUserWith.length != lOther$hasUserWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasUserWith.length; i++) {
        final l$hasUserWith$entry = l$hasUserWith[i];
        final lOther$hasUserWith$entry = lOther$hasUserWith[i];
        if (l$hasUserWith$entry != lOther$hasUserWith$entry) {
          return false;
        }
      }
    } else if (l$hasUserWith != lOther$hasUserWith) {
      return false;
    }
    final l$hasLesson = hasLesson;
    final lOther$hasLesson = other.hasLesson;
    if (_$data.containsKey('hasLesson') !=
        other._$data.containsKey('hasLesson')) {
      return false;
    }
    if (l$hasLesson != lOther$hasLesson) {
      return false;
    }
    final l$hasLessonWith = hasLessonWith;
    final lOther$hasLessonWith = other.hasLessonWith;
    if (_$data.containsKey('hasLessonWith') !=
        other._$data.containsKey('hasLessonWith')) {
      return false;
    }
    if (l$hasLessonWith != null && lOther$hasLessonWith != null) {
      if (l$hasLessonWith.length != lOther$hasLessonWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasLessonWith.length; i++) {
        final l$hasLessonWith$entry = l$hasLessonWith[i];
        final lOther$hasLessonWith$entry = lOther$hasLessonWith[i];
        if (l$hasLessonWith$entry != lOther$hasLessonWith$entry) {
          return false;
        }
      }
    } else if (l$hasLessonWith != lOther$hasLessonWith) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$userID = userID;
    final l$userIDNEQ = userIDNEQ;
    final l$userIDIn = userIDIn;
    final l$userIDNotIn = userIDNotIn;
    final l$lessonID = lessonID;
    final l$lessonIDNEQ = lessonIDNEQ;
    final l$lessonIDIn = lessonIDIn;
    final l$lessonIDNotIn = lessonIDNotIn;
    final l$lessonIDIsNil = lessonIDIsNil;
    final l$lessonIDNotNil = lessonIDNotNil;
    final l$datetime = datetime;
    final l$datetimeNEQ = datetimeNEQ;
    final l$datetimeIn = datetimeIn;
    final l$datetimeNotIn = datetimeNotIn;
    final l$datetimeGT = datetimeGT;
    final l$datetimeGTE = datetimeGTE;
    final l$datetimeLT = datetimeLT;
    final l$datetimeLTE = datetimeLTE;
    final l$duration = duration;
    final l$durationNEQ = durationNEQ;
    final l$durationIn = durationIn;
    final l$durationNotIn = durationNotIn;
    final l$durationGT = durationGT;
    final l$durationGTE = durationGTE;
    final l$durationLT = durationLT;
    final l$durationLTE = durationLTE;
    final l$note = note;
    final l$noteNEQ = noteNEQ;
    final l$noteIn = noteIn;
    final l$noteNotIn = noteNotIn;
    final l$noteGT = noteGT;
    final l$noteGTE = noteGTE;
    final l$noteLT = noteLT;
    final l$noteLTE = noteLTE;
    final l$noteContains = noteContains;
    final l$noteHasPrefix = noteHasPrefix;
    final l$noteHasSuffix = noteHasSuffix;
    final l$noteEqualFold = noteEqualFold;
    final l$noteContainsFold = noteContainsFold;
    final l$createdat = createdat;
    final l$createdatNEQ = createdatNEQ;
    final l$createdatIn = createdatIn;
    final l$createdatNotIn = createdatNotIn;
    final l$createdatGT = createdatGT;
    final l$createdatGTE = createdatGTE;
    final l$createdatLT = createdatLT;
    final l$createdatLTE = createdatLTE;
    final l$updatedat = updatedat;
    final l$updatedatNEQ = updatedatNEQ;
    final l$updatedatIn = updatedatIn;
    final l$updatedatNotIn = updatedatNotIn;
    final l$updatedatGT = updatedatGT;
    final l$updatedatGTE = updatedatGTE;
    final l$updatedatLT = updatedatLT;
    final l$updatedatLTE = updatedatLTE;
    final l$hasUser = hasUser;
    final l$hasUserWith = hasUserWith;
    final l$hasLesson = hasLesson;
    final l$hasLessonWith = hasLessonWith;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('userID') ? l$userID : const {},
      _$data.containsKey('userIDNEQ') ? l$userIDNEQ : const {},
      _$data.containsKey('userIDIn')
          ? l$userIDIn == null
              ? null
              : Object.hashAll(l$userIDIn.map((v) => v))
          : const {},
      _$data.containsKey('userIDNotIn')
          ? l$userIDNotIn == null
              ? null
              : Object.hashAll(l$userIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('lessonID') ? l$lessonID : const {},
      _$data.containsKey('lessonIDNEQ') ? l$lessonIDNEQ : const {},
      _$data.containsKey('lessonIDIn')
          ? l$lessonIDIn == null
              ? null
              : Object.hashAll(l$lessonIDIn.map((v) => v))
          : const {},
      _$data.containsKey('lessonIDNotIn')
          ? l$lessonIDNotIn == null
              ? null
              : Object.hashAll(l$lessonIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('lessonIDIsNil') ? l$lessonIDIsNil : const {},
      _$data.containsKey('lessonIDNotNil') ? l$lessonIDNotNil : const {},
      _$data.containsKey('datetime') ? l$datetime : const {},
      _$data.containsKey('datetimeNEQ') ? l$datetimeNEQ : const {},
      _$data.containsKey('datetimeIn')
          ? l$datetimeIn == null
              ? null
              : Object.hashAll(l$datetimeIn.map((v) => v))
          : const {},
      _$data.containsKey('datetimeNotIn')
          ? l$datetimeNotIn == null
              ? null
              : Object.hashAll(l$datetimeNotIn.map((v) => v))
          : const {},
      _$data.containsKey('datetimeGT') ? l$datetimeGT : const {},
      _$data.containsKey('datetimeGTE') ? l$datetimeGTE : const {},
      _$data.containsKey('datetimeLT') ? l$datetimeLT : const {},
      _$data.containsKey('datetimeLTE') ? l$datetimeLTE : const {},
      _$data.containsKey('duration') ? l$duration : const {},
      _$data.containsKey('durationNEQ') ? l$durationNEQ : const {},
      _$data.containsKey('durationIn')
          ? l$durationIn == null
              ? null
              : Object.hashAll(l$durationIn.map((v) => v))
          : const {},
      _$data.containsKey('durationNotIn')
          ? l$durationNotIn == null
              ? null
              : Object.hashAll(l$durationNotIn.map((v) => v))
          : const {},
      _$data.containsKey('durationGT') ? l$durationGT : const {},
      _$data.containsKey('durationGTE') ? l$durationGTE : const {},
      _$data.containsKey('durationLT') ? l$durationLT : const {},
      _$data.containsKey('durationLTE') ? l$durationLTE : const {},
      _$data.containsKey('note') ? l$note : const {},
      _$data.containsKey('noteNEQ') ? l$noteNEQ : const {},
      _$data.containsKey('noteIn')
          ? l$noteIn == null
              ? null
              : Object.hashAll(l$noteIn.map((v) => v))
          : const {},
      _$data.containsKey('noteNotIn')
          ? l$noteNotIn == null
              ? null
              : Object.hashAll(l$noteNotIn.map((v) => v))
          : const {},
      _$data.containsKey('noteGT') ? l$noteGT : const {},
      _$data.containsKey('noteGTE') ? l$noteGTE : const {},
      _$data.containsKey('noteLT') ? l$noteLT : const {},
      _$data.containsKey('noteLTE') ? l$noteLTE : const {},
      _$data.containsKey('noteContains') ? l$noteContains : const {},
      _$data.containsKey('noteHasPrefix') ? l$noteHasPrefix : const {},
      _$data.containsKey('noteHasSuffix') ? l$noteHasSuffix : const {},
      _$data.containsKey('noteEqualFold') ? l$noteEqualFold : const {},
      _$data.containsKey('noteContainsFold') ? l$noteContainsFold : const {},
      _$data.containsKey('createdat') ? l$createdat : const {},
      _$data.containsKey('createdatNEQ') ? l$createdatNEQ : const {},
      _$data.containsKey('createdatIn')
          ? l$createdatIn == null
              ? null
              : Object.hashAll(l$createdatIn.map((v) => v))
          : const {},
      _$data.containsKey('createdatNotIn')
          ? l$createdatNotIn == null
              ? null
              : Object.hashAll(l$createdatNotIn.map((v) => v))
          : const {},
      _$data.containsKey('createdatGT') ? l$createdatGT : const {},
      _$data.containsKey('createdatGTE') ? l$createdatGTE : const {},
      _$data.containsKey('createdatLT') ? l$createdatLT : const {},
      _$data.containsKey('createdatLTE') ? l$createdatLTE : const {},
      _$data.containsKey('updatedat') ? l$updatedat : const {},
      _$data.containsKey('updatedatNEQ') ? l$updatedatNEQ : const {},
      _$data.containsKey('updatedatIn')
          ? l$updatedatIn == null
              ? null
              : Object.hashAll(l$updatedatIn.map((v) => v))
          : const {},
      _$data.containsKey('updatedatNotIn')
          ? l$updatedatNotIn == null
              ? null
              : Object.hashAll(l$updatedatNotIn.map((v) => v))
          : const {},
      _$data.containsKey('updatedatGT') ? l$updatedatGT : const {},
      _$data.containsKey('updatedatGTE') ? l$updatedatGTE : const {},
      _$data.containsKey('updatedatLT') ? l$updatedatLT : const {},
      _$data.containsKey('updatedatLTE') ? l$updatedatLTE : const {},
      _$data.containsKey('hasUser') ? l$hasUser : const {},
      _$data.containsKey('hasUserWith')
          ? l$hasUserWith == null
              ? null
              : Object.hashAll(l$hasUserWith.map((v) => v))
          : const {},
      _$data.containsKey('hasLesson') ? l$hasLesson : const {},
      _$data.containsKey('hasLessonWith')
          ? l$hasLessonWith == null
              ? null
              : Object.hashAll(l$hasLessonWith.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$JournalRecordWhereInput<TRes> {
  factory CopyWith$Input$JournalRecordWhereInput(
    Input$JournalRecordWhereInput instance,
    TRes Function(Input$JournalRecordWhereInput) then,
  ) = _CopyWithImpl$Input$JournalRecordWhereInput;

  factory CopyWith$Input$JournalRecordWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$JournalRecordWhereInput;

  TRes call({
    Input$JournalRecordWhereInput? not,
    List<Input$JournalRecordWhereInput>? and,
    List<Input$JournalRecordWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? userID,
    String? userIDNEQ,
    List<String>? userIDIn,
    List<String>? userIDNotIn,
    String? lessonID,
    String? lessonIDNEQ,
    List<String>? lessonIDIn,
    List<String>? lessonIDNotIn,
    bool? lessonIDIsNil,
    bool? lessonIDNotNil,
    String? datetime,
    String? datetimeNEQ,
    List<String>? datetimeIn,
    List<String>? datetimeNotIn,
    String? datetimeGT,
    String? datetimeGTE,
    String? datetimeLT,
    String? datetimeLTE,
    int? duration,
    int? durationNEQ,
    List<int>? durationIn,
    List<int>? durationNotIn,
    int? durationGT,
    int? durationGTE,
    int? durationLT,
    int? durationLTE,
    String? note,
    String? noteNEQ,
    List<String>? noteIn,
    List<String>? noteNotIn,
    String? noteGT,
    String? noteGTE,
    String? noteLT,
    String? noteLTE,
    String? noteContains,
    String? noteHasPrefix,
    String? noteHasSuffix,
    String? noteEqualFold,
    String? noteContainsFold,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    bool? hasUser,
    List<Input$UserWhereInput>? hasUserWith,
    bool? hasLesson,
    List<Input$LessonWhereInput>? hasLessonWith,
  });
  CopyWith$Input$JournalRecordWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$JournalRecordWhereInput>? Function(
              Iterable<
                  CopyWith$Input$JournalRecordWhereInput<
                      Input$JournalRecordWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$JournalRecordWhereInput>? Function(
              Iterable<
                  CopyWith$Input$JournalRecordWhereInput<
                      Input$JournalRecordWhereInput>>?)
          _fn);
  TRes hasUserWith(
      Iterable<Input$UserWhereInput>? Function(
              Iterable<CopyWith$Input$UserWhereInput<Input$UserWhereInput>>?)
          _fn);
  TRes hasLessonWith(
      Iterable<Input$LessonWhereInput>? Function(
              Iterable<
                  CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$JournalRecordWhereInput<TRes>
    implements CopyWith$Input$JournalRecordWhereInput<TRes> {
  _CopyWithImpl$Input$JournalRecordWhereInput(
    this._instance,
    this._then,
  );

  final Input$JournalRecordWhereInput _instance;

  final TRes Function(Input$JournalRecordWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? userID = _undefined,
    Object? userIDNEQ = _undefined,
    Object? userIDIn = _undefined,
    Object? userIDNotIn = _undefined,
    Object? lessonID = _undefined,
    Object? lessonIDNEQ = _undefined,
    Object? lessonIDIn = _undefined,
    Object? lessonIDNotIn = _undefined,
    Object? lessonIDIsNil = _undefined,
    Object? lessonIDNotNil = _undefined,
    Object? datetime = _undefined,
    Object? datetimeNEQ = _undefined,
    Object? datetimeIn = _undefined,
    Object? datetimeNotIn = _undefined,
    Object? datetimeGT = _undefined,
    Object? datetimeGTE = _undefined,
    Object? datetimeLT = _undefined,
    Object? datetimeLTE = _undefined,
    Object? duration = _undefined,
    Object? durationNEQ = _undefined,
    Object? durationIn = _undefined,
    Object? durationNotIn = _undefined,
    Object? durationGT = _undefined,
    Object? durationGTE = _undefined,
    Object? durationLT = _undefined,
    Object? durationLTE = _undefined,
    Object? note = _undefined,
    Object? noteNEQ = _undefined,
    Object? noteIn = _undefined,
    Object? noteNotIn = _undefined,
    Object? noteGT = _undefined,
    Object? noteGTE = _undefined,
    Object? noteLT = _undefined,
    Object? noteLTE = _undefined,
    Object? noteContains = _undefined,
    Object? noteHasPrefix = _undefined,
    Object? noteHasSuffix = _undefined,
    Object? noteEqualFold = _undefined,
    Object? noteContainsFold = _undefined,
    Object? createdat = _undefined,
    Object? createdatNEQ = _undefined,
    Object? createdatIn = _undefined,
    Object? createdatNotIn = _undefined,
    Object? createdatGT = _undefined,
    Object? createdatGTE = _undefined,
    Object? createdatLT = _undefined,
    Object? createdatLTE = _undefined,
    Object? updatedat = _undefined,
    Object? updatedatNEQ = _undefined,
    Object? updatedatIn = _undefined,
    Object? updatedatNotIn = _undefined,
    Object? updatedatGT = _undefined,
    Object? updatedatGTE = _undefined,
    Object? updatedatLT = _undefined,
    Object? updatedatLTE = _undefined,
    Object? hasUser = _undefined,
    Object? hasUserWith = _undefined,
    Object? hasLesson = _undefined,
    Object? hasLessonWith = _undefined,
  }) =>
      _then(Input$JournalRecordWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$JournalRecordWhereInput?),
        if (and != _undefined)
          'and': (and as List<Input$JournalRecordWhereInput>?),
        if (or != _undefined)
          'or': (or as List<Input$JournalRecordWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (userID != _undefined) 'userID': (userID as String?),
        if (userIDNEQ != _undefined) 'userIDNEQ': (userIDNEQ as String?),
        if (userIDIn != _undefined) 'userIDIn': (userIDIn as List<String>?),
        if (userIDNotIn != _undefined)
          'userIDNotIn': (userIDNotIn as List<String>?),
        if (lessonID != _undefined) 'lessonID': (lessonID as String?),
        if (lessonIDNEQ != _undefined) 'lessonIDNEQ': (lessonIDNEQ as String?),
        if (lessonIDIn != _undefined)
          'lessonIDIn': (lessonIDIn as List<String>?),
        if (lessonIDNotIn != _undefined)
          'lessonIDNotIn': (lessonIDNotIn as List<String>?),
        if (lessonIDIsNil != _undefined)
          'lessonIDIsNil': (lessonIDIsNil as bool?),
        if (lessonIDNotNil != _undefined)
          'lessonIDNotNil': (lessonIDNotNil as bool?),
        if (datetime != _undefined) 'datetime': (datetime as String?),
        if (datetimeNEQ != _undefined) 'datetimeNEQ': (datetimeNEQ as String?),
        if (datetimeIn != _undefined)
          'datetimeIn': (datetimeIn as List<String>?),
        if (datetimeNotIn != _undefined)
          'datetimeNotIn': (datetimeNotIn as List<String>?),
        if (datetimeGT != _undefined) 'datetimeGT': (datetimeGT as String?),
        if (datetimeGTE != _undefined) 'datetimeGTE': (datetimeGTE as String?),
        if (datetimeLT != _undefined) 'datetimeLT': (datetimeLT as String?),
        if (datetimeLTE != _undefined) 'datetimeLTE': (datetimeLTE as String?),
        if (duration != _undefined) 'duration': (duration as int?),
        if (durationNEQ != _undefined) 'durationNEQ': (durationNEQ as int?),
        if (durationIn != _undefined) 'durationIn': (durationIn as List<int>?),
        if (durationNotIn != _undefined)
          'durationNotIn': (durationNotIn as List<int>?),
        if (durationGT != _undefined) 'durationGT': (durationGT as int?),
        if (durationGTE != _undefined) 'durationGTE': (durationGTE as int?),
        if (durationLT != _undefined) 'durationLT': (durationLT as int?),
        if (durationLTE != _undefined) 'durationLTE': (durationLTE as int?),
        if (note != _undefined) 'note': (note as String?),
        if (noteNEQ != _undefined) 'noteNEQ': (noteNEQ as String?),
        if (noteIn != _undefined) 'noteIn': (noteIn as List<String>?),
        if (noteNotIn != _undefined) 'noteNotIn': (noteNotIn as List<String>?),
        if (noteGT != _undefined) 'noteGT': (noteGT as String?),
        if (noteGTE != _undefined) 'noteGTE': (noteGTE as String?),
        if (noteLT != _undefined) 'noteLT': (noteLT as String?),
        if (noteLTE != _undefined) 'noteLTE': (noteLTE as String?),
        if (noteContains != _undefined)
          'noteContains': (noteContains as String?),
        if (noteHasPrefix != _undefined)
          'noteHasPrefix': (noteHasPrefix as String?),
        if (noteHasSuffix != _undefined)
          'noteHasSuffix': (noteHasSuffix as String?),
        if (noteEqualFold != _undefined)
          'noteEqualFold': (noteEqualFold as String?),
        if (noteContainsFold != _undefined)
          'noteContainsFold': (noteContainsFold as String?),
        if (createdat != _undefined) 'createdat': (createdat as String?),
        if (createdatNEQ != _undefined)
          'createdatNEQ': (createdatNEQ as String?),
        if (createdatIn != _undefined)
          'createdatIn': (createdatIn as List<String>?),
        if (createdatNotIn != _undefined)
          'createdatNotIn': (createdatNotIn as List<String>?),
        if (createdatGT != _undefined) 'createdatGT': (createdatGT as String?),
        if (createdatGTE != _undefined)
          'createdatGTE': (createdatGTE as String?),
        if (createdatLT != _undefined) 'createdatLT': (createdatLT as String?),
        if (createdatLTE != _undefined)
          'createdatLTE': (createdatLTE as String?),
        if (updatedat != _undefined) 'updatedat': (updatedat as String?),
        if (updatedatNEQ != _undefined)
          'updatedatNEQ': (updatedatNEQ as String?),
        if (updatedatIn != _undefined)
          'updatedatIn': (updatedatIn as List<String>?),
        if (updatedatNotIn != _undefined)
          'updatedatNotIn': (updatedatNotIn as List<String>?),
        if (updatedatGT != _undefined) 'updatedatGT': (updatedatGT as String?),
        if (updatedatGTE != _undefined)
          'updatedatGTE': (updatedatGTE as String?),
        if (updatedatLT != _undefined) 'updatedatLT': (updatedatLT as String?),
        if (updatedatLTE != _undefined)
          'updatedatLTE': (updatedatLTE as String?),
        if (hasUser != _undefined) 'hasUser': (hasUser as bool?),
        if (hasUserWith != _undefined)
          'hasUserWith': (hasUserWith as List<Input$UserWhereInput>?),
        if (hasLesson != _undefined) 'hasLesson': (hasLesson as bool?),
        if (hasLessonWith != _undefined)
          'hasLessonWith': (hasLessonWith as List<Input$LessonWhereInput>?),
      }));

  CopyWith$Input$JournalRecordWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$JournalRecordWhereInput.stub(_then(_instance))
        : CopyWith$Input$JournalRecordWhereInput(
            local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$JournalRecordWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$JournalRecordWhereInput<
                          Input$JournalRecordWhereInput>>?)
              _fn) =>
      call(
          and: _fn(
              _instance.and?.map((e) => CopyWith$Input$JournalRecordWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes or(
          Iterable<Input$JournalRecordWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$JournalRecordWhereInput<
                          Input$JournalRecordWhereInput>>?)
              _fn) =>
      call(
          or: _fn(
              _instance.or?.map((e) => CopyWith$Input$JournalRecordWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasUserWith(
          Iterable<Input$UserWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UserWhereInput<Input$UserWhereInput>>?)
              _fn) =>
      call(
          hasUserWith: _fn(
              _instance.hasUserWith?.map((e) => CopyWith$Input$UserWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasLessonWith(
          Iterable<Input$LessonWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
              _fn) =>
      call(
          hasLessonWith: _fn(_instance.hasLessonWith
              ?.map((e) => CopyWith$Input$LessonWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$JournalRecordWhereInput<TRes>
    implements CopyWith$Input$JournalRecordWhereInput<TRes> {
  _CopyWithStubImpl$Input$JournalRecordWhereInput(this._res);

  TRes _res;

  call({
    Input$JournalRecordWhereInput? not,
    List<Input$JournalRecordWhereInput>? and,
    List<Input$JournalRecordWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? userID,
    String? userIDNEQ,
    List<String>? userIDIn,
    List<String>? userIDNotIn,
    String? lessonID,
    String? lessonIDNEQ,
    List<String>? lessonIDIn,
    List<String>? lessonIDNotIn,
    bool? lessonIDIsNil,
    bool? lessonIDNotNil,
    String? datetime,
    String? datetimeNEQ,
    List<String>? datetimeIn,
    List<String>? datetimeNotIn,
    String? datetimeGT,
    String? datetimeGTE,
    String? datetimeLT,
    String? datetimeLTE,
    int? duration,
    int? durationNEQ,
    List<int>? durationIn,
    List<int>? durationNotIn,
    int? durationGT,
    int? durationGTE,
    int? durationLT,
    int? durationLTE,
    String? note,
    String? noteNEQ,
    List<String>? noteIn,
    List<String>? noteNotIn,
    String? noteGT,
    String? noteGTE,
    String? noteLT,
    String? noteLTE,
    String? noteContains,
    String? noteHasPrefix,
    String? noteHasSuffix,
    String? noteEqualFold,
    String? noteContainsFold,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    bool? hasUser,
    List<Input$UserWhereInput>? hasUserWith,
    bool? hasLesson,
    List<Input$LessonWhereInput>? hasLessonWith,
  }) =>
      _res;

  CopyWith$Input$JournalRecordWhereInput<TRes> get not =>
      CopyWith$Input$JournalRecordWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;

  hasUserWith(_fn) => _res;

  hasLessonWith(_fn) => _res;
}

class Input$LessonAudioOrder {
  factory Input$LessonAudioOrder({
    Enum$OrderDirection? direction,
    required Enum$LessonAudioOrderField field,
  }) =>
      Input$LessonAudioOrder._({
        if (direction != null) r'direction': direction,
        r'field': field,
      });

  Input$LessonAudioOrder._(this._$data);

  factory Input$LessonAudioOrder.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('direction')) {
      final l$direction = data['direction'];
      result$data['direction'] =
          fromJson$Enum$OrderDirection((l$direction as String));
    }
    final l$field = data['field'];
    result$data['field'] =
        fromJson$Enum$LessonAudioOrderField((l$field as String));
    return Input$LessonAudioOrder._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderDirection? get direction =>
      (_$data['direction'] as Enum$OrderDirection?);

  Enum$LessonAudioOrderField get field =>
      (_$data['field'] as Enum$LessonAudioOrderField);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('direction')) {
      final l$direction = direction;
      result$data['direction'] =
          toJson$Enum$OrderDirection((l$direction as Enum$OrderDirection));
    }
    final l$field = field;
    result$data['field'] = toJson$Enum$LessonAudioOrderField(l$field);
    return result$data;
  }

  CopyWith$Input$LessonAudioOrder<Input$LessonAudioOrder> get copyWith =>
      CopyWith$Input$LessonAudioOrder(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$LessonAudioOrder) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$direction = direction;
    final lOther$direction = other.direction;
    if (_$data.containsKey('direction') !=
        other._$data.containsKey('direction')) {
      return false;
    }
    if (l$direction != lOther$direction) {
      return false;
    }
    final l$field = field;
    final lOther$field = other.field;
    if (l$field != lOther$field) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$direction = direction;
    final l$field = field;
    return Object.hashAll([
      _$data.containsKey('direction') ? l$direction : const {},
      l$field,
    ]);
  }
}

abstract class CopyWith$Input$LessonAudioOrder<TRes> {
  factory CopyWith$Input$LessonAudioOrder(
    Input$LessonAudioOrder instance,
    TRes Function(Input$LessonAudioOrder) then,
  ) = _CopyWithImpl$Input$LessonAudioOrder;

  factory CopyWith$Input$LessonAudioOrder.stub(TRes res) =
      _CopyWithStubImpl$Input$LessonAudioOrder;

  TRes call({
    Enum$OrderDirection? direction,
    Enum$LessonAudioOrderField? field,
  });
}

class _CopyWithImpl$Input$LessonAudioOrder<TRes>
    implements CopyWith$Input$LessonAudioOrder<TRes> {
  _CopyWithImpl$Input$LessonAudioOrder(
    this._instance,
    this._then,
  );

  final Input$LessonAudioOrder _instance;

  final TRes Function(Input$LessonAudioOrder) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? direction = _undefined,
    Object? field = _undefined,
  }) =>
      _then(Input$LessonAudioOrder._({
        ..._instance._$data,
        if (direction != _undefined && direction != null)
          'direction': (direction as Enum$OrderDirection),
        if (field != _undefined && field != null)
          'field': (field as Enum$LessonAudioOrderField),
      }));
}

class _CopyWithStubImpl$Input$LessonAudioOrder<TRes>
    implements CopyWith$Input$LessonAudioOrder<TRes> {
  _CopyWithStubImpl$Input$LessonAudioOrder(this._res);

  TRes _res;

  call({
    Enum$OrderDirection? direction,
    Enum$LessonAudioOrderField? field,
  }) =>
      _res;
}

class Input$LessonAudioWhereInput {
  factory Input$LessonAudioWhereInput({
    Input$LessonAudioWhereInput? not,
    List<Input$LessonAudioWhereInput>? and,
    List<Input$LessonAudioWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? lessonID,
    String? lessonIDNEQ,
    List<String>? lessonIDIn,
    List<String>? lessonIDNotIn,
    String? audiourl,
    String? audiourlNEQ,
    List<String>? audiourlIn,
    List<String>? audiourlNotIn,
    String? audiourlGT,
    String? audiourlGTE,
    String? audiourlLT,
    String? audiourlLTE,
    String? audiourlContains,
    String? audiourlHasPrefix,
    String? audiourlHasSuffix,
    String? audiourlEqualFold,
    String? audiourlContainsFold,
    int? duration,
    int? durationNEQ,
    List<int>? durationIn,
    List<int>? durationNotIn,
    int? durationGT,
    int? durationGTE,
    int? durationLT,
    int? durationLTE,
    bool? hasLesson,
    List<Input$LessonWhereInput>? hasLessonWith,
  }) =>
      Input$LessonAudioWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (lessonID != null) r'lessonID': lessonID,
        if (lessonIDNEQ != null) r'lessonIDNEQ': lessonIDNEQ,
        if (lessonIDIn != null) r'lessonIDIn': lessonIDIn,
        if (lessonIDNotIn != null) r'lessonIDNotIn': lessonIDNotIn,
        if (audiourl != null) r'audiourl': audiourl,
        if (audiourlNEQ != null) r'audiourlNEQ': audiourlNEQ,
        if (audiourlIn != null) r'audiourlIn': audiourlIn,
        if (audiourlNotIn != null) r'audiourlNotIn': audiourlNotIn,
        if (audiourlGT != null) r'audiourlGT': audiourlGT,
        if (audiourlGTE != null) r'audiourlGTE': audiourlGTE,
        if (audiourlLT != null) r'audiourlLT': audiourlLT,
        if (audiourlLTE != null) r'audiourlLTE': audiourlLTE,
        if (audiourlContains != null) r'audiourlContains': audiourlContains,
        if (audiourlHasPrefix != null) r'audiourlHasPrefix': audiourlHasPrefix,
        if (audiourlHasSuffix != null) r'audiourlHasSuffix': audiourlHasSuffix,
        if (audiourlEqualFold != null) r'audiourlEqualFold': audiourlEqualFold,
        if (audiourlContainsFold != null)
          r'audiourlContainsFold': audiourlContainsFold,
        if (duration != null) r'duration': duration,
        if (durationNEQ != null) r'durationNEQ': durationNEQ,
        if (durationIn != null) r'durationIn': durationIn,
        if (durationNotIn != null) r'durationNotIn': durationNotIn,
        if (durationGT != null) r'durationGT': durationGT,
        if (durationGTE != null) r'durationGTE': durationGTE,
        if (durationLT != null) r'durationLT': durationLT,
        if (durationLTE != null) r'durationLTE': durationLTE,
        if (hasLesson != null) r'hasLesson': hasLesson,
        if (hasLessonWith != null) r'hasLessonWith': hasLessonWith,
      });

  Input$LessonAudioWhereInput._(this._$data);

  factory Input$LessonAudioWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$LessonAudioWhereInput.fromJson(
              (l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map((e) =>
              Input$LessonAudioWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map((e) =>
              Input$LessonAudioWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('lessonID')) {
      final l$lessonID = data['lessonID'];
      result$data['lessonID'] = (l$lessonID as String?);
    }
    if (data.containsKey('lessonIDNEQ')) {
      final l$lessonIDNEQ = data['lessonIDNEQ'];
      result$data['lessonIDNEQ'] = (l$lessonIDNEQ as String?);
    }
    if (data.containsKey('lessonIDIn')) {
      final l$lessonIDIn = data['lessonIDIn'];
      result$data['lessonIDIn'] =
          (l$lessonIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('lessonIDNotIn')) {
      final l$lessonIDNotIn = data['lessonIDNotIn'];
      result$data['lessonIDNotIn'] = (l$lessonIDNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('audiourl')) {
      final l$audiourl = data['audiourl'];
      result$data['audiourl'] = (l$audiourl as String?);
    }
    if (data.containsKey('audiourlNEQ')) {
      final l$audiourlNEQ = data['audiourlNEQ'];
      result$data['audiourlNEQ'] = (l$audiourlNEQ as String?);
    }
    if (data.containsKey('audiourlIn')) {
      final l$audiourlIn = data['audiourlIn'];
      result$data['audiourlIn'] =
          (l$audiourlIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('audiourlNotIn')) {
      final l$audiourlNotIn = data['audiourlNotIn'];
      result$data['audiourlNotIn'] = (l$audiourlNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('audiourlGT')) {
      final l$audiourlGT = data['audiourlGT'];
      result$data['audiourlGT'] = (l$audiourlGT as String?);
    }
    if (data.containsKey('audiourlGTE')) {
      final l$audiourlGTE = data['audiourlGTE'];
      result$data['audiourlGTE'] = (l$audiourlGTE as String?);
    }
    if (data.containsKey('audiourlLT')) {
      final l$audiourlLT = data['audiourlLT'];
      result$data['audiourlLT'] = (l$audiourlLT as String?);
    }
    if (data.containsKey('audiourlLTE')) {
      final l$audiourlLTE = data['audiourlLTE'];
      result$data['audiourlLTE'] = (l$audiourlLTE as String?);
    }
    if (data.containsKey('audiourlContains')) {
      final l$audiourlContains = data['audiourlContains'];
      result$data['audiourlContains'] = (l$audiourlContains as String?);
    }
    if (data.containsKey('audiourlHasPrefix')) {
      final l$audiourlHasPrefix = data['audiourlHasPrefix'];
      result$data['audiourlHasPrefix'] = (l$audiourlHasPrefix as String?);
    }
    if (data.containsKey('audiourlHasSuffix')) {
      final l$audiourlHasSuffix = data['audiourlHasSuffix'];
      result$data['audiourlHasSuffix'] = (l$audiourlHasSuffix as String?);
    }
    if (data.containsKey('audiourlEqualFold')) {
      final l$audiourlEqualFold = data['audiourlEqualFold'];
      result$data['audiourlEqualFold'] = (l$audiourlEqualFold as String?);
    }
    if (data.containsKey('audiourlContainsFold')) {
      final l$audiourlContainsFold = data['audiourlContainsFold'];
      result$data['audiourlContainsFold'] = (l$audiourlContainsFold as String?);
    }
    if (data.containsKey('duration')) {
      final l$duration = data['duration'];
      result$data['duration'] = (l$duration as int?);
    }
    if (data.containsKey('durationNEQ')) {
      final l$durationNEQ = data['durationNEQ'];
      result$data['durationNEQ'] = (l$durationNEQ as int?);
    }
    if (data.containsKey('durationIn')) {
      final l$durationIn = data['durationIn'];
      result$data['durationIn'] =
          (l$durationIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('durationNotIn')) {
      final l$durationNotIn = data['durationNotIn'];
      result$data['durationNotIn'] =
          (l$durationNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('durationGT')) {
      final l$durationGT = data['durationGT'];
      result$data['durationGT'] = (l$durationGT as int?);
    }
    if (data.containsKey('durationGTE')) {
      final l$durationGTE = data['durationGTE'];
      result$data['durationGTE'] = (l$durationGTE as int?);
    }
    if (data.containsKey('durationLT')) {
      final l$durationLT = data['durationLT'];
      result$data['durationLT'] = (l$durationLT as int?);
    }
    if (data.containsKey('durationLTE')) {
      final l$durationLTE = data['durationLTE'];
      result$data['durationLTE'] = (l$durationLTE as int?);
    }
    if (data.containsKey('hasLesson')) {
      final l$hasLesson = data['hasLesson'];
      result$data['hasLesson'] = (l$hasLesson as bool?);
    }
    if (data.containsKey('hasLessonWith')) {
      final l$hasLessonWith = data['hasLessonWith'];
      result$data['hasLessonWith'] = (l$hasLessonWith as List<dynamic>?)
          ?.map((e) =>
              Input$LessonWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    return Input$LessonAudioWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$LessonAudioWhereInput? get not =>
      (_$data['not'] as Input$LessonAudioWhereInput?);

  List<Input$LessonAudioWhereInput>? get and =>
      (_$data['and'] as List<Input$LessonAudioWhereInput>?);

  List<Input$LessonAudioWhereInput>? get or =>
      (_$data['or'] as List<Input$LessonAudioWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  String? get lessonID => (_$data['lessonID'] as String?);

  String? get lessonIDNEQ => (_$data['lessonIDNEQ'] as String?);

  List<String>? get lessonIDIn => (_$data['lessonIDIn'] as List<String>?);

  List<String>? get lessonIDNotIn => (_$data['lessonIDNotIn'] as List<String>?);

  String? get audiourl => (_$data['audiourl'] as String?);

  String? get audiourlNEQ => (_$data['audiourlNEQ'] as String?);

  List<String>? get audiourlIn => (_$data['audiourlIn'] as List<String>?);

  List<String>? get audiourlNotIn => (_$data['audiourlNotIn'] as List<String>?);

  String? get audiourlGT => (_$data['audiourlGT'] as String?);

  String? get audiourlGTE => (_$data['audiourlGTE'] as String?);

  String? get audiourlLT => (_$data['audiourlLT'] as String?);

  String? get audiourlLTE => (_$data['audiourlLTE'] as String?);

  String? get audiourlContains => (_$data['audiourlContains'] as String?);

  String? get audiourlHasPrefix => (_$data['audiourlHasPrefix'] as String?);

  String? get audiourlHasSuffix => (_$data['audiourlHasSuffix'] as String?);

  String? get audiourlEqualFold => (_$data['audiourlEqualFold'] as String?);

  String? get audiourlContainsFold =>
      (_$data['audiourlContainsFold'] as String?);

  int? get duration => (_$data['duration'] as int?);

  int? get durationNEQ => (_$data['durationNEQ'] as int?);

  List<int>? get durationIn => (_$data['durationIn'] as List<int>?);

  List<int>? get durationNotIn => (_$data['durationNotIn'] as List<int>?);

  int? get durationGT => (_$data['durationGT'] as int?);

  int? get durationGTE => (_$data['durationGTE'] as int?);

  int? get durationLT => (_$data['durationLT'] as int?);

  int? get durationLTE => (_$data['durationLTE'] as int?);

  bool? get hasLesson => (_$data['hasLesson'] as bool?);

  List<Input$LessonWhereInput>? get hasLessonWith =>
      (_$data['hasLessonWith'] as List<Input$LessonWhereInput>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('lessonID')) {
      final l$lessonID = lessonID;
      result$data['lessonID'] = l$lessonID;
    }
    if (_$data.containsKey('lessonIDNEQ')) {
      final l$lessonIDNEQ = lessonIDNEQ;
      result$data['lessonIDNEQ'] = l$lessonIDNEQ;
    }
    if (_$data.containsKey('lessonIDIn')) {
      final l$lessonIDIn = lessonIDIn;
      result$data['lessonIDIn'] = l$lessonIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('lessonIDNotIn')) {
      final l$lessonIDNotIn = lessonIDNotIn;
      result$data['lessonIDNotIn'] = l$lessonIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('audiourl')) {
      final l$audiourl = audiourl;
      result$data['audiourl'] = l$audiourl;
    }
    if (_$data.containsKey('audiourlNEQ')) {
      final l$audiourlNEQ = audiourlNEQ;
      result$data['audiourlNEQ'] = l$audiourlNEQ;
    }
    if (_$data.containsKey('audiourlIn')) {
      final l$audiourlIn = audiourlIn;
      result$data['audiourlIn'] = l$audiourlIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('audiourlNotIn')) {
      final l$audiourlNotIn = audiourlNotIn;
      result$data['audiourlNotIn'] = l$audiourlNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('audiourlGT')) {
      final l$audiourlGT = audiourlGT;
      result$data['audiourlGT'] = l$audiourlGT;
    }
    if (_$data.containsKey('audiourlGTE')) {
      final l$audiourlGTE = audiourlGTE;
      result$data['audiourlGTE'] = l$audiourlGTE;
    }
    if (_$data.containsKey('audiourlLT')) {
      final l$audiourlLT = audiourlLT;
      result$data['audiourlLT'] = l$audiourlLT;
    }
    if (_$data.containsKey('audiourlLTE')) {
      final l$audiourlLTE = audiourlLTE;
      result$data['audiourlLTE'] = l$audiourlLTE;
    }
    if (_$data.containsKey('audiourlContains')) {
      final l$audiourlContains = audiourlContains;
      result$data['audiourlContains'] = l$audiourlContains;
    }
    if (_$data.containsKey('audiourlHasPrefix')) {
      final l$audiourlHasPrefix = audiourlHasPrefix;
      result$data['audiourlHasPrefix'] = l$audiourlHasPrefix;
    }
    if (_$data.containsKey('audiourlHasSuffix')) {
      final l$audiourlHasSuffix = audiourlHasSuffix;
      result$data['audiourlHasSuffix'] = l$audiourlHasSuffix;
    }
    if (_$data.containsKey('audiourlEqualFold')) {
      final l$audiourlEqualFold = audiourlEqualFold;
      result$data['audiourlEqualFold'] = l$audiourlEqualFold;
    }
    if (_$data.containsKey('audiourlContainsFold')) {
      final l$audiourlContainsFold = audiourlContainsFold;
      result$data['audiourlContainsFold'] = l$audiourlContainsFold;
    }
    if (_$data.containsKey('duration')) {
      final l$duration = duration;
      result$data['duration'] = l$duration;
    }
    if (_$data.containsKey('durationNEQ')) {
      final l$durationNEQ = durationNEQ;
      result$data['durationNEQ'] = l$durationNEQ;
    }
    if (_$data.containsKey('durationIn')) {
      final l$durationIn = durationIn;
      result$data['durationIn'] = l$durationIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('durationNotIn')) {
      final l$durationNotIn = durationNotIn;
      result$data['durationNotIn'] = l$durationNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('durationGT')) {
      final l$durationGT = durationGT;
      result$data['durationGT'] = l$durationGT;
    }
    if (_$data.containsKey('durationGTE')) {
      final l$durationGTE = durationGTE;
      result$data['durationGTE'] = l$durationGTE;
    }
    if (_$data.containsKey('durationLT')) {
      final l$durationLT = durationLT;
      result$data['durationLT'] = l$durationLT;
    }
    if (_$data.containsKey('durationLTE')) {
      final l$durationLTE = durationLTE;
      result$data['durationLTE'] = l$durationLTE;
    }
    if (_$data.containsKey('hasLesson')) {
      final l$hasLesson = hasLesson;
      result$data['hasLesson'] = l$hasLesson;
    }
    if (_$data.containsKey('hasLessonWith')) {
      final l$hasLessonWith = hasLessonWith;
      result$data['hasLessonWith'] =
          l$hasLessonWith?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$LessonAudioWhereInput<Input$LessonAudioWhereInput>
      get copyWith => CopyWith$Input$LessonAudioWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$LessonAudioWhereInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$lessonID = lessonID;
    final lOther$lessonID = other.lessonID;
    if (_$data.containsKey('lessonID') !=
        other._$data.containsKey('lessonID')) {
      return false;
    }
    if (l$lessonID != lOther$lessonID) {
      return false;
    }
    final l$lessonIDNEQ = lessonIDNEQ;
    final lOther$lessonIDNEQ = other.lessonIDNEQ;
    if (_$data.containsKey('lessonIDNEQ') !=
        other._$data.containsKey('lessonIDNEQ')) {
      return false;
    }
    if (l$lessonIDNEQ != lOther$lessonIDNEQ) {
      return false;
    }
    final l$lessonIDIn = lessonIDIn;
    final lOther$lessonIDIn = other.lessonIDIn;
    if (_$data.containsKey('lessonIDIn') !=
        other._$data.containsKey('lessonIDIn')) {
      return false;
    }
    if (l$lessonIDIn != null && lOther$lessonIDIn != null) {
      if (l$lessonIDIn.length != lOther$lessonIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$lessonIDIn.length; i++) {
        final l$lessonIDIn$entry = l$lessonIDIn[i];
        final lOther$lessonIDIn$entry = lOther$lessonIDIn[i];
        if (l$lessonIDIn$entry != lOther$lessonIDIn$entry) {
          return false;
        }
      }
    } else if (l$lessonIDIn != lOther$lessonIDIn) {
      return false;
    }
    final l$lessonIDNotIn = lessonIDNotIn;
    final lOther$lessonIDNotIn = other.lessonIDNotIn;
    if (_$data.containsKey('lessonIDNotIn') !=
        other._$data.containsKey('lessonIDNotIn')) {
      return false;
    }
    if (l$lessonIDNotIn != null && lOther$lessonIDNotIn != null) {
      if (l$lessonIDNotIn.length != lOther$lessonIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$lessonIDNotIn.length; i++) {
        final l$lessonIDNotIn$entry = l$lessonIDNotIn[i];
        final lOther$lessonIDNotIn$entry = lOther$lessonIDNotIn[i];
        if (l$lessonIDNotIn$entry != lOther$lessonIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$lessonIDNotIn != lOther$lessonIDNotIn) {
      return false;
    }
    final l$audiourl = audiourl;
    final lOther$audiourl = other.audiourl;
    if (_$data.containsKey('audiourl') !=
        other._$data.containsKey('audiourl')) {
      return false;
    }
    if (l$audiourl != lOther$audiourl) {
      return false;
    }
    final l$audiourlNEQ = audiourlNEQ;
    final lOther$audiourlNEQ = other.audiourlNEQ;
    if (_$data.containsKey('audiourlNEQ') !=
        other._$data.containsKey('audiourlNEQ')) {
      return false;
    }
    if (l$audiourlNEQ != lOther$audiourlNEQ) {
      return false;
    }
    final l$audiourlIn = audiourlIn;
    final lOther$audiourlIn = other.audiourlIn;
    if (_$data.containsKey('audiourlIn') !=
        other._$data.containsKey('audiourlIn')) {
      return false;
    }
    if (l$audiourlIn != null && lOther$audiourlIn != null) {
      if (l$audiourlIn.length != lOther$audiourlIn.length) {
        return false;
      }
      for (int i = 0; i < l$audiourlIn.length; i++) {
        final l$audiourlIn$entry = l$audiourlIn[i];
        final lOther$audiourlIn$entry = lOther$audiourlIn[i];
        if (l$audiourlIn$entry != lOther$audiourlIn$entry) {
          return false;
        }
      }
    } else if (l$audiourlIn != lOther$audiourlIn) {
      return false;
    }
    final l$audiourlNotIn = audiourlNotIn;
    final lOther$audiourlNotIn = other.audiourlNotIn;
    if (_$data.containsKey('audiourlNotIn') !=
        other._$data.containsKey('audiourlNotIn')) {
      return false;
    }
    if (l$audiourlNotIn != null && lOther$audiourlNotIn != null) {
      if (l$audiourlNotIn.length != lOther$audiourlNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$audiourlNotIn.length; i++) {
        final l$audiourlNotIn$entry = l$audiourlNotIn[i];
        final lOther$audiourlNotIn$entry = lOther$audiourlNotIn[i];
        if (l$audiourlNotIn$entry != lOther$audiourlNotIn$entry) {
          return false;
        }
      }
    } else if (l$audiourlNotIn != lOther$audiourlNotIn) {
      return false;
    }
    final l$audiourlGT = audiourlGT;
    final lOther$audiourlGT = other.audiourlGT;
    if (_$data.containsKey('audiourlGT') !=
        other._$data.containsKey('audiourlGT')) {
      return false;
    }
    if (l$audiourlGT != lOther$audiourlGT) {
      return false;
    }
    final l$audiourlGTE = audiourlGTE;
    final lOther$audiourlGTE = other.audiourlGTE;
    if (_$data.containsKey('audiourlGTE') !=
        other._$data.containsKey('audiourlGTE')) {
      return false;
    }
    if (l$audiourlGTE != lOther$audiourlGTE) {
      return false;
    }
    final l$audiourlLT = audiourlLT;
    final lOther$audiourlLT = other.audiourlLT;
    if (_$data.containsKey('audiourlLT') !=
        other._$data.containsKey('audiourlLT')) {
      return false;
    }
    if (l$audiourlLT != lOther$audiourlLT) {
      return false;
    }
    final l$audiourlLTE = audiourlLTE;
    final lOther$audiourlLTE = other.audiourlLTE;
    if (_$data.containsKey('audiourlLTE') !=
        other._$data.containsKey('audiourlLTE')) {
      return false;
    }
    if (l$audiourlLTE != lOther$audiourlLTE) {
      return false;
    }
    final l$audiourlContains = audiourlContains;
    final lOther$audiourlContains = other.audiourlContains;
    if (_$data.containsKey('audiourlContains') !=
        other._$data.containsKey('audiourlContains')) {
      return false;
    }
    if (l$audiourlContains != lOther$audiourlContains) {
      return false;
    }
    final l$audiourlHasPrefix = audiourlHasPrefix;
    final lOther$audiourlHasPrefix = other.audiourlHasPrefix;
    if (_$data.containsKey('audiourlHasPrefix') !=
        other._$data.containsKey('audiourlHasPrefix')) {
      return false;
    }
    if (l$audiourlHasPrefix != lOther$audiourlHasPrefix) {
      return false;
    }
    final l$audiourlHasSuffix = audiourlHasSuffix;
    final lOther$audiourlHasSuffix = other.audiourlHasSuffix;
    if (_$data.containsKey('audiourlHasSuffix') !=
        other._$data.containsKey('audiourlHasSuffix')) {
      return false;
    }
    if (l$audiourlHasSuffix != lOther$audiourlHasSuffix) {
      return false;
    }
    final l$audiourlEqualFold = audiourlEqualFold;
    final lOther$audiourlEqualFold = other.audiourlEqualFold;
    if (_$data.containsKey('audiourlEqualFold') !=
        other._$data.containsKey('audiourlEqualFold')) {
      return false;
    }
    if (l$audiourlEqualFold != lOther$audiourlEqualFold) {
      return false;
    }
    final l$audiourlContainsFold = audiourlContainsFold;
    final lOther$audiourlContainsFold = other.audiourlContainsFold;
    if (_$data.containsKey('audiourlContainsFold') !=
        other._$data.containsKey('audiourlContainsFold')) {
      return false;
    }
    if (l$audiourlContainsFold != lOther$audiourlContainsFold) {
      return false;
    }
    final l$duration = duration;
    final lOther$duration = other.duration;
    if (_$data.containsKey('duration') !=
        other._$data.containsKey('duration')) {
      return false;
    }
    if (l$duration != lOther$duration) {
      return false;
    }
    final l$durationNEQ = durationNEQ;
    final lOther$durationNEQ = other.durationNEQ;
    if (_$data.containsKey('durationNEQ') !=
        other._$data.containsKey('durationNEQ')) {
      return false;
    }
    if (l$durationNEQ != lOther$durationNEQ) {
      return false;
    }
    final l$durationIn = durationIn;
    final lOther$durationIn = other.durationIn;
    if (_$data.containsKey('durationIn') !=
        other._$data.containsKey('durationIn')) {
      return false;
    }
    if (l$durationIn != null && lOther$durationIn != null) {
      if (l$durationIn.length != lOther$durationIn.length) {
        return false;
      }
      for (int i = 0; i < l$durationIn.length; i++) {
        final l$durationIn$entry = l$durationIn[i];
        final lOther$durationIn$entry = lOther$durationIn[i];
        if (l$durationIn$entry != lOther$durationIn$entry) {
          return false;
        }
      }
    } else if (l$durationIn != lOther$durationIn) {
      return false;
    }
    final l$durationNotIn = durationNotIn;
    final lOther$durationNotIn = other.durationNotIn;
    if (_$data.containsKey('durationNotIn') !=
        other._$data.containsKey('durationNotIn')) {
      return false;
    }
    if (l$durationNotIn != null && lOther$durationNotIn != null) {
      if (l$durationNotIn.length != lOther$durationNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$durationNotIn.length; i++) {
        final l$durationNotIn$entry = l$durationNotIn[i];
        final lOther$durationNotIn$entry = lOther$durationNotIn[i];
        if (l$durationNotIn$entry != lOther$durationNotIn$entry) {
          return false;
        }
      }
    } else if (l$durationNotIn != lOther$durationNotIn) {
      return false;
    }
    final l$durationGT = durationGT;
    final lOther$durationGT = other.durationGT;
    if (_$data.containsKey('durationGT') !=
        other._$data.containsKey('durationGT')) {
      return false;
    }
    if (l$durationGT != lOther$durationGT) {
      return false;
    }
    final l$durationGTE = durationGTE;
    final lOther$durationGTE = other.durationGTE;
    if (_$data.containsKey('durationGTE') !=
        other._$data.containsKey('durationGTE')) {
      return false;
    }
    if (l$durationGTE != lOther$durationGTE) {
      return false;
    }
    final l$durationLT = durationLT;
    final lOther$durationLT = other.durationLT;
    if (_$data.containsKey('durationLT') !=
        other._$data.containsKey('durationLT')) {
      return false;
    }
    if (l$durationLT != lOther$durationLT) {
      return false;
    }
    final l$durationLTE = durationLTE;
    final lOther$durationLTE = other.durationLTE;
    if (_$data.containsKey('durationLTE') !=
        other._$data.containsKey('durationLTE')) {
      return false;
    }
    if (l$durationLTE != lOther$durationLTE) {
      return false;
    }
    final l$hasLesson = hasLesson;
    final lOther$hasLesson = other.hasLesson;
    if (_$data.containsKey('hasLesson') !=
        other._$data.containsKey('hasLesson')) {
      return false;
    }
    if (l$hasLesson != lOther$hasLesson) {
      return false;
    }
    final l$hasLessonWith = hasLessonWith;
    final lOther$hasLessonWith = other.hasLessonWith;
    if (_$data.containsKey('hasLessonWith') !=
        other._$data.containsKey('hasLessonWith')) {
      return false;
    }
    if (l$hasLessonWith != null && lOther$hasLessonWith != null) {
      if (l$hasLessonWith.length != lOther$hasLessonWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasLessonWith.length; i++) {
        final l$hasLessonWith$entry = l$hasLessonWith[i];
        final lOther$hasLessonWith$entry = lOther$hasLessonWith[i];
        if (l$hasLessonWith$entry != lOther$hasLessonWith$entry) {
          return false;
        }
      }
    } else if (l$hasLessonWith != lOther$hasLessonWith) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$lessonID = lessonID;
    final l$lessonIDNEQ = lessonIDNEQ;
    final l$lessonIDIn = lessonIDIn;
    final l$lessonIDNotIn = lessonIDNotIn;
    final l$audiourl = audiourl;
    final l$audiourlNEQ = audiourlNEQ;
    final l$audiourlIn = audiourlIn;
    final l$audiourlNotIn = audiourlNotIn;
    final l$audiourlGT = audiourlGT;
    final l$audiourlGTE = audiourlGTE;
    final l$audiourlLT = audiourlLT;
    final l$audiourlLTE = audiourlLTE;
    final l$audiourlContains = audiourlContains;
    final l$audiourlHasPrefix = audiourlHasPrefix;
    final l$audiourlHasSuffix = audiourlHasSuffix;
    final l$audiourlEqualFold = audiourlEqualFold;
    final l$audiourlContainsFold = audiourlContainsFold;
    final l$duration = duration;
    final l$durationNEQ = durationNEQ;
    final l$durationIn = durationIn;
    final l$durationNotIn = durationNotIn;
    final l$durationGT = durationGT;
    final l$durationGTE = durationGTE;
    final l$durationLT = durationLT;
    final l$durationLTE = durationLTE;
    final l$hasLesson = hasLesson;
    final l$hasLessonWith = hasLessonWith;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('lessonID') ? l$lessonID : const {},
      _$data.containsKey('lessonIDNEQ') ? l$lessonIDNEQ : const {},
      _$data.containsKey('lessonIDIn')
          ? l$lessonIDIn == null
              ? null
              : Object.hashAll(l$lessonIDIn.map((v) => v))
          : const {},
      _$data.containsKey('lessonIDNotIn')
          ? l$lessonIDNotIn == null
              ? null
              : Object.hashAll(l$lessonIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('audiourl') ? l$audiourl : const {},
      _$data.containsKey('audiourlNEQ') ? l$audiourlNEQ : const {},
      _$data.containsKey('audiourlIn')
          ? l$audiourlIn == null
              ? null
              : Object.hashAll(l$audiourlIn.map((v) => v))
          : const {},
      _$data.containsKey('audiourlNotIn')
          ? l$audiourlNotIn == null
              ? null
              : Object.hashAll(l$audiourlNotIn.map((v) => v))
          : const {},
      _$data.containsKey('audiourlGT') ? l$audiourlGT : const {},
      _$data.containsKey('audiourlGTE') ? l$audiourlGTE : const {},
      _$data.containsKey('audiourlLT') ? l$audiourlLT : const {},
      _$data.containsKey('audiourlLTE') ? l$audiourlLTE : const {},
      _$data.containsKey('audiourlContains') ? l$audiourlContains : const {},
      _$data.containsKey('audiourlHasPrefix') ? l$audiourlHasPrefix : const {},
      _$data.containsKey('audiourlHasSuffix') ? l$audiourlHasSuffix : const {},
      _$data.containsKey('audiourlEqualFold') ? l$audiourlEqualFold : const {},
      _$data.containsKey('audiourlContainsFold')
          ? l$audiourlContainsFold
          : const {},
      _$data.containsKey('duration') ? l$duration : const {},
      _$data.containsKey('durationNEQ') ? l$durationNEQ : const {},
      _$data.containsKey('durationIn')
          ? l$durationIn == null
              ? null
              : Object.hashAll(l$durationIn.map((v) => v))
          : const {},
      _$data.containsKey('durationNotIn')
          ? l$durationNotIn == null
              ? null
              : Object.hashAll(l$durationNotIn.map((v) => v))
          : const {},
      _$data.containsKey('durationGT') ? l$durationGT : const {},
      _$data.containsKey('durationGTE') ? l$durationGTE : const {},
      _$data.containsKey('durationLT') ? l$durationLT : const {},
      _$data.containsKey('durationLTE') ? l$durationLTE : const {},
      _$data.containsKey('hasLesson') ? l$hasLesson : const {},
      _$data.containsKey('hasLessonWith')
          ? l$hasLessonWith == null
              ? null
              : Object.hashAll(l$hasLessonWith.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$LessonAudioWhereInput<TRes> {
  factory CopyWith$Input$LessonAudioWhereInput(
    Input$LessonAudioWhereInput instance,
    TRes Function(Input$LessonAudioWhereInput) then,
  ) = _CopyWithImpl$Input$LessonAudioWhereInput;

  factory CopyWith$Input$LessonAudioWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$LessonAudioWhereInput;

  TRes call({
    Input$LessonAudioWhereInput? not,
    List<Input$LessonAudioWhereInput>? and,
    List<Input$LessonAudioWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? lessonID,
    String? lessonIDNEQ,
    List<String>? lessonIDIn,
    List<String>? lessonIDNotIn,
    String? audiourl,
    String? audiourlNEQ,
    List<String>? audiourlIn,
    List<String>? audiourlNotIn,
    String? audiourlGT,
    String? audiourlGTE,
    String? audiourlLT,
    String? audiourlLTE,
    String? audiourlContains,
    String? audiourlHasPrefix,
    String? audiourlHasSuffix,
    String? audiourlEqualFold,
    String? audiourlContainsFold,
    int? duration,
    int? durationNEQ,
    List<int>? durationIn,
    List<int>? durationNotIn,
    int? durationGT,
    int? durationGTE,
    int? durationLT,
    int? durationLTE,
    bool? hasLesson,
    List<Input$LessonWhereInput>? hasLessonWith,
  });
  CopyWith$Input$LessonAudioWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$LessonAudioWhereInput>? Function(
              Iterable<
                  CopyWith$Input$LessonAudioWhereInput<
                      Input$LessonAudioWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$LessonAudioWhereInput>? Function(
              Iterable<
                  CopyWith$Input$LessonAudioWhereInput<
                      Input$LessonAudioWhereInput>>?)
          _fn);
  TRes hasLessonWith(
      Iterable<Input$LessonWhereInput>? Function(
              Iterable<
                  CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$LessonAudioWhereInput<TRes>
    implements CopyWith$Input$LessonAudioWhereInput<TRes> {
  _CopyWithImpl$Input$LessonAudioWhereInput(
    this._instance,
    this._then,
  );

  final Input$LessonAudioWhereInput _instance;

  final TRes Function(Input$LessonAudioWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? lessonID = _undefined,
    Object? lessonIDNEQ = _undefined,
    Object? lessonIDIn = _undefined,
    Object? lessonIDNotIn = _undefined,
    Object? audiourl = _undefined,
    Object? audiourlNEQ = _undefined,
    Object? audiourlIn = _undefined,
    Object? audiourlNotIn = _undefined,
    Object? audiourlGT = _undefined,
    Object? audiourlGTE = _undefined,
    Object? audiourlLT = _undefined,
    Object? audiourlLTE = _undefined,
    Object? audiourlContains = _undefined,
    Object? audiourlHasPrefix = _undefined,
    Object? audiourlHasSuffix = _undefined,
    Object? audiourlEqualFold = _undefined,
    Object? audiourlContainsFold = _undefined,
    Object? duration = _undefined,
    Object? durationNEQ = _undefined,
    Object? durationIn = _undefined,
    Object? durationNotIn = _undefined,
    Object? durationGT = _undefined,
    Object? durationGTE = _undefined,
    Object? durationLT = _undefined,
    Object? durationLTE = _undefined,
    Object? hasLesson = _undefined,
    Object? hasLessonWith = _undefined,
  }) =>
      _then(Input$LessonAudioWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$LessonAudioWhereInput?),
        if (and != _undefined)
          'and': (and as List<Input$LessonAudioWhereInput>?),
        if (or != _undefined) 'or': (or as List<Input$LessonAudioWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (lessonID != _undefined) 'lessonID': (lessonID as String?),
        if (lessonIDNEQ != _undefined) 'lessonIDNEQ': (lessonIDNEQ as String?),
        if (lessonIDIn != _undefined)
          'lessonIDIn': (lessonIDIn as List<String>?),
        if (lessonIDNotIn != _undefined)
          'lessonIDNotIn': (lessonIDNotIn as List<String>?),
        if (audiourl != _undefined) 'audiourl': (audiourl as String?),
        if (audiourlNEQ != _undefined) 'audiourlNEQ': (audiourlNEQ as String?),
        if (audiourlIn != _undefined)
          'audiourlIn': (audiourlIn as List<String>?),
        if (audiourlNotIn != _undefined)
          'audiourlNotIn': (audiourlNotIn as List<String>?),
        if (audiourlGT != _undefined) 'audiourlGT': (audiourlGT as String?),
        if (audiourlGTE != _undefined) 'audiourlGTE': (audiourlGTE as String?),
        if (audiourlLT != _undefined) 'audiourlLT': (audiourlLT as String?),
        if (audiourlLTE != _undefined) 'audiourlLTE': (audiourlLTE as String?),
        if (audiourlContains != _undefined)
          'audiourlContains': (audiourlContains as String?),
        if (audiourlHasPrefix != _undefined)
          'audiourlHasPrefix': (audiourlHasPrefix as String?),
        if (audiourlHasSuffix != _undefined)
          'audiourlHasSuffix': (audiourlHasSuffix as String?),
        if (audiourlEqualFold != _undefined)
          'audiourlEqualFold': (audiourlEqualFold as String?),
        if (audiourlContainsFold != _undefined)
          'audiourlContainsFold': (audiourlContainsFold as String?),
        if (duration != _undefined) 'duration': (duration as int?),
        if (durationNEQ != _undefined) 'durationNEQ': (durationNEQ as int?),
        if (durationIn != _undefined) 'durationIn': (durationIn as List<int>?),
        if (durationNotIn != _undefined)
          'durationNotIn': (durationNotIn as List<int>?),
        if (durationGT != _undefined) 'durationGT': (durationGT as int?),
        if (durationGTE != _undefined) 'durationGTE': (durationGTE as int?),
        if (durationLT != _undefined) 'durationLT': (durationLT as int?),
        if (durationLTE != _undefined) 'durationLTE': (durationLTE as int?),
        if (hasLesson != _undefined) 'hasLesson': (hasLesson as bool?),
        if (hasLessonWith != _undefined)
          'hasLessonWith': (hasLessonWith as List<Input$LessonWhereInput>?),
      }));

  CopyWith$Input$LessonAudioWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$LessonAudioWhereInput.stub(_then(_instance))
        : CopyWith$Input$LessonAudioWhereInput(local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$LessonAudioWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$LessonAudioWhereInput<
                          Input$LessonAudioWhereInput>>?)
              _fn) =>
      call(
          and: _fn(
              _instance.and?.map((e) => CopyWith$Input$LessonAudioWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes or(
          Iterable<Input$LessonAudioWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$LessonAudioWhereInput<
                          Input$LessonAudioWhereInput>>?)
              _fn) =>
      call(
          or: _fn(_instance.or?.map((e) => CopyWith$Input$LessonAudioWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes hasLessonWith(
          Iterable<Input$LessonWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
              _fn) =>
      call(
          hasLessonWith: _fn(_instance.hasLessonWith
              ?.map((e) => CopyWith$Input$LessonWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$LessonAudioWhereInput<TRes>
    implements CopyWith$Input$LessonAudioWhereInput<TRes> {
  _CopyWithStubImpl$Input$LessonAudioWhereInput(this._res);

  TRes _res;

  call({
    Input$LessonAudioWhereInput? not,
    List<Input$LessonAudioWhereInput>? and,
    List<Input$LessonAudioWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? lessonID,
    String? lessonIDNEQ,
    List<String>? lessonIDIn,
    List<String>? lessonIDNotIn,
    String? audiourl,
    String? audiourlNEQ,
    List<String>? audiourlIn,
    List<String>? audiourlNotIn,
    String? audiourlGT,
    String? audiourlGTE,
    String? audiourlLT,
    String? audiourlLTE,
    String? audiourlContains,
    String? audiourlHasPrefix,
    String? audiourlHasSuffix,
    String? audiourlEqualFold,
    String? audiourlContainsFold,
    int? duration,
    int? durationNEQ,
    List<int>? durationIn,
    List<int>? durationNotIn,
    int? durationGT,
    int? durationGTE,
    int? durationLT,
    int? durationLTE,
    bool? hasLesson,
    List<Input$LessonWhereInput>? hasLessonWith,
  }) =>
      _res;

  CopyWith$Input$LessonAudioWhereInput<TRes> get not =>
      CopyWith$Input$LessonAudioWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;

  hasLessonWith(_fn) => _res;
}

class Input$LessonOrder {
  factory Input$LessonOrder({
    Enum$OrderDirection? direction,
    required Enum$LessonOrderField field,
  }) =>
      Input$LessonOrder._({
        if (direction != null) r'direction': direction,
        r'field': field,
      });

  Input$LessonOrder._(this._$data);

  factory Input$LessonOrder.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('direction')) {
      final l$direction = data['direction'];
      result$data['direction'] =
          fromJson$Enum$OrderDirection((l$direction as String));
    }
    final l$field = data['field'];
    result$data['field'] = fromJson$Enum$LessonOrderField((l$field as String));
    return Input$LessonOrder._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderDirection? get direction =>
      (_$data['direction'] as Enum$OrderDirection?);

  Enum$LessonOrderField get field => (_$data['field'] as Enum$LessonOrderField);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('direction')) {
      final l$direction = direction;
      result$data['direction'] =
          toJson$Enum$OrderDirection((l$direction as Enum$OrderDirection));
    }
    final l$field = field;
    result$data['field'] = toJson$Enum$LessonOrderField(l$field);
    return result$data;
  }

  CopyWith$Input$LessonOrder<Input$LessonOrder> get copyWith =>
      CopyWith$Input$LessonOrder(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$LessonOrder) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$direction = direction;
    final lOther$direction = other.direction;
    if (_$data.containsKey('direction') !=
        other._$data.containsKey('direction')) {
      return false;
    }
    if (l$direction != lOther$direction) {
      return false;
    }
    final l$field = field;
    final lOther$field = other.field;
    if (l$field != lOther$field) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$direction = direction;
    final l$field = field;
    return Object.hashAll([
      _$data.containsKey('direction') ? l$direction : const {},
      l$field,
    ]);
  }
}

abstract class CopyWith$Input$LessonOrder<TRes> {
  factory CopyWith$Input$LessonOrder(
    Input$LessonOrder instance,
    TRes Function(Input$LessonOrder) then,
  ) = _CopyWithImpl$Input$LessonOrder;

  factory CopyWith$Input$LessonOrder.stub(TRes res) =
      _CopyWithStubImpl$Input$LessonOrder;

  TRes call({
    Enum$OrderDirection? direction,
    Enum$LessonOrderField? field,
  });
}

class _CopyWithImpl$Input$LessonOrder<TRes>
    implements CopyWith$Input$LessonOrder<TRes> {
  _CopyWithImpl$Input$LessonOrder(
    this._instance,
    this._then,
  );

  final Input$LessonOrder _instance;

  final TRes Function(Input$LessonOrder) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? direction = _undefined,
    Object? field = _undefined,
  }) =>
      _then(Input$LessonOrder._({
        ..._instance._$data,
        if (direction != _undefined && direction != null)
          'direction': (direction as Enum$OrderDirection),
        if (field != _undefined && field != null)
          'field': (field as Enum$LessonOrderField),
      }));
}

class _CopyWithStubImpl$Input$LessonOrder<TRes>
    implements CopyWith$Input$LessonOrder<TRes> {
  _CopyWithStubImpl$Input$LessonOrder(this._res);

  TRes _res;

  call({
    Enum$OrderDirection? direction,
    Enum$LessonOrderField? field,
  }) =>
      _res;
}

class Input$LessonWhereInput {
  factory Input$LessonWhereInput({
    Input$LessonWhereInput? not,
    List<Input$LessonWhereInput>? and,
    List<Input$LessonWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? unitID,
    String? unitIDNEQ,
    List<String>? unitIDIn,
    List<String>? unitIDNotIn,
    Enum$LessonLessonType? type,
    Enum$LessonLessonType? typeNEQ,
    List<Enum$LessonLessonType>? typeIn,
    List<Enum$LessonLessonType>? typeNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasUnit,
    List<Input$UnitWhereInput>? hasUnitWith,
  }) =>
      Input$LessonWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (unitID != null) r'unitID': unitID,
        if (unitIDNEQ != null) r'unitIDNEQ': unitIDNEQ,
        if (unitIDIn != null) r'unitIDIn': unitIDIn,
        if (unitIDNotIn != null) r'unitIDNotIn': unitIDNotIn,
        if (type != null) r'type': type,
        if (typeNEQ != null) r'typeNEQ': typeNEQ,
        if (typeIn != null) r'typeIn': typeIn,
        if (typeNotIn != null) r'typeNotIn': typeNotIn,
        if (iconimage != null) r'iconimage': iconimage,
        if (iconimageNEQ != null) r'iconimageNEQ': iconimageNEQ,
        if (iconimageIn != null) r'iconimageIn': iconimageIn,
        if (iconimageNotIn != null) r'iconimageNotIn': iconimageNotIn,
        if (iconimageGT != null) r'iconimageGT': iconimageGT,
        if (iconimageGTE != null) r'iconimageGTE': iconimageGTE,
        if (iconimageLT != null) r'iconimageLT': iconimageLT,
        if (iconimageLTE != null) r'iconimageLTE': iconimageLTE,
        if (iconimageContains != null) r'iconimageContains': iconimageContains,
        if (iconimageHasPrefix != null)
          r'iconimageHasPrefix': iconimageHasPrefix,
        if (iconimageHasSuffix != null)
          r'iconimageHasSuffix': iconimageHasSuffix,
        if (iconimageEqualFold != null)
          r'iconimageEqualFold': iconimageEqualFold,
        if (iconimageContainsFold != null)
          r'iconimageContainsFold': iconimageContainsFold,
        if (coverimage != null) r'coverimage': coverimage,
        if (coverimageNEQ != null) r'coverimageNEQ': coverimageNEQ,
        if (coverimageIn != null) r'coverimageIn': coverimageIn,
        if (coverimageNotIn != null) r'coverimageNotIn': coverimageNotIn,
        if (coverimageGT != null) r'coverimageGT': coverimageGT,
        if (coverimageGTE != null) r'coverimageGTE': coverimageGTE,
        if (coverimageLT != null) r'coverimageLT': coverimageLT,
        if (coverimageLTE != null) r'coverimageLTE': coverimageLTE,
        if (coverimageContains != null)
          r'coverimageContains': coverimageContains,
        if (coverimageHasPrefix != null)
          r'coverimageHasPrefix': coverimageHasPrefix,
        if (coverimageHasSuffix != null)
          r'coverimageHasSuffix': coverimageHasSuffix,
        if (coverimageEqualFold != null)
          r'coverimageEqualFold': coverimageEqualFold,
        if (coverimageContainsFold != null)
          r'coverimageContainsFold': coverimageContainsFold,
        if (title != null) r'title': title,
        if (titleNEQ != null) r'titleNEQ': titleNEQ,
        if (titleIn != null) r'titleIn': titleIn,
        if (titleNotIn != null) r'titleNotIn': titleNotIn,
        if (titleGT != null) r'titleGT': titleGT,
        if (titleGTE != null) r'titleGTE': titleGTE,
        if (titleLT != null) r'titleLT': titleLT,
        if (titleLTE != null) r'titleLTE': titleLTE,
        if (titleContains != null) r'titleContains': titleContains,
        if (titleHasPrefix != null) r'titleHasPrefix': titleHasPrefix,
        if (titleHasSuffix != null) r'titleHasSuffix': titleHasSuffix,
        if (titleEqualFold != null) r'titleEqualFold': titleEqualFold,
        if (titleContainsFold != null) r'titleContainsFold': titleContainsFold,
        if (description != null) r'description': description,
        if (descriptionNEQ != null) r'descriptionNEQ': descriptionNEQ,
        if (descriptionIn != null) r'descriptionIn': descriptionIn,
        if (descriptionNotIn != null) r'descriptionNotIn': descriptionNotIn,
        if (descriptionGT != null) r'descriptionGT': descriptionGT,
        if (descriptionGTE != null) r'descriptionGTE': descriptionGTE,
        if (descriptionLT != null) r'descriptionLT': descriptionLT,
        if (descriptionLTE != null) r'descriptionLTE': descriptionLTE,
        if (descriptionContains != null)
          r'descriptionContains': descriptionContains,
        if (descriptionHasPrefix != null)
          r'descriptionHasPrefix': descriptionHasPrefix,
        if (descriptionHasSuffix != null)
          r'descriptionHasSuffix': descriptionHasSuffix,
        if (descriptionEqualFold != null)
          r'descriptionEqualFold': descriptionEqualFold,
        if (descriptionContainsFold != null)
          r'descriptionContainsFold': descriptionContainsFold,
        if (order != null) r'order': order,
        if (orderNEQ != null) r'orderNEQ': orderNEQ,
        if (orderIn != null) r'orderIn': orderIn,
        if (orderNotIn != null) r'orderNotIn': orderNotIn,
        if (orderGT != null) r'orderGT': orderGT,
        if (orderGTE != null) r'orderGTE': orderGTE,
        if (orderLT != null) r'orderLT': orderLT,
        if (orderLTE != null) r'orderLTE': orderLTE,
        if (hasUnit != null) r'hasUnit': hasUnit,
        if (hasUnitWith != null) r'hasUnitWith': hasUnitWith,
      });

  Input$LessonWhereInput._(this._$data);

  factory Input$LessonWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$LessonWhereInput.fromJson((l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map((e) =>
              Input$LessonWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map((e) =>
              Input$LessonWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('unitID')) {
      final l$unitID = data['unitID'];
      result$data['unitID'] = (l$unitID as String?);
    }
    if (data.containsKey('unitIDNEQ')) {
      final l$unitIDNEQ = data['unitIDNEQ'];
      result$data['unitIDNEQ'] = (l$unitIDNEQ as String?);
    }
    if (data.containsKey('unitIDIn')) {
      final l$unitIDIn = data['unitIDIn'];
      result$data['unitIDIn'] =
          (l$unitIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('unitIDNotIn')) {
      final l$unitIDNotIn = data['unitIDNotIn'];
      result$data['unitIDNotIn'] =
          (l$unitIDNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = l$type == null
          ? null
          : fromJson$Enum$LessonLessonType((l$type as String));
    }
    if (data.containsKey('typeNEQ')) {
      final l$typeNEQ = data['typeNEQ'];
      result$data['typeNEQ'] = l$typeNEQ == null
          ? null
          : fromJson$Enum$LessonLessonType((l$typeNEQ as String));
    }
    if (data.containsKey('typeIn')) {
      final l$typeIn = data['typeIn'];
      result$data['typeIn'] = (l$typeIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$LessonLessonType((e as String)))
          .toList();
    }
    if (data.containsKey('typeNotIn')) {
      final l$typeNotIn = data['typeNotIn'];
      result$data['typeNotIn'] = (l$typeNotIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$LessonLessonType((e as String)))
          .toList();
    }
    if (data.containsKey('iconimage')) {
      final l$iconimage = data['iconimage'];
      result$data['iconimage'] = (l$iconimage as String?);
    }
    if (data.containsKey('iconimageNEQ')) {
      final l$iconimageNEQ = data['iconimageNEQ'];
      result$data['iconimageNEQ'] = (l$iconimageNEQ as String?);
    }
    if (data.containsKey('iconimageIn')) {
      final l$iconimageIn = data['iconimageIn'];
      result$data['iconimageIn'] =
          (l$iconimageIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('iconimageNotIn')) {
      final l$iconimageNotIn = data['iconimageNotIn'];
      result$data['iconimageNotIn'] = (l$iconimageNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('iconimageGT')) {
      final l$iconimageGT = data['iconimageGT'];
      result$data['iconimageGT'] = (l$iconimageGT as String?);
    }
    if (data.containsKey('iconimageGTE')) {
      final l$iconimageGTE = data['iconimageGTE'];
      result$data['iconimageGTE'] = (l$iconimageGTE as String?);
    }
    if (data.containsKey('iconimageLT')) {
      final l$iconimageLT = data['iconimageLT'];
      result$data['iconimageLT'] = (l$iconimageLT as String?);
    }
    if (data.containsKey('iconimageLTE')) {
      final l$iconimageLTE = data['iconimageLTE'];
      result$data['iconimageLTE'] = (l$iconimageLTE as String?);
    }
    if (data.containsKey('iconimageContains')) {
      final l$iconimageContains = data['iconimageContains'];
      result$data['iconimageContains'] = (l$iconimageContains as String?);
    }
    if (data.containsKey('iconimageHasPrefix')) {
      final l$iconimageHasPrefix = data['iconimageHasPrefix'];
      result$data['iconimageHasPrefix'] = (l$iconimageHasPrefix as String?);
    }
    if (data.containsKey('iconimageHasSuffix')) {
      final l$iconimageHasSuffix = data['iconimageHasSuffix'];
      result$data['iconimageHasSuffix'] = (l$iconimageHasSuffix as String?);
    }
    if (data.containsKey('iconimageEqualFold')) {
      final l$iconimageEqualFold = data['iconimageEqualFold'];
      result$data['iconimageEqualFold'] = (l$iconimageEqualFold as String?);
    }
    if (data.containsKey('iconimageContainsFold')) {
      final l$iconimageContainsFold = data['iconimageContainsFold'];
      result$data['iconimageContainsFold'] =
          (l$iconimageContainsFold as String?);
    }
    if (data.containsKey('coverimage')) {
      final l$coverimage = data['coverimage'];
      result$data['coverimage'] = (l$coverimage as String?);
    }
    if (data.containsKey('coverimageNEQ')) {
      final l$coverimageNEQ = data['coverimageNEQ'];
      result$data['coverimageNEQ'] = (l$coverimageNEQ as String?);
    }
    if (data.containsKey('coverimageIn')) {
      final l$coverimageIn = data['coverimageIn'];
      result$data['coverimageIn'] = (l$coverimageIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('coverimageNotIn')) {
      final l$coverimageNotIn = data['coverimageNotIn'];
      result$data['coverimageNotIn'] = (l$coverimageNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('coverimageGT')) {
      final l$coverimageGT = data['coverimageGT'];
      result$data['coverimageGT'] = (l$coverimageGT as String?);
    }
    if (data.containsKey('coverimageGTE')) {
      final l$coverimageGTE = data['coverimageGTE'];
      result$data['coverimageGTE'] = (l$coverimageGTE as String?);
    }
    if (data.containsKey('coverimageLT')) {
      final l$coverimageLT = data['coverimageLT'];
      result$data['coverimageLT'] = (l$coverimageLT as String?);
    }
    if (data.containsKey('coverimageLTE')) {
      final l$coverimageLTE = data['coverimageLTE'];
      result$data['coverimageLTE'] = (l$coverimageLTE as String?);
    }
    if (data.containsKey('coverimageContains')) {
      final l$coverimageContains = data['coverimageContains'];
      result$data['coverimageContains'] = (l$coverimageContains as String?);
    }
    if (data.containsKey('coverimageHasPrefix')) {
      final l$coverimageHasPrefix = data['coverimageHasPrefix'];
      result$data['coverimageHasPrefix'] = (l$coverimageHasPrefix as String?);
    }
    if (data.containsKey('coverimageHasSuffix')) {
      final l$coverimageHasSuffix = data['coverimageHasSuffix'];
      result$data['coverimageHasSuffix'] = (l$coverimageHasSuffix as String?);
    }
    if (data.containsKey('coverimageEqualFold')) {
      final l$coverimageEqualFold = data['coverimageEqualFold'];
      result$data['coverimageEqualFold'] = (l$coverimageEqualFold as String?);
    }
    if (data.containsKey('coverimageContainsFold')) {
      final l$coverimageContainsFold = data['coverimageContainsFold'];
      result$data['coverimageContainsFold'] =
          (l$coverimageContainsFold as String?);
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] = (l$title as String?);
    }
    if (data.containsKey('titleNEQ')) {
      final l$titleNEQ = data['titleNEQ'];
      result$data['titleNEQ'] = (l$titleNEQ as String?);
    }
    if (data.containsKey('titleIn')) {
      final l$titleIn = data['titleIn'];
      result$data['titleIn'] =
          (l$titleIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleNotIn')) {
      final l$titleNotIn = data['titleNotIn'];
      result$data['titleNotIn'] =
          (l$titleNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleGT')) {
      final l$titleGT = data['titleGT'];
      result$data['titleGT'] = (l$titleGT as String?);
    }
    if (data.containsKey('titleGTE')) {
      final l$titleGTE = data['titleGTE'];
      result$data['titleGTE'] = (l$titleGTE as String?);
    }
    if (data.containsKey('titleLT')) {
      final l$titleLT = data['titleLT'];
      result$data['titleLT'] = (l$titleLT as String?);
    }
    if (data.containsKey('titleLTE')) {
      final l$titleLTE = data['titleLTE'];
      result$data['titleLTE'] = (l$titleLTE as String?);
    }
    if (data.containsKey('titleContains')) {
      final l$titleContains = data['titleContains'];
      result$data['titleContains'] = (l$titleContains as String?);
    }
    if (data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = data['titleHasPrefix'];
      result$data['titleHasPrefix'] = (l$titleHasPrefix as String?);
    }
    if (data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = data['titleHasSuffix'];
      result$data['titleHasSuffix'] = (l$titleHasSuffix as String?);
    }
    if (data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = data['titleEqualFold'];
      result$data['titleEqualFold'] = (l$titleEqualFold as String?);
    }
    if (data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = data['titleContainsFold'];
      result$data['titleContainsFold'] = (l$titleContainsFold as String?);
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = (l$description as String?);
    }
    if (data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = data['descriptionNEQ'];
      result$data['descriptionNEQ'] = (l$descriptionNEQ as String?);
    }
    if (data.containsKey('descriptionIn')) {
      final l$descriptionIn = data['descriptionIn'];
      result$data['descriptionIn'] = (l$descriptionIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = data['descriptionNotIn'];
      result$data['descriptionNotIn'] = (l$descriptionNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionGT')) {
      final l$descriptionGT = data['descriptionGT'];
      result$data['descriptionGT'] = (l$descriptionGT as String?);
    }
    if (data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = data['descriptionGTE'];
      result$data['descriptionGTE'] = (l$descriptionGTE as String?);
    }
    if (data.containsKey('descriptionLT')) {
      final l$descriptionLT = data['descriptionLT'];
      result$data['descriptionLT'] = (l$descriptionLT as String?);
    }
    if (data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = data['descriptionLTE'];
      result$data['descriptionLTE'] = (l$descriptionLTE as String?);
    }
    if (data.containsKey('descriptionContains')) {
      final l$descriptionContains = data['descriptionContains'];
      result$data['descriptionContains'] = (l$descriptionContains as String?);
    }
    if (data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = data['descriptionHasPrefix'];
      result$data['descriptionHasPrefix'] = (l$descriptionHasPrefix as String?);
    }
    if (data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = data['descriptionHasSuffix'];
      result$data['descriptionHasSuffix'] = (l$descriptionHasSuffix as String?);
    }
    if (data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = data['descriptionEqualFold'];
      result$data['descriptionEqualFold'] = (l$descriptionEqualFold as String?);
    }
    if (data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = data['descriptionContainsFold'];
      result$data['descriptionContainsFold'] =
          (l$descriptionContainsFold as String?);
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = (l$order as int?);
    }
    if (data.containsKey('orderNEQ')) {
      final l$orderNEQ = data['orderNEQ'];
      result$data['orderNEQ'] = (l$orderNEQ as int?);
    }
    if (data.containsKey('orderIn')) {
      final l$orderIn = data['orderIn'];
      result$data['orderIn'] =
          (l$orderIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderNotIn')) {
      final l$orderNotIn = data['orderNotIn'];
      result$data['orderNotIn'] =
          (l$orderNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderGT')) {
      final l$orderGT = data['orderGT'];
      result$data['orderGT'] = (l$orderGT as int?);
    }
    if (data.containsKey('orderGTE')) {
      final l$orderGTE = data['orderGTE'];
      result$data['orderGTE'] = (l$orderGTE as int?);
    }
    if (data.containsKey('orderLT')) {
      final l$orderLT = data['orderLT'];
      result$data['orderLT'] = (l$orderLT as int?);
    }
    if (data.containsKey('orderLTE')) {
      final l$orderLTE = data['orderLTE'];
      result$data['orderLTE'] = (l$orderLTE as int?);
    }
    if (data.containsKey('hasUnit')) {
      final l$hasUnit = data['hasUnit'];
      result$data['hasUnit'] = (l$hasUnit as bool?);
    }
    if (data.containsKey('hasUnitWith')) {
      final l$hasUnitWith = data['hasUnitWith'];
      result$data['hasUnitWith'] = (l$hasUnitWith as List<dynamic>?)
          ?.map(
              (e) => Input$UnitWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    return Input$LessonWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$LessonWhereInput? get not => (_$data['not'] as Input$LessonWhereInput?);

  List<Input$LessonWhereInput>? get and =>
      (_$data['and'] as List<Input$LessonWhereInput>?);

  List<Input$LessonWhereInput>? get or =>
      (_$data['or'] as List<Input$LessonWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  String? get unitID => (_$data['unitID'] as String?);

  String? get unitIDNEQ => (_$data['unitIDNEQ'] as String?);

  List<String>? get unitIDIn => (_$data['unitIDIn'] as List<String>?);

  List<String>? get unitIDNotIn => (_$data['unitIDNotIn'] as List<String>?);

  Enum$LessonLessonType? get type => (_$data['type'] as Enum$LessonLessonType?);

  Enum$LessonLessonType? get typeNEQ =>
      (_$data['typeNEQ'] as Enum$LessonLessonType?);

  List<Enum$LessonLessonType>? get typeIn =>
      (_$data['typeIn'] as List<Enum$LessonLessonType>?);

  List<Enum$LessonLessonType>? get typeNotIn =>
      (_$data['typeNotIn'] as List<Enum$LessonLessonType>?);

  String? get iconimage => (_$data['iconimage'] as String?);

  String? get iconimageNEQ => (_$data['iconimageNEQ'] as String?);

  List<String>? get iconimageIn => (_$data['iconimageIn'] as List<String>?);

  List<String>? get iconimageNotIn =>
      (_$data['iconimageNotIn'] as List<String>?);

  String? get iconimageGT => (_$data['iconimageGT'] as String?);

  String? get iconimageGTE => (_$data['iconimageGTE'] as String?);

  String? get iconimageLT => (_$data['iconimageLT'] as String?);

  String? get iconimageLTE => (_$data['iconimageLTE'] as String?);

  String? get iconimageContains => (_$data['iconimageContains'] as String?);

  String? get iconimageHasPrefix => (_$data['iconimageHasPrefix'] as String?);

  String? get iconimageHasSuffix => (_$data['iconimageHasSuffix'] as String?);

  String? get iconimageEqualFold => (_$data['iconimageEqualFold'] as String?);

  String? get iconimageContainsFold =>
      (_$data['iconimageContainsFold'] as String?);

  String? get coverimage => (_$data['coverimage'] as String?);

  String? get coverimageNEQ => (_$data['coverimageNEQ'] as String?);

  List<String>? get coverimageIn => (_$data['coverimageIn'] as List<String>?);

  List<String>? get coverimageNotIn =>
      (_$data['coverimageNotIn'] as List<String>?);

  String? get coverimageGT => (_$data['coverimageGT'] as String?);

  String? get coverimageGTE => (_$data['coverimageGTE'] as String?);

  String? get coverimageLT => (_$data['coverimageLT'] as String?);

  String? get coverimageLTE => (_$data['coverimageLTE'] as String?);

  String? get coverimageContains => (_$data['coverimageContains'] as String?);

  String? get coverimageHasPrefix => (_$data['coverimageHasPrefix'] as String?);

  String? get coverimageHasSuffix => (_$data['coverimageHasSuffix'] as String?);

  String? get coverimageEqualFold => (_$data['coverimageEqualFold'] as String?);

  String? get coverimageContainsFold =>
      (_$data['coverimageContainsFold'] as String?);

  String? get title => (_$data['title'] as String?);

  String? get titleNEQ => (_$data['titleNEQ'] as String?);

  List<String>? get titleIn => (_$data['titleIn'] as List<String>?);

  List<String>? get titleNotIn => (_$data['titleNotIn'] as List<String>?);

  String? get titleGT => (_$data['titleGT'] as String?);

  String? get titleGTE => (_$data['titleGTE'] as String?);

  String? get titleLT => (_$data['titleLT'] as String?);

  String? get titleLTE => (_$data['titleLTE'] as String?);

  String? get titleContains => (_$data['titleContains'] as String?);

  String? get titleHasPrefix => (_$data['titleHasPrefix'] as String?);

  String? get titleHasSuffix => (_$data['titleHasSuffix'] as String?);

  String? get titleEqualFold => (_$data['titleEqualFold'] as String?);

  String? get titleContainsFold => (_$data['titleContainsFold'] as String?);

  String? get description => (_$data['description'] as String?);

  String? get descriptionNEQ => (_$data['descriptionNEQ'] as String?);

  List<String>? get descriptionIn => (_$data['descriptionIn'] as List<String>?);

  List<String>? get descriptionNotIn =>
      (_$data['descriptionNotIn'] as List<String>?);

  String? get descriptionGT => (_$data['descriptionGT'] as String?);

  String? get descriptionGTE => (_$data['descriptionGTE'] as String?);

  String? get descriptionLT => (_$data['descriptionLT'] as String?);

  String? get descriptionLTE => (_$data['descriptionLTE'] as String?);

  String? get descriptionContains => (_$data['descriptionContains'] as String?);

  String? get descriptionHasPrefix =>
      (_$data['descriptionHasPrefix'] as String?);

  String? get descriptionHasSuffix =>
      (_$data['descriptionHasSuffix'] as String?);

  String? get descriptionEqualFold =>
      (_$data['descriptionEqualFold'] as String?);

  String? get descriptionContainsFold =>
      (_$data['descriptionContainsFold'] as String?);

  int? get order => (_$data['order'] as int?);

  int? get orderNEQ => (_$data['orderNEQ'] as int?);

  List<int>? get orderIn => (_$data['orderIn'] as List<int>?);

  List<int>? get orderNotIn => (_$data['orderNotIn'] as List<int>?);

  int? get orderGT => (_$data['orderGT'] as int?);

  int? get orderGTE => (_$data['orderGTE'] as int?);

  int? get orderLT => (_$data['orderLT'] as int?);

  int? get orderLTE => (_$data['orderLTE'] as int?);

  bool? get hasUnit => (_$data['hasUnit'] as bool?);

  List<Input$UnitWhereInput>? get hasUnitWith =>
      (_$data['hasUnitWith'] as List<Input$UnitWhereInput>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('unitID')) {
      final l$unitID = unitID;
      result$data['unitID'] = l$unitID;
    }
    if (_$data.containsKey('unitIDNEQ')) {
      final l$unitIDNEQ = unitIDNEQ;
      result$data['unitIDNEQ'] = l$unitIDNEQ;
    }
    if (_$data.containsKey('unitIDIn')) {
      final l$unitIDIn = unitIDIn;
      result$data['unitIDIn'] = l$unitIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('unitIDNotIn')) {
      final l$unitIDNotIn = unitIDNotIn;
      result$data['unitIDNotIn'] = l$unitIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] =
          l$type == null ? null : toJson$Enum$LessonLessonType(l$type);
    }
    if (_$data.containsKey('typeNEQ')) {
      final l$typeNEQ = typeNEQ;
      result$data['typeNEQ'] =
          l$typeNEQ == null ? null : toJson$Enum$LessonLessonType(l$typeNEQ);
    }
    if (_$data.containsKey('typeIn')) {
      final l$typeIn = typeIn;
      result$data['typeIn'] =
          l$typeIn?.map((e) => toJson$Enum$LessonLessonType(e)).toList();
    }
    if (_$data.containsKey('typeNotIn')) {
      final l$typeNotIn = typeNotIn;
      result$data['typeNotIn'] =
          l$typeNotIn?.map((e) => toJson$Enum$LessonLessonType(e)).toList();
    }
    if (_$data.containsKey('iconimage')) {
      final l$iconimage = iconimage;
      result$data['iconimage'] = l$iconimage;
    }
    if (_$data.containsKey('iconimageNEQ')) {
      final l$iconimageNEQ = iconimageNEQ;
      result$data['iconimageNEQ'] = l$iconimageNEQ;
    }
    if (_$data.containsKey('iconimageIn')) {
      final l$iconimageIn = iconimageIn;
      result$data['iconimageIn'] = l$iconimageIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimageNotIn')) {
      final l$iconimageNotIn = iconimageNotIn;
      result$data['iconimageNotIn'] = l$iconimageNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimageGT')) {
      final l$iconimageGT = iconimageGT;
      result$data['iconimageGT'] = l$iconimageGT;
    }
    if (_$data.containsKey('iconimageGTE')) {
      final l$iconimageGTE = iconimageGTE;
      result$data['iconimageGTE'] = l$iconimageGTE;
    }
    if (_$data.containsKey('iconimageLT')) {
      final l$iconimageLT = iconimageLT;
      result$data['iconimageLT'] = l$iconimageLT;
    }
    if (_$data.containsKey('iconimageLTE')) {
      final l$iconimageLTE = iconimageLTE;
      result$data['iconimageLTE'] = l$iconimageLTE;
    }
    if (_$data.containsKey('iconimageContains')) {
      final l$iconimageContains = iconimageContains;
      result$data['iconimageContains'] = l$iconimageContains;
    }
    if (_$data.containsKey('iconimageHasPrefix')) {
      final l$iconimageHasPrefix = iconimageHasPrefix;
      result$data['iconimageHasPrefix'] = l$iconimageHasPrefix;
    }
    if (_$data.containsKey('iconimageHasSuffix')) {
      final l$iconimageHasSuffix = iconimageHasSuffix;
      result$data['iconimageHasSuffix'] = l$iconimageHasSuffix;
    }
    if (_$data.containsKey('iconimageEqualFold')) {
      final l$iconimageEqualFold = iconimageEqualFold;
      result$data['iconimageEqualFold'] = l$iconimageEqualFold;
    }
    if (_$data.containsKey('iconimageContainsFold')) {
      final l$iconimageContainsFold = iconimageContainsFold;
      result$data['iconimageContainsFold'] = l$iconimageContainsFold;
    }
    if (_$data.containsKey('coverimage')) {
      final l$coverimage = coverimage;
      result$data['coverimage'] = l$coverimage;
    }
    if (_$data.containsKey('coverimageNEQ')) {
      final l$coverimageNEQ = coverimageNEQ;
      result$data['coverimageNEQ'] = l$coverimageNEQ;
    }
    if (_$data.containsKey('coverimageIn')) {
      final l$coverimageIn = coverimageIn;
      result$data['coverimageIn'] = l$coverimageIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('coverimageNotIn')) {
      final l$coverimageNotIn = coverimageNotIn;
      result$data['coverimageNotIn'] =
          l$coverimageNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('coverimageGT')) {
      final l$coverimageGT = coverimageGT;
      result$data['coverimageGT'] = l$coverimageGT;
    }
    if (_$data.containsKey('coverimageGTE')) {
      final l$coverimageGTE = coverimageGTE;
      result$data['coverimageGTE'] = l$coverimageGTE;
    }
    if (_$data.containsKey('coverimageLT')) {
      final l$coverimageLT = coverimageLT;
      result$data['coverimageLT'] = l$coverimageLT;
    }
    if (_$data.containsKey('coverimageLTE')) {
      final l$coverimageLTE = coverimageLTE;
      result$data['coverimageLTE'] = l$coverimageLTE;
    }
    if (_$data.containsKey('coverimageContains')) {
      final l$coverimageContains = coverimageContains;
      result$data['coverimageContains'] = l$coverimageContains;
    }
    if (_$data.containsKey('coverimageHasPrefix')) {
      final l$coverimageHasPrefix = coverimageHasPrefix;
      result$data['coverimageHasPrefix'] = l$coverimageHasPrefix;
    }
    if (_$data.containsKey('coverimageHasSuffix')) {
      final l$coverimageHasSuffix = coverimageHasSuffix;
      result$data['coverimageHasSuffix'] = l$coverimageHasSuffix;
    }
    if (_$data.containsKey('coverimageEqualFold')) {
      final l$coverimageEqualFold = coverimageEqualFold;
      result$data['coverimageEqualFold'] = l$coverimageEqualFold;
    }
    if (_$data.containsKey('coverimageContainsFold')) {
      final l$coverimageContainsFold = coverimageContainsFold;
      result$data['coverimageContainsFold'] = l$coverimageContainsFold;
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] = l$title;
    }
    if (_$data.containsKey('titleNEQ')) {
      final l$titleNEQ = titleNEQ;
      result$data['titleNEQ'] = l$titleNEQ;
    }
    if (_$data.containsKey('titleIn')) {
      final l$titleIn = titleIn;
      result$data['titleIn'] = l$titleIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleNotIn')) {
      final l$titleNotIn = titleNotIn;
      result$data['titleNotIn'] = l$titleNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleGT')) {
      final l$titleGT = titleGT;
      result$data['titleGT'] = l$titleGT;
    }
    if (_$data.containsKey('titleGTE')) {
      final l$titleGTE = titleGTE;
      result$data['titleGTE'] = l$titleGTE;
    }
    if (_$data.containsKey('titleLT')) {
      final l$titleLT = titleLT;
      result$data['titleLT'] = l$titleLT;
    }
    if (_$data.containsKey('titleLTE')) {
      final l$titleLTE = titleLTE;
      result$data['titleLTE'] = l$titleLTE;
    }
    if (_$data.containsKey('titleContains')) {
      final l$titleContains = titleContains;
      result$data['titleContains'] = l$titleContains;
    }
    if (_$data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = titleHasPrefix;
      result$data['titleHasPrefix'] = l$titleHasPrefix;
    }
    if (_$data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = titleHasSuffix;
      result$data['titleHasSuffix'] = l$titleHasSuffix;
    }
    if (_$data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = titleEqualFold;
      result$data['titleEqualFold'] = l$titleEqualFold;
    }
    if (_$data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = titleContainsFold;
      result$data['titleContainsFold'] = l$titleContainsFold;
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] = l$description;
    }
    if (_$data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = descriptionNEQ;
      result$data['descriptionNEQ'] = l$descriptionNEQ;
    }
    if (_$data.containsKey('descriptionIn')) {
      final l$descriptionIn = descriptionIn;
      result$data['descriptionIn'] = l$descriptionIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = descriptionNotIn;
      result$data['descriptionNotIn'] =
          l$descriptionNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionGT')) {
      final l$descriptionGT = descriptionGT;
      result$data['descriptionGT'] = l$descriptionGT;
    }
    if (_$data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = descriptionGTE;
      result$data['descriptionGTE'] = l$descriptionGTE;
    }
    if (_$data.containsKey('descriptionLT')) {
      final l$descriptionLT = descriptionLT;
      result$data['descriptionLT'] = l$descriptionLT;
    }
    if (_$data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = descriptionLTE;
      result$data['descriptionLTE'] = l$descriptionLTE;
    }
    if (_$data.containsKey('descriptionContains')) {
      final l$descriptionContains = descriptionContains;
      result$data['descriptionContains'] = l$descriptionContains;
    }
    if (_$data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = descriptionHasPrefix;
      result$data['descriptionHasPrefix'] = l$descriptionHasPrefix;
    }
    if (_$data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = descriptionHasSuffix;
      result$data['descriptionHasSuffix'] = l$descriptionHasSuffix;
    }
    if (_$data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = descriptionEqualFold;
      result$data['descriptionEqualFold'] = l$descriptionEqualFold;
    }
    if (_$data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = descriptionContainsFold;
      result$data['descriptionContainsFold'] = l$descriptionContainsFold;
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order;
    }
    if (_$data.containsKey('orderNEQ')) {
      final l$orderNEQ = orderNEQ;
      result$data['orderNEQ'] = l$orderNEQ;
    }
    if (_$data.containsKey('orderIn')) {
      final l$orderIn = orderIn;
      result$data['orderIn'] = l$orderIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderNotIn')) {
      final l$orderNotIn = orderNotIn;
      result$data['orderNotIn'] = l$orderNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderGT')) {
      final l$orderGT = orderGT;
      result$data['orderGT'] = l$orderGT;
    }
    if (_$data.containsKey('orderGTE')) {
      final l$orderGTE = orderGTE;
      result$data['orderGTE'] = l$orderGTE;
    }
    if (_$data.containsKey('orderLT')) {
      final l$orderLT = orderLT;
      result$data['orderLT'] = l$orderLT;
    }
    if (_$data.containsKey('orderLTE')) {
      final l$orderLTE = orderLTE;
      result$data['orderLTE'] = l$orderLTE;
    }
    if (_$data.containsKey('hasUnit')) {
      final l$hasUnit = hasUnit;
      result$data['hasUnit'] = l$hasUnit;
    }
    if (_$data.containsKey('hasUnitWith')) {
      final l$hasUnitWith = hasUnitWith;
      result$data['hasUnitWith'] =
          l$hasUnitWith?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$LessonWhereInput<Input$LessonWhereInput> get copyWith =>
      CopyWith$Input$LessonWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$LessonWhereInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$unitID = unitID;
    final lOther$unitID = other.unitID;
    if (_$data.containsKey('unitID') != other._$data.containsKey('unitID')) {
      return false;
    }
    if (l$unitID != lOther$unitID) {
      return false;
    }
    final l$unitIDNEQ = unitIDNEQ;
    final lOther$unitIDNEQ = other.unitIDNEQ;
    if (_$data.containsKey('unitIDNEQ') !=
        other._$data.containsKey('unitIDNEQ')) {
      return false;
    }
    if (l$unitIDNEQ != lOther$unitIDNEQ) {
      return false;
    }
    final l$unitIDIn = unitIDIn;
    final lOther$unitIDIn = other.unitIDIn;
    if (_$data.containsKey('unitIDIn') !=
        other._$data.containsKey('unitIDIn')) {
      return false;
    }
    if (l$unitIDIn != null && lOther$unitIDIn != null) {
      if (l$unitIDIn.length != lOther$unitIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$unitIDIn.length; i++) {
        final l$unitIDIn$entry = l$unitIDIn[i];
        final lOther$unitIDIn$entry = lOther$unitIDIn[i];
        if (l$unitIDIn$entry != lOther$unitIDIn$entry) {
          return false;
        }
      }
    } else if (l$unitIDIn != lOther$unitIDIn) {
      return false;
    }
    final l$unitIDNotIn = unitIDNotIn;
    final lOther$unitIDNotIn = other.unitIDNotIn;
    if (_$data.containsKey('unitIDNotIn') !=
        other._$data.containsKey('unitIDNotIn')) {
      return false;
    }
    if (l$unitIDNotIn != null && lOther$unitIDNotIn != null) {
      if (l$unitIDNotIn.length != lOther$unitIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$unitIDNotIn.length; i++) {
        final l$unitIDNotIn$entry = l$unitIDNotIn[i];
        final lOther$unitIDNotIn$entry = lOther$unitIDNotIn[i];
        if (l$unitIDNotIn$entry != lOther$unitIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$unitIDNotIn != lOther$unitIDNotIn) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$typeNEQ = typeNEQ;
    final lOther$typeNEQ = other.typeNEQ;
    if (_$data.containsKey('typeNEQ') != other._$data.containsKey('typeNEQ')) {
      return false;
    }
    if (l$typeNEQ != lOther$typeNEQ) {
      return false;
    }
    final l$typeIn = typeIn;
    final lOther$typeIn = other.typeIn;
    if (_$data.containsKey('typeIn') != other._$data.containsKey('typeIn')) {
      return false;
    }
    if (l$typeIn != null && lOther$typeIn != null) {
      if (l$typeIn.length != lOther$typeIn.length) {
        return false;
      }
      for (int i = 0; i < l$typeIn.length; i++) {
        final l$typeIn$entry = l$typeIn[i];
        final lOther$typeIn$entry = lOther$typeIn[i];
        if (l$typeIn$entry != lOther$typeIn$entry) {
          return false;
        }
      }
    } else if (l$typeIn != lOther$typeIn) {
      return false;
    }
    final l$typeNotIn = typeNotIn;
    final lOther$typeNotIn = other.typeNotIn;
    if (_$data.containsKey('typeNotIn') !=
        other._$data.containsKey('typeNotIn')) {
      return false;
    }
    if (l$typeNotIn != null && lOther$typeNotIn != null) {
      if (l$typeNotIn.length != lOther$typeNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$typeNotIn.length; i++) {
        final l$typeNotIn$entry = l$typeNotIn[i];
        final lOther$typeNotIn$entry = lOther$typeNotIn[i];
        if (l$typeNotIn$entry != lOther$typeNotIn$entry) {
          return false;
        }
      }
    } else if (l$typeNotIn != lOther$typeNotIn) {
      return false;
    }
    final l$iconimage = iconimage;
    final lOther$iconimage = other.iconimage;
    if (_$data.containsKey('iconimage') !=
        other._$data.containsKey('iconimage')) {
      return false;
    }
    if (l$iconimage != lOther$iconimage) {
      return false;
    }
    final l$iconimageNEQ = iconimageNEQ;
    final lOther$iconimageNEQ = other.iconimageNEQ;
    if (_$data.containsKey('iconimageNEQ') !=
        other._$data.containsKey('iconimageNEQ')) {
      return false;
    }
    if (l$iconimageNEQ != lOther$iconimageNEQ) {
      return false;
    }
    final l$iconimageIn = iconimageIn;
    final lOther$iconimageIn = other.iconimageIn;
    if (_$data.containsKey('iconimageIn') !=
        other._$data.containsKey('iconimageIn')) {
      return false;
    }
    if (l$iconimageIn != null && lOther$iconimageIn != null) {
      if (l$iconimageIn.length != lOther$iconimageIn.length) {
        return false;
      }
      for (int i = 0; i < l$iconimageIn.length; i++) {
        final l$iconimageIn$entry = l$iconimageIn[i];
        final lOther$iconimageIn$entry = lOther$iconimageIn[i];
        if (l$iconimageIn$entry != lOther$iconimageIn$entry) {
          return false;
        }
      }
    } else if (l$iconimageIn != lOther$iconimageIn) {
      return false;
    }
    final l$iconimageNotIn = iconimageNotIn;
    final lOther$iconimageNotIn = other.iconimageNotIn;
    if (_$data.containsKey('iconimageNotIn') !=
        other._$data.containsKey('iconimageNotIn')) {
      return false;
    }
    if (l$iconimageNotIn != null && lOther$iconimageNotIn != null) {
      if (l$iconimageNotIn.length != lOther$iconimageNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$iconimageNotIn.length; i++) {
        final l$iconimageNotIn$entry = l$iconimageNotIn[i];
        final lOther$iconimageNotIn$entry = lOther$iconimageNotIn[i];
        if (l$iconimageNotIn$entry != lOther$iconimageNotIn$entry) {
          return false;
        }
      }
    } else if (l$iconimageNotIn != lOther$iconimageNotIn) {
      return false;
    }
    final l$iconimageGT = iconimageGT;
    final lOther$iconimageGT = other.iconimageGT;
    if (_$data.containsKey('iconimageGT') !=
        other._$data.containsKey('iconimageGT')) {
      return false;
    }
    if (l$iconimageGT != lOther$iconimageGT) {
      return false;
    }
    final l$iconimageGTE = iconimageGTE;
    final lOther$iconimageGTE = other.iconimageGTE;
    if (_$data.containsKey('iconimageGTE') !=
        other._$data.containsKey('iconimageGTE')) {
      return false;
    }
    if (l$iconimageGTE != lOther$iconimageGTE) {
      return false;
    }
    final l$iconimageLT = iconimageLT;
    final lOther$iconimageLT = other.iconimageLT;
    if (_$data.containsKey('iconimageLT') !=
        other._$data.containsKey('iconimageLT')) {
      return false;
    }
    if (l$iconimageLT != lOther$iconimageLT) {
      return false;
    }
    final l$iconimageLTE = iconimageLTE;
    final lOther$iconimageLTE = other.iconimageLTE;
    if (_$data.containsKey('iconimageLTE') !=
        other._$data.containsKey('iconimageLTE')) {
      return false;
    }
    if (l$iconimageLTE != lOther$iconimageLTE) {
      return false;
    }
    final l$iconimageContains = iconimageContains;
    final lOther$iconimageContains = other.iconimageContains;
    if (_$data.containsKey('iconimageContains') !=
        other._$data.containsKey('iconimageContains')) {
      return false;
    }
    if (l$iconimageContains != lOther$iconimageContains) {
      return false;
    }
    final l$iconimageHasPrefix = iconimageHasPrefix;
    final lOther$iconimageHasPrefix = other.iconimageHasPrefix;
    if (_$data.containsKey('iconimageHasPrefix') !=
        other._$data.containsKey('iconimageHasPrefix')) {
      return false;
    }
    if (l$iconimageHasPrefix != lOther$iconimageHasPrefix) {
      return false;
    }
    final l$iconimageHasSuffix = iconimageHasSuffix;
    final lOther$iconimageHasSuffix = other.iconimageHasSuffix;
    if (_$data.containsKey('iconimageHasSuffix') !=
        other._$data.containsKey('iconimageHasSuffix')) {
      return false;
    }
    if (l$iconimageHasSuffix != lOther$iconimageHasSuffix) {
      return false;
    }
    final l$iconimageEqualFold = iconimageEqualFold;
    final lOther$iconimageEqualFold = other.iconimageEqualFold;
    if (_$data.containsKey('iconimageEqualFold') !=
        other._$data.containsKey('iconimageEqualFold')) {
      return false;
    }
    if (l$iconimageEqualFold != lOther$iconimageEqualFold) {
      return false;
    }
    final l$iconimageContainsFold = iconimageContainsFold;
    final lOther$iconimageContainsFold = other.iconimageContainsFold;
    if (_$data.containsKey('iconimageContainsFold') !=
        other._$data.containsKey('iconimageContainsFold')) {
      return false;
    }
    if (l$iconimageContainsFold != lOther$iconimageContainsFold) {
      return false;
    }
    final l$coverimage = coverimage;
    final lOther$coverimage = other.coverimage;
    if (_$data.containsKey('coverimage') !=
        other._$data.containsKey('coverimage')) {
      return false;
    }
    if (l$coverimage != lOther$coverimage) {
      return false;
    }
    final l$coverimageNEQ = coverimageNEQ;
    final lOther$coverimageNEQ = other.coverimageNEQ;
    if (_$data.containsKey('coverimageNEQ') !=
        other._$data.containsKey('coverimageNEQ')) {
      return false;
    }
    if (l$coverimageNEQ != lOther$coverimageNEQ) {
      return false;
    }
    final l$coverimageIn = coverimageIn;
    final lOther$coverimageIn = other.coverimageIn;
    if (_$data.containsKey('coverimageIn') !=
        other._$data.containsKey('coverimageIn')) {
      return false;
    }
    if (l$coverimageIn != null && lOther$coverimageIn != null) {
      if (l$coverimageIn.length != lOther$coverimageIn.length) {
        return false;
      }
      for (int i = 0; i < l$coverimageIn.length; i++) {
        final l$coverimageIn$entry = l$coverimageIn[i];
        final lOther$coverimageIn$entry = lOther$coverimageIn[i];
        if (l$coverimageIn$entry != lOther$coverimageIn$entry) {
          return false;
        }
      }
    } else if (l$coverimageIn != lOther$coverimageIn) {
      return false;
    }
    final l$coverimageNotIn = coverimageNotIn;
    final lOther$coverimageNotIn = other.coverimageNotIn;
    if (_$data.containsKey('coverimageNotIn') !=
        other._$data.containsKey('coverimageNotIn')) {
      return false;
    }
    if (l$coverimageNotIn != null && lOther$coverimageNotIn != null) {
      if (l$coverimageNotIn.length != lOther$coverimageNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$coverimageNotIn.length; i++) {
        final l$coverimageNotIn$entry = l$coverimageNotIn[i];
        final lOther$coverimageNotIn$entry = lOther$coverimageNotIn[i];
        if (l$coverimageNotIn$entry != lOther$coverimageNotIn$entry) {
          return false;
        }
      }
    } else if (l$coverimageNotIn != lOther$coverimageNotIn) {
      return false;
    }
    final l$coverimageGT = coverimageGT;
    final lOther$coverimageGT = other.coverimageGT;
    if (_$data.containsKey('coverimageGT') !=
        other._$data.containsKey('coverimageGT')) {
      return false;
    }
    if (l$coverimageGT != lOther$coverimageGT) {
      return false;
    }
    final l$coverimageGTE = coverimageGTE;
    final lOther$coverimageGTE = other.coverimageGTE;
    if (_$data.containsKey('coverimageGTE') !=
        other._$data.containsKey('coverimageGTE')) {
      return false;
    }
    if (l$coverimageGTE != lOther$coverimageGTE) {
      return false;
    }
    final l$coverimageLT = coverimageLT;
    final lOther$coverimageLT = other.coverimageLT;
    if (_$data.containsKey('coverimageLT') !=
        other._$data.containsKey('coverimageLT')) {
      return false;
    }
    if (l$coverimageLT != lOther$coverimageLT) {
      return false;
    }
    final l$coverimageLTE = coverimageLTE;
    final lOther$coverimageLTE = other.coverimageLTE;
    if (_$data.containsKey('coverimageLTE') !=
        other._$data.containsKey('coverimageLTE')) {
      return false;
    }
    if (l$coverimageLTE != lOther$coverimageLTE) {
      return false;
    }
    final l$coverimageContains = coverimageContains;
    final lOther$coverimageContains = other.coverimageContains;
    if (_$data.containsKey('coverimageContains') !=
        other._$data.containsKey('coverimageContains')) {
      return false;
    }
    if (l$coverimageContains != lOther$coverimageContains) {
      return false;
    }
    final l$coverimageHasPrefix = coverimageHasPrefix;
    final lOther$coverimageHasPrefix = other.coverimageHasPrefix;
    if (_$data.containsKey('coverimageHasPrefix') !=
        other._$data.containsKey('coverimageHasPrefix')) {
      return false;
    }
    if (l$coverimageHasPrefix != lOther$coverimageHasPrefix) {
      return false;
    }
    final l$coverimageHasSuffix = coverimageHasSuffix;
    final lOther$coverimageHasSuffix = other.coverimageHasSuffix;
    if (_$data.containsKey('coverimageHasSuffix') !=
        other._$data.containsKey('coverimageHasSuffix')) {
      return false;
    }
    if (l$coverimageHasSuffix != lOther$coverimageHasSuffix) {
      return false;
    }
    final l$coverimageEqualFold = coverimageEqualFold;
    final lOther$coverimageEqualFold = other.coverimageEqualFold;
    if (_$data.containsKey('coverimageEqualFold') !=
        other._$data.containsKey('coverimageEqualFold')) {
      return false;
    }
    if (l$coverimageEqualFold != lOther$coverimageEqualFold) {
      return false;
    }
    final l$coverimageContainsFold = coverimageContainsFold;
    final lOther$coverimageContainsFold = other.coverimageContainsFold;
    if (_$data.containsKey('coverimageContainsFold') !=
        other._$data.containsKey('coverimageContainsFold')) {
      return false;
    }
    if (l$coverimageContainsFold != lOther$coverimageContainsFold) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$titleNEQ = titleNEQ;
    final lOther$titleNEQ = other.titleNEQ;
    if (_$data.containsKey('titleNEQ') !=
        other._$data.containsKey('titleNEQ')) {
      return false;
    }
    if (l$titleNEQ != lOther$titleNEQ) {
      return false;
    }
    final l$titleIn = titleIn;
    final lOther$titleIn = other.titleIn;
    if (_$data.containsKey('titleIn') != other._$data.containsKey('titleIn')) {
      return false;
    }
    if (l$titleIn != null && lOther$titleIn != null) {
      if (l$titleIn.length != lOther$titleIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleIn.length; i++) {
        final l$titleIn$entry = l$titleIn[i];
        final lOther$titleIn$entry = lOther$titleIn[i];
        if (l$titleIn$entry != lOther$titleIn$entry) {
          return false;
        }
      }
    } else if (l$titleIn != lOther$titleIn) {
      return false;
    }
    final l$titleNotIn = titleNotIn;
    final lOther$titleNotIn = other.titleNotIn;
    if (_$data.containsKey('titleNotIn') !=
        other._$data.containsKey('titleNotIn')) {
      return false;
    }
    if (l$titleNotIn != null && lOther$titleNotIn != null) {
      if (l$titleNotIn.length != lOther$titleNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleNotIn.length; i++) {
        final l$titleNotIn$entry = l$titleNotIn[i];
        final lOther$titleNotIn$entry = lOther$titleNotIn[i];
        if (l$titleNotIn$entry != lOther$titleNotIn$entry) {
          return false;
        }
      }
    } else if (l$titleNotIn != lOther$titleNotIn) {
      return false;
    }
    final l$titleGT = titleGT;
    final lOther$titleGT = other.titleGT;
    if (_$data.containsKey('titleGT') != other._$data.containsKey('titleGT')) {
      return false;
    }
    if (l$titleGT != lOther$titleGT) {
      return false;
    }
    final l$titleGTE = titleGTE;
    final lOther$titleGTE = other.titleGTE;
    if (_$data.containsKey('titleGTE') !=
        other._$data.containsKey('titleGTE')) {
      return false;
    }
    if (l$titleGTE != lOther$titleGTE) {
      return false;
    }
    final l$titleLT = titleLT;
    final lOther$titleLT = other.titleLT;
    if (_$data.containsKey('titleLT') != other._$data.containsKey('titleLT')) {
      return false;
    }
    if (l$titleLT != lOther$titleLT) {
      return false;
    }
    final l$titleLTE = titleLTE;
    final lOther$titleLTE = other.titleLTE;
    if (_$data.containsKey('titleLTE') !=
        other._$data.containsKey('titleLTE')) {
      return false;
    }
    if (l$titleLTE != lOther$titleLTE) {
      return false;
    }
    final l$titleContains = titleContains;
    final lOther$titleContains = other.titleContains;
    if (_$data.containsKey('titleContains') !=
        other._$data.containsKey('titleContains')) {
      return false;
    }
    if (l$titleContains != lOther$titleContains) {
      return false;
    }
    final l$titleHasPrefix = titleHasPrefix;
    final lOther$titleHasPrefix = other.titleHasPrefix;
    if (_$data.containsKey('titleHasPrefix') !=
        other._$data.containsKey('titleHasPrefix')) {
      return false;
    }
    if (l$titleHasPrefix != lOther$titleHasPrefix) {
      return false;
    }
    final l$titleHasSuffix = titleHasSuffix;
    final lOther$titleHasSuffix = other.titleHasSuffix;
    if (_$data.containsKey('titleHasSuffix') !=
        other._$data.containsKey('titleHasSuffix')) {
      return false;
    }
    if (l$titleHasSuffix != lOther$titleHasSuffix) {
      return false;
    }
    final l$titleEqualFold = titleEqualFold;
    final lOther$titleEqualFold = other.titleEqualFold;
    if (_$data.containsKey('titleEqualFold') !=
        other._$data.containsKey('titleEqualFold')) {
      return false;
    }
    if (l$titleEqualFold != lOther$titleEqualFold) {
      return false;
    }
    final l$titleContainsFold = titleContainsFold;
    final lOther$titleContainsFold = other.titleContainsFold;
    if (_$data.containsKey('titleContainsFold') !=
        other._$data.containsKey('titleContainsFold')) {
      return false;
    }
    if (l$titleContainsFold != lOther$titleContainsFold) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$descriptionNEQ = descriptionNEQ;
    final lOther$descriptionNEQ = other.descriptionNEQ;
    if (_$data.containsKey('descriptionNEQ') !=
        other._$data.containsKey('descriptionNEQ')) {
      return false;
    }
    if (l$descriptionNEQ != lOther$descriptionNEQ) {
      return false;
    }
    final l$descriptionIn = descriptionIn;
    final lOther$descriptionIn = other.descriptionIn;
    if (_$data.containsKey('descriptionIn') !=
        other._$data.containsKey('descriptionIn')) {
      return false;
    }
    if (l$descriptionIn != null && lOther$descriptionIn != null) {
      if (l$descriptionIn.length != lOther$descriptionIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionIn.length; i++) {
        final l$descriptionIn$entry = l$descriptionIn[i];
        final lOther$descriptionIn$entry = lOther$descriptionIn[i];
        if (l$descriptionIn$entry != lOther$descriptionIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionIn != lOther$descriptionIn) {
      return false;
    }
    final l$descriptionNotIn = descriptionNotIn;
    final lOther$descriptionNotIn = other.descriptionNotIn;
    if (_$data.containsKey('descriptionNotIn') !=
        other._$data.containsKey('descriptionNotIn')) {
      return false;
    }
    if (l$descriptionNotIn != null && lOther$descriptionNotIn != null) {
      if (l$descriptionNotIn.length != lOther$descriptionNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionNotIn.length; i++) {
        final l$descriptionNotIn$entry = l$descriptionNotIn[i];
        final lOther$descriptionNotIn$entry = lOther$descriptionNotIn[i];
        if (l$descriptionNotIn$entry != lOther$descriptionNotIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionNotIn != lOther$descriptionNotIn) {
      return false;
    }
    final l$descriptionGT = descriptionGT;
    final lOther$descriptionGT = other.descriptionGT;
    if (_$data.containsKey('descriptionGT') !=
        other._$data.containsKey('descriptionGT')) {
      return false;
    }
    if (l$descriptionGT != lOther$descriptionGT) {
      return false;
    }
    final l$descriptionGTE = descriptionGTE;
    final lOther$descriptionGTE = other.descriptionGTE;
    if (_$data.containsKey('descriptionGTE') !=
        other._$data.containsKey('descriptionGTE')) {
      return false;
    }
    if (l$descriptionGTE != lOther$descriptionGTE) {
      return false;
    }
    final l$descriptionLT = descriptionLT;
    final lOther$descriptionLT = other.descriptionLT;
    if (_$data.containsKey('descriptionLT') !=
        other._$data.containsKey('descriptionLT')) {
      return false;
    }
    if (l$descriptionLT != lOther$descriptionLT) {
      return false;
    }
    final l$descriptionLTE = descriptionLTE;
    final lOther$descriptionLTE = other.descriptionLTE;
    if (_$data.containsKey('descriptionLTE') !=
        other._$data.containsKey('descriptionLTE')) {
      return false;
    }
    if (l$descriptionLTE != lOther$descriptionLTE) {
      return false;
    }
    final l$descriptionContains = descriptionContains;
    final lOther$descriptionContains = other.descriptionContains;
    if (_$data.containsKey('descriptionContains') !=
        other._$data.containsKey('descriptionContains')) {
      return false;
    }
    if (l$descriptionContains != lOther$descriptionContains) {
      return false;
    }
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final lOther$descriptionHasPrefix = other.descriptionHasPrefix;
    if (_$data.containsKey('descriptionHasPrefix') !=
        other._$data.containsKey('descriptionHasPrefix')) {
      return false;
    }
    if (l$descriptionHasPrefix != lOther$descriptionHasPrefix) {
      return false;
    }
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final lOther$descriptionHasSuffix = other.descriptionHasSuffix;
    if (_$data.containsKey('descriptionHasSuffix') !=
        other._$data.containsKey('descriptionHasSuffix')) {
      return false;
    }
    if (l$descriptionHasSuffix != lOther$descriptionHasSuffix) {
      return false;
    }
    final l$descriptionEqualFold = descriptionEqualFold;
    final lOther$descriptionEqualFold = other.descriptionEqualFold;
    if (_$data.containsKey('descriptionEqualFold') !=
        other._$data.containsKey('descriptionEqualFold')) {
      return false;
    }
    if (l$descriptionEqualFold != lOther$descriptionEqualFold) {
      return false;
    }
    final l$descriptionContainsFold = descriptionContainsFold;
    final lOther$descriptionContainsFold = other.descriptionContainsFold;
    if (_$data.containsKey('descriptionContainsFold') !=
        other._$data.containsKey('descriptionContainsFold')) {
      return false;
    }
    if (l$descriptionContainsFold != lOther$descriptionContainsFold) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$orderNEQ = orderNEQ;
    final lOther$orderNEQ = other.orderNEQ;
    if (_$data.containsKey('orderNEQ') !=
        other._$data.containsKey('orderNEQ')) {
      return false;
    }
    if (l$orderNEQ != lOther$orderNEQ) {
      return false;
    }
    final l$orderIn = orderIn;
    final lOther$orderIn = other.orderIn;
    if (_$data.containsKey('orderIn') != other._$data.containsKey('orderIn')) {
      return false;
    }
    if (l$orderIn != null && lOther$orderIn != null) {
      if (l$orderIn.length != lOther$orderIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderIn.length; i++) {
        final l$orderIn$entry = l$orderIn[i];
        final lOther$orderIn$entry = lOther$orderIn[i];
        if (l$orderIn$entry != lOther$orderIn$entry) {
          return false;
        }
      }
    } else if (l$orderIn != lOther$orderIn) {
      return false;
    }
    final l$orderNotIn = orderNotIn;
    final lOther$orderNotIn = other.orderNotIn;
    if (_$data.containsKey('orderNotIn') !=
        other._$data.containsKey('orderNotIn')) {
      return false;
    }
    if (l$orderNotIn != null && lOther$orderNotIn != null) {
      if (l$orderNotIn.length != lOther$orderNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderNotIn.length; i++) {
        final l$orderNotIn$entry = l$orderNotIn[i];
        final lOther$orderNotIn$entry = lOther$orderNotIn[i];
        if (l$orderNotIn$entry != lOther$orderNotIn$entry) {
          return false;
        }
      }
    } else if (l$orderNotIn != lOther$orderNotIn) {
      return false;
    }
    final l$orderGT = orderGT;
    final lOther$orderGT = other.orderGT;
    if (_$data.containsKey('orderGT') != other._$data.containsKey('orderGT')) {
      return false;
    }
    if (l$orderGT != lOther$orderGT) {
      return false;
    }
    final l$orderGTE = orderGTE;
    final lOther$orderGTE = other.orderGTE;
    if (_$data.containsKey('orderGTE') !=
        other._$data.containsKey('orderGTE')) {
      return false;
    }
    if (l$orderGTE != lOther$orderGTE) {
      return false;
    }
    final l$orderLT = orderLT;
    final lOther$orderLT = other.orderLT;
    if (_$data.containsKey('orderLT') != other._$data.containsKey('orderLT')) {
      return false;
    }
    if (l$orderLT != lOther$orderLT) {
      return false;
    }
    final l$orderLTE = orderLTE;
    final lOther$orderLTE = other.orderLTE;
    if (_$data.containsKey('orderLTE') !=
        other._$data.containsKey('orderLTE')) {
      return false;
    }
    if (l$orderLTE != lOther$orderLTE) {
      return false;
    }
    final l$hasUnit = hasUnit;
    final lOther$hasUnit = other.hasUnit;
    if (_$data.containsKey('hasUnit') != other._$data.containsKey('hasUnit')) {
      return false;
    }
    if (l$hasUnit != lOther$hasUnit) {
      return false;
    }
    final l$hasUnitWith = hasUnitWith;
    final lOther$hasUnitWith = other.hasUnitWith;
    if (_$data.containsKey('hasUnitWith') !=
        other._$data.containsKey('hasUnitWith')) {
      return false;
    }
    if (l$hasUnitWith != null && lOther$hasUnitWith != null) {
      if (l$hasUnitWith.length != lOther$hasUnitWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasUnitWith.length; i++) {
        final l$hasUnitWith$entry = l$hasUnitWith[i];
        final lOther$hasUnitWith$entry = lOther$hasUnitWith[i];
        if (l$hasUnitWith$entry != lOther$hasUnitWith$entry) {
          return false;
        }
      }
    } else if (l$hasUnitWith != lOther$hasUnitWith) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$unitID = unitID;
    final l$unitIDNEQ = unitIDNEQ;
    final l$unitIDIn = unitIDIn;
    final l$unitIDNotIn = unitIDNotIn;
    final l$type = type;
    final l$typeNEQ = typeNEQ;
    final l$typeIn = typeIn;
    final l$typeNotIn = typeNotIn;
    final l$iconimage = iconimage;
    final l$iconimageNEQ = iconimageNEQ;
    final l$iconimageIn = iconimageIn;
    final l$iconimageNotIn = iconimageNotIn;
    final l$iconimageGT = iconimageGT;
    final l$iconimageGTE = iconimageGTE;
    final l$iconimageLT = iconimageLT;
    final l$iconimageLTE = iconimageLTE;
    final l$iconimageContains = iconimageContains;
    final l$iconimageHasPrefix = iconimageHasPrefix;
    final l$iconimageHasSuffix = iconimageHasSuffix;
    final l$iconimageEqualFold = iconimageEqualFold;
    final l$iconimageContainsFold = iconimageContainsFold;
    final l$coverimage = coverimage;
    final l$coverimageNEQ = coverimageNEQ;
    final l$coverimageIn = coverimageIn;
    final l$coverimageNotIn = coverimageNotIn;
    final l$coverimageGT = coverimageGT;
    final l$coverimageGTE = coverimageGTE;
    final l$coverimageLT = coverimageLT;
    final l$coverimageLTE = coverimageLTE;
    final l$coverimageContains = coverimageContains;
    final l$coverimageHasPrefix = coverimageHasPrefix;
    final l$coverimageHasSuffix = coverimageHasSuffix;
    final l$coverimageEqualFold = coverimageEqualFold;
    final l$coverimageContainsFold = coverimageContainsFold;
    final l$title = title;
    final l$titleNEQ = titleNEQ;
    final l$titleIn = titleIn;
    final l$titleNotIn = titleNotIn;
    final l$titleGT = titleGT;
    final l$titleGTE = titleGTE;
    final l$titleLT = titleLT;
    final l$titleLTE = titleLTE;
    final l$titleContains = titleContains;
    final l$titleHasPrefix = titleHasPrefix;
    final l$titleHasSuffix = titleHasSuffix;
    final l$titleEqualFold = titleEqualFold;
    final l$titleContainsFold = titleContainsFold;
    final l$description = description;
    final l$descriptionNEQ = descriptionNEQ;
    final l$descriptionIn = descriptionIn;
    final l$descriptionNotIn = descriptionNotIn;
    final l$descriptionGT = descriptionGT;
    final l$descriptionGTE = descriptionGTE;
    final l$descriptionLT = descriptionLT;
    final l$descriptionLTE = descriptionLTE;
    final l$descriptionContains = descriptionContains;
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final l$descriptionEqualFold = descriptionEqualFold;
    final l$descriptionContainsFold = descriptionContainsFold;
    final l$order = order;
    final l$orderNEQ = orderNEQ;
    final l$orderIn = orderIn;
    final l$orderNotIn = orderNotIn;
    final l$orderGT = orderGT;
    final l$orderGTE = orderGTE;
    final l$orderLT = orderLT;
    final l$orderLTE = orderLTE;
    final l$hasUnit = hasUnit;
    final l$hasUnitWith = hasUnitWith;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('unitID') ? l$unitID : const {},
      _$data.containsKey('unitIDNEQ') ? l$unitIDNEQ : const {},
      _$data.containsKey('unitIDIn')
          ? l$unitIDIn == null
              ? null
              : Object.hashAll(l$unitIDIn.map((v) => v))
          : const {},
      _$data.containsKey('unitIDNotIn')
          ? l$unitIDNotIn == null
              ? null
              : Object.hashAll(l$unitIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('typeNEQ') ? l$typeNEQ : const {},
      _$data.containsKey('typeIn')
          ? l$typeIn == null
              ? null
              : Object.hashAll(l$typeIn.map((v) => v))
          : const {},
      _$data.containsKey('typeNotIn')
          ? l$typeNotIn == null
              ? null
              : Object.hashAll(l$typeNotIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimage') ? l$iconimage : const {},
      _$data.containsKey('iconimageNEQ') ? l$iconimageNEQ : const {},
      _$data.containsKey('iconimageIn')
          ? l$iconimageIn == null
              ? null
              : Object.hashAll(l$iconimageIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimageNotIn')
          ? l$iconimageNotIn == null
              ? null
              : Object.hashAll(l$iconimageNotIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimageGT') ? l$iconimageGT : const {},
      _$data.containsKey('iconimageGTE') ? l$iconimageGTE : const {},
      _$data.containsKey('iconimageLT') ? l$iconimageLT : const {},
      _$data.containsKey('iconimageLTE') ? l$iconimageLTE : const {},
      _$data.containsKey('iconimageContains') ? l$iconimageContains : const {},
      _$data.containsKey('iconimageHasPrefix')
          ? l$iconimageHasPrefix
          : const {},
      _$data.containsKey('iconimageHasSuffix')
          ? l$iconimageHasSuffix
          : const {},
      _$data.containsKey('iconimageEqualFold')
          ? l$iconimageEqualFold
          : const {},
      _$data.containsKey('iconimageContainsFold')
          ? l$iconimageContainsFold
          : const {},
      _$data.containsKey('coverimage') ? l$coverimage : const {},
      _$data.containsKey('coverimageNEQ') ? l$coverimageNEQ : const {},
      _$data.containsKey('coverimageIn')
          ? l$coverimageIn == null
              ? null
              : Object.hashAll(l$coverimageIn.map((v) => v))
          : const {},
      _$data.containsKey('coverimageNotIn')
          ? l$coverimageNotIn == null
              ? null
              : Object.hashAll(l$coverimageNotIn.map((v) => v))
          : const {},
      _$data.containsKey('coverimageGT') ? l$coverimageGT : const {},
      _$data.containsKey('coverimageGTE') ? l$coverimageGTE : const {},
      _$data.containsKey('coverimageLT') ? l$coverimageLT : const {},
      _$data.containsKey('coverimageLTE') ? l$coverimageLTE : const {},
      _$data.containsKey('coverimageContains')
          ? l$coverimageContains
          : const {},
      _$data.containsKey('coverimageHasPrefix')
          ? l$coverimageHasPrefix
          : const {},
      _$data.containsKey('coverimageHasSuffix')
          ? l$coverimageHasSuffix
          : const {},
      _$data.containsKey('coverimageEqualFold')
          ? l$coverimageEqualFold
          : const {},
      _$data.containsKey('coverimageContainsFold')
          ? l$coverimageContainsFold
          : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('titleNEQ') ? l$titleNEQ : const {},
      _$data.containsKey('titleIn')
          ? l$titleIn == null
              ? null
              : Object.hashAll(l$titleIn.map((v) => v))
          : const {},
      _$data.containsKey('titleNotIn')
          ? l$titleNotIn == null
              ? null
              : Object.hashAll(l$titleNotIn.map((v) => v))
          : const {},
      _$data.containsKey('titleGT') ? l$titleGT : const {},
      _$data.containsKey('titleGTE') ? l$titleGTE : const {},
      _$data.containsKey('titleLT') ? l$titleLT : const {},
      _$data.containsKey('titleLTE') ? l$titleLTE : const {},
      _$data.containsKey('titleContains') ? l$titleContains : const {},
      _$data.containsKey('titleHasPrefix') ? l$titleHasPrefix : const {},
      _$data.containsKey('titleHasSuffix') ? l$titleHasSuffix : const {},
      _$data.containsKey('titleEqualFold') ? l$titleEqualFold : const {},
      _$data.containsKey('titleContainsFold') ? l$titleContainsFold : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('descriptionNEQ') ? l$descriptionNEQ : const {},
      _$data.containsKey('descriptionIn')
          ? l$descriptionIn == null
              ? null
              : Object.hashAll(l$descriptionIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionNotIn')
          ? l$descriptionNotIn == null
              ? null
              : Object.hashAll(l$descriptionNotIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionGT') ? l$descriptionGT : const {},
      _$data.containsKey('descriptionGTE') ? l$descriptionGTE : const {},
      _$data.containsKey('descriptionLT') ? l$descriptionLT : const {},
      _$data.containsKey('descriptionLTE') ? l$descriptionLTE : const {},
      _$data.containsKey('descriptionContains')
          ? l$descriptionContains
          : const {},
      _$data.containsKey('descriptionHasPrefix')
          ? l$descriptionHasPrefix
          : const {},
      _$data.containsKey('descriptionHasSuffix')
          ? l$descriptionHasSuffix
          : const {},
      _$data.containsKey('descriptionEqualFold')
          ? l$descriptionEqualFold
          : const {},
      _$data.containsKey('descriptionContainsFold')
          ? l$descriptionContainsFold
          : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('orderNEQ') ? l$orderNEQ : const {},
      _$data.containsKey('orderIn')
          ? l$orderIn == null
              ? null
              : Object.hashAll(l$orderIn.map((v) => v))
          : const {},
      _$data.containsKey('orderNotIn')
          ? l$orderNotIn == null
              ? null
              : Object.hashAll(l$orderNotIn.map((v) => v))
          : const {},
      _$data.containsKey('orderGT') ? l$orderGT : const {},
      _$data.containsKey('orderGTE') ? l$orderGTE : const {},
      _$data.containsKey('orderLT') ? l$orderLT : const {},
      _$data.containsKey('orderLTE') ? l$orderLTE : const {},
      _$data.containsKey('hasUnit') ? l$hasUnit : const {},
      _$data.containsKey('hasUnitWith')
          ? l$hasUnitWith == null
              ? null
              : Object.hashAll(l$hasUnitWith.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$LessonWhereInput<TRes> {
  factory CopyWith$Input$LessonWhereInput(
    Input$LessonWhereInput instance,
    TRes Function(Input$LessonWhereInput) then,
  ) = _CopyWithImpl$Input$LessonWhereInput;

  factory CopyWith$Input$LessonWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$LessonWhereInput;

  TRes call({
    Input$LessonWhereInput? not,
    List<Input$LessonWhereInput>? and,
    List<Input$LessonWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? unitID,
    String? unitIDNEQ,
    List<String>? unitIDIn,
    List<String>? unitIDNotIn,
    Enum$LessonLessonType? type,
    Enum$LessonLessonType? typeNEQ,
    List<Enum$LessonLessonType>? typeIn,
    List<Enum$LessonLessonType>? typeNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasUnit,
    List<Input$UnitWhereInput>? hasUnitWith,
  });
  CopyWith$Input$LessonWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$LessonWhereInput>? Function(
              Iterable<
                  CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$LessonWhereInput>? Function(
              Iterable<
                  CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
          _fn);
  TRes hasUnitWith(
      Iterable<Input$UnitWhereInput>? Function(
              Iterable<CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$LessonWhereInput<TRes>
    implements CopyWith$Input$LessonWhereInput<TRes> {
  _CopyWithImpl$Input$LessonWhereInput(
    this._instance,
    this._then,
  );

  final Input$LessonWhereInput _instance;

  final TRes Function(Input$LessonWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? unitID = _undefined,
    Object? unitIDNEQ = _undefined,
    Object? unitIDIn = _undefined,
    Object? unitIDNotIn = _undefined,
    Object? type = _undefined,
    Object? typeNEQ = _undefined,
    Object? typeIn = _undefined,
    Object? typeNotIn = _undefined,
    Object? iconimage = _undefined,
    Object? iconimageNEQ = _undefined,
    Object? iconimageIn = _undefined,
    Object? iconimageNotIn = _undefined,
    Object? iconimageGT = _undefined,
    Object? iconimageGTE = _undefined,
    Object? iconimageLT = _undefined,
    Object? iconimageLTE = _undefined,
    Object? iconimageContains = _undefined,
    Object? iconimageHasPrefix = _undefined,
    Object? iconimageHasSuffix = _undefined,
    Object? iconimageEqualFold = _undefined,
    Object? iconimageContainsFold = _undefined,
    Object? coverimage = _undefined,
    Object? coverimageNEQ = _undefined,
    Object? coverimageIn = _undefined,
    Object? coverimageNotIn = _undefined,
    Object? coverimageGT = _undefined,
    Object? coverimageGTE = _undefined,
    Object? coverimageLT = _undefined,
    Object? coverimageLTE = _undefined,
    Object? coverimageContains = _undefined,
    Object? coverimageHasPrefix = _undefined,
    Object? coverimageHasSuffix = _undefined,
    Object? coverimageEqualFold = _undefined,
    Object? coverimageContainsFold = _undefined,
    Object? title = _undefined,
    Object? titleNEQ = _undefined,
    Object? titleIn = _undefined,
    Object? titleNotIn = _undefined,
    Object? titleGT = _undefined,
    Object? titleGTE = _undefined,
    Object? titleLT = _undefined,
    Object? titleLTE = _undefined,
    Object? titleContains = _undefined,
    Object? titleHasPrefix = _undefined,
    Object? titleHasSuffix = _undefined,
    Object? titleEqualFold = _undefined,
    Object? titleContainsFold = _undefined,
    Object? description = _undefined,
    Object? descriptionNEQ = _undefined,
    Object? descriptionIn = _undefined,
    Object? descriptionNotIn = _undefined,
    Object? descriptionGT = _undefined,
    Object? descriptionGTE = _undefined,
    Object? descriptionLT = _undefined,
    Object? descriptionLTE = _undefined,
    Object? descriptionContains = _undefined,
    Object? descriptionHasPrefix = _undefined,
    Object? descriptionHasSuffix = _undefined,
    Object? descriptionEqualFold = _undefined,
    Object? descriptionContainsFold = _undefined,
    Object? order = _undefined,
    Object? orderNEQ = _undefined,
    Object? orderIn = _undefined,
    Object? orderNotIn = _undefined,
    Object? orderGT = _undefined,
    Object? orderGTE = _undefined,
    Object? orderLT = _undefined,
    Object? orderLTE = _undefined,
    Object? hasUnit = _undefined,
    Object? hasUnitWith = _undefined,
  }) =>
      _then(Input$LessonWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$LessonWhereInput?),
        if (and != _undefined) 'and': (and as List<Input$LessonWhereInput>?),
        if (or != _undefined) 'or': (or as List<Input$LessonWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (unitID != _undefined) 'unitID': (unitID as String?),
        if (unitIDNEQ != _undefined) 'unitIDNEQ': (unitIDNEQ as String?),
        if (unitIDIn != _undefined) 'unitIDIn': (unitIDIn as List<String>?),
        if (unitIDNotIn != _undefined)
          'unitIDNotIn': (unitIDNotIn as List<String>?),
        if (type != _undefined) 'type': (type as Enum$LessonLessonType?),
        if (typeNEQ != _undefined)
          'typeNEQ': (typeNEQ as Enum$LessonLessonType?),
        if (typeIn != _undefined)
          'typeIn': (typeIn as List<Enum$LessonLessonType>?),
        if (typeNotIn != _undefined)
          'typeNotIn': (typeNotIn as List<Enum$LessonLessonType>?),
        if (iconimage != _undefined) 'iconimage': (iconimage as String?),
        if (iconimageNEQ != _undefined)
          'iconimageNEQ': (iconimageNEQ as String?),
        if (iconimageIn != _undefined)
          'iconimageIn': (iconimageIn as List<String>?),
        if (iconimageNotIn != _undefined)
          'iconimageNotIn': (iconimageNotIn as List<String>?),
        if (iconimageGT != _undefined) 'iconimageGT': (iconimageGT as String?),
        if (iconimageGTE != _undefined)
          'iconimageGTE': (iconimageGTE as String?),
        if (iconimageLT != _undefined) 'iconimageLT': (iconimageLT as String?),
        if (iconimageLTE != _undefined)
          'iconimageLTE': (iconimageLTE as String?),
        if (iconimageContains != _undefined)
          'iconimageContains': (iconimageContains as String?),
        if (iconimageHasPrefix != _undefined)
          'iconimageHasPrefix': (iconimageHasPrefix as String?),
        if (iconimageHasSuffix != _undefined)
          'iconimageHasSuffix': (iconimageHasSuffix as String?),
        if (iconimageEqualFold != _undefined)
          'iconimageEqualFold': (iconimageEqualFold as String?),
        if (iconimageContainsFold != _undefined)
          'iconimageContainsFold': (iconimageContainsFold as String?),
        if (coverimage != _undefined) 'coverimage': (coverimage as String?),
        if (coverimageNEQ != _undefined)
          'coverimageNEQ': (coverimageNEQ as String?),
        if (coverimageIn != _undefined)
          'coverimageIn': (coverimageIn as List<String>?),
        if (coverimageNotIn != _undefined)
          'coverimageNotIn': (coverimageNotIn as List<String>?),
        if (coverimageGT != _undefined)
          'coverimageGT': (coverimageGT as String?),
        if (coverimageGTE != _undefined)
          'coverimageGTE': (coverimageGTE as String?),
        if (coverimageLT != _undefined)
          'coverimageLT': (coverimageLT as String?),
        if (coverimageLTE != _undefined)
          'coverimageLTE': (coverimageLTE as String?),
        if (coverimageContains != _undefined)
          'coverimageContains': (coverimageContains as String?),
        if (coverimageHasPrefix != _undefined)
          'coverimageHasPrefix': (coverimageHasPrefix as String?),
        if (coverimageHasSuffix != _undefined)
          'coverimageHasSuffix': (coverimageHasSuffix as String?),
        if (coverimageEqualFold != _undefined)
          'coverimageEqualFold': (coverimageEqualFold as String?),
        if (coverimageContainsFold != _undefined)
          'coverimageContainsFold': (coverimageContainsFold as String?),
        if (title != _undefined) 'title': (title as String?),
        if (titleNEQ != _undefined) 'titleNEQ': (titleNEQ as String?),
        if (titleIn != _undefined) 'titleIn': (titleIn as List<String>?),
        if (titleNotIn != _undefined)
          'titleNotIn': (titleNotIn as List<String>?),
        if (titleGT != _undefined) 'titleGT': (titleGT as String?),
        if (titleGTE != _undefined) 'titleGTE': (titleGTE as String?),
        if (titleLT != _undefined) 'titleLT': (titleLT as String?),
        if (titleLTE != _undefined) 'titleLTE': (titleLTE as String?),
        if (titleContains != _undefined)
          'titleContains': (titleContains as String?),
        if (titleHasPrefix != _undefined)
          'titleHasPrefix': (titleHasPrefix as String?),
        if (titleHasSuffix != _undefined)
          'titleHasSuffix': (titleHasSuffix as String?),
        if (titleEqualFold != _undefined)
          'titleEqualFold': (titleEqualFold as String?),
        if (titleContainsFold != _undefined)
          'titleContainsFold': (titleContainsFold as String?),
        if (description != _undefined) 'description': (description as String?),
        if (descriptionNEQ != _undefined)
          'descriptionNEQ': (descriptionNEQ as String?),
        if (descriptionIn != _undefined)
          'descriptionIn': (descriptionIn as List<String>?),
        if (descriptionNotIn != _undefined)
          'descriptionNotIn': (descriptionNotIn as List<String>?),
        if (descriptionGT != _undefined)
          'descriptionGT': (descriptionGT as String?),
        if (descriptionGTE != _undefined)
          'descriptionGTE': (descriptionGTE as String?),
        if (descriptionLT != _undefined)
          'descriptionLT': (descriptionLT as String?),
        if (descriptionLTE != _undefined)
          'descriptionLTE': (descriptionLTE as String?),
        if (descriptionContains != _undefined)
          'descriptionContains': (descriptionContains as String?),
        if (descriptionHasPrefix != _undefined)
          'descriptionHasPrefix': (descriptionHasPrefix as String?),
        if (descriptionHasSuffix != _undefined)
          'descriptionHasSuffix': (descriptionHasSuffix as String?),
        if (descriptionEqualFold != _undefined)
          'descriptionEqualFold': (descriptionEqualFold as String?),
        if (descriptionContainsFold != _undefined)
          'descriptionContainsFold': (descriptionContainsFold as String?),
        if (order != _undefined) 'order': (order as int?),
        if (orderNEQ != _undefined) 'orderNEQ': (orderNEQ as int?),
        if (orderIn != _undefined) 'orderIn': (orderIn as List<int>?),
        if (orderNotIn != _undefined) 'orderNotIn': (orderNotIn as List<int>?),
        if (orderGT != _undefined) 'orderGT': (orderGT as int?),
        if (orderGTE != _undefined) 'orderGTE': (orderGTE as int?),
        if (orderLT != _undefined) 'orderLT': (orderLT as int?),
        if (orderLTE != _undefined) 'orderLTE': (orderLTE as int?),
        if (hasUnit != _undefined) 'hasUnit': (hasUnit as bool?),
        if (hasUnitWith != _undefined)
          'hasUnitWith': (hasUnitWith as List<Input$UnitWhereInput>?),
      }));

  CopyWith$Input$LessonWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$LessonWhereInput.stub(_then(_instance))
        : CopyWith$Input$LessonWhereInput(local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$LessonWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
              _fn) =>
      call(
          and: _fn(_instance.and?.map((e) => CopyWith$Input$LessonWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes or(
          Iterable<Input$LessonWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
              _fn) =>
      call(
          or: _fn(_instance.or?.map((e) => CopyWith$Input$LessonWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes hasUnitWith(
          Iterable<Input$UnitWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
              _fn) =>
      call(
          hasUnitWith: _fn(
              _instance.hasUnitWith?.map((e) => CopyWith$Input$UnitWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$LessonWhereInput<TRes>
    implements CopyWith$Input$LessonWhereInput<TRes> {
  _CopyWithStubImpl$Input$LessonWhereInput(this._res);

  TRes _res;

  call({
    Input$LessonWhereInput? not,
    List<Input$LessonWhereInput>? and,
    List<Input$LessonWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? unitID,
    String? unitIDNEQ,
    List<String>? unitIDIn,
    List<String>? unitIDNotIn,
    Enum$LessonLessonType? type,
    Enum$LessonLessonType? typeNEQ,
    List<Enum$LessonLessonType>? typeIn,
    List<Enum$LessonLessonType>? typeNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasUnit,
    List<Input$UnitWhereInput>? hasUnitWith,
  }) =>
      _res;

  CopyWith$Input$LessonWhereInput<TRes> get not =>
      CopyWith$Input$LessonWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;

  hasUnitWith(_fn) => _res;
}

class Input$TechniqueOrder {
  factory Input$TechniqueOrder({
    Enum$OrderDirection? direction,
    required Enum$TechniqueOrderField field,
  }) =>
      Input$TechniqueOrder._({
        if (direction != null) r'direction': direction,
        r'field': field,
      });

  Input$TechniqueOrder._(this._$data);

  factory Input$TechniqueOrder.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('direction')) {
      final l$direction = data['direction'];
      result$data['direction'] =
          fromJson$Enum$OrderDirection((l$direction as String));
    }
    final l$field = data['field'];
    result$data['field'] =
        fromJson$Enum$TechniqueOrderField((l$field as String));
    return Input$TechniqueOrder._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderDirection? get direction =>
      (_$data['direction'] as Enum$OrderDirection?);

  Enum$TechniqueOrderField get field =>
      (_$data['field'] as Enum$TechniqueOrderField);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('direction')) {
      final l$direction = direction;
      result$data['direction'] =
          toJson$Enum$OrderDirection((l$direction as Enum$OrderDirection));
    }
    final l$field = field;
    result$data['field'] = toJson$Enum$TechniqueOrderField(l$field);
    return result$data;
  }

  CopyWith$Input$TechniqueOrder<Input$TechniqueOrder> get copyWith =>
      CopyWith$Input$TechniqueOrder(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$TechniqueOrder) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$direction = direction;
    final lOther$direction = other.direction;
    if (_$data.containsKey('direction') !=
        other._$data.containsKey('direction')) {
      return false;
    }
    if (l$direction != lOther$direction) {
      return false;
    }
    final l$field = field;
    final lOther$field = other.field;
    if (l$field != lOther$field) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$direction = direction;
    final l$field = field;
    return Object.hashAll([
      _$data.containsKey('direction') ? l$direction : const {},
      l$field,
    ]);
  }
}

abstract class CopyWith$Input$TechniqueOrder<TRes> {
  factory CopyWith$Input$TechniqueOrder(
    Input$TechniqueOrder instance,
    TRes Function(Input$TechniqueOrder) then,
  ) = _CopyWithImpl$Input$TechniqueOrder;

  factory CopyWith$Input$TechniqueOrder.stub(TRes res) =
      _CopyWithStubImpl$Input$TechniqueOrder;

  TRes call({
    Enum$OrderDirection? direction,
    Enum$TechniqueOrderField? field,
  });
}

class _CopyWithImpl$Input$TechniqueOrder<TRes>
    implements CopyWith$Input$TechniqueOrder<TRes> {
  _CopyWithImpl$Input$TechniqueOrder(
    this._instance,
    this._then,
  );

  final Input$TechniqueOrder _instance;

  final TRes Function(Input$TechniqueOrder) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? direction = _undefined,
    Object? field = _undefined,
  }) =>
      _then(Input$TechniqueOrder._({
        ..._instance._$data,
        if (direction != _undefined && direction != null)
          'direction': (direction as Enum$OrderDirection),
        if (field != _undefined && field != null)
          'field': (field as Enum$TechniqueOrderField),
      }));
}

class _CopyWithStubImpl$Input$TechniqueOrder<TRes>
    implements CopyWith$Input$TechniqueOrder<TRes> {
  _CopyWithStubImpl$Input$TechniqueOrder(this._res);

  TRes _res;

  call({
    Enum$OrderDirection? direction,
    Enum$TechniqueOrderField? field,
  }) =>
      _res;
}

class Input$TechniqueWhereInput {
  factory Input$TechniqueWhereInput({
    Input$TechniqueWhereInput? not,
    List<Input$TechniqueWhereInput>? and,
    List<Input$TechniqueWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? unitID,
    String? unitIDNEQ,
    List<String>? unitIDIn,
    List<String>? unitIDNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasUnit,
    List<Input$UnitWhereInput>? hasUnitWith,
    bool? hasLessons,
    List<Input$LessonWhereInput>? hasLessonsWith,
    bool? hasTechniques,
    List<Input$UnitWhereInput>? hasTechniquesWith,
  }) =>
      Input$TechniqueWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (unitID != null) r'unitID': unitID,
        if (unitIDNEQ != null) r'unitIDNEQ': unitIDNEQ,
        if (unitIDIn != null) r'unitIDIn': unitIDIn,
        if (unitIDNotIn != null) r'unitIDNotIn': unitIDNotIn,
        if (iconimage != null) r'iconimage': iconimage,
        if (iconimageNEQ != null) r'iconimageNEQ': iconimageNEQ,
        if (iconimageIn != null) r'iconimageIn': iconimageIn,
        if (iconimageNotIn != null) r'iconimageNotIn': iconimageNotIn,
        if (iconimageGT != null) r'iconimageGT': iconimageGT,
        if (iconimageGTE != null) r'iconimageGTE': iconimageGTE,
        if (iconimageLT != null) r'iconimageLT': iconimageLT,
        if (iconimageLTE != null) r'iconimageLTE': iconimageLTE,
        if (iconimageContains != null) r'iconimageContains': iconimageContains,
        if (iconimageHasPrefix != null)
          r'iconimageHasPrefix': iconimageHasPrefix,
        if (iconimageHasSuffix != null)
          r'iconimageHasSuffix': iconimageHasSuffix,
        if (iconimageEqualFold != null)
          r'iconimageEqualFold': iconimageEqualFold,
        if (iconimageContainsFold != null)
          r'iconimageContainsFold': iconimageContainsFold,
        if (coverimage != null) r'coverimage': coverimage,
        if (coverimageNEQ != null) r'coverimageNEQ': coverimageNEQ,
        if (coverimageIn != null) r'coverimageIn': coverimageIn,
        if (coverimageNotIn != null) r'coverimageNotIn': coverimageNotIn,
        if (coverimageGT != null) r'coverimageGT': coverimageGT,
        if (coverimageGTE != null) r'coverimageGTE': coverimageGTE,
        if (coverimageLT != null) r'coverimageLT': coverimageLT,
        if (coverimageLTE != null) r'coverimageLTE': coverimageLTE,
        if (coverimageContains != null)
          r'coverimageContains': coverimageContains,
        if (coverimageHasPrefix != null)
          r'coverimageHasPrefix': coverimageHasPrefix,
        if (coverimageHasSuffix != null)
          r'coverimageHasSuffix': coverimageHasSuffix,
        if (coverimageEqualFold != null)
          r'coverimageEqualFold': coverimageEqualFold,
        if (coverimageContainsFold != null)
          r'coverimageContainsFold': coverimageContainsFold,
        if (title != null) r'title': title,
        if (titleNEQ != null) r'titleNEQ': titleNEQ,
        if (titleIn != null) r'titleIn': titleIn,
        if (titleNotIn != null) r'titleNotIn': titleNotIn,
        if (titleGT != null) r'titleGT': titleGT,
        if (titleGTE != null) r'titleGTE': titleGTE,
        if (titleLT != null) r'titleLT': titleLT,
        if (titleLTE != null) r'titleLTE': titleLTE,
        if (titleContains != null) r'titleContains': titleContains,
        if (titleHasPrefix != null) r'titleHasPrefix': titleHasPrefix,
        if (titleHasSuffix != null) r'titleHasSuffix': titleHasSuffix,
        if (titleEqualFold != null) r'titleEqualFold': titleEqualFold,
        if (titleContainsFold != null) r'titleContainsFold': titleContainsFold,
        if (subtitle != null) r'subtitle': subtitle,
        if (subtitleNEQ != null) r'subtitleNEQ': subtitleNEQ,
        if (subtitleIn != null) r'subtitleIn': subtitleIn,
        if (subtitleNotIn != null) r'subtitleNotIn': subtitleNotIn,
        if (subtitleGT != null) r'subtitleGT': subtitleGT,
        if (subtitleGTE != null) r'subtitleGTE': subtitleGTE,
        if (subtitleLT != null) r'subtitleLT': subtitleLT,
        if (subtitleLTE != null) r'subtitleLTE': subtitleLTE,
        if (subtitleContains != null) r'subtitleContains': subtitleContains,
        if (subtitleHasPrefix != null) r'subtitleHasPrefix': subtitleHasPrefix,
        if (subtitleHasSuffix != null) r'subtitleHasSuffix': subtitleHasSuffix,
        if (subtitleEqualFold != null) r'subtitleEqualFold': subtitleEqualFold,
        if (subtitleContainsFold != null)
          r'subtitleContainsFold': subtitleContainsFold,
        if (description != null) r'description': description,
        if (descriptionNEQ != null) r'descriptionNEQ': descriptionNEQ,
        if (descriptionIn != null) r'descriptionIn': descriptionIn,
        if (descriptionNotIn != null) r'descriptionNotIn': descriptionNotIn,
        if (descriptionGT != null) r'descriptionGT': descriptionGT,
        if (descriptionGTE != null) r'descriptionGTE': descriptionGTE,
        if (descriptionLT != null) r'descriptionLT': descriptionLT,
        if (descriptionLTE != null) r'descriptionLTE': descriptionLTE,
        if (descriptionContains != null)
          r'descriptionContains': descriptionContains,
        if (descriptionHasPrefix != null)
          r'descriptionHasPrefix': descriptionHasPrefix,
        if (descriptionHasSuffix != null)
          r'descriptionHasSuffix': descriptionHasSuffix,
        if (descriptionEqualFold != null)
          r'descriptionEqualFold': descriptionEqualFold,
        if (descriptionContainsFold != null)
          r'descriptionContainsFold': descriptionContainsFold,
        if (order != null) r'order': order,
        if (orderNEQ != null) r'orderNEQ': orderNEQ,
        if (orderIn != null) r'orderIn': orderIn,
        if (orderNotIn != null) r'orderNotIn': orderNotIn,
        if (orderGT != null) r'orderGT': orderGT,
        if (orderGTE != null) r'orderGTE': orderGTE,
        if (orderLT != null) r'orderLT': orderLT,
        if (orderLTE != null) r'orderLTE': orderLTE,
        if (hasUnit != null) r'hasUnit': hasUnit,
        if (hasUnitWith != null) r'hasUnitWith': hasUnitWith,
        if (hasLessons != null) r'hasLessons': hasLessons,
        if (hasLessonsWith != null) r'hasLessonsWith': hasLessonsWith,
        if (hasTechniques != null) r'hasTechniques': hasTechniques,
        if (hasTechniquesWith != null) r'hasTechniquesWith': hasTechniquesWith,
      });

  Input$TechniqueWhereInput._(this._$data);

  factory Input$TechniqueWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$TechniqueWhereInput.fromJson((l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map((e) =>
              Input$TechniqueWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map((e) =>
              Input$TechniqueWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('unitID')) {
      final l$unitID = data['unitID'];
      result$data['unitID'] = (l$unitID as String?);
    }
    if (data.containsKey('unitIDNEQ')) {
      final l$unitIDNEQ = data['unitIDNEQ'];
      result$data['unitIDNEQ'] = (l$unitIDNEQ as String?);
    }
    if (data.containsKey('unitIDIn')) {
      final l$unitIDIn = data['unitIDIn'];
      result$data['unitIDIn'] =
          (l$unitIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('unitIDNotIn')) {
      final l$unitIDNotIn = data['unitIDNotIn'];
      result$data['unitIDNotIn'] =
          (l$unitIDNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('iconimage')) {
      final l$iconimage = data['iconimage'];
      result$data['iconimage'] = (l$iconimage as String?);
    }
    if (data.containsKey('iconimageNEQ')) {
      final l$iconimageNEQ = data['iconimageNEQ'];
      result$data['iconimageNEQ'] = (l$iconimageNEQ as String?);
    }
    if (data.containsKey('iconimageIn')) {
      final l$iconimageIn = data['iconimageIn'];
      result$data['iconimageIn'] =
          (l$iconimageIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('iconimageNotIn')) {
      final l$iconimageNotIn = data['iconimageNotIn'];
      result$data['iconimageNotIn'] = (l$iconimageNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('iconimageGT')) {
      final l$iconimageGT = data['iconimageGT'];
      result$data['iconimageGT'] = (l$iconimageGT as String?);
    }
    if (data.containsKey('iconimageGTE')) {
      final l$iconimageGTE = data['iconimageGTE'];
      result$data['iconimageGTE'] = (l$iconimageGTE as String?);
    }
    if (data.containsKey('iconimageLT')) {
      final l$iconimageLT = data['iconimageLT'];
      result$data['iconimageLT'] = (l$iconimageLT as String?);
    }
    if (data.containsKey('iconimageLTE')) {
      final l$iconimageLTE = data['iconimageLTE'];
      result$data['iconimageLTE'] = (l$iconimageLTE as String?);
    }
    if (data.containsKey('iconimageContains')) {
      final l$iconimageContains = data['iconimageContains'];
      result$data['iconimageContains'] = (l$iconimageContains as String?);
    }
    if (data.containsKey('iconimageHasPrefix')) {
      final l$iconimageHasPrefix = data['iconimageHasPrefix'];
      result$data['iconimageHasPrefix'] = (l$iconimageHasPrefix as String?);
    }
    if (data.containsKey('iconimageHasSuffix')) {
      final l$iconimageHasSuffix = data['iconimageHasSuffix'];
      result$data['iconimageHasSuffix'] = (l$iconimageHasSuffix as String?);
    }
    if (data.containsKey('iconimageEqualFold')) {
      final l$iconimageEqualFold = data['iconimageEqualFold'];
      result$data['iconimageEqualFold'] = (l$iconimageEqualFold as String?);
    }
    if (data.containsKey('iconimageContainsFold')) {
      final l$iconimageContainsFold = data['iconimageContainsFold'];
      result$data['iconimageContainsFold'] =
          (l$iconimageContainsFold as String?);
    }
    if (data.containsKey('coverimage')) {
      final l$coverimage = data['coverimage'];
      result$data['coverimage'] = (l$coverimage as String?);
    }
    if (data.containsKey('coverimageNEQ')) {
      final l$coverimageNEQ = data['coverimageNEQ'];
      result$data['coverimageNEQ'] = (l$coverimageNEQ as String?);
    }
    if (data.containsKey('coverimageIn')) {
      final l$coverimageIn = data['coverimageIn'];
      result$data['coverimageIn'] = (l$coverimageIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('coverimageNotIn')) {
      final l$coverimageNotIn = data['coverimageNotIn'];
      result$data['coverimageNotIn'] = (l$coverimageNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('coverimageGT')) {
      final l$coverimageGT = data['coverimageGT'];
      result$data['coverimageGT'] = (l$coverimageGT as String?);
    }
    if (data.containsKey('coverimageGTE')) {
      final l$coverimageGTE = data['coverimageGTE'];
      result$data['coverimageGTE'] = (l$coverimageGTE as String?);
    }
    if (data.containsKey('coverimageLT')) {
      final l$coverimageLT = data['coverimageLT'];
      result$data['coverimageLT'] = (l$coverimageLT as String?);
    }
    if (data.containsKey('coverimageLTE')) {
      final l$coverimageLTE = data['coverimageLTE'];
      result$data['coverimageLTE'] = (l$coverimageLTE as String?);
    }
    if (data.containsKey('coverimageContains')) {
      final l$coverimageContains = data['coverimageContains'];
      result$data['coverimageContains'] = (l$coverimageContains as String?);
    }
    if (data.containsKey('coverimageHasPrefix')) {
      final l$coverimageHasPrefix = data['coverimageHasPrefix'];
      result$data['coverimageHasPrefix'] = (l$coverimageHasPrefix as String?);
    }
    if (data.containsKey('coverimageHasSuffix')) {
      final l$coverimageHasSuffix = data['coverimageHasSuffix'];
      result$data['coverimageHasSuffix'] = (l$coverimageHasSuffix as String?);
    }
    if (data.containsKey('coverimageEqualFold')) {
      final l$coverimageEqualFold = data['coverimageEqualFold'];
      result$data['coverimageEqualFold'] = (l$coverimageEqualFold as String?);
    }
    if (data.containsKey('coverimageContainsFold')) {
      final l$coverimageContainsFold = data['coverimageContainsFold'];
      result$data['coverimageContainsFold'] =
          (l$coverimageContainsFold as String?);
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] = (l$title as String?);
    }
    if (data.containsKey('titleNEQ')) {
      final l$titleNEQ = data['titleNEQ'];
      result$data['titleNEQ'] = (l$titleNEQ as String?);
    }
    if (data.containsKey('titleIn')) {
      final l$titleIn = data['titleIn'];
      result$data['titleIn'] =
          (l$titleIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleNotIn')) {
      final l$titleNotIn = data['titleNotIn'];
      result$data['titleNotIn'] =
          (l$titleNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleGT')) {
      final l$titleGT = data['titleGT'];
      result$data['titleGT'] = (l$titleGT as String?);
    }
    if (data.containsKey('titleGTE')) {
      final l$titleGTE = data['titleGTE'];
      result$data['titleGTE'] = (l$titleGTE as String?);
    }
    if (data.containsKey('titleLT')) {
      final l$titleLT = data['titleLT'];
      result$data['titleLT'] = (l$titleLT as String?);
    }
    if (data.containsKey('titleLTE')) {
      final l$titleLTE = data['titleLTE'];
      result$data['titleLTE'] = (l$titleLTE as String?);
    }
    if (data.containsKey('titleContains')) {
      final l$titleContains = data['titleContains'];
      result$data['titleContains'] = (l$titleContains as String?);
    }
    if (data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = data['titleHasPrefix'];
      result$data['titleHasPrefix'] = (l$titleHasPrefix as String?);
    }
    if (data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = data['titleHasSuffix'];
      result$data['titleHasSuffix'] = (l$titleHasSuffix as String?);
    }
    if (data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = data['titleEqualFold'];
      result$data['titleEqualFold'] = (l$titleEqualFold as String?);
    }
    if (data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = data['titleContainsFold'];
      result$data['titleContainsFold'] = (l$titleContainsFold as String?);
    }
    if (data.containsKey('subtitle')) {
      final l$subtitle = data['subtitle'];
      result$data['subtitle'] = (l$subtitle as String?);
    }
    if (data.containsKey('subtitleNEQ')) {
      final l$subtitleNEQ = data['subtitleNEQ'];
      result$data['subtitleNEQ'] = (l$subtitleNEQ as String?);
    }
    if (data.containsKey('subtitleIn')) {
      final l$subtitleIn = data['subtitleIn'];
      result$data['subtitleIn'] =
          (l$subtitleIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('subtitleNotIn')) {
      final l$subtitleNotIn = data['subtitleNotIn'];
      result$data['subtitleNotIn'] = (l$subtitleNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('subtitleGT')) {
      final l$subtitleGT = data['subtitleGT'];
      result$data['subtitleGT'] = (l$subtitleGT as String?);
    }
    if (data.containsKey('subtitleGTE')) {
      final l$subtitleGTE = data['subtitleGTE'];
      result$data['subtitleGTE'] = (l$subtitleGTE as String?);
    }
    if (data.containsKey('subtitleLT')) {
      final l$subtitleLT = data['subtitleLT'];
      result$data['subtitleLT'] = (l$subtitleLT as String?);
    }
    if (data.containsKey('subtitleLTE')) {
      final l$subtitleLTE = data['subtitleLTE'];
      result$data['subtitleLTE'] = (l$subtitleLTE as String?);
    }
    if (data.containsKey('subtitleContains')) {
      final l$subtitleContains = data['subtitleContains'];
      result$data['subtitleContains'] = (l$subtitleContains as String?);
    }
    if (data.containsKey('subtitleHasPrefix')) {
      final l$subtitleHasPrefix = data['subtitleHasPrefix'];
      result$data['subtitleHasPrefix'] = (l$subtitleHasPrefix as String?);
    }
    if (data.containsKey('subtitleHasSuffix')) {
      final l$subtitleHasSuffix = data['subtitleHasSuffix'];
      result$data['subtitleHasSuffix'] = (l$subtitleHasSuffix as String?);
    }
    if (data.containsKey('subtitleEqualFold')) {
      final l$subtitleEqualFold = data['subtitleEqualFold'];
      result$data['subtitleEqualFold'] = (l$subtitleEqualFold as String?);
    }
    if (data.containsKey('subtitleContainsFold')) {
      final l$subtitleContainsFold = data['subtitleContainsFold'];
      result$data['subtitleContainsFold'] = (l$subtitleContainsFold as String?);
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = (l$description as String?);
    }
    if (data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = data['descriptionNEQ'];
      result$data['descriptionNEQ'] = (l$descriptionNEQ as String?);
    }
    if (data.containsKey('descriptionIn')) {
      final l$descriptionIn = data['descriptionIn'];
      result$data['descriptionIn'] = (l$descriptionIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = data['descriptionNotIn'];
      result$data['descriptionNotIn'] = (l$descriptionNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionGT')) {
      final l$descriptionGT = data['descriptionGT'];
      result$data['descriptionGT'] = (l$descriptionGT as String?);
    }
    if (data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = data['descriptionGTE'];
      result$data['descriptionGTE'] = (l$descriptionGTE as String?);
    }
    if (data.containsKey('descriptionLT')) {
      final l$descriptionLT = data['descriptionLT'];
      result$data['descriptionLT'] = (l$descriptionLT as String?);
    }
    if (data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = data['descriptionLTE'];
      result$data['descriptionLTE'] = (l$descriptionLTE as String?);
    }
    if (data.containsKey('descriptionContains')) {
      final l$descriptionContains = data['descriptionContains'];
      result$data['descriptionContains'] = (l$descriptionContains as String?);
    }
    if (data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = data['descriptionHasPrefix'];
      result$data['descriptionHasPrefix'] = (l$descriptionHasPrefix as String?);
    }
    if (data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = data['descriptionHasSuffix'];
      result$data['descriptionHasSuffix'] = (l$descriptionHasSuffix as String?);
    }
    if (data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = data['descriptionEqualFold'];
      result$data['descriptionEqualFold'] = (l$descriptionEqualFold as String?);
    }
    if (data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = data['descriptionContainsFold'];
      result$data['descriptionContainsFold'] =
          (l$descriptionContainsFold as String?);
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = (l$order as int?);
    }
    if (data.containsKey('orderNEQ')) {
      final l$orderNEQ = data['orderNEQ'];
      result$data['orderNEQ'] = (l$orderNEQ as int?);
    }
    if (data.containsKey('orderIn')) {
      final l$orderIn = data['orderIn'];
      result$data['orderIn'] =
          (l$orderIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderNotIn')) {
      final l$orderNotIn = data['orderNotIn'];
      result$data['orderNotIn'] =
          (l$orderNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderGT')) {
      final l$orderGT = data['orderGT'];
      result$data['orderGT'] = (l$orderGT as int?);
    }
    if (data.containsKey('orderGTE')) {
      final l$orderGTE = data['orderGTE'];
      result$data['orderGTE'] = (l$orderGTE as int?);
    }
    if (data.containsKey('orderLT')) {
      final l$orderLT = data['orderLT'];
      result$data['orderLT'] = (l$orderLT as int?);
    }
    if (data.containsKey('orderLTE')) {
      final l$orderLTE = data['orderLTE'];
      result$data['orderLTE'] = (l$orderLTE as int?);
    }
    if (data.containsKey('hasUnit')) {
      final l$hasUnit = data['hasUnit'];
      result$data['hasUnit'] = (l$hasUnit as bool?);
    }
    if (data.containsKey('hasUnitWith')) {
      final l$hasUnitWith = data['hasUnitWith'];
      result$data['hasUnitWith'] = (l$hasUnitWith as List<dynamic>?)
          ?.map(
              (e) => Input$UnitWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('hasLessons')) {
      final l$hasLessons = data['hasLessons'];
      result$data['hasLessons'] = (l$hasLessons as bool?);
    }
    if (data.containsKey('hasLessonsWith')) {
      final l$hasLessonsWith = data['hasLessonsWith'];
      result$data['hasLessonsWith'] = (l$hasLessonsWith as List<dynamic>?)
          ?.map((e) =>
              Input$LessonWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('hasTechniques')) {
      final l$hasTechniques = data['hasTechniques'];
      result$data['hasTechniques'] = (l$hasTechniques as bool?);
    }
    if (data.containsKey('hasTechniquesWith')) {
      final l$hasTechniquesWith = data['hasTechniquesWith'];
      result$data['hasTechniquesWith'] = (l$hasTechniquesWith as List<dynamic>?)
          ?.map(
              (e) => Input$UnitWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    return Input$TechniqueWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$TechniqueWhereInput? get not =>
      (_$data['not'] as Input$TechniqueWhereInput?);

  List<Input$TechniqueWhereInput>? get and =>
      (_$data['and'] as List<Input$TechniqueWhereInput>?);

  List<Input$TechniqueWhereInput>? get or =>
      (_$data['or'] as List<Input$TechniqueWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  String? get unitID => (_$data['unitID'] as String?);

  String? get unitIDNEQ => (_$data['unitIDNEQ'] as String?);

  List<String>? get unitIDIn => (_$data['unitIDIn'] as List<String>?);

  List<String>? get unitIDNotIn => (_$data['unitIDNotIn'] as List<String>?);

  String? get iconimage => (_$data['iconimage'] as String?);

  String? get iconimageNEQ => (_$data['iconimageNEQ'] as String?);

  List<String>? get iconimageIn => (_$data['iconimageIn'] as List<String>?);

  List<String>? get iconimageNotIn =>
      (_$data['iconimageNotIn'] as List<String>?);

  String? get iconimageGT => (_$data['iconimageGT'] as String?);

  String? get iconimageGTE => (_$data['iconimageGTE'] as String?);

  String? get iconimageLT => (_$data['iconimageLT'] as String?);

  String? get iconimageLTE => (_$data['iconimageLTE'] as String?);

  String? get iconimageContains => (_$data['iconimageContains'] as String?);

  String? get iconimageHasPrefix => (_$data['iconimageHasPrefix'] as String?);

  String? get iconimageHasSuffix => (_$data['iconimageHasSuffix'] as String?);

  String? get iconimageEqualFold => (_$data['iconimageEqualFold'] as String?);

  String? get iconimageContainsFold =>
      (_$data['iconimageContainsFold'] as String?);

  String? get coverimage => (_$data['coverimage'] as String?);

  String? get coverimageNEQ => (_$data['coverimageNEQ'] as String?);

  List<String>? get coverimageIn => (_$data['coverimageIn'] as List<String>?);

  List<String>? get coverimageNotIn =>
      (_$data['coverimageNotIn'] as List<String>?);

  String? get coverimageGT => (_$data['coverimageGT'] as String?);

  String? get coverimageGTE => (_$data['coverimageGTE'] as String?);

  String? get coverimageLT => (_$data['coverimageLT'] as String?);

  String? get coverimageLTE => (_$data['coverimageLTE'] as String?);

  String? get coverimageContains => (_$data['coverimageContains'] as String?);

  String? get coverimageHasPrefix => (_$data['coverimageHasPrefix'] as String?);

  String? get coverimageHasSuffix => (_$data['coverimageHasSuffix'] as String?);

  String? get coverimageEqualFold => (_$data['coverimageEqualFold'] as String?);

  String? get coverimageContainsFold =>
      (_$data['coverimageContainsFold'] as String?);

  String? get title => (_$data['title'] as String?);

  String? get titleNEQ => (_$data['titleNEQ'] as String?);

  List<String>? get titleIn => (_$data['titleIn'] as List<String>?);

  List<String>? get titleNotIn => (_$data['titleNotIn'] as List<String>?);

  String? get titleGT => (_$data['titleGT'] as String?);

  String? get titleGTE => (_$data['titleGTE'] as String?);

  String? get titleLT => (_$data['titleLT'] as String?);

  String? get titleLTE => (_$data['titleLTE'] as String?);

  String? get titleContains => (_$data['titleContains'] as String?);

  String? get titleHasPrefix => (_$data['titleHasPrefix'] as String?);

  String? get titleHasSuffix => (_$data['titleHasSuffix'] as String?);

  String? get titleEqualFold => (_$data['titleEqualFold'] as String?);

  String? get titleContainsFold => (_$data['titleContainsFold'] as String?);

  String? get subtitle => (_$data['subtitle'] as String?);

  String? get subtitleNEQ => (_$data['subtitleNEQ'] as String?);

  List<String>? get subtitleIn => (_$data['subtitleIn'] as List<String>?);

  List<String>? get subtitleNotIn => (_$data['subtitleNotIn'] as List<String>?);

  String? get subtitleGT => (_$data['subtitleGT'] as String?);

  String? get subtitleGTE => (_$data['subtitleGTE'] as String?);

  String? get subtitleLT => (_$data['subtitleLT'] as String?);

  String? get subtitleLTE => (_$data['subtitleLTE'] as String?);

  String? get subtitleContains => (_$data['subtitleContains'] as String?);

  String? get subtitleHasPrefix => (_$data['subtitleHasPrefix'] as String?);

  String? get subtitleHasSuffix => (_$data['subtitleHasSuffix'] as String?);

  String? get subtitleEqualFold => (_$data['subtitleEqualFold'] as String?);

  String? get subtitleContainsFold =>
      (_$data['subtitleContainsFold'] as String?);

  String? get description => (_$data['description'] as String?);

  String? get descriptionNEQ => (_$data['descriptionNEQ'] as String?);

  List<String>? get descriptionIn => (_$data['descriptionIn'] as List<String>?);

  List<String>? get descriptionNotIn =>
      (_$data['descriptionNotIn'] as List<String>?);

  String? get descriptionGT => (_$data['descriptionGT'] as String?);

  String? get descriptionGTE => (_$data['descriptionGTE'] as String?);

  String? get descriptionLT => (_$data['descriptionLT'] as String?);

  String? get descriptionLTE => (_$data['descriptionLTE'] as String?);

  String? get descriptionContains => (_$data['descriptionContains'] as String?);

  String? get descriptionHasPrefix =>
      (_$data['descriptionHasPrefix'] as String?);

  String? get descriptionHasSuffix =>
      (_$data['descriptionHasSuffix'] as String?);

  String? get descriptionEqualFold =>
      (_$data['descriptionEqualFold'] as String?);

  String? get descriptionContainsFold =>
      (_$data['descriptionContainsFold'] as String?);

  int? get order => (_$data['order'] as int?);

  int? get orderNEQ => (_$data['orderNEQ'] as int?);

  List<int>? get orderIn => (_$data['orderIn'] as List<int>?);

  List<int>? get orderNotIn => (_$data['orderNotIn'] as List<int>?);

  int? get orderGT => (_$data['orderGT'] as int?);

  int? get orderGTE => (_$data['orderGTE'] as int?);

  int? get orderLT => (_$data['orderLT'] as int?);

  int? get orderLTE => (_$data['orderLTE'] as int?);

  bool? get hasUnit => (_$data['hasUnit'] as bool?);

  List<Input$UnitWhereInput>? get hasUnitWith =>
      (_$data['hasUnitWith'] as List<Input$UnitWhereInput>?);

  bool? get hasLessons => (_$data['hasLessons'] as bool?);

  List<Input$LessonWhereInput>? get hasLessonsWith =>
      (_$data['hasLessonsWith'] as List<Input$LessonWhereInput>?);

  bool? get hasTechniques => (_$data['hasTechniques'] as bool?);

  List<Input$UnitWhereInput>? get hasTechniquesWith =>
      (_$data['hasTechniquesWith'] as List<Input$UnitWhereInput>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('unitID')) {
      final l$unitID = unitID;
      result$data['unitID'] = l$unitID;
    }
    if (_$data.containsKey('unitIDNEQ')) {
      final l$unitIDNEQ = unitIDNEQ;
      result$data['unitIDNEQ'] = l$unitIDNEQ;
    }
    if (_$data.containsKey('unitIDIn')) {
      final l$unitIDIn = unitIDIn;
      result$data['unitIDIn'] = l$unitIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('unitIDNotIn')) {
      final l$unitIDNotIn = unitIDNotIn;
      result$data['unitIDNotIn'] = l$unitIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimage')) {
      final l$iconimage = iconimage;
      result$data['iconimage'] = l$iconimage;
    }
    if (_$data.containsKey('iconimageNEQ')) {
      final l$iconimageNEQ = iconimageNEQ;
      result$data['iconimageNEQ'] = l$iconimageNEQ;
    }
    if (_$data.containsKey('iconimageIn')) {
      final l$iconimageIn = iconimageIn;
      result$data['iconimageIn'] = l$iconimageIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimageNotIn')) {
      final l$iconimageNotIn = iconimageNotIn;
      result$data['iconimageNotIn'] = l$iconimageNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimageGT')) {
      final l$iconimageGT = iconimageGT;
      result$data['iconimageGT'] = l$iconimageGT;
    }
    if (_$data.containsKey('iconimageGTE')) {
      final l$iconimageGTE = iconimageGTE;
      result$data['iconimageGTE'] = l$iconimageGTE;
    }
    if (_$data.containsKey('iconimageLT')) {
      final l$iconimageLT = iconimageLT;
      result$data['iconimageLT'] = l$iconimageLT;
    }
    if (_$data.containsKey('iconimageLTE')) {
      final l$iconimageLTE = iconimageLTE;
      result$data['iconimageLTE'] = l$iconimageLTE;
    }
    if (_$data.containsKey('iconimageContains')) {
      final l$iconimageContains = iconimageContains;
      result$data['iconimageContains'] = l$iconimageContains;
    }
    if (_$data.containsKey('iconimageHasPrefix')) {
      final l$iconimageHasPrefix = iconimageHasPrefix;
      result$data['iconimageHasPrefix'] = l$iconimageHasPrefix;
    }
    if (_$data.containsKey('iconimageHasSuffix')) {
      final l$iconimageHasSuffix = iconimageHasSuffix;
      result$data['iconimageHasSuffix'] = l$iconimageHasSuffix;
    }
    if (_$data.containsKey('iconimageEqualFold')) {
      final l$iconimageEqualFold = iconimageEqualFold;
      result$data['iconimageEqualFold'] = l$iconimageEqualFold;
    }
    if (_$data.containsKey('iconimageContainsFold')) {
      final l$iconimageContainsFold = iconimageContainsFold;
      result$data['iconimageContainsFold'] = l$iconimageContainsFold;
    }
    if (_$data.containsKey('coverimage')) {
      final l$coverimage = coverimage;
      result$data['coverimage'] = l$coverimage;
    }
    if (_$data.containsKey('coverimageNEQ')) {
      final l$coverimageNEQ = coverimageNEQ;
      result$data['coverimageNEQ'] = l$coverimageNEQ;
    }
    if (_$data.containsKey('coverimageIn')) {
      final l$coverimageIn = coverimageIn;
      result$data['coverimageIn'] = l$coverimageIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('coverimageNotIn')) {
      final l$coverimageNotIn = coverimageNotIn;
      result$data['coverimageNotIn'] =
          l$coverimageNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('coverimageGT')) {
      final l$coverimageGT = coverimageGT;
      result$data['coverimageGT'] = l$coverimageGT;
    }
    if (_$data.containsKey('coverimageGTE')) {
      final l$coverimageGTE = coverimageGTE;
      result$data['coverimageGTE'] = l$coverimageGTE;
    }
    if (_$data.containsKey('coverimageLT')) {
      final l$coverimageLT = coverimageLT;
      result$data['coverimageLT'] = l$coverimageLT;
    }
    if (_$data.containsKey('coverimageLTE')) {
      final l$coverimageLTE = coverimageLTE;
      result$data['coverimageLTE'] = l$coverimageLTE;
    }
    if (_$data.containsKey('coverimageContains')) {
      final l$coverimageContains = coverimageContains;
      result$data['coverimageContains'] = l$coverimageContains;
    }
    if (_$data.containsKey('coverimageHasPrefix')) {
      final l$coverimageHasPrefix = coverimageHasPrefix;
      result$data['coverimageHasPrefix'] = l$coverimageHasPrefix;
    }
    if (_$data.containsKey('coverimageHasSuffix')) {
      final l$coverimageHasSuffix = coverimageHasSuffix;
      result$data['coverimageHasSuffix'] = l$coverimageHasSuffix;
    }
    if (_$data.containsKey('coverimageEqualFold')) {
      final l$coverimageEqualFold = coverimageEqualFold;
      result$data['coverimageEqualFold'] = l$coverimageEqualFold;
    }
    if (_$data.containsKey('coverimageContainsFold')) {
      final l$coverimageContainsFold = coverimageContainsFold;
      result$data['coverimageContainsFold'] = l$coverimageContainsFold;
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] = l$title;
    }
    if (_$data.containsKey('titleNEQ')) {
      final l$titleNEQ = titleNEQ;
      result$data['titleNEQ'] = l$titleNEQ;
    }
    if (_$data.containsKey('titleIn')) {
      final l$titleIn = titleIn;
      result$data['titleIn'] = l$titleIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleNotIn')) {
      final l$titleNotIn = titleNotIn;
      result$data['titleNotIn'] = l$titleNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleGT')) {
      final l$titleGT = titleGT;
      result$data['titleGT'] = l$titleGT;
    }
    if (_$data.containsKey('titleGTE')) {
      final l$titleGTE = titleGTE;
      result$data['titleGTE'] = l$titleGTE;
    }
    if (_$data.containsKey('titleLT')) {
      final l$titleLT = titleLT;
      result$data['titleLT'] = l$titleLT;
    }
    if (_$data.containsKey('titleLTE')) {
      final l$titleLTE = titleLTE;
      result$data['titleLTE'] = l$titleLTE;
    }
    if (_$data.containsKey('titleContains')) {
      final l$titleContains = titleContains;
      result$data['titleContains'] = l$titleContains;
    }
    if (_$data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = titleHasPrefix;
      result$data['titleHasPrefix'] = l$titleHasPrefix;
    }
    if (_$data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = titleHasSuffix;
      result$data['titleHasSuffix'] = l$titleHasSuffix;
    }
    if (_$data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = titleEqualFold;
      result$data['titleEqualFold'] = l$titleEqualFold;
    }
    if (_$data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = titleContainsFold;
      result$data['titleContainsFold'] = l$titleContainsFold;
    }
    if (_$data.containsKey('subtitle')) {
      final l$subtitle = subtitle;
      result$data['subtitle'] = l$subtitle;
    }
    if (_$data.containsKey('subtitleNEQ')) {
      final l$subtitleNEQ = subtitleNEQ;
      result$data['subtitleNEQ'] = l$subtitleNEQ;
    }
    if (_$data.containsKey('subtitleIn')) {
      final l$subtitleIn = subtitleIn;
      result$data['subtitleIn'] = l$subtitleIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('subtitleNotIn')) {
      final l$subtitleNotIn = subtitleNotIn;
      result$data['subtitleNotIn'] = l$subtitleNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('subtitleGT')) {
      final l$subtitleGT = subtitleGT;
      result$data['subtitleGT'] = l$subtitleGT;
    }
    if (_$data.containsKey('subtitleGTE')) {
      final l$subtitleGTE = subtitleGTE;
      result$data['subtitleGTE'] = l$subtitleGTE;
    }
    if (_$data.containsKey('subtitleLT')) {
      final l$subtitleLT = subtitleLT;
      result$data['subtitleLT'] = l$subtitleLT;
    }
    if (_$data.containsKey('subtitleLTE')) {
      final l$subtitleLTE = subtitleLTE;
      result$data['subtitleLTE'] = l$subtitleLTE;
    }
    if (_$data.containsKey('subtitleContains')) {
      final l$subtitleContains = subtitleContains;
      result$data['subtitleContains'] = l$subtitleContains;
    }
    if (_$data.containsKey('subtitleHasPrefix')) {
      final l$subtitleHasPrefix = subtitleHasPrefix;
      result$data['subtitleHasPrefix'] = l$subtitleHasPrefix;
    }
    if (_$data.containsKey('subtitleHasSuffix')) {
      final l$subtitleHasSuffix = subtitleHasSuffix;
      result$data['subtitleHasSuffix'] = l$subtitleHasSuffix;
    }
    if (_$data.containsKey('subtitleEqualFold')) {
      final l$subtitleEqualFold = subtitleEqualFold;
      result$data['subtitleEqualFold'] = l$subtitleEqualFold;
    }
    if (_$data.containsKey('subtitleContainsFold')) {
      final l$subtitleContainsFold = subtitleContainsFold;
      result$data['subtitleContainsFold'] = l$subtitleContainsFold;
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] = l$description;
    }
    if (_$data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = descriptionNEQ;
      result$data['descriptionNEQ'] = l$descriptionNEQ;
    }
    if (_$data.containsKey('descriptionIn')) {
      final l$descriptionIn = descriptionIn;
      result$data['descriptionIn'] = l$descriptionIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = descriptionNotIn;
      result$data['descriptionNotIn'] =
          l$descriptionNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionGT')) {
      final l$descriptionGT = descriptionGT;
      result$data['descriptionGT'] = l$descriptionGT;
    }
    if (_$data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = descriptionGTE;
      result$data['descriptionGTE'] = l$descriptionGTE;
    }
    if (_$data.containsKey('descriptionLT')) {
      final l$descriptionLT = descriptionLT;
      result$data['descriptionLT'] = l$descriptionLT;
    }
    if (_$data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = descriptionLTE;
      result$data['descriptionLTE'] = l$descriptionLTE;
    }
    if (_$data.containsKey('descriptionContains')) {
      final l$descriptionContains = descriptionContains;
      result$data['descriptionContains'] = l$descriptionContains;
    }
    if (_$data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = descriptionHasPrefix;
      result$data['descriptionHasPrefix'] = l$descriptionHasPrefix;
    }
    if (_$data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = descriptionHasSuffix;
      result$data['descriptionHasSuffix'] = l$descriptionHasSuffix;
    }
    if (_$data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = descriptionEqualFold;
      result$data['descriptionEqualFold'] = l$descriptionEqualFold;
    }
    if (_$data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = descriptionContainsFold;
      result$data['descriptionContainsFold'] = l$descriptionContainsFold;
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order;
    }
    if (_$data.containsKey('orderNEQ')) {
      final l$orderNEQ = orderNEQ;
      result$data['orderNEQ'] = l$orderNEQ;
    }
    if (_$data.containsKey('orderIn')) {
      final l$orderIn = orderIn;
      result$data['orderIn'] = l$orderIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderNotIn')) {
      final l$orderNotIn = orderNotIn;
      result$data['orderNotIn'] = l$orderNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderGT')) {
      final l$orderGT = orderGT;
      result$data['orderGT'] = l$orderGT;
    }
    if (_$data.containsKey('orderGTE')) {
      final l$orderGTE = orderGTE;
      result$data['orderGTE'] = l$orderGTE;
    }
    if (_$data.containsKey('orderLT')) {
      final l$orderLT = orderLT;
      result$data['orderLT'] = l$orderLT;
    }
    if (_$data.containsKey('orderLTE')) {
      final l$orderLTE = orderLTE;
      result$data['orderLTE'] = l$orderLTE;
    }
    if (_$data.containsKey('hasUnit')) {
      final l$hasUnit = hasUnit;
      result$data['hasUnit'] = l$hasUnit;
    }
    if (_$data.containsKey('hasUnitWith')) {
      final l$hasUnitWith = hasUnitWith;
      result$data['hasUnitWith'] =
          l$hasUnitWith?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('hasLessons')) {
      final l$hasLessons = hasLessons;
      result$data['hasLessons'] = l$hasLessons;
    }
    if (_$data.containsKey('hasLessonsWith')) {
      final l$hasLessonsWith = hasLessonsWith;
      result$data['hasLessonsWith'] =
          l$hasLessonsWith?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('hasTechniques')) {
      final l$hasTechniques = hasTechniques;
      result$data['hasTechniques'] = l$hasTechniques;
    }
    if (_$data.containsKey('hasTechniquesWith')) {
      final l$hasTechniquesWith = hasTechniquesWith;
      result$data['hasTechniquesWith'] =
          l$hasTechniquesWith?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$TechniqueWhereInput<Input$TechniqueWhereInput> get copyWith =>
      CopyWith$Input$TechniqueWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$TechniqueWhereInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$unitID = unitID;
    final lOther$unitID = other.unitID;
    if (_$data.containsKey('unitID') != other._$data.containsKey('unitID')) {
      return false;
    }
    if (l$unitID != lOther$unitID) {
      return false;
    }
    final l$unitIDNEQ = unitIDNEQ;
    final lOther$unitIDNEQ = other.unitIDNEQ;
    if (_$data.containsKey('unitIDNEQ') !=
        other._$data.containsKey('unitIDNEQ')) {
      return false;
    }
    if (l$unitIDNEQ != lOther$unitIDNEQ) {
      return false;
    }
    final l$unitIDIn = unitIDIn;
    final lOther$unitIDIn = other.unitIDIn;
    if (_$data.containsKey('unitIDIn') !=
        other._$data.containsKey('unitIDIn')) {
      return false;
    }
    if (l$unitIDIn != null && lOther$unitIDIn != null) {
      if (l$unitIDIn.length != lOther$unitIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$unitIDIn.length; i++) {
        final l$unitIDIn$entry = l$unitIDIn[i];
        final lOther$unitIDIn$entry = lOther$unitIDIn[i];
        if (l$unitIDIn$entry != lOther$unitIDIn$entry) {
          return false;
        }
      }
    } else if (l$unitIDIn != lOther$unitIDIn) {
      return false;
    }
    final l$unitIDNotIn = unitIDNotIn;
    final lOther$unitIDNotIn = other.unitIDNotIn;
    if (_$data.containsKey('unitIDNotIn') !=
        other._$data.containsKey('unitIDNotIn')) {
      return false;
    }
    if (l$unitIDNotIn != null && lOther$unitIDNotIn != null) {
      if (l$unitIDNotIn.length != lOther$unitIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$unitIDNotIn.length; i++) {
        final l$unitIDNotIn$entry = l$unitIDNotIn[i];
        final lOther$unitIDNotIn$entry = lOther$unitIDNotIn[i];
        if (l$unitIDNotIn$entry != lOther$unitIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$unitIDNotIn != lOther$unitIDNotIn) {
      return false;
    }
    final l$iconimage = iconimage;
    final lOther$iconimage = other.iconimage;
    if (_$data.containsKey('iconimage') !=
        other._$data.containsKey('iconimage')) {
      return false;
    }
    if (l$iconimage != lOther$iconimage) {
      return false;
    }
    final l$iconimageNEQ = iconimageNEQ;
    final lOther$iconimageNEQ = other.iconimageNEQ;
    if (_$data.containsKey('iconimageNEQ') !=
        other._$data.containsKey('iconimageNEQ')) {
      return false;
    }
    if (l$iconimageNEQ != lOther$iconimageNEQ) {
      return false;
    }
    final l$iconimageIn = iconimageIn;
    final lOther$iconimageIn = other.iconimageIn;
    if (_$data.containsKey('iconimageIn') !=
        other._$data.containsKey('iconimageIn')) {
      return false;
    }
    if (l$iconimageIn != null && lOther$iconimageIn != null) {
      if (l$iconimageIn.length != lOther$iconimageIn.length) {
        return false;
      }
      for (int i = 0; i < l$iconimageIn.length; i++) {
        final l$iconimageIn$entry = l$iconimageIn[i];
        final lOther$iconimageIn$entry = lOther$iconimageIn[i];
        if (l$iconimageIn$entry != lOther$iconimageIn$entry) {
          return false;
        }
      }
    } else if (l$iconimageIn != lOther$iconimageIn) {
      return false;
    }
    final l$iconimageNotIn = iconimageNotIn;
    final lOther$iconimageNotIn = other.iconimageNotIn;
    if (_$data.containsKey('iconimageNotIn') !=
        other._$data.containsKey('iconimageNotIn')) {
      return false;
    }
    if (l$iconimageNotIn != null && lOther$iconimageNotIn != null) {
      if (l$iconimageNotIn.length != lOther$iconimageNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$iconimageNotIn.length; i++) {
        final l$iconimageNotIn$entry = l$iconimageNotIn[i];
        final lOther$iconimageNotIn$entry = lOther$iconimageNotIn[i];
        if (l$iconimageNotIn$entry != lOther$iconimageNotIn$entry) {
          return false;
        }
      }
    } else if (l$iconimageNotIn != lOther$iconimageNotIn) {
      return false;
    }
    final l$iconimageGT = iconimageGT;
    final lOther$iconimageGT = other.iconimageGT;
    if (_$data.containsKey('iconimageGT') !=
        other._$data.containsKey('iconimageGT')) {
      return false;
    }
    if (l$iconimageGT != lOther$iconimageGT) {
      return false;
    }
    final l$iconimageGTE = iconimageGTE;
    final lOther$iconimageGTE = other.iconimageGTE;
    if (_$data.containsKey('iconimageGTE') !=
        other._$data.containsKey('iconimageGTE')) {
      return false;
    }
    if (l$iconimageGTE != lOther$iconimageGTE) {
      return false;
    }
    final l$iconimageLT = iconimageLT;
    final lOther$iconimageLT = other.iconimageLT;
    if (_$data.containsKey('iconimageLT') !=
        other._$data.containsKey('iconimageLT')) {
      return false;
    }
    if (l$iconimageLT != lOther$iconimageLT) {
      return false;
    }
    final l$iconimageLTE = iconimageLTE;
    final lOther$iconimageLTE = other.iconimageLTE;
    if (_$data.containsKey('iconimageLTE') !=
        other._$data.containsKey('iconimageLTE')) {
      return false;
    }
    if (l$iconimageLTE != lOther$iconimageLTE) {
      return false;
    }
    final l$iconimageContains = iconimageContains;
    final lOther$iconimageContains = other.iconimageContains;
    if (_$data.containsKey('iconimageContains') !=
        other._$data.containsKey('iconimageContains')) {
      return false;
    }
    if (l$iconimageContains != lOther$iconimageContains) {
      return false;
    }
    final l$iconimageHasPrefix = iconimageHasPrefix;
    final lOther$iconimageHasPrefix = other.iconimageHasPrefix;
    if (_$data.containsKey('iconimageHasPrefix') !=
        other._$data.containsKey('iconimageHasPrefix')) {
      return false;
    }
    if (l$iconimageHasPrefix != lOther$iconimageHasPrefix) {
      return false;
    }
    final l$iconimageHasSuffix = iconimageHasSuffix;
    final lOther$iconimageHasSuffix = other.iconimageHasSuffix;
    if (_$data.containsKey('iconimageHasSuffix') !=
        other._$data.containsKey('iconimageHasSuffix')) {
      return false;
    }
    if (l$iconimageHasSuffix != lOther$iconimageHasSuffix) {
      return false;
    }
    final l$iconimageEqualFold = iconimageEqualFold;
    final lOther$iconimageEqualFold = other.iconimageEqualFold;
    if (_$data.containsKey('iconimageEqualFold') !=
        other._$data.containsKey('iconimageEqualFold')) {
      return false;
    }
    if (l$iconimageEqualFold != lOther$iconimageEqualFold) {
      return false;
    }
    final l$iconimageContainsFold = iconimageContainsFold;
    final lOther$iconimageContainsFold = other.iconimageContainsFold;
    if (_$data.containsKey('iconimageContainsFold') !=
        other._$data.containsKey('iconimageContainsFold')) {
      return false;
    }
    if (l$iconimageContainsFold != lOther$iconimageContainsFold) {
      return false;
    }
    final l$coverimage = coverimage;
    final lOther$coverimage = other.coverimage;
    if (_$data.containsKey('coverimage') !=
        other._$data.containsKey('coverimage')) {
      return false;
    }
    if (l$coverimage != lOther$coverimage) {
      return false;
    }
    final l$coverimageNEQ = coverimageNEQ;
    final lOther$coverimageNEQ = other.coverimageNEQ;
    if (_$data.containsKey('coverimageNEQ') !=
        other._$data.containsKey('coverimageNEQ')) {
      return false;
    }
    if (l$coverimageNEQ != lOther$coverimageNEQ) {
      return false;
    }
    final l$coverimageIn = coverimageIn;
    final lOther$coverimageIn = other.coverimageIn;
    if (_$data.containsKey('coverimageIn') !=
        other._$data.containsKey('coverimageIn')) {
      return false;
    }
    if (l$coverimageIn != null && lOther$coverimageIn != null) {
      if (l$coverimageIn.length != lOther$coverimageIn.length) {
        return false;
      }
      for (int i = 0; i < l$coverimageIn.length; i++) {
        final l$coverimageIn$entry = l$coverimageIn[i];
        final lOther$coverimageIn$entry = lOther$coverimageIn[i];
        if (l$coverimageIn$entry != lOther$coverimageIn$entry) {
          return false;
        }
      }
    } else if (l$coverimageIn != lOther$coverimageIn) {
      return false;
    }
    final l$coverimageNotIn = coverimageNotIn;
    final lOther$coverimageNotIn = other.coverimageNotIn;
    if (_$data.containsKey('coverimageNotIn') !=
        other._$data.containsKey('coverimageNotIn')) {
      return false;
    }
    if (l$coverimageNotIn != null && lOther$coverimageNotIn != null) {
      if (l$coverimageNotIn.length != lOther$coverimageNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$coverimageNotIn.length; i++) {
        final l$coverimageNotIn$entry = l$coverimageNotIn[i];
        final lOther$coverimageNotIn$entry = lOther$coverimageNotIn[i];
        if (l$coverimageNotIn$entry != lOther$coverimageNotIn$entry) {
          return false;
        }
      }
    } else if (l$coverimageNotIn != lOther$coverimageNotIn) {
      return false;
    }
    final l$coverimageGT = coverimageGT;
    final lOther$coverimageGT = other.coverimageGT;
    if (_$data.containsKey('coverimageGT') !=
        other._$data.containsKey('coverimageGT')) {
      return false;
    }
    if (l$coverimageGT != lOther$coverimageGT) {
      return false;
    }
    final l$coverimageGTE = coverimageGTE;
    final lOther$coverimageGTE = other.coverimageGTE;
    if (_$data.containsKey('coverimageGTE') !=
        other._$data.containsKey('coverimageGTE')) {
      return false;
    }
    if (l$coverimageGTE != lOther$coverimageGTE) {
      return false;
    }
    final l$coverimageLT = coverimageLT;
    final lOther$coverimageLT = other.coverimageLT;
    if (_$data.containsKey('coverimageLT') !=
        other._$data.containsKey('coverimageLT')) {
      return false;
    }
    if (l$coverimageLT != lOther$coverimageLT) {
      return false;
    }
    final l$coverimageLTE = coverimageLTE;
    final lOther$coverimageLTE = other.coverimageLTE;
    if (_$data.containsKey('coverimageLTE') !=
        other._$data.containsKey('coverimageLTE')) {
      return false;
    }
    if (l$coverimageLTE != lOther$coverimageLTE) {
      return false;
    }
    final l$coverimageContains = coverimageContains;
    final lOther$coverimageContains = other.coverimageContains;
    if (_$data.containsKey('coverimageContains') !=
        other._$data.containsKey('coverimageContains')) {
      return false;
    }
    if (l$coverimageContains != lOther$coverimageContains) {
      return false;
    }
    final l$coverimageHasPrefix = coverimageHasPrefix;
    final lOther$coverimageHasPrefix = other.coverimageHasPrefix;
    if (_$data.containsKey('coverimageHasPrefix') !=
        other._$data.containsKey('coverimageHasPrefix')) {
      return false;
    }
    if (l$coverimageHasPrefix != lOther$coverimageHasPrefix) {
      return false;
    }
    final l$coverimageHasSuffix = coverimageHasSuffix;
    final lOther$coverimageHasSuffix = other.coverimageHasSuffix;
    if (_$data.containsKey('coverimageHasSuffix') !=
        other._$data.containsKey('coverimageHasSuffix')) {
      return false;
    }
    if (l$coverimageHasSuffix != lOther$coverimageHasSuffix) {
      return false;
    }
    final l$coverimageEqualFold = coverimageEqualFold;
    final lOther$coverimageEqualFold = other.coverimageEqualFold;
    if (_$data.containsKey('coverimageEqualFold') !=
        other._$data.containsKey('coverimageEqualFold')) {
      return false;
    }
    if (l$coverimageEqualFold != lOther$coverimageEqualFold) {
      return false;
    }
    final l$coverimageContainsFold = coverimageContainsFold;
    final lOther$coverimageContainsFold = other.coverimageContainsFold;
    if (_$data.containsKey('coverimageContainsFold') !=
        other._$data.containsKey('coverimageContainsFold')) {
      return false;
    }
    if (l$coverimageContainsFold != lOther$coverimageContainsFold) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$titleNEQ = titleNEQ;
    final lOther$titleNEQ = other.titleNEQ;
    if (_$data.containsKey('titleNEQ') !=
        other._$data.containsKey('titleNEQ')) {
      return false;
    }
    if (l$titleNEQ != lOther$titleNEQ) {
      return false;
    }
    final l$titleIn = titleIn;
    final lOther$titleIn = other.titleIn;
    if (_$data.containsKey('titleIn') != other._$data.containsKey('titleIn')) {
      return false;
    }
    if (l$titleIn != null && lOther$titleIn != null) {
      if (l$titleIn.length != lOther$titleIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleIn.length; i++) {
        final l$titleIn$entry = l$titleIn[i];
        final lOther$titleIn$entry = lOther$titleIn[i];
        if (l$titleIn$entry != lOther$titleIn$entry) {
          return false;
        }
      }
    } else if (l$titleIn != lOther$titleIn) {
      return false;
    }
    final l$titleNotIn = titleNotIn;
    final lOther$titleNotIn = other.titleNotIn;
    if (_$data.containsKey('titleNotIn') !=
        other._$data.containsKey('titleNotIn')) {
      return false;
    }
    if (l$titleNotIn != null && lOther$titleNotIn != null) {
      if (l$titleNotIn.length != lOther$titleNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleNotIn.length; i++) {
        final l$titleNotIn$entry = l$titleNotIn[i];
        final lOther$titleNotIn$entry = lOther$titleNotIn[i];
        if (l$titleNotIn$entry != lOther$titleNotIn$entry) {
          return false;
        }
      }
    } else if (l$titleNotIn != lOther$titleNotIn) {
      return false;
    }
    final l$titleGT = titleGT;
    final lOther$titleGT = other.titleGT;
    if (_$data.containsKey('titleGT') != other._$data.containsKey('titleGT')) {
      return false;
    }
    if (l$titleGT != lOther$titleGT) {
      return false;
    }
    final l$titleGTE = titleGTE;
    final lOther$titleGTE = other.titleGTE;
    if (_$data.containsKey('titleGTE') !=
        other._$data.containsKey('titleGTE')) {
      return false;
    }
    if (l$titleGTE != lOther$titleGTE) {
      return false;
    }
    final l$titleLT = titleLT;
    final lOther$titleLT = other.titleLT;
    if (_$data.containsKey('titleLT') != other._$data.containsKey('titleLT')) {
      return false;
    }
    if (l$titleLT != lOther$titleLT) {
      return false;
    }
    final l$titleLTE = titleLTE;
    final lOther$titleLTE = other.titleLTE;
    if (_$data.containsKey('titleLTE') !=
        other._$data.containsKey('titleLTE')) {
      return false;
    }
    if (l$titleLTE != lOther$titleLTE) {
      return false;
    }
    final l$titleContains = titleContains;
    final lOther$titleContains = other.titleContains;
    if (_$data.containsKey('titleContains') !=
        other._$data.containsKey('titleContains')) {
      return false;
    }
    if (l$titleContains != lOther$titleContains) {
      return false;
    }
    final l$titleHasPrefix = titleHasPrefix;
    final lOther$titleHasPrefix = other.titleHasPrefix;
    if (_$data.containsKey('titleHasPrefix') !=
        other._$data.containsKey('titleHasPrefix')) {
      return false;
    }
    if (l$titleHasPrefix != lOther$titleHasPrefix) {
      return false;
    }
    final l$titleHasSuffix = titleHasSuffix;
    final lOther$titleHasSuffix = other.titleHasSuffix;
    if (_$data.containsKey('titleHasSuffix') !=
        other._$data.containsKey('titleHasSuffix')) {
      return false;
    }
    if (l$titleHasSuffix != lOther$titleHasSuffix) {
      return false;
    }
    final l$titleEqualFold = titleEqualFold;
    final lOther$titleEqualFold = other.titleEqualFold;
    if (_$data.containsKey('titleEqualFold') !=
        other._$data.containsKey('titleEqualFold')) {
      return false;
    }
    if (l$titleEqualFold != lOther$titleEqualFold) {
      return false;
    }
    final l$titleContainsFold = titleContainsFold;
    final lOther$titleContainsFold = other.titleContainsFold;
    if (_$data.containsKey('titleContainsFold') !=
        other._$data.containsKey('titleContainsFold')) {
      return false;
    }
    if (l$titleContainsFold != lOther$titleContainsFold) {
      return false;
    }
    final l$subtitle = subtitle;
    final lOther$subtitle = other.subtitle;
    if (_$data.containsKey('subtitle') !=
        other._$data.containsKey('subtitle')) {
      return false;
    }
    if (l$subtitle != lOther$subtitle) {
      return false;
    }
    final l$subtitleNEQ = subtitleNEQ;
    final lOther$subtitleNEQ = other.subtitleNEQ;
    if (_$data.containsKey('subtitleNEQ') !=
        other._$data.containsKey('subtitleNEQ')) {
      return false;
    }
    if (l$subtitleNEQ != lOther$subtitleNEQ) {
      return false;
    }
    final l$subtitleIn = subtitleIn;
    final lOther$subtitleIn = other.subtitleIn;
    if (_$data.containsKey('subtitleIn') !=
        other._$data.containsKey('subtitleIn')) {
      return false;
    }
    if (l$subtitleIn != null && lOther$subtitleIn != null) {
      if (l$subtitleIn.length != lOther$subtitleIn.length) {
        return false;
      }
      for (int i = 0; i < l$subtitleIn.length; i++) {
        final l$subtitleIn$entry = l$subtitleIn[i];
        final lOther$subtitleIn$entry = lOther$subtitleIn[i];
        if (l$subtitleIn$entry != lOther$subtitleIn$entry) {
          return false;
        }
      }
    } else if (l$subtitleIn != lOther$subtitleIn) {
      return false;
    }
    final l$subtitleNotIn = subtitleNotIn;
    final lOther$subtitleNotIn = other.subtitleNotIn;
    if (_$data.containsKey('subtitleNotIn') !=
        other._$data.containsKey('subtitleNotIn')) {
      return false;
    }
    if (l$subtitleNotIn != null && lOther$subtitleNotIn != null) {
      if (l$subtitleNotIn.length != lOther$subtitleNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$subtitleNotIn.length; i++) {
        final l$subtitleNotIn$entry = l$subtitleNotIn[i];
        final lOther$subtitleNotIn$entry = lOther$subtitleNotIn[i];
        if (l$subtitleNotIn$entry != lOther$subtitleNotIn$entry) {
          return false;
        }
      }
    } else if (l$subtitleNotIn != lOther$subtitleNotIn) {
      return false;
    }
    final l$subtitleGT = subtitleGT;
    final lOther$subtitleGT = other.subtitleGT;
    if (_$data.containsKey('subtitleGT') !=
        other._$data.containsKey('subtitleGT')) {
      return false;
    }
    if (l$subtitleGT != lOther$subtitleGT) {
      return false;
    }
    final l$subtitleGTE = subtitleGTE;
    final lOther$subtitleGTE = other.subtitleGTE;
    if (_$data.containsKey('subtitleGTE') !=
        other._$data.containsKey('subtitleGTE')) {
      return false;
    }
    if (l$subtitleGTE != lOther$subtitleGTE) {
      return false;
    }
    final l$subtitleLT = subtitleLT;
    final lOther$subtitleLT = other.subtitleLT;
    if (_$data.containsKey('subtitleLT') !=
        other._$data.containsKey('subtitleLT')) {
      return false;
    }
    if (l$subtitleLT != lOther$subtitleLT) {
      return false;
    }
    final l$subtitleLTE = subtitleLTE;
    final lOther$subtitleLTE = other.subtitleLTE;
    if (_$data.containsKey('subtitleLTE') !=
        other._$data.containsKey('subtitleLTE')) {
      return false;
    }
    if (l$subtitleLTE != lOther$subtitleLTE) {
      return false;
    }
    final l$subtitleContains = subtitleContains;
    final lOther$subtitleContains = other.subtitleContains;
    if (_$data.containsKey('subtitleContains') !=
        other._$data.containsKey('subtitleContains')) {
      return false;
    }
    if (l$subtitleContains != lOther$subtitleContains) {
      return false;
    }
    final l$subtitleHasPrefix = subtitleHasPrefix;
    final lOther$subtitleHasPrefix = other.subtitleHasPrefix;
    if (_$data.containsKey('subtitleHasPrefix') !=
        other._$data.containsKey('subtitleHasPrefix')) {
      return false;
    }
    if (l$subtitleHasPrefix != lOther$subtitleHasPrefix) {
      return false;
    }
    final l$subtitleHasSuffix = subtitleHasSuffix;
    final lOther$subtitleHasSuffix = other.subtitleHasSuffix;
    if (_$data.containsKey('subtitleHasSuffix') !=
        other._$data.containsKey('subtitleHasSuffix')) {
      return false;
    }
    if (l$subtitleHasSuffix != lOther$subtitleHasSuffix) {
      return false;
    }
    final l$subtitleEqualFold = subtitleEqualFold;
    final lOther$subtitleEqualFold = other.subtitleEqualFold;
    if (_$data.containsKey('subtitleEqualFold') !=
        other._$data.containsKey('subtitleEqualFold')) {
      return false;
    }
    if (l$subtitleEqualFold != lOther$subtitleEqualFold) {
      return false;
    }
    final l$subtitleContainsFold = subtitleContainsFold;
    final lOther$subtitleContainsFold = other.subtitleContainsFold;
    if (_$data.containsKey('subtitleContainsFold') !=
        other._$data.containsKey('subtitleContainsFold')) {
      return false;
    }
    if (l$subtitleContainsFold != lOther$subtitleContainsFold) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$descriptionNEQ = descriptionNEQ;
    final lOther$descriptionNEQ = other.descriptionNEQ;
    if (_$data.containsKey('descriptionNEQ') !=
        other._$data.containsKey('descriptionNEQ')) {
      return false;
    }
    if (l$descriptionNEQ != lOther$descriptionNEQ) {
      return false;
    }
    final l$descriptionIn = descriptionIn;
    final lOther$descriptionIn = other.descriptionIn;
    if (_$data.containsKey('descriptionIn') !=
        other._$data.containsKey('descriptionIn')) {
      return false;
    }
    if (l$descriptionIn != null && lOther$descriptionIn != null) {
      if (l$descriptionIn.length != lOther$descriptionIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionIn.length; i++) {
        final l$descriptionIn$entry = l$descriptionIn[i];
        final lOther$descriptionIn$entry = lOther$descriptionIn[i];
        if (l$descriptionIn$entry != lOther$descriptionIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionIn != lOther$descriptionIn) {
      return false;
    }
    final l$descriptionNotIn = descriptionNotIn;
    final lOther$descriptionNotIn = other.descriptionNotIn;
    if (_$data.containsKey('descriptionNotIn') !=
        other._$data.containsKey('descriptionNotIn')) {
      return false;
    }
    if (l$descriptionNotIn != null && lOther$descriptionNotIn != null) {
      if (l$descriptionNotIn.length != lOther$descriptionNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionNotIn.length; i++) {
        final l$descriptionNotIn$entry = l$descriptionNotIn[i];
        final lOther$descriptionNotIn$entry = lOther$descriptionNotIn[i];
        if (l$descriptionNotIn$entry != lOther$descriptionNotIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionNotIn != lOther$descriptionNotIn) {
      return false;
    }
    final l$descriptionGT = descriptionGT;
    final lOther$descriptionGT = other.descriptionGT;
    if (_$data.containsKey('descriptionGT') !=
        other._$data.containsKey('descriptionGT')) {
      return false;
    }
    if (l$descriptionGT != lOther$descriptionGT) {
      return false;
    }
    final l$descriptionGTE = descriptionGTE;
    final lOther$descriptionGTE = other.descriptionGTE;
    if (_$data.containsKey('descriptionGTE') !=
        other._$data.containsKey('descriptionGTE')) {
      return false;
    }
    if (l$descriptionGTE != lOther$descriptionGTE) {
      return false;
    }
    final l$descriptionLT = descriptionLT;
    final lOther$descriptionLT = other.descriptionLT;
    if (_$data.containsKey('descriptionLT') !=
        other._$data.containsKey('descriptionLT')) {
      return false;
    }
    if (l$descriptionLT != lOther$descriptionLT) {
      return false;
    }
    final l$descriptionLTE = descriptionLTE;
    final lOther$descriptionLTE = other.descriptionLTE;
    if (_$data.containsKey('descriptionLTE') !=
        other._$data.containsKey('descriptionLTE')) {
      return false;
    }
    if (l$descriptionLTE != lOther$descriptionLTE) {
      return false;
    }
    final l$descriptionContains = descriptionContains;
    final lOther$descriptionContains = other.descriptionContains;
    if (_$data.containsKey('descriptionContains') !=
        other._$data.containsKey('descriptionContains')) {
      return false;
    }
    if (l$descriptionContains != lOther$descriptionContains) {
      return false;
    }
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final lOther$descriptionHasPrefix = other.descriptionHasPrefix;
    if (_$data.containsKey('descriptionHasPrefix') !=
        other._$data.containsKey('descriptionHasPrefix')) {
      return false;
    }
    if (l$descriptionHasPrefix != lOther$descriptionHasPrefix) {
      return false;
    }
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final lOther$descriptionHasSuffix = other.descriptionHasSuffix;
    if (_$data.containsKey('descriptionHasSuffix') !=
        other._$data.containsKey('descriptionHasSuffix')) {
      return false;
    }
    if (l$descriptionHasSuffix != lOther$descriptionHasSuffix) {
      return false;
    }
    final l$descriptionEqualFold = descriptionEqualFold;
    final lOther$descriptionEqualFold = other.descriptionEqualFold;
    if (_$data.containsKey('descriptionEqualFold') !=
        other._$data.containsKey('descriptionEqualFold')) {
      return false;
    }
    if (l$descriptionEqualFold != lOther$descriptionEqualFold) {
      return false;
    }
    final l$descriptionContainsFold = descriptionContainsFold;
    final lOther$descriptionContainsFold = other.descriptionContainsFold;
    if (_$data.containsKey('descriptionContainsFold') !=
        other._$data.containsKey('descriptionContainsFold')) {
      return false;
    }
    if (l$descriptionContainsFold != lOther$descriptionContainsFold) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$orderNEQ = orderNEQ;
    final lOther$orderNEQ = other.orderNEQ;
    if (_$data.containsKey('orderNEQ') !=
        other._$data.containsKey('orderNEQ')) {
      return false;
    }
    if (l$orderNEQ != lOther$orderNEQ) {
      return false;
    }
    final l$orderIn = orderIn;
    final lOther$orderIn = other.orderIn;
    if (_$data.containsKey('orderIn') != other._$data.containsKey('orderIn')) {
      return false;
    }
    if (l$orderIn != null && lOther$orderIn != null) {
      if (l$orderIn.length != lOther$orderIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderIn.length; i++) {
        final l$orderIn$entry = l$orderIn[i];
        final lOther$orderIn$entry = lOther$orderIn[i];
        if (l$orderIn$entry != lOther$orderIn$entry) {
          return false;
        }
      }
    } else if (l$orderIn != lOther$orderIn) {
      return false;
    }
    final l$orderNotIn = orderNotIn;
    final lOther$orderNotIn = other.orderNotIn;
    if (_$data.containsKey('orderNotIn') !=
        other._$data.containsKey('orderNotIn')) {
      return false;
    }
    if (l$orderNotIn != null && lOther$orderNotIn != null) {
      if (l$orderNotIn.length != lOther$orderNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderNotIn.length; i++) {
        final l$orderNotIn$entry = l$orderNotIn[i];
        final lOther$orderNotIn$entry = lOther$orderNotIn[i];
        if (l$orderNotIn$entry != lOther$orderNotIn$entry) {
          return false;
        }
      }
    } else if (l$orderNotIn != lOther$orderNotIn) {
      return false;
    }
    final l$orderGT = orderGT;
    final lOther$orderGT = other.orderGT;
    if (_$data.containsKey('orderGT') != other._$data.containsKey('orderGT')) {
      return false;
    }
    if (l$orderGT != lOther$orderGT) {
      return false;
    }
    final l$orderGTE = orderGTE;
    final lOther$orderGTE = other.orderGTE;
    if (_$data.containsKey('orderGTE') !=
        other._$data.containsKey('orderGTE')) {
      return false;
    }
    if (l$orderGTE != lOther$orderGTE) {
      return false;
    }
    final l$orderLT = orderLT;
    final lOther$orderLT = other.orderLT;
    if (_$data.containsKey('orderLT') != other._$data.containsKey('orderLT')) {
      return false;
    }
    if (l$orderLT != lOther$orderLT) {
      return false;
    }
    final l$orderLTE = orderLTE;
    final lOther$orderLTE = other.orderLTE;
    if (_$data.containsKey('orderLTE') !=
        other._$data.containsKey('orderLTE')) {
      return false;
    }
    if (l$orderLTE != lOther$orderLTE) {
      return false;
    }
    final l$hasUnit = hasUnit;
    final lOther$hasUnit = other.hasUnit;
    if (_$data.containsKey('hasUnit') != other._$data.containsKey('hasUnit')) {
      return false;
    }
    if (l$hasUnit != lOther$hasUnit) {
      return false;
    }
    final l$hasUnitWith = hasUnitWith;
    final lOther$hasUnitWith = other.hasUnitWith;
    if (_$data.containsKey('hasUnitWith') !=
        other._$data.containsKey('hasUnitWith')) {
      return false;
    }
    if (l$hasUnitWith != null && lOther$hasUnitWith != null) {
      if (l$hasUnitWith.length != lOther$hasUnitWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasUnitWith.length; i++) {
        final l$hasUnitWith$entry = l$hasUnitWith[i];
        final lOther$hasUnitWith$entry = lOther$hasUnitWith[i];
        if (l$hasUnitWith$entry != lOther$hasUnitWith$entry) {
          return false;
        }
      }
    } else if (l$hasUnitWith != lOther$hasUnitWith) {
      return false;
    }
    final l$hasLessons = hasLessons;
    final lOther$hasLessons = other.hasLessons;
    if (_$data.containsKey('hasLessons') !=
        other._$data.containsKey('hasLessons')) {
      return false;
    }
    if (l$hasLessons != lOther$hasLessons) {
      return false;
    }
    final l$hasLessonsWith = hasLessonsWith;
    final lOther$hasLessonsWith = other.hasLessonsWith;
    if (_$data.containsKey('hasLessonsWith') !=
        other._$data.containsKey('hasLessonsWith')) {
      return false;
    }
    if (l$hasLessonsWith != null && lOther$hasLessonsWith != null) {
      if (l$hasLessonsWith.length != lOther$hasLessonsWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasLessonsWith.length; i++) {
        final l$hasLessonsWith$entry = l$hasLessonsWith[i];
        final lOther$hasLessonsWith$entry = lOther$hasLessonsWith[i];
        if (l$hasLessonsWith$entry != lOther$hasLessonsWith$entry) {
          return false;
        }
      }
    } else if (l$hasLessonsWith != lOther$hasLessonsWith) {
      return false;
    }
    final l$hasTechniques = hasTechniques;
    final lOther$hasTechniques = other.hasTechniques;
    if (_$data.containsKey('hasTechniques') !=
        other._$data.containsKey('hasTechniques')) {
      return false;
    }
    if (l$hasTechniques != lOther$hasTechniques) {
      return false;
    }
    final l$hasTechniquesWith = hasTechniquesWith;
    final lOther$hasTechniquesWith = other.hasTechniquesWith;
    if (_$data.containsKey('hasTechniquesWith') !=
        other._$data.containsKey('hasTechniquesWith')) {
      return false;
    }
    if (l$hasTechniquesWith != null && lOther$hasTechniquesWith != null) {
      if (l$hasTechniquesWith.length != lOther$hasTechniquesWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasTechniquesWith.length; i++) {
        final l$hasTechniquesWith$entry = l$hasTechniquesWith[i];
        final lOther$hasTechniquesWith$entry = lOther$hasTechniquesWith[i];
        if (l$hasTechniquesWith$entry != lOther$hasTechniquesWith$entry) {
          return false;
        }
      }
    } else if (l$hasTechniquesWith != lOther$hasTechniquesWith) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$unitID = unitID;
    final l$unitIDNEQ = unitIDNEQ;
    final l$unitIDIn = unitIDIn;
    final l$unitIDNotIn = unitIDNotIn;
    final l$iconimage = iconimage;
    final l$iconimageNEQ = iconimageNEQ;
    final l$iconimageIn = iconimageIn;
    final l$iconimageNotIn = iconimageNotIn;
    final l$iconimageGT = iconimageGT;
    final l$iconimageGTE = iconimageGTE;
    final l$iconimageLT = iconimageLT;
    final l$iconimageLTE = iconimageLTE;
    final l$iconimageContains = iconimageContains;
    final l$iconimageHasPrefix = iconimageHasPrefix;
    final l$iconimageHasSuffix = iconimageHasSuffix;
    final l$iconimageEqualFold = iconimageEqualFold;
    final l$iconimageContainsFold = iconimageContainsFold;
    final l$coverimage = coverimage;
    final l$coverimageNEQ = coverimageNEQ;
    final l$coverimageIn = coverimageIn;
    final l$coverimageNotIn = coverimageNotIn;
    final l$coverimageGT = coverimageGT;
    final l$coverimageGTE = coverimageGTE;
    final l$coverimageLT = coverimageLT;
    final l$coverimageLTE = coverimageLTE;
    final l$coverimageContains = coverimageContains;
    final l$coverimageHasPrefix = coverimageHasPrefix;
    final l$coverimageHasSuffix = coverimageHasSuffix;
    final l$coverimageEqualFold = coverimageEqualFold;
    final l$coverimageContainsFold = coverimageContainsFold;
    final l$title = title;
    final l$titleNEQ = titleNEQ;
    final l$titleIn = titleIn;
    final l$titleNotIn = titleNotIn;
    final l$titleGT = titleGT;
    final l$titleGTE = titleGTE;
    final l$titleLT = titleLT;
    final l$titleLTE = titleLTE;
    final l$titleContains = titleContains;
    final l$titleHasPrefix = titleHasPrefix;
    final l$titleHasSuffix = titleHasSuffix;
    final l$titleEqualFold = titleEqualFold;
    final l$titleContainsFold = titleContainsFold;
    final l$subtitle = subtitle;
    final l$subtitleNEQ = subtitleNEQ;
    final l$subtitleIn = subtitleIn;
    final l$subtitleNotIn = subtitleNotIn;
    final l$subtitleGT = subtitleGT;
    final l$subtitleGTE = subtitleGTE;
    final l$subtitleLT = subtitleLT;
    final l$subtitleLTE = subtitleLTE;
    final l$subtitleContains = subtitleContains;
    final l$subtitleHasPrefix = subtitleHasPrefix;
    final l$subtitleHasSuffix = subtitleHasSuffix;
    final l$subtitleEqualFold = subtitleEqualFold;
    final l$subtitleContainsFold = subtitleContainsFold;
    final l$description = description;
    final l$descriptionNEQ = descriptionNEQ;
    final l$descriptionIn = descriptionIn;
    final l$descriptionNotIn = descriptionNotIn;
    final l$descriptionGT = descriptionGT;
    final l$descriptionGTE = descriptionGTE;
    final l$descriptionLT = descriptionLT;
    final l$descriptionLTE = descriptionLTE;
    final l$descriptionContains = descriptionContains;
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final l$descriptionEqualFold = descriptionEqualFold;
    final l$descriptionContainsFold = descriptionContainsFold;
    final l$order = order;
    final l$orderNEQ = orderNEQ;
    final l$orderIn = orderIn;
    final l$orderNotIn = orderNotIn;
    final l$orderGT = orderGT;
    final l$orderGTE = orderGTE;
    final l$orderLT = orderLT;
    final l$orderLTE = orderLTE;
    final l$hasUnit = hasUnit;
    final l$hasUnitWith = hasUnitWith;
    final l$hasLessons = hasLessons;
    final l$hasLessonsWith = hasLessonsWith;
    final l$hasTechniques = hasTechniques;
    final l$hasTechniquesWith = hasTechniquesWith;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('unitID') ? l$unitID : const {},
      _$data.containsKey('unitIDNEQ') ? l$unitIDNEQ : const {},
      _$data.containsKey('unitIDIn')
          ? l$unitIDIn == null
              ? null
              : Object.hashAll(l$unitIDIn.map((v) => v))
          : const {},
      _$data.containsKey('unitIDNotIn')
          ? l$unitIDNotIn == null
              ? null
              : Object.hashAll(l$unitIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimage') ? l$iconimage : const {},
      _$data.containsKey('iconimageNEQ') ? l$iconimageNEQ : const {},
      _$data.containsKey('iconimageIn')
          ? l$iconimageIn == null
              ? null
              : Object.hashAll(l$iconimageIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimageNotIn')
          ? l$iconimageNotIn == null
              ? null
              : Object.hashAll(l$iconimageNotIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimageGT') ? l$iconimageGT : const {},
      _$data.containsKey('iconimageGTE') ? l$iconimageGTE : const {},
      _$data.containsKey('iconimageLT') ? l$iconimageLT : const {},
      _$data.containsKey('iconimageLTE') ? l$iconimageLTE : const {},
      _$data.containsKey('iconimageContains') ? l$iconimageContains : const {},
      _$data.containsKey('iconimageHasPrefix')
          ? l$iconimageHasPrefix
          : const {},
      _$data.containsKey('iconimageHasSuffix')
          ? l$iconimageHasSuffix
          : const {},
      _$data.containsKey('iconimageEqualFold')
          ? l$iconimageEqualFold
          : const {},
      _$data.containsKey('iconimageContainsFold')
          ? l$iconimageContainsFold
          : const {},
      _$data.containsKey('coverimage') ? l$coverimage : const {},
      _$data.containsKey('coverimageNEQ') ? l$coverimageNEQ : const {},
      _$data.containsKey('coverimageIn')
          ? l$coverimageIn == null
              ? null
              : Object.hashAll(l$coverimageIn.map((v) => v))
          : const {},
      _$data.containsKey('coverimageNotIn')
          ? l$coverimageNotIn == null
              ? null
              : Object.hashAll(l$coverimageNotIn.map((v) => v))
          : const {},
      _$data.containsKey('coverimageGT') ? l$coverimageGT : const {},
      _$data.containsKey('coverimageGTE') ? l$coverimageGTE : const {},
      _$data.containsKey('coverimageLT') ? l$coverimageLT : const {},
      _$data.containsKey('coverimageLTE') ? l$coverimageLTE : const {},
      _$data.containsKey('coverimageContains')
          ? l$coverimageContains
          : const {},
      _$data.containsKey('coverimageHasPrefix')
          ? l$coverimageHasPrefix
          : const {},
      _$data.containsKey('coverimageHasSuffix')
          ? l$coverimageHasSuffix
          : const {},
      _$data.containsKey('coverimageEqualFold')
          ? l$coverimageEqualFold
          : const {},
      _$data.containsKey('coverimageContainsFold')
          ? l$coverimageContainsFold
          : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('titleNEQ') ? l$titleNEQ : const {},
      _$data.containsKey('titleIn')
          ? l$titleIn == null
              ? null
              : Object.hashAll(l$titleIn.map((v) => v))
          : const {},
      _$data.containsKey('titleNotIn')
          ? l$titleNotIn == null
              ? null
              : Object.hashAll(l$titleNotIn.map((v) => v))
          : const {},
      _$data.containsKey('titleGT') ? l$titleGT : const {},
      _$data.containsKey('titleGTE') ? l$titleGTE : const {},
      _$data.containsKey('titleLT') ? l$titleLT : const {},
      _$data.containsKey('titleLTE') ? l$titleLTE : const {},
      _$data.containsKey('titleContains') ? l$titleContains : const {},
      _$data.containsKey('titleHasPrefix') ? l$titleHasPrefix : const {},
      _$data.containsKey('titleHasSuffix') ? l$titleHasSuffix : const {},
      _$data.containsKey('titleEqualFold') ? l$titleEqualFold : const {},
      _$data.containsKey('titleContainsFold') ? l$titleContainsFold : const {},
      _$data.containsKey('subtitle') ? l$subtitle : const {},
      _$data.containsKey('subtitleNEQ') ? l$subtitleNEQ : const {},
      _$data.containsKey('subtitleIn')
          ? l$subtitleIn == null
              ? null
              : Object.hashAll(l$subtitleIn.map((v) => v))
          : const {},
      _$data.containsKey('subtitleNotIn')
          ? l$subtitleNotIn == null
              ? null
              : Object.hashAll(l$subtitleNotIn.map((v) => v))
          : const {},
      _$data.containsKey('subtitleGT') ? l$subtitleGT : const {},
      _$data.containsKey('subtitleGTE') ? l$subtitleGTE : const {},
      _$data.containsKey('subtitleLT') ? l$subtitleLT : const {},
      _$data.containsKey('subtitleLTE') ? l$subtitleLTE : const {},
      _$data.containsKey('subtitleContains') ? l$subtitleContains : const {},
      _$data.containsKey('subtitleHasPrefix') ? l$subtitleHasPrefix : const {},
      _$data.containsKey('subtitleHasSuffix') ? l$subtitleHasSuffix : const {},
      _$data.containsKey('subtitleEqualFold') ? l$subtitleEqualFold : const {},
      _$data.containsKey('subtitleContainsFold')
          ? l$subtitleContainsFold
          : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('descriptionNEQ') ? l$descriptionNEQ : const {},
      _$data.containsKey('descriptionIn')
          ? l$descriptionIn == null
              ? null
              : Object.hashAll(l$descriptionIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionNotIn')
          ? l$descriptionNotIn == null
              ? null
              : Object.hashAll(l$descriptionNotIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionGT') ? l$descriptionGT : const {},
      _$data.containsKey('descriptionGTE') ? l$descriptionGTE : const {},
      _$data.containsKey('descriptionLT') ? l$descriptionLT : const {},
      _$data.containsKey('descriptionLTE') ? l$descriptionLTE : const {},
      _$data.containsKey('descriptionContains')
          ? l$descriptionContains
          : const {},
      _$data.containsKey('descriptionHasPrefix')
          ? l$descriptionHasPrefix
          : const {},
      _$data.containsKey('descriptionHasSuffix')
          ? l$descriptionHasSuffix
          : const {},
      _$data.containsKey('descriptionEqualFold')
          ? l$descriptionEqualFold
          : const {},
      _$data.containsKey('descriptionContainsFold')
          ? l$descriptionContainsFold
          : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('orderNEQ') ? l$orderNEQ : const {},
      _$data.containsKey('orderIn')
          ? l$orderIn == null
              ? null
              : Object.hashAll(l$orderIn.map((v) => v))
          : const {},
      _$data.containsKey('orderNotIn')
          ? l$orderNotIn == null
              ? null
              : Object.hashAll(l$orderNotIn.map((v) => v))
          : const {},
      _$data.containsKey('orderGT') ? l$orderGT : const {},
      _$data.containsKey('orderGTE') ? l$orderGTE : const {},
      _$data.containsKey('orderLT') ? l$orderLT : const {},
      _$data.containsKey('orderLTE') ? l$orderLTE : const {},
      _$data.containsKey('hasUnit') ? l$hasUnit : const {},
      _$data.containsKey('hasUnitWith')
          ? l$hasUnitWith == null
              ? null
              : Object.hashAll(l$hasUnitWith.map((v) => v))
          : const {},
      _$data.containsKey('hasLessons') ? l$hasLessons : const {},
      _$data.containsKey('hasLessonsWith')
          ? l$hasLessonsWith == null
              ? null
              : Object.hashAll(l$hasLessonsWith.map((v) => v))
          : const {},
      _$data.containsKey('hasTechniques') ? l$hasTechniques : const {},
      _$data.containsKey('hasTechniquesWith')
          ? l$hasTechniquesWith == null
              ? null
              : Object.hashAll(l$hasTechniquesWith.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$TechniqueWhereInput<TRes> {
  factory CopyWith$Input$TechniqueWhereInput(
    Input$TechniqueWhereInput instance,
    TRes Function(Input$TechniqueWhereInput) then,
  ) = _CopyWithImpl$Input$TechniqueWhereInput;

  factory CopyWith$Input$TechniqueWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$TechniqueWhereInput;

  TRes call({
    Input$TechniqueWhereInput? not,
    List<Input$TechniqueWhereInput>? and,
    List<Input$TechniqueWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? unitID,
    String? unitIDNEQ,
    List<String>? unitIDIn,
    List<String>? unitIDNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasUnit,
    List<Input$UnitWhereInput>? hasUnitWith,
    bool? hasLessons,
    List<Input$LessonWhereInput>? hasLessonsWith,
    bool? hasTechniques,
    List<Input$UnitWhereInput>? hasTechniquesWith,
  });
  CopyWith$Input$TechniqueWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$TechniqueWhereInput>? Function(
              Iterable<
                  CopyWith$Input$TechniqueWhereInput<
                      Input$TechniqueWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$TechniqueWhereInput>? Function(
              Iterable<
                  CopyWith$Input$TechniqueWhereInput<
                      Input$TechniqueWhereInput>>?)
          _fn);
  TRes hasUnitWith(
      Iterable<Input$UnitWhereInput>? Function(
              Iterable<CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
          _fn);
  TRes hasLessonsWith(
      Iterable<Input$LessonWhereInput>? Function(
              Iterable<
                  CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
          _fn);
  TRes hasTechniquesWith(
      Iterable<Input$UnitWhereInput>? Function(
              Iterable<CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$TechniqueWhereInput<TRes>
    implements CopyWith$Input$TechniqueWhereInput<TRes> {
  _CopyWithImpl$Input$TechniqueWhereInput(
    this._instance,
    this._then,
  );

  final Input$TechniqueWhereInput _instance;

  final TRes Function(Input$TechniqueWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? unitID = _undefined,
    Object? unitIDNEQ = _undefined,
    Object? unitIDIn = _undefined,
    Object? unitIDNotIn = _undefined,
    Object? iconimage = _undefined,
    Object? iconimageNEQ = _undefined,
    Object? iconimageIn = _undefined,
    Object? iconimageNotIn = _undefined,
    Object? iconimageGT = _undefined,
    Object? iconimageGTE = _undefined,
    Object? iconimageLT = _undefined,
    Object? iconimageLTE = _undefined,
    Object? iconimageContains = _undefined,
    Object? iconimageHasPrefix = _undefined,
    Object? iconimageHasSuffix = _undefined,
    Object? iconimageEqualFold = _undefined,
    Object? iconimageContainsFold = _undefined,
    Object? coverimage = _undefined,
    Object? coverimageNEQ = _undefined,
    Object? coverimageIn = _undefined,
    Object? coverimageNotIn = _undefined,
    Object? coverimageGT = _undefined,
    Object? coverimageGTE = _undefined,
    Object? coverimageLT = _undefined,
    Object? coverimageLTE = _undefined,
    Object? coverimageContains = _undefined,
    Object? coverimageHasPrefix = _undefined,
    Object? coverimageHasSuffix = _undefined,
    Object? coverimageEqualFold = _undefined,
    Object? coverimageContainsFold = _undefined,
    Object? title = _undefined,
    Object? titleNEQ = _undefined,
    Object? titleIn = _undefined,
    Object? titleNotIn = _undefined,
    Object? titleGT = _undefined,
    Object? titleGTE = _undefined,
    Object? titleLT = _undefined,
    Object? titleLTE = _undefined,
    Object? titleContains = _undefined,
    Object? titleHasPrefix = _undefined,
    Object? titleHasSuffix = _undefined,
    Object? titleEqualFold = _undefined,
    Object? titleContainsFold = _undefined,
    Object? subtitle = _undefined,
    Object? subtitleNEQ = _undefined,
    Object? subtitleIn = _undefined,
    Object? subtitleNotIn = _undefined,
    Object? subtitleGT = _undefined,
    Object? subtitleGTE = _undefined,
    Object? subtitleLT = _undefined,
    Object? subtitleLTE = _undefined,
    Object? subtitleContains = _undefined,
    Object? subtitleHasPrefix = _undefined,
    Object? subtitleHasSuffix = _undefined,
    Object? subtitleEqualFold = _undefined,
    Object? subtitleContainsFold = _undefined,
    Object? description = _undefined,
    Object? descriptionNEQ = _undefined,
    Object? descriptionIn = _undefined,
    Object? descriptionNotIn = _undefined,
    Object? descriptionGT = _undefined,
    Object? descriptionGTE = _undefined,
    Object? descriptionLT = _undefined,
    Object? descriptionLTE = _undefined,
    Object? descriptionContains = _undefined,
    Object? descriptionHasPrefix = _undefined,
    Object? descriptionHasSuffix = _undefined,
    Object? descriptionEqualFold = _undefined,
    Object? descriptionContainsFold = _undefined,
    Object? order = _undefined,
    Object? orderNEQ = _undefined,
    Object? orderIn = _undefined,
    Object? orderNotIn = _undefined,
    Object? orderGT = _undefined,
    Object? orderGTE = _undefined,
    Object? orderLT = _undefined,
    Object? orderLTE = _undefined,
    Object? hasUnit = _undefined,
    Object? hasUnitWith = _undefined,
    Object? hasLessons = _undefined,
    Object? hasLessonsWith = _undefined,
    Object? hasTechniques = _undefined,
    Object? hasTechniquesWith = _undefined,
  }) =>
      _then(Input$TechniqueWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$TechniqueWhereInput?),
        if (and != _undefined) 'and': (and as List<Input$TechniqueWhereInput>?),
        if (or != _undefined) 'or': (or as List<Input$TechniqueWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (unitID != _undefined) 'unitID': (unitID as String?),
        if (unitIDNEQ != _undefined) 'unitIDNEQ': (unitIDNEQ as String?),
        if (unitIDIn != _undefined) 'unitIDIn': (unitIDIn as List<String>?),
        if (unitIDNotIn != _undefined)
          'unitIDNotIn': (unitIDNotIn as List<String>?),
        if (iconimage != _undefined) 'iconimage': (iconimage as String?),
        if (iconimageNEQ != _undefined)
          'iconimageNEQ': (iconimageNEQ as String?),
        if (iconimageIn != _undefined)
          'iconimageIn': (iconimageIn as List<String>?),
        if (iconimageNotIn != _undefined)
          'iconimageNotIn': (iconimageNotIn as List<String>?),
        if (iconimageGT != _undefined) 'iconimageGT': (iconimageGT as String?),
        if (iconimageGTE != _undefined)
          'iconimageGTE': (iconimageGTE as String?),
        if (iconimageLT != _undefined) 'iconimageLT': (iconimageLT as String?),
        if (iconimageLTE != _undefined)
          'iconimageLTE': (iconimageLTE as String?),
        if (iconimageContains != _undefined)
          'iconimageContains': (iconimageContains as String?),
        if (iconimageHasPrefix != _undefined)
          'iconimageHasPrefix': (iconimageHasPrefix as String?),
        if (iconimageHasSuffix != _undefined)
          'iconimageHasSuffix': (iconimageHasSuffix as String?),
        if (iconimageEqualFold != _undefined)
          'iconimageEqualFold': (iconimageEqualFold as String?),
        if (iconimageContainsFold != _undefined)
          'iconimageContainsFold': (iconimageContainsFold as String?),
        if (coverimage != _undefined) 'coverimage': (coverimage as String?),
        if (coverimageNEQ != _undefined)
          'coverimageNEQ': (coverimageNEQ as String?),
        if (coverimageIn != _undefined)
          'coverimageIn': (coverimageIn as List<String>?),
        if (coverimageNotIn != _undefined)
          'coverimageNotIn': (coverimageNotIn as List<String>?),
        if (coverimageGT != _undefined)
          'coverimageGT': (coverimageGT as String?),
        if (coverimageGTE != _undefined)
          'coverimageGTE': (coverimageGTE as String?),
        if (coverimageLT != _undefined)
          'coverimageLT': (coverimageLT as String?),
        if (coverimageLTE != _undefined)
          'coverimageLTE': (coverimageLTE as String?),
        if (coverimageContains != _undefined)
          'coverimageContains': (coverimageContains as String?),
        if (coverimageHasPrefix != _undefined)
          'coverimageHasPrefix': (coverimageHasPrefix as String?),
        if (coverimageHasSuffix != _undefined)
          'coverimageHasSuffix': (coverimageHasSuffix as String?),
        if (coverimageEqualFold != _undefined)
          'coverimageEqualFold': (coverimageEqualFold as String?),
        if (coverimageContainsFold != _undefined)
          'coverimageContainsFold': (coverimageContainsFold as String?),
        if (title != _undefined) 'title': (title as String?),
        if (titleNEQ != _undefined) 'titleNEQ': (titleNEQ as String?),
        if (titleIn != _undefined) 'titleIn': (titleIn as List<String>?),
        if (titleNotIn != _undefined)
          'titleNotIn': (titleNotIn as List<String>?),
        if (titleGT != _undefined) 'titleGT': (titleGT as String?),
        if (titleGTE != _undefined) 'titleGTE': (titleGTE as String?),
        if (titleLT != _undefined) 'titleLT': (titleLT as String?),
        if (titleLTE != _undefined) 'titleLTE': (titleLTE as String?),
        if (titleContains != _undefined)
          'titleContains': (titleContains as String?),
        if (titleHasPrefix != _undefined)
          'titleHasPrefix': (titleHasPrefix as String?),
        if (titleHasSuffix != _undefined)
          'titleHasSuffix': (titleHasSuffix as String?),
        if (titleEqualFold != _undefined)
          'titleEqualFold': (titleEqualFold as String?),
        if (titleContainsFold != _undefined)
          'titleContainsFold': (titleContainsFold as String?),
        if (subtitle != _undefined) 'subtitle': (subtitle as String?),
        if (subtitleNEQ != _undefined) 'subtitleNEQ': (subtitleNEQ as String?),
        if (subtitleIn != _undefined)
          'subtitleIn': (subtitleIn as List<String>?),
        if (subtitleNotIn != _undefined)
          'subtitleNotIn': (subtitleNotIn as List<String>?),
        if (subtitleGT != _undefined) 'subtitleGT': (subtitleGT as String?),
        if (subtitleGTE != _undefined) 'subtitleGTE': (subtitleGTE as String?),
        if (subtitleLT != _undefined) 'subtitleLT': (subtitleLT as String?),
        if (subtitleLTE != _undefined) 'subtitleLTE': (subtitleLTE as String?),
        if (subtitleContains != _undefined)
          'subtitleContains': (subtitleContains as String?),
        if (subtitleHasPrefix != _undefined)
          'subtitleHasPrefix': (subtitleHasPrefix as String?),
        if (subtitleHasSuffix != _undefined)
          'subtitleHasSuffix': (subtitleHasSuffix as String?),
        if (subtitleEqualFold != _undefined)
          'subtitleEqualFold': (subtitleEqualFold as String?),
        if (subtitleContainsFold != _undefined)
          'subtitleContainsFold': (subtitleContainsFold as String?),
        if (description != _undefined) 'description': (description as String?),
        if (descriptionNEQ != _undefined)
          'descriptionNEQ': (descriptionNEQ as String?),
        if (descriptionIn != _undefined)
          'descriptionIn': (descriptionIn as List<String>?),
        if (descriptionNotIn != _undefined)
          'descriptionNotIn': (descriptionNotIn as List<String>?),
        if (descriptionGT != _undefined)
          'descriptionGT': (descriptionGT as String?),
        if (descriptionGTE != _undefined)
          'descriptionGTE': (descriptionGTE as String?),
        if (descriptionLT != _undefined)
          'descriptionLT': (descriptionLT as String?),
        if (descriptionLTE != _undefined)
          'descriptionLTE': (descriptionLTE as String?),
        if (descriptionContains != _undefined)
          'descriptionContains': (descriptionContains as String?),
        if (descriptionHasPrefix != _undefined)
          'descriptionHasPrefix': (descriptionHasPrefix as String?),
        if (descriptionHasSuffix != _undefined)
          'descriptionHasSuffix': (descriptionHasSuffix as String?),
        if (descriptionEqualFold != _undefined)
          'descriptionEqualFold': (descriptionEqualFold as String?),
        if (descriptionContainsFold != _undefined)
          'descriptionContainsFold': (descriptionContainsFold as String?),
        if (order != _undefined) 'order': (order as int?),
        if (orderNEQ != _undefined) 'orderNEQ': (orderNEQ as int?),
        if (orderIn != _undefined) 'orderIn': (orderIn as List<int>?),
        if (orderNotIn != _undefined) 'orderNotIn': (orderNotIn as List<int>?),
        if (orderGT != _undefined) 'orderGT': (orderGT as int?),
        if (orderGTE != _undefined) 'orderGTE': (orderGTE as int?),
        if (orderLT != _undefined) 'orderLT': (orderLT as int?),
        if (orderLTE != _undefined) 'orderLTE': (orderLTE as int?),
        if (hasUnit != _undefined) 'hasUnit': (hasUnit as bool?),
        if (hasUnitWith != _undefined)
          'hasUnitWith': (hasUnitWith as List<Input$UnitWhereInput>?),
        if (hasLessons != _undefined) 'hasLessons': (hasLessons as bool?),
        if (hasLessonsWith != _undefined)
          'hasLessonsWith': (hasLessonsWith as List<Input$LessonWhereInput>?),
        if (hasTechniques != _undefined)
          'hasTechniques': (hasTechniques as bool?),
        if (hasTechniquesWith != _undefined)
          'hasTechniquesWith':
              (hasTechniquesWith as List<Input$UnitWhereInput>?),
      }));

  CopyWith$Input$TechniqueWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$TechniqueWhereInput.stub(_then(_instance))
        : CopyWith$Input$TechniqueWhereInput(local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$TechniqueWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$TechniqueWhereInput<
                          Input$TechniqueWhereInput>>?)
              _fn) =>
      call(
          and: _fn(_instance.and?.map((e) => CopyWith$Input$TechniqueWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes or(
          Iterable<Input$TechniqueWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$TechniqueWhereInput<
                          Input$TechniqueWhereInput>>?)
              _fn) =>
      call(
          or: _fn(_instance.or?.map((e) => CopyWith$Input$TechniqueWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes hasUnitWith(
          Iterable<Input$UnitWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
              _fn) =>
      call(
          hasUnitWith: _fn(
              _instance.hasUnitWith?.map((e) => CopyWith$Input$UnitWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasLessonsWith(
          Iterable<Input$LessonWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
              _fn) =>
      call(
          hasLessonsWith: _fn(_instance.hasLessonsWith
              ?.map((e) => CopyWith$Input$LessonWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasTechniquesWith(
          Iterable<Input$UnitWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
              _fn) =>
      call(
          hasTechniquesWith: _fn(_instance.hasTechniquesWith
              ?.map((e) => CopyWith$Input$UnitWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$TechniqueWhereInput<TRes>
    implements CopyWith$Input$TechniqueWhereInput<TRes> {
  _CopyWithStubImpl$Input$TechniqueWhereInput(this._res);

  TRes _res;

  call({
    Input$TechniqueWhereInput? not,
    List<Input$TechniqueWhereInput>? and,
    List<Input$TechniqueWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? unitID,
    String? unitIDNEQ,
    List<String>? unitIDIn,
    List<String>? unitIDNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasUnit,
    List<Input$UnitWhereInput>? hasUnitWith,
    bool? hasLessons,
    List<Input$LessonWhereInput>? hasLessonsWith,
    bool? hasTechniques,
    List<Input$UnitWhereInput>? hasTechniquesWith,
  }) =>
      _res;

  CopyWith$Input$TechniqueWhereInput<TRes> get not =>
      CopyWith$Input$TechniqueWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;

  hasUnitWith(_fn) => _res;

  hasLessonsWith(_fn) => _res;

  hasTechniquesWith(_fn) => _res;
}

class Input$UnitOrder {
  factory Input$UnitOrder({
    Enum$OrderDirection? direction,
    required Enum$UnitOrderField field,
  }) =>
      Input$UnitOrder._({
        if (direction != null) r'direction': direction,
        r'field': field,
      });

  Input$UnitOrder._(this._$data);

  factory Input$UnitOrder.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('direction')) {
      final l$direction = data['direction'];
      result$data['direction'] =
          fromJson$Enum$OrderDirection((l$direction as String));
    }
    final l$field = data['field'];
    result$data['field'] = fromJson$Enum$UnitOrderField((l$field as String));
    return Input$UnitOrder._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderDirection? get direction =>
      (_$data['direction'] as Enum$OrderDirection?);

  Enum$UnitOrderField get field => (_$data['field'] as Enum$UnitOrderField);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('direction')) {
      final l$direction = direction;
      result$data['direction'] =
          toJson$Enum$OrderDirection((l$direction as Enum$OrderDirection));
    }
    final l$field = field;
    result$data['field'] = toJson$Enum$UnitOrderField(l$field);
    return result$data;
  }

  CopyWith$Input$UnitOrder<Input$UnitOrder> get copyWith =>
      CopyWith$Input$UnitOrder(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$UnitOrder) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$direction = direction;
    final lOther$direction = other.direction;
    if (_$data.containsKey('direction') !=
        other._$data.containsKey('direction')) {
      return false;
    }
    if (l$direction != lOther$direction) {
      return false;
    }
    final l$field = field;
    final lOther$field = other.field;
    if (l$field != lOther$field) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$direction = direction;
    final l$field = field;
    return Object.hashAll([
      _$data.containsKey('direction') ? l$direction : const {},
      l$field,
    ]);
  }
}

abstract class CopyWith$Input$UnitOrder<TRes> {
  factory CopyWith$Input$UnitOrder(
    Input$UnitOrder instance,
    TRes Function(Input$UnitOrder) then,
  ) = _CopyWithImpl$Input$UnitOrder;

  factory CopyWith$Input$UnitOrder.stub(TRes res) =
      _CopyWithStubImpl$Input$UnitOrder;

  TRes call({
    Enum$OrderDirection? direction,
    Enum$UnitOrderField? field,
  });
}

class _CopyWithImpl$Input$UnitOrder<TRes>
    implements CopyWith$Input$UnitOrder<TRes> {
  _CopyWithImpl$Input$UnitOrder(
    this._instance,
    this._then,
  );

  final Input$UnitOrder _instance;

  final TRes Function(Input$UnitOrder) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? direction = _undefined,
    Object? field = _undefined,
  }) =>
      _then(Input$UnitOrder._({
        ..._instance._$data,
        if (direction != _undefined && direction != null)
          'direction': (direction as Enum$OrderDirection),
        if (field != _undefined && field != null)
          'field': (field as Enum$UnitOrderField),
      }));
}

class _CopyWithStubImpl$Input$UnitOrder<TRes>
    implements CopyWith$Input$UnitOrder<TRes> {
  _CopyWithStubImpl$Input$UnitOrder(this._res);

  TRes _res;

  call({
    Enum$OrderDirection? direction,
    Enum$UnitOrderField? field,
  }) =>
      _res;
}

class Input$UnitWhereInput {
  factory Input$UnitWhereInput({
    Input$UnitWhereInput? not,
    List<Input$UnitWhereInput>? and,
    List<Input$UnitWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? courseID,
    String? courseIDNEQ,
    List<String>? courseIDIn,
    List<String>? courseIDNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    String? mastering,
    String? masteringNEQ,
    List<String>? masteringIn,
    List<String>? masteringNotIn,
    String? masteringGT,
    String? masteringGTE,
    String? masteringLT,
    String? masteringLTE,
    String? masteringContains,
    String? masteringHasPrefix,
    String? masteringHasSuffix,
    String? masteringEqualFold,
    String? masteringContainsFold,
    int? days,
    int? daysNEQ,
    List<int>? daysIn,
    List<int>? daysNotIn,
    int? daysGT,
    int? daysGTE,
    int? daysLT,
    int? daysLTE,
    String? color,
    String? colorNEQ,
    List<String>? colorIn,
    List<String>? colorNotIn,
    String? colorGT,
    String? colorGTE,
    String? colorLT,
    String? colorLTE,
    String? colorContains,
    String? colorHasPrefix,
    String? colorHasSuffix,
    String? colorEqualFold,
    String? colorContainsFold,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasCourse,
    List<Input$CourseWhereInput>? hasCourseWith,
    bool? hasLessons,
    List<Input$LessonWhereInput>? hasLessonsWith,
  }) =>
      Input$UnitWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (courseID != null) r'courseID': courseID,
        if (courseIDNEQ != null) r'courseIDNEQ': courseIDNEQ,
        if (courseIDIn != null) r'courseIDIn': courseIDIn,
        if (courseIDNotIn != null) r'courseIDNotIn': courseIDNotIn,
        if (iconimage != null) r'iconimage': iconimage,
        if (iconimageNEQ != null) r'iconimageNEQ': iconimageNEQ,
        if (iconimageIn != null) r'iconimageIn': iconimageIn,
        if (iconimageNotIn != null) r'iconimageNotIn': iconimageNotIn,
        if (iconimageGT != null) r'iconimageGT': iconimageGT,
        if (iconimageGTE != null) r'iconimageGTE': iconimageGTE,
        if (iconimageLT != null) r'iconimageLT': iconimageLT,
        if (iconimageLTE != null) r'iconimageLTE': iconimageLTE,
        if (iconimageContains != null) r'iconimageContains': iconimageContains,
        if (iconimageHasPrefix != null)
          r'iconimageHasPrefix': iconimageHasPrefix,
        if (iconimageHasSuffix != null)
          r'iconimageHasSuffix': iconimageHasSuffix,
        if (iconimageEqualFold != null)
          r'iconimageEqualFold': iconimageEqualFold,
        if (iconimageContainsFold != null)
          r'iconimageContainsFold': iconimageContainsFold,
        if (coverimage != null) r'coverimage': coverimage,
        if (coverimageNEQ != null) r'coverimageNEQ': coverimageNEQ,
        if (coverimageIn != null) r'coverimageIn': coverimageIn,
        if (coverimageNotIn != null) r'coverimageNotIn': coverimageNotIn,
        if (coverimageGT != null) r'coverimageGT': coverimageGT,
        if (coverimageGTE != null) r'coverimageGTE': coverimageGTE,
        if (coverimageLT != null) r'coverimageLT': coverimageLT,
        if (coverimageLTE != null) r'coverimageLTE': coverimageLTE,
        if (coverimageContains != null)
          r'coverimageContains': coverimageContains,
        if (coverimageHasPrefix != null)
          r'coverimageHasPrefix': coverimageHasPrefix,
        if (coverimageHasSuffix != null)
          r'coverimageHasSuffix': coverimageHasSuffix,
        if (coverimageEqualFold != null)
          r'coverimageEqualFold': coverimageEqualFold,
        if (coverimageContainsFold != null)
          r'coverimageContainsFold': coverimageContainsFold,
        if (title != null) r'title': title,
        if (titleNEQ != null) r'titleNEQ': titleNEQ,
        if (titleIn != null) r'titleIn': titleIn,
        if (titleNotIn != null) r'titleNotIn': titleNotIn,
        if (titleGT != null) r'titleGT': titleGT,
        if (titleGTE != null) r'titleGTE': titleGTE,
        if (titleLT != null) r'titleLT': titleLT,
        if (titleLTE != null) r'titleLTE': titleLTE,
        if (titleContains != null) r'titleContains': titleContains,
        if (titleHasPrefix != null) r'titleHasPrefix': titleHasPrefix,
        if (titleHasSuffix != null) r'titleHasSuffix': titleHasSuffix,
        if (titleEqualFold != null) r'titleEqualFold': titleEqualFold,
        if (titleContainsFold != null) r'titleContainsFold': titleContainsFold,
        if (subtitle != null) r'subtitle': subtitle,
        if (subtitleNEQ != null) r'subtitleNEQ': subtitleNEQ,
        if (subtitleIn != null) r'subtitleIn': subtitleIn,
        if (subtitleNotIn != null) r'subtitleNotIn': subtitleNotIn,
        if (subtitleGT != null) r'subtitleGT': subtitleGT,
        if (subtitleGTE != null) r'subtitleGTE': subtitleGTE,
        if (subtitleLT != null) r'subtitleLT': subtitleLT,
        if (subtitleLTE != null) r'subtitleLTE': subtitleLTE,
        if (subtitleContains != null) r'subtitleContains': subtitleContains,
        if (subtitleHasPrefix != null) r'subtitleHasPrefix': subtitleHasPrefix,
        if (subtitleHasSuffix != null) r'subtitleHasSuffix': subtitleHasSuffix,
        if (subtitleEqualFold != null) r'subtitleEqualFold': subtitleEqualFold,
        if (subtitleContainsFold != null)
          r'subtitleContainsFold': subtitleContainsFold,
        if (description != null) r'description': description,
        if (descriptionNEQ != null) r'descriptionNEQ': descriptionNEQ,
        if (descriptionIn != null) r'descriptionIn': descriptionIn,
        if (descriptionNotIn != null) r'descriptionNotIn': descriptionNotIn,
        if (descriptionGT != null) r'descriptionGT': descriptionGT,
        if (descriptionGTE != null) r'descriptionGTE': descriptionGTE,
        if (descriptionLT != null) r'descriptionLT': descriptionLT,
        if (descriptionLTE != null) r'descriptionLTE': descriptionLTE,
        if (descriptionContains != null)
          r'descriptionContains': descriptionContains,
        if (descriptionHasPrefix != null)
          r'descriptionHasPrefix': descriptionHasPrefix,
        if (descriptionHasSuffix != null)
          r'descriptionHasSuffix': descriptionHasSuffix,
        if (descriptionEqualFold != null)
          r'descriptionEqualFold': descriptionEqualFold,
        if (descriptionContainsFold != null)
          r'descriptionContainsFold': descriptionContainsFold,
        if (mastering != null) r'mastering': mastering,
        if (masteringNEQ != null) r'masteringNEQ': masteringNEQ,
        if (masteringIn != null) r'masteringIn': masteringIn,
        if (masteringNotIn != null) r'masteringNotIn': masteringNotIn,
        if (masteringGT != null) r'masteringGT': masteringGT,
        if (masteringGTE != null) r'masteringGTE': masteringGTE,
        if (masteringLT != null) r'masteringLT': masteringLT,
        if (masteringLTE != null) r'masteringLTE': masteringLTE,
        if (masteringContains != null) r'masteringContains': masteringContains,
        if (masteringHasPrefix != null)
          r'masteringHasPrefix': masteringHasPrefix,
        if (masteringHasSuffix != null)
          r'masteringHasSuffix': masteringHasSuffix,
        if (masteringEqualFold != null)
          r'masteringEqualFold': masteringEqualFold,
        if (masteringContainsFold != null)
          r'masteringContainsFold': masteringContainsFold,
        if (days != null) r'days': days,
        if (daysNEQ != null) r'daysNEQ': daysNEQ,
        if (daysIn != null) r'daysIn': daysIn,
        if (daysNotIn != null) r'daysNotIn': daysNotIn,
        if (daysGT != null) r'daysGT': daysGT,
        if (daysGTE != null) r'daysGTE': daysGTE,
        if (daysLT != null) r'daysLT': daysLT,
        if (daysLTE != null) r'daysLTE': daysLTE,
        if (color != null) r'color': color,
        if (colorNEQ != null) r'colorNEQ': colorNEQ,
        if (colorIn != null) r'colorIn': colorIn,
        if (colorNotIn != null) r'colorNotIn': colorNotIn,
        if (colorGT != null) r'colorGT': colorGT,
        if (colorGTE != null) r'colorGTE': colorGTE,
        if (colorLT != null) r'colorLT': colorLT,
        if (colorLTE != null) r'colorLTE': colorLTE,
        if (colorContains != null) r'colorContains': colorContains,
        if (colorHasPrefix != null) r'colorHasPrefix': colorHasPrefix,
        if (colorHasSuffix != null) r'colorHasSuffix': colorHasSuffix,
        if (colorEqualFold != null) r'colorEqualFold': colorEqualFold,
        if (colorContainsFold != null) r'colorContainsFold': colorContainsFold,
        if (order != null) r'order': order,
        if (orderNEQ != null) r'orderNEQ': orderNEQ,
        if (orderIn != null) r'orderIn': orderIn,
        if (orderNotIn != null) r'orderNotIn': orderNotIn,
        if (orderGT != null) r'orderGT': orderGT,
        if (orderGTE != null) r'orderGTE': orderGTE,
        if (orderLT != null) r'orderLT': orderLT,
        if (orderLTE != null) r'orderLTE': orderLTE,
        if (hasCourse != null) r'hasCourse': hasCourse,
        if (hasCourseWith != null) r'hasCourseWith': hasCourseWith,
        if (hasLessons != null) r'hasLessons': hasLessons,
        if (hasLessonsWith != null) r'hasLessonsWith': hasLessonsWith,
      });

  Input$UnitWhereInput._(this._$data);

  factory Input$UnitWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$UnitWhereInput.fromJson((l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map(
              (e) => Input$UnitWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map(
              (e) => Input$UnitWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('courseID')) {
      final l$courseID = data['courseID'];
      result$data['courseID'] = (l$courseID as String?);
    }
    if (data.containsKey('courseIDNEQ')) {
      final l$courseIDNEQ = data['courseIDNEQ'];
      result$data['courseIDNEQ'] = (l$courseIDNEQ as String?);
    }
    if (data.containsKey('courseIDIn')) {
      final l$courseIDIn = data['courseIDIn'];
      result$data['courseIDIn'] =
          (l$courseIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('courseIDNotIn')) {
      final l$courseIDNotIn = data['courseIDNotIn'];
      result$data['courseIDNotIn'] = (l$courseIDNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('iconimage')) {
      final l$iconimage = data['iconimage'];
      result$data['iconimage'] = (l$iconimage as String?);
    }
    if (data.containsKey('iconimageNEQ')) {
      final l$iconimageNEQ = data['iconimageNEQ'];
      result$data['iconimageNEQ'] = (l$iconimageNEQ as String?);
    }
    if (data.containsKey('iconimageIn')) {
      final l$iconimageIn = data['iconimageIn'];
      result$data['iconimageIn'] =
          (l$iconimageIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('iconimageNotIn')) {
      final l$iconimageNotIn = data['iconimageNotIn'];
      result$data['iconimageNotIn'] = (l$iconimageNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('iconimageGT')) {
      final l$iconimageGT = data['iconimageGT'];
      result$data['iconimageGT'] = (l$iconimageGT as String?);
    }
    if (data.containsKey('iconimageGTE')) {
      final l$iconimageGTE = data['iconimageGTE'];
      result$data['iconimageGTE'] = (l$iconimageGTE as String?);
    }
    if (data.containsKey('iconimageLT')) {
      final l$iconimageLT = data['iconimageLT'];
      result$data['iconimageLT'] = (l$iconimageLT as String?);
    }
    if (data.containsKey('iconimageLTE')) {
      final l$iconimageLTE = data['iconimageLTE'];
      result$data['iconimageLTE'] = (l$iconimageLTE as String?);
    }
    if (data.containsKey('iconimageContains')) {
      final l$iconimageContains = data['iconimageContains'];
      result$data['iconimageContains'] = (l$iconimageContains as String?);
    }
    if (data.containsKey('iconimageHasPrefix')) {
      final l$iconimageHasPrefix = data['iconimageHasPrefix'];
      result$data['iconimageHasPrefix'] = (l$iconimageHasPrefix as String?);
    }
    if (data.containsKey('iconimageHasSuffix')) {
      final l$iconimageHasSuffix = data['iconimageHasSuffix'];
      result$data['iconimageHasSuffix'] = (l$iconimageHasSuffix as String?);
    }
    if (data.containsKey('iconimageEqualFold')) {
      final l$iconimageEqualFold = data['iconimageEqualFold'];
      result$data['iconimageEqualFold'] = (l$iconimageEqualFold as String?);
    }
    if (data.containsKey('iconimageContainsFold')) {
      final l$iconimageContainsFold = data['iconimageContainsFold'];
      result$data['iconimageContainsFold'] =
          (l$iconimageContainsFold as String?);
    }
    if (data.containsKey('coverimage')) {
      final l$coverimage = data['coverimage'];
      result$data['coverimage'] = (l$coverimage as String?);
    }
    if (data.containsKey('coverimageNEQ')) {
      final l$coverimageNEQ = data['coverimageNEQ'];
      result$data['coverimageNEQ'] = (l$coverimageNEQ as String?);
    }
    if (data.containsKey('coverimageIn')) {
      final l$coverimageIn = data['coverimageIn'];
      result$data['coverimageIn'] = (l$coverimageIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('coverimageNotIn')) {
      final l$coverimageNotIn = data['coverimageNotIn'];
      result$data['coverimageNotIn'] = (l$coverimageNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('coverimageGT')) {
      final l$coverimageGT = data['coverimageGT'];
      result$data['coverimageGT'] = (l$coverimageGT as String?);
    }
    if (data.containsKey('coverimageGTE')) {
      final l$coverimageGTE = data['coverimageGTE'];
      result$data['coverimageGTE'] = (l$coverimageGTE as String?);
    }
    if (data.containsKey('coverimageLT')) {
      final l$coverimageLT = data['coverimageLT'];
      result$data['coverimageLT'] = (l$coverimageLT as String?);
    }
    if (data.containsKey('coverimageLTE')) {
      final l$coverimageLTE = data['coverimageLTE'];
      result$data['coverimageLTE'] = (l$coverimageLTE as String?);
    }
    if (data.containsKey('coverimageContains')) {
      final l$coverimageContains = data['coverimageContains'];
      result$data['coverimageContains'] = (l$coverimageContains as String?);
    }
    if (data.containsKey('coverimageHasPrefix')) {
      final l$coverimageHasPrefix = data['coverimageHasPrefix'];
      result$data['coverimageHasPrefix'] = (l$coverimageHasPrefix as String?);
    }
    if (data.containsKey('coverimageHasSuffix')) {
      final l$coverimageHasSuffix = data['coverimageHasSuffix'];
      result$data['coverimageHasSuffix'] = (l$coverimageHasSuffix as String?);
    }
    if (data.containsKey('coverimageEqualFold')) {
      final l$coverimageEqualFold = data['coverimageEqualFold'];
      result$data['coverimageEqualFold'] = (l$coverimageEqualFold as String?);
    }
    if (data.containsKey('coverimageContainsFold')) {
      final l$coverimageContainsFold = data['coverimageContainsFold'];
      result$data['coverimageContainsFold'] =
          (l$coverimageContainsFold as String?);
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] = (l$title as String?);
    }
    if (data.containsKey('titleNEQ')) {
      final l$titleNEQ = data['titleNEQ'];
      result$data['titleNEQ'] = (l$titleNEQ as String?);
    }
    if (data.containsKey('titleIn')) {
      final l$titleIn = data['titleIn'];
      result$data['titleIn'] =
          (l$titleIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleNotIn')) {
      final l$titleNotIn = data['titleNotIn'];
      result$data['titleNotIn'] =
          (l$titleNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('titleGT')) {
      final l$titleGT = data['titleGT'];
      result$data['titleGT'] = (l$titleGT as String?);
    }
    if (data.containsKey('titleGTE')) {
      final l$titleGTE = data['titleGTE'];
      result$data['titleGTE'] = (l$titleGTE as String?);
    }
    if (data.containsKey('titleLT')) {
      final l$titleLT = data['titleLT'];
      result$data['titleLT'] = (l$titleLT as String?);
    }
    if (data.containsKey('titleLTE')) {
      final l$titleLTE = data['titleLTE'];
      result$data['titleLTE'] = (l$titleLTE as String?);
    }
    if (data.containsKey('titleContains')) {
      final l$titleContains = data['titleContains'];
      result$data['titleContains'] = (l$titleContains as String?);
    }
    if (data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = data['titleHasPrefix'];
      result$data['titleHasPrefix'] = (l$titleHasPrefix as String?);
    }
    if (data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = data['titleHasSuffix'];
      result$data['titleHasSuffix'] = (l$titleHasSuffix as String?);
    }
    if (data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = data['titleEqualFold'];
      result$data['titleEqualFold'] = (l$titleEqualFold as String?);
    }
    if (data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = data['titleContainsFold'];
      result$data['titleContainsFold'] = (l$titleContainsFold as String?);
    }
    if (data.containsKey('subtitle')) {
      final l$subtitle = data['subtitle'];
      result$data['subtitle'] = (l$subtitle as String?);
    }
    if (data.containsKey('subtitleNEQ')) {
      final l$subtitleNEQ = data['subtitleNEQ'];
      result$data['subtitleNEQ'] = (l$subtitleNEQ as String?);
    }
    if (data.containsKey('subtitleIn')) {
      final l$subtitleIn = data['subtitleIn'];
      result$data['subtitleIn'] =
          (l$subtitleIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('subtitleNotIn')) {
      final l$subtitleNotIn = data['subtitleNotIn'];
      result$data['subtitleNotIn'] = (l$subtitleNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('subtitleGT')) {
      final l$subtitleGT = data['subtitleGT'];
      result$data['subtitleGT'] = (l$subtitleGT as String?);
    }
    if (data.containsKey('subtitleGTE')) {
      final l$subtitleGTE = data['subtitleGTE'];
      result$data['subtitleGTE'] = (l$subtitleGTE as String?);
    }
    if (data.containsKey('subtitleLT')) {
      final l$subtitleLT = data['subtitleLT'];
      result$data['subtitleLT'] = (l$subtitleLT as String?);
    }
    if (data.containsKey('subtitleLTE')) {
      final l$subtitleLTE = data['subtitleLTE'];
      result$data['subtitleLTE'] = (l$subtitleLTE as String?);
    }
    if (data.containsKey('subtitleContains')) {
      final l$subtitleContains = data['subtitleContains'];
      result$data['subtitleContains'] = (l$subtitleContains as String?);
    }
    if (data.containsKey('subtitleHasPrefix')) {
      final l$subtitleHasPrefix = data['subtitleHasPrefix'];
      result$data['subtitleHasPrefix'] = (l$subtitleHasPrefix as String?);
    }
    if (data.containsKey('subtitleHasSuffix')) {
      final l$subtitleHasSuffix = data['subtitleHasSuffix'];
      result$data['subtitleHasSuffix'] = (l$subtitleHasSuffix as String?);
    }
    if (data.containsKey('subtitleEqualFold')) {
      final l$subtitleEqualFold = data['subtitleEqualFold'];
      result$data['subtitleEqualFold'] = (l$subtitleEqualFold as String?);
    }
    if (data.containsKey('subtitleContainsFold')) {
      final l$subtitleContainsFold = data['subtitleContainsFold'];
      result$data['subtitleContainsFold'] = (l$subtitleContainsFold as String?);
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = (l$description as String?);
    }
    if (data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = data['descriptionNEQ'];
      result$data['descriptionNEQ'] = (l$descriptionNEQ as String?);
    }
    if (data.containsKey('descriptionIn')) {
      final l$descriptionIn = data['descriptionIn'];
      result$data['descriptionIn'] = (l$descriptionIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = data['descriptionNotIn'];
      result$data['descriptionNotIn'] = (l$descriptionNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('descriptionGT')) {
      final l$descriptionGT = data['descriptionGT'];
      result$data['descriptionGT'] = (l$descriptionGT as String?);
    }
    if (data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = data['descriptionGTE'];
      result$data['descriptionGTE'] = (l$descriptionGTE as String?);
    }
    if (data.containsKey('descriptionLT')) {
      final l$descriptionLT = data['descriptionLT'];
      result$data['descriptionLT'] = (l$descriptionLT as String?);
    }
    if (data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = data['descriptionLTE'];
      result$data['descriptionLTE'] = (l$descriptionLTE as String?);
    }
    if (data.containsKey('descriptionContains')) {
      final l$descriptionContains = data['descriptionContains'];
      result$data['descriptionContains'] = (l$descriptionContains as String?);
    }
    if (data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = data['descriptionHasPrefix'];
      result$data['descriptionHasPrefix'] = (l$descriptionHasPrefix as String?);
    }
    if (data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = data['descriptionHasSuffix'];
      result$data['descriptionHasSuffix'] = (l$descriptionHasSuffix as String?);
    }
    if (data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = data['descriptionEqualFold'];
      result$data['descriptionEqualFold'] = (l$descriptionEqualFold as String?);
    }
    if (data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = data['descriptionContainsFold'];
      result$data['descriptionContainsFold'] =
          (l$descriptionContainsFold as String?);
    }
    if (data.containsKey('mastering')) {
      final l$mastering = data['mastering'];
      result$data['mastering'] = (l$mastering as String?);
    }
    if (data.containsKey('masteringNEQ')) {
      final l$masteringNEQ = data['masteringNEQ'];
      result$data['masteringNEQ'] = (l$masteringNEQ as String?);
    }
    if (data.containsKey('masteringIn')) {
      final l$masteringIn = data['masteringIn'];
      result$data['masteringIn'] =
          (l$masteringIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('masteringNotIn')) {
      final l$masteringNotIn = data['masteringNotIn'];
      result$data['masteringNotIn'] = (l$masteringNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('masteringGT')) {
      final l$masteringGT = data['masteringGT'];
      result$data['masteringGT'] = (l$masteringGT as String?);
    }
    if (data.containsKey('masteringGTE')) {
      final l$masteringGTE = data['masteringGTE'];
      result$data['masteringGTE'] = (l$masteringGTE as String?);
    }
    if (data.containsKey('masteringLT')) {
      final l$masteringLT = data['masteringLT'];
      result$data['masteringLT'] = (l$masteringLT as String?);
    }
    if (data.containsKey('masteringLTE')) {
      final l$masteringLTE = data['masteringLTE'];
      result$data['masteringLTE'] = (l$masteringLTE as String?);
    }
    if (data.containsKey('masteringContains')) {
      final l$masteringContains = data['masteringContains'];
      result$data['masteringContains'] = (l$masteringContains as String?);
    }
    if (data.containsKey('masteringHasPrefix')) {
      final l$masteringHasPrefix = data['masteringHasPrefix'];
      result$data['masteringHasPrefix'] = (l$masteringHasPrefix as String?);
    }
    if (data.containsKey('masteringHasSuffix')) {
      final l$masteringHasSuffix = data['masteringHasSuffix'];
      result$data['masteringHasSuffix'] = (l$masteringHasSuffix as String?);
    }
    if (data.containsKey('masteringEqualFold')) {
      final l$masteringEqualFold = data['masteringEqualFold'];
      result$data['masteringEqualFold'] = (l$masteringEqualFold as String?);
    }
    if (data.containsKey('masteringContainsFold')) {
      final l$masteringContainsFold = data['masteringContainsFold'];
      result$data['masteringContainsFold'] =
          (l$masteringContainsFold as String?);
    }
    if (data.containsKey('days')) {
      final l$days = data['days'];
      result$data['days'] = (l$days as int?);
    }
    if (data.containsKey('daysNEQ')) {
      final l$daysNEQ = data['daysNEQ'];
      result$data['daysNEQ'] = (l$daysNEQ as int?);
    }
    if (data.containsKey('daysIn')) {
      final l$daysIn = data['daysIn'];
      result$data['daysIn'] =
          (l$daysIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('daysNotIn')) {
      final l$daysNotIn = data['daysNotIn'];
      result$data['daysNotIn'] =
          (l$daysNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('daysGT')) {
      final l$daysGT = data['daysGT'];
      result$data['daysGT'] = (l$daysGT as int?);
    }
    if (data.containsKey('daysGTE')) {
      final l$daysGTE = data['daysGTE'];
      result$data['daysGTE'] = (l$daysGTE as int?);
    }
    if (data.containsKey('daysLT')) {
      final l$daysLT = data['daysLT'];
      result$data['daysLT'] = (l$daysLT as int?);
    }
    if (data.containsKey('daysLTE')) {
      final l$daysLTE = data['daysLTE'];
      result$data['daysLTE'] = (l$daysLTE as int?);
    }
    if (data.containsKey('color')) {
      final l$color = data['color'];
      result$data['color'] = (l$color as String?);
    }
    if (data.containsKey('colorNEQ')) {
      final l$colorNEQ = data['colorNEQ'];
      result$data['colorNEQ'] = (l$colorNEQ as String?);
    }
    if (data.containsKey('colorIn')) {
      final l$colorIn = data['colorIn'];
      result$data['colorIn'] =
          (l$colorIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('colorNotIn')) {
      final l$colorNotIn = data['colorNotIn'];
      result$data['colorNotIn'] =
          (l$colorNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('colorGT')) {
      final l$colorGT = data['colorGT'];
      result$data['colorGT'] = (l$colorGT as String?);
    }
    if (data.containsKey('colorGTE')) {
      final l$colorGTE = data['colorGTE'];
      result$data['colorGTE'] = (l$colorGTE as String?);
    }
    if (data.containsKey('colorLT')) {
      final l$colorLT = data['colorLT'];
      result$data['colorLT'] = (l$colorLT as String?);
    }
    if (data.containsKey('colorLTE')) {
      final l$colorLTE = data['colorLTE'];
      result$data['colorLTE'] = (l$colorLTE as String?);
    }
    if (data.containsKey('colorContains')) {
      final l$colorContains = data['colorContains'];
      result$data['colorContains'] = (l$colorContains as String?);
    }
    if (data.containsKey('colorHasPrefix')) {
      final l$colorHasPrefix = data['colorHasPrefix'];
      result$data['colorHasPrefix'] = (l$colorHasPrefix as String?);
    }
    if (data.containsKey('colorHasSuffix')) {
      final l$colorHasSuffix = data['colorHasSuffix'];
      result$data['colorHasSuffix'] = (l$colorHasSuffix as String?);
    }
    if (data.containsKey('colorEqualFold')) {
      final l$colorEqualFold = data['colorEqualFold'];
      result$data['colorEqualFold'] = (l$colorEqualFold as String?);
    }
    if (data.containsKey('colorContainsFold')) {
      final l$colorContainsFold = data['colorContainsFold'];
      result$data['colorContainsFold'] = (l$colorContainsFold as String?);
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = (l$order as int?);
    }
    if (data.containsKey('orderNEQ')) {
      final l$orderNEQ = data['orderNEQ'];
      result$data['orderNEQ'] = (l$orderNEQ as int?);
    }
    if (data.containsKey('orderIn')) {
      final l$orderIn = data['orderIn'];
      result$data['orderIn'] =
          (l$orderIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderNotIn')) {
      final l$orderNotIn = data['orderNotIn'];
      result$data['orderNotIn'] =
          (l$orderNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('orderGT')) {
      final l$orderGT = data['orderGT'];
      result$data['orderGT'] = (l$orderGT as int?);
    }
    if (data.containsKey('orderGTE')) {
      final l$orderGTE = data['orderGTE'];
      result$data['orderGTE'] = (l$orderGTE as int?);
    }
    if (data.containsKey('orderLT')) {
      final l$orderLT = data['orderLT'];
      result$data['orderLT'] = (l$orderLT as int?);
    }
    if (data.containsKey('orderLTE')) {
      final l$orderLTE = data['orderLTE'];
      result$data['orderLTE'] = (l$orderLTE as int?);
    }
    if (data.containsKey('hasCourse')) {
      final l$hasCourse = data['hasCourse'];
      result$data['hasCourse'] = (l$hasCourse as bool?);
    }
    if (data.containsKey('hasCourseWith')) {
      final l$hasCourseWith = data['hasCourseWith'];
      result$data['hasCourseWith'] = (l$hasCourseWith as List<dynamic>?)
          ?.map((e) =>
              Input$CourseWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('hasLessons')) {
      final l$hasLessons = data['hasLessons'];
      result$data['hasLessons'] = (l$hasLessons as bool?);
    }
    if (data.containsKey('hasLessonsWith')) {
      final l$hasLessonsWith = data['hasLessonsWith'];
      result$data['hasLessonsWith'] = (l$hasLessonsWith as List<dynamic>?)
          ?.map((e) =>
              Input$LessonWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    return Input$UnitWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$UnitWhereInput? get not => (_$data['not'] as Input$UnitWhereInput?);

  List<Input$UnitWhereInput>? get and =>
      (_$data['and'] as List<Input$UnitWhereInput>?);

  List<Input$UnitWhereInput>? get or =>
      (_$data['or'] as List<Input$UnitWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  String? get courseID => (_$data['courseID'] as String?);

  String? get courseIDNEQ => (_$data['courseIDNEQ'] as String?);

  List<String>? get courseIDIn => (_$data['courseIDIn'] as List<String>?);

  List<String>? get courseIDNotIn => (_$data['courseIDNotIn'] as List<String>?);

  String? get iconimage => (_$data['iconimage'] as String?);

  String? get iconimageNEQ => (_$data['iconimageNEQ'] as String?);

  List<String>? get iconimageIn => (_$data['iconimageIn'] as List<String>?);

  List<String>? get iconimageNotIn =>
      (_$data['iconimageNotIn'] as List<String>?);

  String? get iconimageGT => (_$data['iconimageGT'] as String?);

  String? get iconimageGTE => (_$data['iconimageGTE'] as String?);

  String? get iconimageLT => (_$data['iconimageLT'] as String?);

  String? get iconimageLTE => (_$data['iconimageLTE'] as String?);

  String? get iconimageContains => (_$data['iconimageContains'] as String?);

  String? get iconimageHasPrefix => (_$data['iconimageHasPrefix'] as String?);

  String? get iconimageHasSuffix => (_$data['iconimageHasSuffix'] as String?);

  String? get iconimageEqualFold => (_$data['iconimageEqualFold'] as String?);

  String? get iconimageContainsFold =>
      (_$data['iconimageContainsFold'] as String?);

  String? get coverimage => (_$data['coverimage'] as String?);

  String? get coverimageNEQ => (_$data['coverimageNEQ'] as String?);

  List<String>? get coverimageIn => (_$data['coverimageIn'] as List<String>?);

  List<String>? get coverimageNotIn =>
      (_$data['coverimageNotIn'] as List<String>?);

  String? get coverimageGT => (_$data['coverimageGT'] as String?);

  String? get coverimageGTE => (_$data['coverimageGTE'] as String?);

  String? get coverimageLT => (_$data['coverimageLT'] as String?);

  String? get coverimageLTE => (_$data['coverimageLTE'] as String?);

  String? get coverimageContains => (_$data['coverimageContains'] as String?);

  String? get coverimageHasPrefix => (_$data['coverimageHasPrefix'] as String?);

  String? get coverimageHasSuffix => (_$data['coverimageHasSuffix'] as String?);

  String? get coverimageEqualFold => (_$data['coverimageEqualFold'] as String?);

  String? get coverimageContainsFold =>
      (_$data['coverimageContainsFold'] as String?);

  String? get title => (_$data['title'] as String?);

  String? get titleNEQ => (_$data['titleNEQ'] as String?);

  List<String>? get titleIn => (_$data['titleIn'] as List<String>?);

  List<String>? get titleNotIn => (_$data['titleNotIn'] as List<String>?);

  String? get titleGT => (_$data['titleGT'] as String?);

  String? get titleGTE => (_$data['titleGTE'] as String?);

  String? get titleLT => (_$data['titleLT'] as String?);

  String? get titleLTE => (_$data['titleLTE'] as String?);

  String? get titleContains => (_$data['titleContains'] as String?);

  String? get titleHasPrefix => (_$data['titleHasPrefix'] as String?);

  String? get titleHasSuffix => (_$data['titleHasSuffix'] as String?);

  String? get titleEqualFold => (_$data['titleEqualFold'] as String?);

  String? get titleContainsFold => (_$data['titleContainsFold'] as String?);

  String? get subtitle => (_$data['subtitle'] as String?);

  String? get subtitleNEQ => (_$data['subtitleNEQ'] as String?);

  List<String>? get subtitleIn => (_$data['subtitleIn'] as List<String>?);

  List<String>? get subtitleNotIn => (_$data['subtitleNotIn'] as List<String>?);

  String? get subtitleGT => (_$data['subtitleGT'] as String?);

  String? get subtitleGTE => (_$data['subtitleGTE'] as String?);

  String? get subtitleLT => (_$data['subtitleLT'] as String?);

  String? get subtitleLTE => (_$data['subtitleLTE'] as String?);

  String? get subtitleContains => (_$data['subtitleContains'] as String?);

  String? get subtitleHasPrefix => (_$data['subtitleHasPrefix'] as String?);

  String? get subtitleHasSuffix => (_$data['subtitleHasSuffix'] as String?);

  String? get subtitleEqualFold => (_$data['subtitleEqualFold'] as String?);

  String? get subtitleContainsFold =>
      (_$data['subtitleContainsFold'] as String?);

  String? get description => (_$data['description'] as String?);

  String? get descriptionNEQ => (_$data['descriptionNEQ'] as String?);

  List<String>? get descriptionIn => (_$data['descriptionIn'] as List<String>?);

  List<String>? get descriptionNotIn =>
      (_$data['descriptionNotIn'] as List<String>?);

  String? get descriptionGT => (_$data['descriptionGT'] as String?);

  String? get descriptionGTE => (_$data['descriptionGTE'] as String?);

  String? get descriptionLT => (_$data['descriptionLT'] as String?);

  String? get descriptionLTE => (_$data['descriptionLTE'] as String?);

  String? get descriptionContains => (_$data['descriptionContains'] as String?);

  String? get descriptionHasPrefix =>
      (_$data['descriptionHasPrefix'] as String?);

  String? get descriptionHasSuffix =>
      (_$data['descriptionHasSuffix'] as String?);

  String? get descriptionEqualFold =>
      (_$data['descriptionEqualFold'] as String?);

  String? get descriptionContainsFold =>
      (_$data['descriptionContainsFold'] as String?);

  String? get mastering => (_$data['mastering'] as String?);

  String? get masteringNEQ => (_$data['masteringNEQ'] as String?);

  List<String>? get masteringIn => (_$data['masteringIn'] as List<String>?);

  List<String>? get masteringNotIn =>
      (_$data['masteringNotIn'] as List<String>?);

  String? get masteringGT => (_$data['masteringGT'] as String?);

  String? get masteringGTE => (_$data['masteringGTE'] as String?);

  String? get masteringLT => (_$data['masteringLT'] as String?);

  String? get masteringLTE => (_$data['masteringLTE'] as String?);

  String? get masteringContains => (_$data['masteringContains'] as String?);

  String? get masteringHasPrefix => (_$data['masteringHasPrefix'] as String?);

  String? get masteringHasSuffix => (_$data['masteringHasSuffix'] as String?);

  String? get masteringEqualFold => (_$data['masteringEqualFold'] as String?);

  String? get masteringContainsFold =>
      (_$data['masteringContainsFold'] as String?);

  int? get days => (_$data['days'] as int?);

  int? get daysNEQ => (_$data['daysNEQ'] as int?);

  List<int>? get daysIn => (_$data['daysIn'] as List<int>?);

  List<int>? get daysNotIn => (_$data['daysNotIn'] as List<int>?);

  int? get daysGT => (_$data['daysGT'] as int?);

  int? get daysGTE => (_$data['daysGTE'] as int?);

  int? get daysLT => (_$data['daysLT'] as int?);

  int? get daysLTE => (_$data['daysLTE'] as int?);

  String? get color => (_$data['color'] as String?);

  String? get colorNEQ => (_$data['colorNEQ'] as String?);

  List<String>? get colorIn => (_$data['colorIn'] as List<String>?);

  List<String>? get colorNotIn => (_$data['colorNotIn'] as List<String>?);

  String? get colorGT => (_$data['colorGT'] as String?);

  String? get colorGTE => (_$data['colorGTE'] as String?);

  String? get colorLT => (_$data['colorLT'] as String?);

  String? get colorLTE => (_$data['colorLTE'] as String?);

  String? get colorContains => (_$data['colorContains'] as String?);

  String? get colorHasPrefix => (_$data['colorHasPrefix'] as String?);

  String? get colorHasSuffix => (_$data['colorHasSuffix'] as String?);

  String? get colorEqualFold => (_$data['colorEqualFold'] as String?);

  String? get colorContainsFold => (_$data['colorContainsFold'] as String?);

  int? get order => (_$data['order'] as int?);

  int? get orderNEQ => (_$data['orderNEQ'] as int?);

  List<int>? get orderIn => (_$data['orderIn'] as List<int>?);

  List<int>? get orderNotIn => (_$data['orderNotIn'] as List<int>?);

  int? get orderGT => (_$data['orderGT'] as int?);

  int? get orderGTE => (_$data['orderGTE'] as int?);

  int? get orderLT => (_$data['orderLT'] as int?);

  int? get orderLTE => (_$data['orderLTE'] as int?);

  bool? get hasCourse => (_$data['hasCourse'] as bool?);

  List<Input$CourseWhereInput>? get hasCourseWith =>
      (_$data['hasCourseWith'] as List<Input$CourseWhereInput>?);

  bool? get hasLessons => (_$data['hasLessons'] as bool?);

  List<Input$LessonWhereInput>? get hasLessonsWith =>
      (_$data['hasLessonsWith'] as List<Input$LessonWhereInput>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('courseID')) {
      final l$courseID = courseID;
      result$data['courseID'] = l$courseID;
    }
    if (_$data.containsKey('courseIDNEQ')) {
      final l$courseIDNEQ = courseIDNEQ;
      result$data['courseIDNEQ'] = l$courseIDNEQ;
    }
    if (_$data.containsKey('courseIDIn')) {
      final l$courseIDIn = courseIDIn;
      result$data['courseIDIn'] = l$courseIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('courseIDNotIn')) {
      final l$courseIDNotIn = courseIDNotIn;
      result$data['courseIDNotIn'] = l$courseIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimage')) {
      final l$iconimage = iconimage;
      result$data['iconimage'] = l$iconimage;
    }
    if (_$data.containsKey('iconimageNEQ')) {
      final l$iconimageNEQ = iconimageNEQ;
      result$data['iconimageNEQ'] = l$iconimageNEQ;
    }
    if (_$data.containsKey('iconimageIn')) {
      final l$iconimageIn = iconimageIn;
      result$data['iconimageIn'] = l$iconimageIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimageNotIn')) {
      final l$iconimageNotIn = iconimageNotIn;
      result$data['iconimageNotIn'] = l$iconimageNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('iconimageGT')) {
      final l$iconimageGT = iconimageGT;
      result$data['iconimageGT'] = l$iconimageGT;
    }
    if (_$data.containsKey('iconimageGTE')) {
      final l$iconimageGTE = iconimageGTE;
      result$data['iconimageGTE'] = l$iconimageGTE;
    }
    if (_$data.containsKey('iconimageLT')) {
      final l$iconimageLT = iconimageLT;
      result$data['iconimageLT'] = l$iconimageLT;
    }
    if (_$data.containsKey('iconimageLTE')) {
      final l$iconimageLTE = iconimageLTE;
      result$data['iconimageLTE'] = l$iconimageLTE;
    }
    if (_$data.containsKey('iconimageContains')) {
      final l$iconimageContains = iconimageContains;
      result$data['iconimageContains'] = l$iconimageContains;
    }
    if (_$data.containsKey('iconimageHasPrefix')) {
      final l$iconimageHasPrefix = iconimageHasPrefix;
      result$data['iconimageHasPrefix'] = l$iconimageHasPrefix;
    }
    if (_$data.containsKey('iconimageHasSuffix')) {
      final l$iconimageHasSuffix = iconimageHasSuffix;
      result$data['iconimageHasSuffix'] = l$iconimageHasSuffix;
    }
    if (_$data.containsKey('iconimageEqualFold')) {
      final l$iconimageEqualFold = iconimageEqualFold;
      result$data['iconimageEqualFold'] = l$iconimageEqualFold;
    }
    if (_$data.containsKey('iconimageContainsFold')) {
      final l$iconimageContainsFold = iconimageContainsFold;
      result$data['iconimageContainsFold'] = l$iconimageContainsFold;
    }
    if (_$data.containsKey('coverimage')) {
      final l$coverimage = coverimage;
      result$data['coverimage'] = l$coverimage;
    }
    if (_$data.containsKey('coverimageNEQ')) {
      final l$coverimageNEQ = coverimageNEQ;
      result$data['coverimageNEQ'] = l$coverimageNEQ;
    }
    if (_$data.containsKey('coverimageIn')) {
      final l$coverimageIn = coverimageIn;
      result$data['coverimageIn'] = l$coverimageIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('coverimageNotIn')) {
      final l$coverimageNotIn = coverimageNotIn;
      result$data['coverimageNotIn'] =
          l$coverimageNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('coverimageGT')) {
      final l$coverimageGT = coverimageGT;
      result$data['coverimageGT'] = l$coverimageGT;
    }
    if (_$data.containsKey('coverimageGTE')) {
      final l$coverimageGTE = coverimageGTE;
      result$data['coverimageGTE'] = l$coverimageGTE;
    }
    if (_$data.containsKey('coverimageLT')) {
      final l$coverimageLT = coverimageLT;
      result$data['coverimageLT'] = l$coverimageLT;
    }
    if (_$data.containsKey('coverimageLTE')) {
      final l$coverimageLTE = coverimageLTE;
      result$data['coverimageLTE'] = l$coverimageLTE;
    }
    if (_$data.containsKey('coverimageContains')) {
      final l$coverimageContains = coverimageContains;
      result$data['coverimageContains'] = l$coverimageContains;
    }
    if (_$data.containsKey('coverimageHasPrefix')) {
      final l$coverimageHasPrefix = coverimageHasPrefix;
      result$data['coverimageHasPrefix'] = l$coverimageHasPrefix;
    }
    if (_$data.containsKey('coverimageHasSuffix')) {
      final l$coverimageHasSuffix = coverimageHasSuffix;
      result$data['coverimageHasSuffix'] = l$coverimageHasSuffix;
    }
    if (_$data.containsKey('coverimageEqualFold')) {
      final l$coverimageEqualFold = coverimageEqualFold;
      result$data['coverimageEqualFold'] = l$coverimageEqualFold;
    }
    if (_$data.containsKey('coverimageContainsFold')) {
      final l$coverimageContainsFold = coverimageContainsFold;
      result$data['coverimageContainsFold'] = l$coverimageContainsFold;
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] = l$title;
    }
    if (_$data.containsKey('titleNEQ')) {
      final l$titleNEQ = titleNEQ;
      result$data['titleNEQ'] = l$titleNEQ;
    }
    if (_$data.containsKey('titleIn')) {
      final l$titleIn = titleIn;
      result$data['titleIn'] = l$titleIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleNotIn')) {
      final l$titleNotIn = titleNotIn;
      result$data['titleNotIn'] = l$titleNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('titleGT')) {
      final l$titleGT = titleGT;
      result$data['titleGT'] = l$titleGT;
    }
    if (_$data.containsKey('titleGTE')) {
      final l$titleGTE = titleGTE;
      result$data['titleGTE'] = l$titleGTE;
    }
    if (_$data.containsKey('titleLT')) {
      final l$titleLT = titleLT;
      result$data['titleLT'] = l$titleLT;
    }
    if (_$data.containsKey('titleLTE')) {
      final l$titleLTE = titleLTE;
      result$data['titleLTE'] = l$titleLTE;
    }
    if (_$data.containsKey('titleContains')) {
      final l$titleContains = titleContains;
      result$data['titleContains'] = l$titleContains;
    }
    if (_$data.containsKey('titleHasPrefix')) {
      final l$titleHasPrefix = titleHasPrefix;
      result$data['titleHasPrefix'] = l$titleHasPrefix;
    }
    if (_$data.containsKey('titleHasSuffix')) {
      final l$titleHasSuffix = titleHasSuffix;
      result$data['titleHasSuffix'] = l$titleHasSuffix;
    }
    if (_$data.containsKey('titleEqualFold')) {
      final l$titleEqualFold = titleEqualFold;
      result$data['titleEqualFold'] = l$titleEqualFold;
    }
    if (_$data.containsKey('titleContainsFold')) {
      final l$titleContainsFold = titleContainsFold;
      result$data['titleContainsFold'] = l$titleContainsFold;
    }
    if (_$data.containsKey('subtitle')) {
      final l$subtitle = subtitle;
      result$data['subtitle'] = l$subtitle;
    }
    if (_$data.containsKey('subtitleNEQ')) {
      final l$subtitleNEQ = subtitleNEQ;
      result$data['subtitleNEQ'] = l$subtitleNEQ;
    }
    if (_$data.containsKey('subtitleIn')) {
      final l$subtitleIn = subtitleIn;
      result$data['subtitleIn'] = l$subtitleIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('subtitleNotIn')) {
      final l$subtitleNotIn = subtitleNotIn;
      result$data['subtitleNotIn'] = l$subtitleNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('subtitleGT')) {
      final l$subtitleGT = subtitleGT;
      result$data['subtitleGT'] = l$subtitleGT;
    }
    if (_$data.containsKey('subtitleGTE')) {
      final l$subtitleGTE = subtitleGTE;
      result$data['subtitleGTE'] = l$subtitleGTE;
    }
    if (_$data.containsKey('subtitleLT')) {
      final l$subtitleLT = subtitleLT;
      result$data['subtitleLT'] = l$subtitleLT;
    }
    if (_$data.containsKey('subtitleLTE')) {
      final l$subtitleLTE = subtitleLTE;
      result$data['subtitleLTE'] = l$subtitleLTE;
    }
    if (_$data.containsKey('subtitleContains')) {
      final l$subtitleContains = subtitleContains;
      result$data['subtitleContains'] = l$subtitleContains;
    }
    if (_$data.containsKey('subtitleHasPrefix')) {
      final l$subtitleHasPrefix = subtitleHasPrefix;
      result$data['subtitleHasPrefix'] = l$subtitleHasPrefix;
    }
    if (_$data.containsKey('subtitleHasSuffix')) {
      final l$subtitleHasSuffix = subtitleHasSuffix;
      result$data['subtitleHasSuffix'] = l$subtitleHasSuffix;
    }
    if (_$data.containsKey('subtitleEqualFold')) {
      final l$subtitleEqualFold = subtitleEqualFold;
      result$data['subtitleEqualFold'] = l$subtitleEqualFold;
    }
    if (_$data.containsKey('subtitleContainsFold')) {
      final l$subtitleContainsFold = subtitleContainsFold;
      result$data['subtitleContainsFold'] = l$subtitleContainsFold;
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] = l$description;
    }
    if (_$data.containsKey('descriptionNEQ')) {
      final l$descriptionNEQ = descriptionNEQ;
      result$data['descriptionNEQ'] = l$descriptionNEQ;
    }
    if (_$data.containsKey('descriptionIn')) {
      final l$descriptionIn = descriptionIn;
      result$data['descriptionIn'] = l$descriptionIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionNotIn')) {
      final l$descriptionNotIn = descriptionNotIn;
      result$data['descriptionNotIn'] =
          l$descriptionNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('descriptionGT')) {
      final l$descriptionGT = descriptionGT;
      result$data['descriptionGT'] = l$descriptionGT;
    }
    if (_$data.containsKey('descriptionGTE')) {
      final l$descriptionGTE = descriptionGTE;
      result$data['descriptionGTE'] = l$descriptionGTE;
    }
    if (_$data.containsKey('descriptionLT')) {
      final l$descriptionLT = descriptionLT;
      result$data['descriptionLT'] = l$descriptionLT;
    }
    if (_$data.containsKey('descriptionLTE')) {
      final l$descriptionLTE = descriptionLTE;
      result$data['descriptionLTE'] = l$descriptionLTE;
    }
    if (_$data.containsKey('descriptionContains')) {
      final l$descriptionContains = descriptionContains;
      result$data['descriptionContains'] = l$descriptionContains;
    }
    if (_$data.containsKey('descriptionHasPrefix')) {
      final l$descriptionHasPrefix = descriptionHasPrefix;
      result$data['descriptionHasPrefix'] = l$descriptionHasPrefix;
    }
    if (_$data.containsKey('descriptionHasSuffix')) {
      final l$descriptionHasSuffix = descriptionHasSuffix;
      result$data['descriptionHasSuffix'] = l$descriptionHasSuffix;
    }
    if (_$data.containsKey('descriptionEqualFold')) {
      final l$descriptionEqualFold = descriptionEqualFold;
      result$data['descriptionEqualFold'] = l$descriptionEqualFold;
    }
    if (_$data.containsKey('descriptionContainsFold')) {
      final l$descriptionContainsFold = descriptionContainsFold;
      result$data['descriptionContainsFold'] = l$descriptionContainsFold;
    }
    if (_$data.containsKey('mastering')) {
      final l$mastering = mastering;
      result$data['mastering'] = l$mastering;
    }
    if (_$data.containsKey('masteringNEQ')) {
      final l$masteringNEQ = masteringNEQ;
      result$data['masteringNEQ'] = l$masteringNEQ;
    }
    if (_$data.containsKey('masteringIn')) {
      final l$masteringIn = masteringIn;
      result$data['masteringIn'] = l$masteringIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('masteringNotIn')) {
      final l$masteringNotIn = masteringNotIn;
      result$data['masteringNotIn'] = l$masteringNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('masteringGT')) {
      final l$masteringGT = masteringGT;
      result$data['masteringGT'] = l$masteringGT;
    }
    if (_$data.containsKey('masteringGTE')) {
      final l$masteringGTE = masteringGTE;
      result$data['masteringGTE'] = l$masteringGTE;
    }
    if (_$data.containsKey('masteringLT')) {
      final l$masteringLT = masteringLT;
      result$data['masteringLT'] = l$masteringLT;
    }
    if (_$data.containsKey('masteringLTE')) {
      final l$masteringLTE = masteringLTE;
      result$data['masteringLTE'] = l$masteringLTE;
    }
    if (_$data.containsKey('masteringContains')) {
      final l$masteringContains = masteringContains;
      result$data['masteringContains'] = l$masteringContains;
    }
    if (_$data.containsKey('masteringHasPrefix')) {
      final l$masteringHasPrefix = masteringHasPrefix;
      result$data['masteringHasPrefix'] = l$masteringHasPrefix;
    }
    if (_$data.containsKey('masteringHasSuffix')) {
      final l$masteringHasSuffix = masteringHasSuffix;
      result$data['masteringHasSuffix'] = l$masteringHasSuffix;
    }
    if (_$data.containsKey('masteringEqualFold')) {
      final l$masteringEqualFold = masteringEqualFold;
      result$data['masteringEqualFold'] = l$masteringEqualFold;
    }
    if (_$data.containsKey('masteringContainsFold')) {
      final l$masteringContainsFold = masteringContainsFold;
      result$data['masteringContainsFold'] = l$masteringContainsFold;
    }
    if (_$data.containsKey('days')) {
      final l$days = days;
      result$data['days'] = l$days;
    }
    if (_$data.containsKey('daysNEQ')) {
      final l$daysNEQ = daysNEQ;
      result$data['daysNEQ'] = l$daysNEQ;
    }
    if (_$data.containsKey('daysIn')) {
      final l$daysIn = daysIn;
      result$data['daysIn'] = l$daysIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('daysNotIn')) {
      final l$daysNotIn = daysNotIn;
      result$data['daysNotIn'] = l$daysNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('daysGT')) {
      final l$daysGT = daysGT;
      result$data['daysGT'] = l$daysGT;
    }
    if (_$data.containsKey('daysGTE')) {
      final l$daysGTE = daysGTE;
      result$data['daysGTE'] = l$daysGTE;
    }
    if (_$data.containsKey('daysLT')) {
      final l$daysLT = daysLT;
      result$data['daysLT'] = l$daysLT;
    }
    if (_$data.containsKey('daysLTE')) {
      final l$daysLTE = daysLTE;
      result$data['daysLTE'] = l$daysLTE;
    }
    if (_$data.containsKey('color')) {
      final l$color = color;
      result$data['color'] = l$color;
    }
    if (_$data.containsKey('colorNEQ')) {
      final l$colorNEQ = colorNEQ;
      result$data['colorNEQ'] = l$colorNEQ;
    }
    if (_$data.containsKey('colorIn')) {
      final l$colorIn = colorIn;
      result$data['colorIn'] = l$colorIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('colorNotIn')) {
      final l$colorNotIn = colorNotIn;
      result$data['colorNotIn'] = l$colorNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('colorGT')) {
      final l$colorGT = colorGT;
      result$data['colorGT'] = l$colorGT;
    }
    if (_$data.containsKey('colorGTE')) {
      final l$colorGTE = colorGTE;
      result$data['colorGTE'] = l$colorGTE;
    }
    if (_$data.containsKey('colorLT')) {
      final l$colorLT = colorLT;
      result$data['colorLT'] = l$colorLT;
    }
    if (_$data.containsKey('colorLTE')) {
      final l$colorLTE = colorLTE;
      result$data['colorLTE'] = l$colorLTE;
    }
    if (_$data.containsKey('colorContains')) {
      final l$colorContains = colorContains;
      result$data['colorContains'] = l$colorContains;
    }
    if (_$data.containsKey('colorHasPrefix')) {
      final l$colorHasPrefix = colorHasPrefix;
      result$data['colorHasPrefix'] = l$colorHasPrefix;
    }
    if (_$data.containsKey('colorHasSuffix')) {
      final l$colorHasSuffix = colorHasSuffix;
      result$data['colorHasSuffix'] = l$colorHasSuffix;
    }
    if (_$data.containsKey('colorEqualFold')) {
      final l$colorEqualFold = colorEqualFold;
      result$data['colorEqualFold'] = l$colorEqualFold;
    }
    if (_$data.containsKey('colorContainsFold')) {
      final l$colorContainsFold = colorContainsFold;
      result$data['colorContainsFold'] = l$colorContainsFold;
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order;
    }
    if (_$data.containsKey('orderNEQ')) {
      final l$orderNEQ = orderNEQ;
      result$data['orderNEQ'] = l$orderNEQ;
    }
    if (_$data.containsKey('orderIn')) {
      final l$orderIn = orderIn;
      result$data['orderIn'] = l$orderIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderNotIn')) {
      final l$orderNotIn = orderNotIn;
      result$data['orderNotIn'] = l$orderNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('orderGT')) {
      final l$orderGT = orderGT;
      result$data['orderGT'] = l$orderGT;
    }
    if (_$data.containsKey('orderGTE')) {
      final l$orderGTE = orderGTE;
      result$data['orderGTE'] = l$orderGTE;
    }
    if (_$data.containsKey('orderLT')) {
      final l$orderLT = orderLT;
      result$data['orderLT'] = l$orderLT;
    }
    if (_$data.containsKey('orderLTE')) {
      final l$orderLTE = orderLTE;
      result$data['orderLTE'] = l$orderLTE;
    }
    if (_$data.containsKey('hasCourse')) {
      final l$hasCourse = hasCourse;
      result$data['hasCourse'] = l$hasCourse;
    }
    if (_$data.containsKey('hasCourseWith')) {
      final l$hasCourseWith = hasCourseWith;
      result$data['hasCourseWith'] =
          l$hasCourseWith?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('hasLessons')) {
      final l$hasLessons = hasLessons;
      result$data['hasLessons'] = l$hasLessons;
    }
    if (_$data.containsKey('hasLessonsWith')) {
      final l$hasLessonsWith = hasLessonsWith;
      result$data['hasLessonsWith'] =
          l$hasLessonsWith?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$UnitWhereInput<Input$UnitWhereInput> get copyWith =>
      CopyWith$Input$UnitWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$UnitWhereInput) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$courseID = courseID;
    final lOther$courseID = other.courseID;
    if (_$data.containsKey('courseID') !=
        other._$data.containsKey('courseID')) {
      return false;
    }
    if (l$courseID != lOther$courseID) {
      return false;
    }
    final l$courseIDNEQ = courseIDNEQ;
    final lOther$courseIDNEQ = other.courseIDNEQ;
    if (_$data.containsKey('courseIDNEQ') !=
        other._$data.containsKey('courseIDNEQ')) {
      return false;
    }
    if (l$courseIDNEQ != lOther$courseIDNEQ) {
      return false;
    }
    final l$courseIDIn = courseIDIn;
    final lOther$courseIDIn = other.courseIDIn;
    if (_$data.containsKey('courseIDIn') !=
        other._$data.containsKey('courseIDIn')) {
      return false;
    }
    if (l$courseIDIn != null && lOther$courseIDIn != null) {
      if (l$courseIDIn.length != lOther$courseIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$courseIDIn.length; i++) {
        final l$courseIDIn$entry = l$courseIDIn[i];
        final lOther$courseIDIn$entry = lOther$courseIDIn[i];
        if (l$courseIDIn$entry != lOther$courseIDIn$entry) {
          return false;
        }
      }
    } else if (l$courseIDIn != lOther$courseIDIn) {
      return false;
    }
    final l$courseIDNotIn = courseIDNotIn;
    final lOther$courseIDNotIn = other.courseIDNotIn;
    if (_$data.containsKey('courseIDNotIn') !=
        other._$data.containsKey('courseIDNotIn')) {
      return false;
    }
    if (l$courseIDNotIn != null && lOther$courseIDNotIn != null) {
      if (l$courseIDNotIn.length != lOther$courseIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$courseIDNotIn.length; i++) {
        final l$courseIDNotIn$entry = l$courseIDNotIn[i];
        final lOther$courseIDNotIn$entry = lOther$courseIDNotIn[i];
        if (l$courseIDNotIn$entry != lOther$courseIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$courseIDNotIn != lOther$courseIDNotIn) {
      return false;
    }
    final l$iconimage = iconimage;
    final lOther$iconimage = other.iconimage;
    if (_$data.containsKey('iconimage') !=
        other._$data.containsKey('iconimage')) {
      return false;
    }
    if (l$iconimage != lOther$iconimage) {
      return false;
    }
    final l$iconimageNEQ = iconimageNEQ;
    final lOther$iconimageNEQ = other.iconimageNEQ;
    if (_$data.containsKey('iconimageNEQ') !=
        other._$data.containsKey('iconimageNEQ')) {
      return false;
    }
    if (l$iconimageNEQ != lOther$iconimageNEQ) {
      return false;
    }
    final l$iconimageIn = iconimageIn;
    final lOther$iconimageIn = other.iconimageIn;
    if (_$data.containsKey('iconimageIn') !=
        other._$data.containsKey('iconimageIn')) {
      return false;
    }
    if (l$iconimageIn != null && lOther$iconimageIn != null) {
      if (l$iconimageIn.length != lOther$iconimageIn.length) {
        return false;
      }
      for (int i = 0; i < l$iconimageIn.length; i++) {
        final l$iconimageIn$entry = l$iconimageIn[i];
        final lOther$iconimageIn$entry = lOther$iconimageIn[i];
        if (l$iconimageIn$entry != lOther$iconimageIn$entry) {
          return false;
        }
      }
    } else if (l$iconimageIn != lOther$iconimageIn) {
      return false;
    }
    final l$iconimageNotIn = iconimageNotIn;
    final lOther$iconimageNotIn = other.iconimageNotIn;
    if (_$data.containsKey('iconimageNotIn') !=
        other._$data.containsKey('iconimageNotIn')) {
      return false;
    }
    if (l$iconimageNotIn != null && lOther$iconimageNotIn != null) {
      if (l$iconimageNotIn.length != lOther$iconimageNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$iconimageNotIn.length; i++) {
        final l$iconimageNotIn$entry = l$iconimageNotIn[i];
        final lOther$iconimageNotIn$entry = lOther$iconimageNotIn[i];
        if (l$iconimageNotIn$entry != lOther$iconimageNotIn$entry) {
          return false;
        }
      }
    } else if (l$iconimageNotIn != lOther$iconimageNotIn) {
      return false;
    }
    final l$iconimageGT = iconimageGT;
    final lOther$iconimageGT = other.iconimageGT;
    if (_$data.containsKey('iconimageGT') !=
        other._$data.containsKey('iconimageGT')) {
      return false;
    }
    if (l$iconimageGT != lOther$iconimageGT) {
      return false;
    }
    final l$iconimageGTE = iconimageGTE;
    final lOther$iconimageGTE = other.iconimageGTE;
    if (_$data.containsKey('iconimageGTE') !=
        other._$data.containsKey('iconimageGTE')) {
      return false;
    }
    if (l$iconimageGTE != lOther$iconimageGTE) {
      return false;
    }
    final l$iconimageLT = iconimageLT;
    final lOther$iconimageLT = other.iconimageLT;
    if (_$data.containsKey('iconimageLT') !=
        other._$data.containsKey('iconimageLT')) {
      return false;
    }
    if (l$iconimageLT != lOther$iconimageLT) {
      return false;
    }
    final l$iconimageLTE = iconimageLTE;
    final lOther$iconimageLTE = other.iconimageLTE;
    if (_$data.containsKey('iconimageLTE') !=
        other._$data.containsKey('iconimageLTE')) {
      return false;
    }
    if (l$iconimageLTE != lOther$iconimageLTE) {
      return false;
    }
    final l$iconimageContains = iconimageContains;
    final lOther$iconimageContains = other.iconimageContains;
    if (_$data.containsKey('iconimageContains') !=
        other._$data.containsKey('iconimageContains')) {
      return false;
    }
    if (l$iconimageContains != lOther$iconimageContains) {
      return false;
    }
    final l$iconimageHasPrefix = iconimageHasPrefix;
    final lOther$iconimageHasPrefix = other.iconimageHasPrefix;
    if (_$data.containsKey('iconimageHasPrefix') !=
        other._$data.containsKey('iconimageHasPrefix')) {
      return false;
    }
    if (l$iconimageHasPrefix != lOther$iconimageHasPrefix) {
      return false;
    }
    final l$iconimageHasSuffix = iconimageHasSuffix;
    final lOther$iconimageHasSuffix = other.iconimageHasSuffix;
    if (_$data.containsKey('iconimageHasSuffix') !=
        other._$data.containsKey('iconimageHasSuffix')) {
      return false;
    }
    if (l$iconimageHasSuffix != lOther$iconimageHasSuffix) {
      return false;
    }
    final l$iconimageEqualFold = iconimageEqualFold;
    final lOther$iconimageEqualFold = other.iconimageEqualFold;
    if (_$data.containsKey('iconimageEqualFold') !=
        other._$data.containsKey('iconimageEqualFold')) {
      return false;
    }
    if (l$iconimageEqualFold != lOther$iconimageEqualFold) {
      return false;
    }
    final l$iconimageContainsFold = iconimageContainsFold;
    final lOther$iconimageContainsFold = other.iconimageContainsFold;
    if (_$data.containsKey('iconimageContainsFold') !=
        other._$data.containsKey('iconimageContainsFold')) {
      return false;
    }
    if (l$iconimageContainsFold != lOther$iconimageContainsFold) {
      return false;
    }
    final l$coverimage = coverimage;
    final lOther$coverimage = other.coverimage;
    if (_$data.containsKey('coverimage') !=
        other._$data.containsKey('coverimage')) {
      return false;
    }
    if (l$coverimage != lOther$coverimage) {
      return false;
    }
    final l$coverimageNEQ = coverimageNEQ;
    final lOther$coverimageNEQ = other.coverimageNEQ;
    if (_$data.containsKey('coverimageNEQ') !=
        other._$data.containsKey('coverimageNEQ')) {
      return false;
    }
    if (l$coverimageNEQ != lOther$coverimageNEQ) {
      return false;
    }
    final l$coverimageIn = coverimageIn;
    final lOther$coverimageIn = other.coverimageIn;
    if (_$data.containsKey('coverimageIn') !=
        other._$data.containsKey('coverimageIn')) {
      return false;
    }
    if (l$coverimageIn != null && lOther$coverimageIn != null) {
      if (l$coverimageIn.length != lOther$coverimageIn.length) {
        return false;
      }
      for (int i = 0; i < l$coverimageIn.length; i++) {
        final l$coverimageIn$entry = l$coverimageIn[i];
        final lOther$coverimageIn$entry = lOther$coverimageIn[i];
        if (l$coverimageIn$entry != lOther$coverimageIn$entry) {
          return false;
        }
      }
    } else if (l$coverimageIn != lOther$coverimageIn) {
      return false;
    }
    final l$coverimageNotIn = coverimageNotIn;
    final lOther$coverimageNotIn = other.coverimageNotIn;
    if (_$data.containsKey('coverimageNotIn') !=
        other._$data.containsKey('coverimageNotIn')) {
      return false;
    }
    if (l$coverimageNotIn != null && lOther$coverimageNotIn != null) {
      if (l$coverimageNotIn.length != lOther$coverimageNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$coverimageNotIn.length; i++) {
        final l$coverimageNotIn$entry = l$coverimageNotIn[i];
        final lOther$coverimageNotIn$entry = lOther$coverimageNotIn[i];
        if (l$coverimageNotIn$entry != lOther$coverimageNotIn$entry) {
          return false;
        }
      }
    } else if (l$coverimageNotIn != lOther$coverimageNotIn) {
      return false;
    }
    final l$coverimageGT = coverimageGT;
    final lOther$coverimageGT = other.coverimageGT;
    if (_$data.containsKey('coverimageGT') !=
        other._$data.containsKey('coverimageGT')) {
      return false;
    }
    if (l$coverimageGT != lOther$coverimageGT) {
      return false;
    }
    final l$coverimageGTE = coverimageGTE;
    final lOther$coverimageGTE = other.coverimageGTE;
    if (_$data.containsKey('coverimageGTE') !=
        other._$data.containsKey('coverimageGTE')) {
      return false;
    }
    if (l$coverimageGTE != lOther$coverimageGTE) {
      return false;
    }
    final l$coverimageLT = coverimageLT;
    final lOther$coverimageLT = other.coverimageLT;
    if (_$data.containsKey('coverimageLT') !=
        other._$data.containsKey('coverimageLT')) {
      return false;
    }
    if (l$coverimageLT != lOther$coverimageLT) {
      return false;
    }
    final l$coverimageLTE = coverimageLTE;
    final lOther$coverimageLTE = other.coverimageLTE;
    if (_$data.containsKey('coverimageLTE') !=
        other._$data.containsKey('coverimageLTE')) {
      return false;
    }
    if (l$coverimageLTE != lOther$coverimageLTE) {
      return false;
    }
    final l$coverimageContains = coverimageContains;
    final lOther$coverimageContains = other.coverimageContains;
    if (_$data.containsKey('coverimageContains') !=
        other._$data.containsKey('coverimageContains')) {
      return false;
    }
    if (l$coverimageContains != lOther$coverimageContains) {
      return false;
    }
    final l$coverimageHasPrefix = coverimageHasPrefix;
    final lOther$coverimageHasPrefix = other.coverimageHasPrefix;
    if (_$data.containsKey('coverimageHasPrefix') !=
        other._$data.containsKey('coverimageHasPrefix')) {
      return false;
    }
    if (l$coverimageHasPrefix != lOther$coverimageHasPrefix) {
      return false;
    }
    final l$coverimageHasSuffix = coverimageHasSuffix;
    final lOther$coverimageHasSuffix = other.coverimageHasSuffix;
    if (_$data.containsKey('coverimageHasSuffix') !=
        other._$data.containsKey('coverimageHasSuffix')) {
      return false;
    }
    if (l$coverimageHasSuffix != lOther$coverimageHasSuffix) {
      return false;
    }
    final l$coverimageEqualFold = coverimageEqualFold;
    final lOther$coverimageEqualFold = other.coverimageEqualFold;
    if (_$data.containsKey('coverimageEqualFold') !=
        other._$data.containsKey('coverimageEqualFold')) {
      return false;
    }
    if (l$coverimageEqualFold != lOther$coverimageEqualFold) {
      return false;
    }
    final l$coverimageContainsFold = coverimageContainsFold;
    final lOther$coverimageContainsFold = other.coverimageContainsFold;
    if (_$data.containsKey('coverimageContainsFold') !=
        other._$data.containsKey('coverimageContainsFold')) {
      return false;
    }
    if (l$coverimageContainsFold != lOther$coverimageContainsFold) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$titleNEQ = titleNEQ;
    final lOther$titleNEQ = other.titleNEQ;
    if (_$data.containsKey('titleNEQ') !=
        other._$data.containsKey('titleNEQ')) {
      return false;
    }
    if (l$titleNEQ != lOther$titleNEQ) {
      return false;
    }
    final l$titleIn = titleIn;
    final lOther$titleIn = other.titleIn;
    if (_$data.containsKey('titleIn') != other._$data.containsKey('titleIn')) {
      return false;
    }
    if (l$titleIn != null && lOther$titleIn != null) {
      if (l$titleIn.length != lOther$titleIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleIn.length; i++) {
        final l$titleIn$entry = l$titleIn[i];
        final lOther$titleIn$entry = lOther$titleIn[i];
        if (l$titleIn$entry != lOther$titleIn$entry) {
          return false;
        }
      }
    } else if (l$titleIn != lOther$titleIn) {
      return false;
    }
    final l$titleNotIn = titleNotIn;
    final lOther$titleNotIn = other.titleNotIn;
    if (_$data.containsKey('titleNotIn') !=
        other._$data.containsKey('titleNotIn')) {
      return false;
    }
    if (l$titleNotIn != null && lOther$titleNotIn != null) {
      if (l$titleNotIn.length != lOther$titleNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$titleNotIn.length; i++) {
        final l$titleNotIn$entry = l$titleNotIn[i];
        final lOther$titleNotIn$entry = lOther$titleNotIn[i];
        if (l$titleNotIn$entry != lOther$titleNotIn$entry) {
          return false;
        }
      }
    } else if (l$titleNotIn != lOther$titleNotIn) {
      return false;
    }
    final l$titleGT = titleGT;
    final lOther$titleGT = other.titleGT;
    if (_$data.containsKey('titleGT') != other._$data.containsKey('titleGT')) {
      return false;
    }
    if (l$titleGT != lOther$titleGT) {
      return false;
    }
    final l$titleGTE = titleGTE;
    final lOther$titleGTE = other.titleGTE;
    if (_$data.containsKey('titleGTE') !=
        other._$data.containsKey('titleGTE')) {
      return false;
    }
    if (l$titleGTE != lOther$titleGTE) {
      return false;
    }
    final l$titleLT = titleLT;
    final lOther$titleLT = other.titleLT;
    if (_$data.containsKey('titleLT') != other._$data.containsKey('titleLT')) {
      return false;
    }
    if (l$titleLT != lOther$titleLT) {
      return false;
    }
    final l$titleLTE = titleLTE;
    final lOther$titleLTE = other.titleLTE;
    if (_$data.containsKey('titleLTE') !=
        other._$data.containsKey('titleLTE')) {
      return false;
    }
    if (l$titleLTE != lOther$titleLTE) {
      return false;
    }
    final l$titleContains = titleContains;
    final lOther$titleContains = other.titleContains;
    if (_$data.containsKey('titleContains') !=
        other._$data.containsKey('titleContains')) {
      return false;
    }
    if (l$titleContains != lOther$titleContains) {
      return false;
    }
    final l$titleHasPrefix = titleHasPrefix;
    final lOther$titleHasPrefix = other.titleHasPrefix;
    if (_$data.containsKey('titleHasPrefix') !=
        other._$data.containsKey('titleHasPrefix')) {
      return false;
    }
    if (l$titleHasPrefix != lOther$titleHasPrefix) {
      return false;
    }
    final l$titleHasSuffix = titleHasSuffix;
    final lOther$titleHasSuffix = other.titleHasSuffix;
    if (_$data.containsKey('titleHasSuffix') !=
        other._$data.containsKey('titleHasSuffix')) {
      return false;
    }
    if (l$titleHasSuffix != lOther$titleHasSuffix) {
      return false;
    }
    final l$titleEqualFold = titleEqualFold;
    final lOther$titleEqualFold = other.titleEqualFold;
    if (_$data.containsKey('titleEqualFold') !=
        other._$data.containsKey('titleEqualFold')) {
      return false;
    }
    if (l$titleEqualFold != lOther$titleEqualFold) {
      return false;
    }
    final l$titleContainsFold = titleContainsFold;
    final lOther$titleContainsFold = other.titleContainsFold;
    if (_$data.containsKey('titleContainsFold') !=
        other._$data.containsKey('titleContainsFold')) {
      return false;
    }
    if (l$titleContainsFold != lOther$titleContainsFold) {
      return false;
    }
    final l$subtitle = subtitle;
    final lOther$subtitle = other.subtitle;
    if (_$data.containsKey('subtitle') !=
        other._$data.containsKey('subtitle')) {
      return false;
    }
    if (l$subtitle != lOther$subtitle) {
      return false;
    }
    final l$subtitleNEQ = subtitleNEQ;
    final lOther$subtitleNEQ = other.subtitleNEQ;
    if (_$data.containsKey('subtitleNEQ') !=
        other._$data.containsKey('subtitleNEQ')) {
      return false;
    }
    if (l$subtitleNEQ != lOther$subtitleNEQ) {
      return false;
    }
    final l$subtitleIn = subtitleIn;
    final lOther$subtitleIn = other.subtitleIn;
    if (_$data.containsKey('subtitleIn') !=
        other._$data.containsKey('subtitleIn')) {
      return false;
    }
    if (l$subtitleIn != null && lOther$subtitleIn != null) {
      if (l$subtitleIn.length != lOther$subtitleIn.length) {
        return false;
      }
      for (int i = 0; i < l$subtitleIn.length; i++) {
        final l$subtitleIn$entry = l$subtitleIn[i];
        final lOther$subtitleIn$entry = lOther$subtitleIn[i];
        if (l$subtitleIn$entry != lOther$subtitleIn$entry) {
          return false;
        }
      }
    } else if (l$subtitleIn != lOther$subtitleIn) {
      return false;
    }
    final l$subtitleNotIn = subtitleNotIn;
    final lOther$subtitleNotIn = other.subtitleNotIn;
    if (_$data.containsKey('subtitleNotIn') !=
        other._$data.containsKey('subtitleNotIn')) {
      return false;
    }
    if (l$subtitleNotIn != null && lOther$subtitleNotIn != null) {
      if (l$subtitleNotIn.length != lOther$subtitleNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$subtitleNotIn.length; i++) {
        final l$subtitleNotIn$entry = l$subtitleNotIn[i];
        final lOther$subtitleNotIn$entry = lOther$subtitleNotIn[i];
        if (l$subtitleNotIn$entry != lOther$subtitleNotIn$entry) {
          return false;
        }
      }
    } else if (l$subtitleNotIn != lOther$subtitleNotIn) {
      return false;
    }
    final l$subtitleGT = subtitleGT;
    final lOther$subtitleGT = other.subtitleGT;
    if (_$data.containsKey('subtitleGT') !=
        other._$data.containsKey('subtitleGT')) {
      return false;
    }
    if (l$subtitleGT != lOther$subtitleGT) {
      return false;
    }
    final l$subtitleGTE = subtitleGTE;
    final lOther$subtitleGTE = other.subtitleGTE;
    if (_$data.containsKey('subtitleGTE') !=
        other._$data.containsKey('subtitleGTE')) {
      return false;
    }
    if (l$subtitleGTE != lOther$subtitleGTE) {
      return false;
    }
    final l$subtitleLT = subtitleLT;
    final lOther$subtitleLT = other.subtitleLT;
    if (_$data.containsKey('subtitleLT') !=
        other._$data.containsKey('subtitleLT')) {
      return false;
    }
    if (l$subtitleLT != lOther$subtitleLT) {
      return false;
    }
    final l$subtitleLTE = subtitleLTE;
    final lOther$subtitleLTE = other.subtitleLTE;
    if (_$data.containsKey('subtitleLTE') !=
        other._$data.containsKey('subtitleLTE')) {
      return false;
    }
    if (l$subtitleLTE != lOther$subtitleLTE) {
      return false;
    }
    final l$subtitleContains = subtitleContains;
    final lOther$subtitleContains = other.subtitleContains;
    if (_$data.containsKey('subtitleContains') !=
        other._$data.containsKey('subtitleContains')) {
      return false;
    }
    if (l$subtitleContains != lOther$subtitleContains) {
      return false;
    }
    final l$subtitleHasPrefix = subtitleHasPrefix;
    final lOther$subtitleHasPrefix = other.subtitleHasPrefix;
    if (_$data.containsKey('subtitleHasPrefix') !=
        other._$data.containsKey('subtitleHasPrefix')) {
      return false;
    }
    if (l$subtitleHasPrefix != lOther$subtitleHasPrefix) {
      return false;
    }
    final l$subtitleHasSuffix = subtitleHasSuffix;
    final lOther$subtitleHasSuffix = other.subtitleHasSuffix;
    if (_$data.containsKey('subtitleHasSuffix') !=
        other._$data.containsKey('subtitleHasSuffix')) {
      return false;
    }
    if (l$subtitleHasSuffix != lOther$subtitleHasSuffix) {
      return false;
    }
    final l$subtitleEqualFold = subtitleEqualFold;
    final lOther$subtitleEqualFold = other.subtitleEqualFold;
    if (_$data.containsKey('subtitleEqualFold') !=
        other._$data.containsKey('subtitleEqualFold')) {
      return false;
    }
    if (l$subtitleEqualFold != lOther$subtitleEqualFold) {
      return false;
    }
    final l$subtitleContainsFold = subtitleContainsFold;
    final lOther$subtitleContainsFold = other.subtitleContainsFold;
    if (_$data.containsKey('subtitleContainsFold') !=
        other._$data.containsKey('subtitleContainsFold')) {
      return false;
    }
    if (l$subtitleContainsFold != lOther$subtitleContainsFold) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$descriptionNEQ = descriptionNEQ;
    final lOther$descriptionNEQ = other.descriptionNEQ;
    if (_$data.containsKey('descriptionNEQ') !=
        other._$data.containsKey('descriptionNEQ')) {
      return false;
    }
    if (l$descriptionNEQ != lOther$descriptionNEQ) {
      return false;
    }
    final l$descriptionIn = descriptionIn;
    final lOther$descriptionIn = other.descriptionIn;
    if (_$data.containsKey('descriptionIn') !=
        other._$data.containsKey('descriptionIn')) {
      return false;
    }
    if (l$descriptionIn != null && lOther$descriptionIn != null) {
      if (l$descriptionIn.length != lOther$descriptionIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionIn.length; i++) {
        final l$descriptionIn$entry = l$descriptionIn[i];
        final lOther$descriptionIn$entry = lOther$descriptionIn[i];
        if (l$descriptionIn$entry != lOther$descriptionIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionIn != lOther$descriptionIn) {
      return false;
    }
    final l$descriptionNotIn = descriptionNotIn;
    final lOther$descriptionNotIn = other.descriptionNotIn;
    if (_$data.containsKey('descriptionNotIn') !=
        other._$data.containsKey('descriptionNotIn')) {
      return false;
    }
    if (l$descriptionNotIn != null && lOther$descriptionNotIn != null) {
      if (l$descriptionNotIn.length != lOther$descriptionNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$descriptionNotIn.length; i++) {
        final l$descriptionNotIn$entry = l$descriptionNotIn[i];
        final lOther$descriptionNotIn$entry = lOther$descriptionNotIn[i];
        if (l$descriptionNotIn$entry != lOther$descriptionNotIn$entry) {
          return false;
        }
      }
    } else if (l$descriptionNotIn != lOther$descriptionNotIn) {
      return false;
    }
    final l$descriptionGT = descriptionGT;
    final lOther$descriptionGT = other.descriptionGT;
    if (_$data.containsKey('descriptionGT') !=
        other._$data.containsKey('descriptionGT')) {
      return false;
    }
    if (l$descriptionGT != lOther$descriptionGT) {
      return false;
    }
    final l$descriptionGTE = descriptionGTE;
    final lOther$descriptionGTE = other.descriptionGTE;
    if (_$data.containsKey('descriptionGTE') !=
        other._$data.containsKey('descriptionGTE')) {
      return false;
    }
    if (l$descriptionGTE != lOther$descriptionGTE) {
      return false;
    }
    final l$descriptionLT = descriptionLT;
    final lOther$descriptionLT = other.descriptionLT;
    if (_$data.containsKey('descriptionLT') !=
        other._$data.containsKey('descriptionLT')) {
      return false;
    }
    if (l$descriptionLT != lOther$descriptionLT) {
      return false;
    }
    final l$descriptionLTE = descriptionLTE;
    final lOther$descriptionLTE = other.descriptionLTE;
    if (_$data.containsKey('descriptionLTE') !=
        other._$data.containsKey('descriptionLTE')) {
      return false;
    }
    if (l$descriptionLTE != lOther$descriptionLTE) {
      return false;
    }
    final l$descriptionContains = descriptionContains;
    final lOther$descriptionContains = other.descriptionContains;
    if (_$data.containsKey('descriptionContains') !=
        other._$data.containsKey('descriptionContains')) {
      return false;
    }
    if (l$descriptionContains != lOther$descriptionContains) {
      return false;
    }
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final lOther$descriptionHasPrefix = other.descriptionHasPrefix;
    if (_$data.containsKey('descriptionHasPrefix') !=
        other._$data.containsKey('descriptionHasPrefix')) {
      return false;
    }
    if (l$descriptionHasPrefix != lOther$descriptionHasPrefix) {
      return false;
    }
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final lOther$descriptionHasSuffix = other.descriptionHasSuffix;
    if (_$data.containsKey('descriptionHasSuffix') !=
        other._$data.containsKey('descriptionHasSuffix')) {
      return false;
    }
    if (l$descriptionHasSuffix != lOther$descriptionHasSuffix) {
      return false;
    }
    final l$descriptionEqualFold = descriptionEqualFold;
    final lOther$descriptionEqualFold = other.descriptionEqualFold;
    if (_$data.containsKey('descriptionEqualFold') !=
        other._$data.containsKey('descriptionEqualFold')) {
      return false;
    }
    if (l$descriptionEqualFold != lOther$descriptionEqualFold) {
      return false;
    }
    final l$descriptionContainsFold = descriptionContainsFold;
    final lOther$descriptionContainsFold = other.descriptionContainsFold;
    if (_$data.containsKey('descriptionContainsFold') !=
        other._$data.containsKey('descriptionContainsFold')) {
      return false;
    }
    if (l$descriptionContainsFold != lOther$descriptionContainsFold) {
      return false;
    }
    final l$mastering = mastering;
    final lOther$mastering = other.mastering;
    if (_$data.containsKey('mastering') !=
        other._$data.containsKey('mastering')) {
      return false;
    }
    if (l$mastering != lOther$mastering) {
      return false;
    }
    final l$masteringNEQ = masteringNEQ;
    final lOther$masteringNEQ = other.masteringNEQ;
    if (_$data.containsKey('masteringNEQ') !=
        other._$data.containsKey('masteringNEQ')) {
      return false;
    }
    if (l$masteringNEQ != lOther$masteringNEQ) {
      return false;
    }
    final l$masteringIn = masteringIn;
    final lOther$masteringIn = other.masteringIn;
    if (_$data.containsKey('masteringIn') !=
        other._$data.containsKey('masteringIn')) {
      return false;
    }
    if (l$masteringIn != null && lOther$masteringIn != null) {
      if (l$masteringIn.length != lOther$masteringIn.length) {
        return false;
      }
      for (int i = 0; i < l$masteringIn.length; i++) {
        final l$masteringIn$entry = l$masteringIn[i];
        final lOther$masteringIn$entry = lOther$masteringIn[i];
        if (l$masteringIn$entry != lOther$masteringIn$entry) {
          return false;
        }
      }
    } else if (l$masteringIn != lOther$masteringIn) {
      return false;
    }
    final l$masteringNotIn = masteringNotIn;
    final lOther$masteringNotIn = other.masteringNotIn;
    if (_$data.containsKey('masteringNotIn') !=
        other._$data.containsKey('masteringNotIn')) {
      return false;
    }
    if (l$masteringNotIn != null && lOther$masteringNotIn != null) {
      if (l$masteringNotIn.length != lOther$masteringNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$masteringNotIn.length; i++) {
        final l$masteringNotIn$entry = l$masteringNotIn[i];
        final lOther$masteringNotIn$entry = lOther$masteringNotIn[i];
        if (l$masteringNotIn$entry != lOther$masteringNotIn$entry) {
          return false;
        }
      }
    } else if (l$masteringNotIn != lOther$masteringNotIn) {
      return false;
    }
    final l$masteringGT = masteringGT;
    final lOther$masteringGT = other.masteringGT;
    if (_$data.containsKey('masteringGT') !=
        other._$data.containsKey('masteringGT')) {
      return false;
    }
    if (l$masteringGT != lOther$masteringGT) {
      return false;
    }
    final l$masteringGTE = masteringGTE;
    final lOther$masteringGTE = other.masteringGTE;
    if (_$data.containsKey('masteringGTE') !=
        other._$data.containsKey('masteringGTE')) {
      return false;
    }
    if (l$masteringGTE != lOther$masteringGTE) {
      return false;
    }
    final l$masteringLT = masteringLT;
    final lOther$masteringLT = other.masteringLT;
    if (_$data.containsKey('masteringLT') !=
        other._$data.containsKey('masteringLT')) {
      return false;
    }
    if (l$masteringLT != lOther$masteringLT) {
      return false;
    }
    final l$masteringLTE = masteringLTE;
    final lOther$masteringLTE = other.masteringLTE;
    if (_$data.containsKey('masteringLTE') !=
        other._$data.containsKey('masteringLTE')) {
      return false;
    }
    if (l$masteringLTE != lOther$masteringLTE) {
      return false;
    }
    final l$masteringContains = masteringContains;
    final lOther$masteringContains = other.masteringContains;
    if (_$data.containsKey('masteringContains') !=
        other._$data.containsKey('masteringContains')) {
      return false;
    }
    if (l$masteringContains != lOther$masteringContains) {
      return false;
    }
    final l$masteringHasPrefix = masteringHasPrefix;
    final lOther$masteringHasPrefix = other.masteringHasPrefix;
    if (_$data.containsKey('masteringHasPrefix') !=
        other._$data.containsKey('masteringHasPrefix')) {
      return false;
    }
    if (l$masteringHasPrefix != lOther$masteringHasPrefix) {
      return false;
    }
    final l$masteringHasSuffix = masteringHasSuffix;
    final lOther$masteringHasSuffix = other.masteringHasSuffix;
    if (_$data.containsKey('masteringHasSuffix') !=
        other._$data.containsKey('masteringHasSuffix')) {
      return false;
    }
    if (l$masteringHasSuffix != lOther$masteringHasSuffix) {
      return false;
    }
    final l$masteringEqualFold = masteringEqualFold;
    final lOther$masteringEqualFold = other.masteringEqualFold;
    if (_$data.containsKey('masteringEqualFold') !=
        other._$data.containsKey('masteringEqualFold')) {
      return false;
    }
    if (l$masteringEqualFold != lOther$masteringEqualFold) {
      return false;
    }
    final l$masteringContainsFold = masteringContainsFold;
    final lOther$masteringContainsFold = other.masteringContainsFold;
    if (_$data.containsKey('masteringContainsFold') !=
        other._$data.containsKey('masteringContainsFold')) {
      return false;
    }
    if (l$masteringContainsFold != lOther$masteringContainsFold) {
      return false;
    }
    final l$days = days;
    final lOther$days = other.days;
    if (_$data.containsKey('days') != other._$data.containsKey('days')) {
      return false;
    }
    if (l$days != lOther$days) {
      return false;
    }
    final l$daysNEQ = daysNEQ;
    final lOther$daysNEQ = other.daysNEQ;
    if (_$data.containsKey('daysNEQ') != other._$data.containsKey('daysNEQ')) {
      return false;
    }
    if (l$daysNEQ != lOther$daysNEQ) {
      return false;
    }
    final l$daysIn = daysIn;
    final lOther$daysIn = other.daysIn;
    if (_$data.containsKey('daysIn') != other._$data.containsKey('daysIn')) {
      return false;
    }
    if (l$daysIn != null && lOther$daysIn != null) {
      if (l$daysIn.length != lOther$daysIn.length) {
        return false;
      }
      for (int i = 0; i < l$daysIn.length; i++) {
        final l$daysIn$entry = l$daysIn[i];
        final lOther$daysIn$entry = lOther$daysIn[i];
        if (l$daysIn$entry != lOther$daysIn$entry) {
          return false;
        }
      }
    } else if (l$daysIn != lOther$daysIn) {
      return false;
    }
    final l$daysNotIn = daysNotIn;
    final lOther$daysNotIn = other.daysNotIn;
    if (_$data.containsKey('daysNotIn') !=
        other._$data.containsKey('daysNotIn')) {
      return false;
    }
    if (l$daysNotIn != null && lOther$daysNotIn != null) {
      if (l$daysNotIn.length != lOther$daysNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$daysNotIn.length; i++) {
        final l$daysNotIn$entry = l$daysNotIn[i];
        final lOther$daysNotIn$entry = lOther$daysNotIn[i];
        if (l$daysNotIn$entry != lOther$daysNotIn$entry) {
          return false;
        }
      }
    } else if (l$daysNotIn != lOther$daysNotIn) {
      return false;
    }
    final l$daysGT = daysGT;
    final lOther$daysGT = other.daysGT;
    if (_$data.containsKey('daysGT') != other._$data.containsKey('daysGT')) {
      return false;
    }
    if (l$daysGT != lOther$daysGT) {
      return false;
    }
    final l$daysGTE = daysGTE;
    final lOther$daysGTE = other.daysGTE;
    if (_$data.containsKey('daysGTE') != other._$data.containsKey('daysGTE')) {
      return false;
    }
    if (l$daysGTE != lOther$daysGTE) {
      return false;
    }
    final l$daysLT = daysLT;
    final lOther$daysLT = other.daysLT;
    if (_$data.containsKey('daysLT') != other._$data.containsKey('daysLT')) {
      return false;
    }
    if (l$daysLT != lOther$daysLT) {
      return false;
    }
    final l$daysLTE = daysLTE;
    final lOther$daysLTE = other.daysLTE;
    if (_$data.containsKey('daysLTE') != other._$data.containsKey('daysLTE')) {
      return false;
    }
    if (l$daysLTE != lOther$daysLTE) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (_$data.containsKey('color') != other._$data.containsKey('color')) {
      return false;
    }
    if (l$color != lOther$color) {
      return false;
    }
    final l$colorNEQ = colorNEQ;
    final lOther$colorNEQ = other.colorNEQ;
    if (_$data.containsKey('colorNEQ') !=
        other._$data.containsKey('colorNEQ')) {
      return false;
    }
    if (l$colorNEQ != lOther$colorNEQ) {
      return false;
    }
    final l$colorIn = colorIn;
    final lOther$colorIn = other.colorIn;
    if (_$data.containsKey('colorIn') != other._$data.containsKey('colorIn')) {
      return false;
    }
    if (l$colorIn != null && lOther$colorIn != null) {
      if (l$colorIn.length != lOther$colorIn.length) {
        return false;
      }
      for (int i = 0; i < l$colorIn.length; i++) {
        final l$colorIn$entry = l$colorIn[i];
        final lOther$colorIn$entry = lOther$colorIn[i];
        if (l$colorIn$entry != lOther$colorIn$entry) {
          return false;
        }
      }
    } else if (l$colorIn != lOther$colorIn) {
      return false;
    }
    final l$colorNotIn = colorNotIn;
    final lOther$colorNotIn = other.colorNotIn;
    if (_$data.containsKey('colorNotIn') !=
        other._$data.containsKey('colorNotIn')) {
      return false;
    }
    if (l$colorNotIn != null && lOther$colorNotIn != null) {
      if (l$colorNotIn.length != lOther$colorNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$colorNotIn.length; i++) {
        final l$colorNotIn$entry = l$colorNotIn[i];
        final lOther$colorNotIn$entry = lOther$colorNotIn[i];
        if (l$colorNotIn$entry != lOther$colorNotIn$entry) {
          return false;
        }
      }
    } else if (l$colorNotIn != lOther$colorNotIn) {
      return false;
    }
    final l$colorGT = colorGT;
    final lOther$colorGT = other.colorGT;
    if (_$data.containsKey('colorGT') != other._$data.containsKey('colorGT')) {
      return false;
    }
    if (l$colorGT != lOther$colorGT) {
      return false;
    }
    final l$colorGTE = colorGTE;
    final lOther$colorGTE = other.colorGTE;
    if (_$data.containsKey('colorGTE') !=
        other._$data.containsKey('colorGTE')) {
      return false;
    }
    if (l$colorGTE != lOther$colorGTE) {
      return false;
    }
    final l$colorLT = colorLT;
    final lOther$colorLT = other.colorLT;
    if (_$data.containsKey('colorLT') != other._$data.containsKey('colorLT')) {
      return false;
    }
    if (l$colorLT != lOther$colorLT) {
      return false;
    }
    final l$colorLTE = colorLTE;
    final lOther$colorLTE = other.colorLTE;
    if (_$data.containsKey('colorLTE') !=
        other._$data.containsKey('colorLTE')) {
      return false;
    }
    if (l$colorLTE != lOther$colorLTE) {
      return false;
    }
    final l$colorContains = colorContains;
    final lOther$colorContains = other.colorContains;
    if (_$data.containsKey('colorContains') !=
        other._$data.containsKey('colorContains')) {
      return false;
    }
    if (l$colorContains != lOther$colorContains) {
      return false;
    }
    final l$colorHasPrefix = colorHasPrefix;
    final lOther$colorHasPrefix = other.colorHasPrefix;
    if (_$data.containsKey('colorHasPrefix') !=
        other._$data.containsKey('colorHasPrefix')) {
      return false;
    }
    if (l$colorHasPrefix != lOther$colorHasPrefix) {
      return false;
    }
    final l$colorHasSuffix = colorHasSuffix;
    final lOther$colorHasSuffix = other.colorHasSuffix;
    if (_$data.containsKey('colorHasSuffix') !=
        other._$data.containsKey('colorHasSuffix')) {
      return false;
    }
    if (l$colorHasSuffix != lOther$colorHasSuffix) {
      return false;
    }
    final l$colorEqualFold = colorEqualFold;
    final lOther$colorEqualFold = other.colorEqualFold;
    if (_$data.containsKey('colorEqualFold') !=
        other._$data.containsKey('colorEqualFold')) {
      return false;
    }
    if (l$colorEqualFold != lOther$colorEqualFold) {
      return false;
    }
    final l$colorContainsFold = colorContainsFold;
    final lOther$colorContainsFold = other.colorContainsFold;
    if (_$data.containsKey('colorContainsFold') !=
        other._$data.containsKey('colorContainsFold')) {
      return false;
    }
    if (l$colorContainsFold != lOther$colorContainsFold) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$orderNEQ = orderNEQ;
    final lOther$orderNEQ = other.orderNEQ;
    if (_$data.containsKey('orderNEQ') !=
        other._$data.containsKey('orderNEQ')) {
      return false;
    }
    if (l$orderNEQ != lOther$orderNEQ) {
      return false;
    }
    final l$orderIn = orderIn;
    final lOther$orderIn = other.orderIn;
    if (_$data.containsKey('orderIn') != other._$data.containsKey('orderIn')) {
      return false;
    }
    if (l$orderIn != null && lOther$orderIn != null) {
      if (l$orderIn.length != lOther$orderIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderIn.length; i++) {
        final l$orderIn$entry = l$orderIn[i];
        final lOther$orderIn$entry = lOther$orderIn[i];
        if (l$orderIn$entry != lOther$orderIn$entry) {
          return false;
        }
      }
    } else if (l$orderIn != lOther$orderIn) {
      return false;
    }
    final l$orderNotIn = orderNotIn;
    final lOther$orderNotIn = other.orderNotIn;
    if (_$data.containsKey('orderNotIn') !=
        other._$data.containsKey('orderNotIn')) {
      return false;
    }
    if (l$orderNotIn != null && lOther$orderNotIn != null) {
      if (l$orderNotIn.length != lOther$orderNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$orderNotIn.length; i++) {
        final l$orderNotIn$entry = l$orderNotIn[i];
        final lOther$orderNotIn$entry = lOther$orderNotIn[i];
        if (l$orderNotIn$entry != lOther$orderNotIn$entry) {
          return false;
        }
      }
    } else if (l$orderNotIn != lOther$orderNotIn) {
      return false;
    }
    final l$orderGT = orderGT;
    final lOther$orderGT = other.orderGT;
    if (_$data.containsKey('orderGT') != other._$data.containsKey('orderGT')) {
      return false;
    }
    if (l$orderGT != lOther$orderGT) {
      return false;
    }
    final l$orderGTE = orderGTE;
    final lOther$orderGTE = other.orderGTE;
    if (_$data.containsKey('orderGTE') !=
        other._$data.containsKey('orderGTE')) {
      return false;
    }
    if (l$orderGTE != lOther$orderGTE) {
      return false;
    }
    final l$orderLT = orderLT;
    final lOther$orderLT = other.orderLT;
    if (_$data.containsKey('orderLT') != other._$data.containsKey('orderLT')) {
      return false;
    }
    if (l$orderLT != lOther$orderLT) {
      return false;
    }
    final l$orderLTE = orderLTE;
    final lOther$orderLTE = other.orderLTE;
    if (_$data.containsKey('orderLTE') !=
        other._$data.containsKey('orderLTE')) {
      return false;
    }
    if (l$orderLTE != lOther$orderLTE) {
      return false;
    }
    final l$hasCourse = hasCourse;
    final lOther$hasCourse = other.hasCourse;
    if (_$data.containsKey('hasCourse') !=
        other._$data.containsKey('hasCourse')) {
      return false;
    }
    if (l$hasCourse != lOther$hasCourse) {
      return false;
    }
    final l$hasCourseWith = hasCourseWith;
    final lOther$hasCourseWith = other.hasCourseWith;
    if (_$data.containsKey('hasCourseWith') !=
        other._$data.containsKey('hasCourseWith')) {
      return false;
    }
    if (l$hasCourseWith != null && lOther$hasCourseWith != null) {
      if (l$hasCourseWith.length != lOther$hasCourseWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasCourseWith.length; i++) {
        final l$hasCourseWith$entry = l$hasCourseWith[i];
        final lOther$hasCourseWith$entry = lOther$hasCourseWith[i];
        if (l$hasCourseWith$entry != lOther$hasCourseWith$entry) {
          return false;
        }
      }
    } else if (l$hasCourseWith != lOther$hasCourseWith) {
      return false;
    }
    final l$hasLessons = hasLessons;
    final lOther$hasLessons = other.hasLessons;
    if (_$data.containsKey('hasLessons') !=
        other._$data.containsKey('hasLessons')) {
      return false;
    }
    if (l$hasLessons != lOther$hasLessons) {
      return false;
    }
    final l$hasLessonsWith = hasLessonsWith;
    final lOther$hasLessonsWith = other.hasLessonsWith;
    if (_$data.containsKey('hasLessonsWith') !=
        other._$data.containsKey('hasLessonsWith')) {
      return false;
    }
    if (l$hasLessonsWith != null && lOther$hasLessonsWith != null) {
      if (l$hasLessonsWith.length != lOther$hasLessonsWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasLessonsWith.length; i++) {
        final l$hasLessonsWith$entry = l$hasLessonsWith[i];
        final lOther$hasLessonsWith$entry = lOther$hasLessonsWith[i];
        if (l$hasLessonsWith$entry != lOther$hasLessonsWith$entry) {
          return false;
        }
      }
    } else if (l$hasLessonsWith != lOther$hasLessonsWith) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$courseID = courseID;
    final l$courseIDNEQ = courseIDNEQ;
    final l$courseIDIn = courseIDIn;
    final l$courseIDNotIn = courseIDNotIn;
    final l$iconimage = iconimage;
    final l$iconimageNEQ = iconimageNEQ;
    final l$iconimageIn = iconimageIn;
    final l$iconimageNotIn = iconimageNotIn;
    final l$iconimageGT = iconimageGT;
    final l$iconimageGTE = iconimageGTE;
    final l$iconimageLT = iconimageLT;
    final l$iconimageLTE = iconimageLTE;
    final l$iconimageContains = iconimageContains;
    final l$iconimageHasPrefix = iconimageHasPrefix;
    final l$iconimageHasSuffix = iconimageHasSuffix;
    final l$iconimageEqualFold = iconimageEqualFold;
    final l$iconimageContainsFold = iconimageContainsFold;
    final l$coverimage = coverimage;
    final l$coverimageNEQ = coverimageNEQ;
    final l$coverimageIn = coverimageIn;
    final l$coverimageNotIn = coverimageNotIn;
    final l$coverimageGT = coverimageGT;
    final l$coverimageGTE = coverimageGTE;
    final l$coverimageLT = coverimageLT;
    final l$coverimageLTE = coverimageLTE;
    final l$coverimageContains = coverimageContains;
    final l$coverimageHasPrefix = coverimageHasPrefix;
    final l$coverimageHasSuffix = coverimageHasSuffix;
    final l$coverimageEqualFold = coverimageEqualFold;
    final l$coverimageContainsFold = coverimageContainsFold;
    final l$title = title;
    final l$titleNEQ = titleNEQ;
    final l$titleIn = titleIn;
    final l$titleNotIn = titleNotIn;
    final l$titleGT = titleGT;
    final l$titleGTE = titleGTE;
    final l$titleLT = titleLT;
    final l$titleLTE = titleLTE;
    final l$titleContains = titleContains;
    final l$titleHasPrefix = titleHasPrefix;
    final l$titleHasSuffix = titleHasSuffix;
    final l$titleEqualFold = titleEqualFold;
    final l$titleContainsFold = titleContainsFold;
    final l$subtitle = subtitle;
    final l$subtitleNEQ = subtitleNEQ;
    final l$subtitleIn = subtitleIn;
    final l$subtitleNotIn = subtitleNotIn;
    final l$subtitleGT = subtitleGT;
    final l$subtitleGTE = subtitleGTE;
    final l$subtitleLT = subtitleLT;
    final l$subtitleLTE = subtitleLTE;
    final l$subtitleContains = subtitleContains;
    final l$subtitleHasPrefix = subtitleHasPrefix;
    final l$subtitleHasSuffix = subtitleHasSuffix;
    final l$subtitleEqualFold = subtitleEqualFold;
    final l$subtitleContainsFold = subtitleContainsFold;
    final l$description = description;
    final l$descriptionNEQ = descriptionNEQ;
    final l$descriptionIn = descriptionIn;
    final l$descriptionNotIn = descriptionNotIn;
    final l$descriptionGT = descriptionGT;
    final l$descriptionGTE = descriptionGTE;
    final l$descriptionLT = descriptionLT;
    final l$descriptionLTE = descriptionLTE;
    final l$descriptionContains = descriptionContains;
    final l$descriptionHasPrefix = descriptionHasPrefix;
    final l$descriptionHasSuffix = descriptionHasSuffix;
    final l$descriptionEqualFold = descriptionEqualFold;
    final l$descriptionContainsFold = descriptionContainsFold;
    final l$mastering = mastering;
    final l$masteringNEQ = masteringNEQ;
    final l$masteringIn = masteringIn;
    final l$masteringNotIn = masteringNotIn;
    final l$masteringGT = masteringGT;
    final l$masteringGTE = masteringGTE;
    final l$masteringLT = masteringLT;
    final l$masteringLTE = masteringLTE;
    final l$masteringContains = masteringContains;
    final l$masteringHasPrefix = masteringHasPrefix;
    final l$masteringHasSuffix = masteringHasSuffix;
    final l$masteringEqualFold = masteringEqualFold;
    final l$masteringContainsFold = masteringContainsFold;
    final l$days = days;
    final l$daysNEQ = daysNEQ;
    final l$daysIn = daysIn;
    final l$daysNotIn = daysNotIn;
    final l$daysGT = daysGT;
    final l$daysGTE = daysGTE;
    final l$daysLT = daysLT;
    final l$daysLTE = daysLTE;
    final l$color = color;
    final l$colorNEQ = colorNEQ;
    final l$colorIn = colorIn;
    final l$colorNotIn = colorNotIn;
    final l$colorGT = colorGT;
    final l$colorGTE = colorGTE;
    final l$colorLT = colorLT;
    final l$colorLTE = colorLTE;
    final l$colorContains = colorContains;
    final l$colorHasPrefix = colorHasPrefix;
    final l$colorHasSuffix = colorHasSuffix;
    final l$colorEqualFold = colorEqualFold;
    final l$colorContainsFold = colorContainsFold;
    final l$order = order;
    final l$orderNEQ = orderNEQ;
    final l$orderIn = orderIn;
    final l$orderNotIn = orderNotIn;
    final l$orderGT = orderGT;
    final l$orderGTE = orderGTE;
    final l$orderLT = orderLT;
    final l$orderLTE = orderLTE;
    final l$hasCourse = hasCourse;
    final l$hasCourseWith = hasCourseWith;
    final l$hasLessons = hasLessons;
    final l$hasLessonsWith = hasLessonsWith;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('courseID') ? l$courseID : const {},
      _$data.containsKey('courseIDNEQ') ? l$courseIDNEQ : const {},
      _$data.containsKey('courseIDIn')
          ? l$courseIDIn == null
              ? null
              : Object.hashAll(l$courseIDIn.map((v) => v))
          : const {},
      _$data.containsKey('courseIDNotIn')
          ? l$courseIDNotIn == null
              ? null
              : Object.hashAll(l$courseIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimage') ? l$iconimage : const {},
      _$data.containsKey('iconimageNEQ') ? l$iconimageNEQ : const {},
      _$data.containsKey('iconimageIn')
          ? l$iconimageIn == null
              ? null
              : Object.hashAll(l$iconimageIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimageNotIn')
          ? l$iconimageNotIn == null
              ? null
              : Object.hashAll(l$iconimageNotIn.map((v) => v))
          : const {},
      _$data.containsKey('iconimageGT') ? l$iconimageGT : const {},
      _$data.containsKey('iconimageGTE') ? l$iconimageGTE : const {},
      _$data.containsKey('iconimageLT') ? l$iconimageLT : const {},
      _$data.containsKey('iconimageLTE') ? l$iconimageLTE : const {},
      _$data.containsKey('iconimageContains') ? l$iconimageContains : const {},
      _$data.containsKey('iconimageHasPrefix')
          ? l$iconimageHasPrefix
          : const {},
      _$data.containsKey('iconimageHasSuffix')
          ? l$iconimageHasSuffix
          : const {},
      _$data.containsKey('iconimageEqualFold')
          ? l$iconimageEqualFold
          : const {},
      _$data.containsKey('iconimageContainsFold')
          ? l$iconimageContainsFold
          : const {},
      _$data.containsKey('coverimage') ? l$coverimage : const {},
      _$data.containsKey('coverimageNEQ') ? l$coverimageNEQ : const {},
      _$data.containsKey('coverimageIn')
          ? l$coverimageIn == null
              ? null
              : Object.hashAll(l$coverimageIn.map((v) => v))
          : const {},
      _$data.containsKey('coverimageNotIn')
          ? l$coverimageNotIn == null
              ? null
              : Object.hashAll(l$coverimageNotIn.map((v) => v))
          : const {},
      _$data.containsKey('coverimageGT') ? l$coverimageGT : const {},
      _$data.containsKey('coverimageGTE') ? l$coverimageGTE : const {},
      _$data.containsKey('coverimageLT') ? l$coverimageLT : const {},
      _$data.containsKey('coverimageLTE') ? l$coverimageLTE : const {},
      _$data.containsKey('coverimageContains')
          ? l$coverimageContains
          : const {},
      _$data.containsKey('coverimageHasPrefix')
          ? l$coverimageHasPrefix
          : const {},
      _$data.containsKey('coverimageHasSuffix')
          ? l$coverimageHasSuffix
          : const {},
      _$data.containsKey('coverimageEqualFold')
          ? l$coverimageEqualFold
          : const {},
      _$data.containsKey('coverimageContainsFold')
          ? l$coverimageContainsFold
          : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('titleNEQ') ? l$titleNEQ : const {},
      _$data.containsKey('titleIn')
          ? l$titleIn == null
              ? null
              : Object.hashAll(l$titleIn.map((v) => v))
          : const {},
      _$data.containsKey('titleNotIn')
          ? l$titleNotIn == null
              ? null
              : Object.hashAll(l$titleNotIn.map((v) => v))
          : const {},
      _$data.containsKey('titleGT') ? l$titleGT : const {},
      _$data.containsKey('titleGTE') ? l$titleGTE : const {},
      _$data.containsKey('titleLT') ? l$titleLT : const {},
      _$data.containsKey('titleLTE') ? l$titleLTE : const {},
      _$data.containsKey('titleContains') ? l$titleContains : const {},
      _$data.containsKey('titleHasPrefix') ? l$titleHasPrefix : const {},
      _$data.containsKey('titleHasSuffix') ? l$titleHasSuffix : const {},
      _$data.containsKey('titleEqualFold') ? l$titleEqualFold : const {},
      _$data.containsKey('titleContainsFold') ? l$titleContainsFold : const {},
      _$data.containsKey('subtitle') ? l$subtitle : const {},
      _$data.containsKey('subtitleNEQ') ? l$subtitleNEQ : const {},
      _$data.containsKey('subtitleIn')
          ? l$subtitleIn == null
              ? null
              : Object.hashAll(l$subtitleIn.map((v) => v))
          : const {},
      _$data.containsKey('subtitleNotIn')
          ? l$subtitleNotIn == null
              ? null
              : Object.hashAll(l$subtitleNotIn.map((v) => v))
          : const {},
      _$data.containsKey('subtitleGT') ? l$subtitleGT : const {},
      _$data.containsKey('subtitleGTE') ? l$subtitleGTE : const {},
      _$data.containsKey('subtitleLT') ? l$subtitleLT : const {},
      _$data.containsKey('subtitleLTE') ? l$subtitleLTE : const {},
      _$data.containsKey('subtitleContains') ? l$subtitleContains : const {},
      _$data.containsKey('subtitleHasPrefix') ? l$subtitleHasPrefix : const {},
      _$data.containsKey('subtitleHasSuffix') ? l$subtitleHasSuffix : const {},
      _$data.containsKey('subtitleEqualFold') ? l$subtitleEqualFold : const {},
      _$data.containsKey('subtitleContainsFold')
          ? l$subtitleContainsFold
          : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('descriptionNEQ') ? l$descriptionNEQ : const {},
      _$data.containsKey('descriptionIn')
          ? l$descriptionIn == null
              ? null
              : Object.hashAll(l$descriptionIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionNotIn')
          ? l$descriptionNotIn == null
              ? null
              : Object.hashAll(l$descriptionNotIn.map((v) => v))
          : const {},
      _$data.containsKey('descriptionGT') ? l$descriptionGT : const {},
      _$data.containsKey('descriptionGTE') ? l$descriptionGTE : const {},
      _$data.containsKey('descriptionLT') ? l$descriptionLT : const {},
      _$data.containsKey('descriptionLTE') ? l$descriptionLTE : const {},
      _$data.containsKey('descriptionContains')
          ? l$descriptionContains
          : const {},
      _$data.containsKey('descriptionHasPrefix')
          ? l$descriptionHasPrefix
          : const {},
      _$data.containsKey('descriptionHasSuffix')
          ? l$descriptionHasSuffix
          : const {},
      _$data.containsKey('descriptionEqualFold')
          ? l$descriptionEqualFold
          : const {},
      _$data.containsKey('descriptionContainsFold')
          ? l$descriptionContainsFold
          : const {},
      _$data.containsKey('mastering') ? l$mastering : const {},
      _$data.containsKey('masteringNEQ') ? l$masteringNEQ : const {},
      _$data.containsKey('masteringIn')
          ? l$masteringIn == null
              ? null
              : Object.hashAll(l$masteringIn.map((v) => v))
          : const {},
      _$data.containsKey('masteringNotIn')
          ? l$masteringNotIn == null
              ? null
              : Object.hashAll(l$masteringNotIn.map((v) => v))
          : const {},
      _$data.containsKey('masteringGT') ? l$masteringGT : const {},
      _$data.containsKey('masteringGTE') ? l$masteringGTE : const {},
      _$data.containsKey('masteringLT') ? l$masteringLT : const {},
      _$data.containsKey('masteringLTE') ? l$masteringLTE : const {},
      _$data.containsKey('masteringContains') ? l$masteringContains : const {},
      _$data.containsKey('masteringHasPrefix')
          ? l$masteringHasPrefix
          : const {},
      _$data.containsKey('masteringHasSuffix')
          ? l$masteringHasSuffix
          : const {},
      _$data.containsKey('masteringEqualFold')
          ? l$masteringEqualFold
          : const {},
      _$data.containsKey('masteringContainsFold')
          ? l$masteringContainsFold
          : const {},
      _$data.containsKey('days') ? l$days : const {},
      _$data.containsKey('daysNEQ') ? l$daysNEQ : const {},
      _$data.containsKey('daysIn')
          ? l$daysIn == null
              ? null
              : Object.hashAll(l$daysIn.map((v) => v))
          : const {},
      _$data.containsKey('daysNotIn')
          ? l$daysNotIn == null
              ? null
              : Object.hashAll(l$daysNotIn.map((v) => v))
          : const {},
      _$data.containsKey('daysGT') ? l$daysGT : const {},
      _$data.containsKey('daysGTE') ? l$daysGTE : const {},
      _$data.containsKey('daysLT') ? l$daysLT : const {},
      _$data.containsKey('daysLTE') ? l$daysLTE : const {},
      _$data.containsKey('color') ? l$color : const {},
      _$data.containsKey('colorNEQ') ? l$colorNEQ : const {},
      _$data.containsKey('colorIn')
          ? l$colorIn == null
              ? null
              : Object.hashAll(l$colorIn.map((v) => v))
          : const {},
      _$data.containsKey('colorNotIn')
          ? l$colorNotIn == null
              ? null
              : Object.hashAll(l$colorNotIn.map((v) => v))
          : const {},
      _$data.containsKey('colorGT') ? l$colorGT : const {},
      _$data.containsKey('colorGTE') ? l$colorGTE : const {},
      _$data.containsKey('colorLT') ? l$colorLT : const {},
      _$data.containsKey('colorLTE') ? l$colorLTE : const {},
      _$data.containsKey('colorContains') ? l$colorContains : const {},
      _$data.containsKey('colorHasPrefix') ? l$colorHasPrefix : const {},
      _$data.containsKey('colorHasSuffix') ? l$colorHasSuffix : const {},
      _$data.containsKey('colorEqualFold') ? l$colorEqualFold : const {},
      _$data.containsKey('colorContainsFold') ? l$colorContainsFold : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('orderNEQ') ? l$orderNEQ : const {},
      _$data.containsKey('orderIn')
          ? l$orderIn == null
              ? null
              : Object.hashAll(l$orderIn.map((v) => v))
          : const {},
      _$data.containsKey('orderNotIn')
          ? l$orderNotIn == null
              ? null
              : Object.hashAll(l$orderNotIn.map((v) => v))
          : const {},
      _$data.containsKey('orderGT') ? l$orderGT : const {},
      _$data.containsKey('orderGTE') ? l$orderGTE : const {},
      _$data.containsKey('orderLT') ? l$orderLT : const {},
      _$data.containsKey('orderLTE') ? l$orderLTE : const {},
      _$data.containsKey('hasCourse') ? l$hasCourse : const {},
      _$data.containsKey('hasCourseWith')
          ? l$hasCourseWith == null
              ? null
              : Object.hashAll(l$hasCourseWith.map((v) => v))
          : const {},
      _$data.containsKey('hasLessons') ? l$hasLessons : const {},
      _$data.containsKey('hasLessonsWith')
          ? l$hasLessonsWith == null
              ? null
              : Object.hashAll(l$hasLessonsWith.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$UnitWhereInput<TRes> {
  factory CopyWith$Input$UnitWhereInput(
    Input$UnitWhereInput instance,
    TRes Function(Input$UnitWhereInput) then,
  ) = _CopyWithImpl$Input$UnitWhereInput;

  factory CopyWith$Input$UnitWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$UnitWhereInput;

  TRes call({
    Input$UnitWhereInput? not,
    List<Input$UnitWhereInput>? and,
    List<Input$UnitWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? courseID,
    String? courseIDNEQ,
    List<String>? courseIDIn,
    List<String>? courseIDNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    String? mastering,
    String? masteringNEQ,
    List<String>? masteringIn,
    List<String>? masteringNotIn,
    String? masteringGT,
    String? masteringGTE,
    String? masteringLT,
    String? masteringLTE,
    String? masteringContains,
    String? masteringHasPrefix,
    String? masteringHasSuffix,
    String? masteringEqualFold,
    String? masteringContainsFold,
    int? days,
    int? daysNEQ,
    List<int>? daysIn,
    List<int>? daysNotIn,
    int? daysGT,
    int? daysGTE,
    int? daysLT,
    int? daysLTE,
    String? color,
    String? colorNEQ,
    List<String>? colorIn,
    List<String>? colorNotIn,
    String? colorGT,
    String? colorGTE,
    String? colorLT,
    String? colorLTE,
    String? colorContains,
    String? colorHasPrefix,
    String? colorHasSuffix,
    String? colorEqualFold,
    String? colorContainsFold,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasCourse,
    List<Input$CourseWhereInput>? hasCourseWith,
    bool? hasLessons,
    List<Input$LessonWhereInput>? hasLessonsWith,
  });
  CopyWith$Input$UnitWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$UnitWhereInput>? Function(
              Iterable<CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$UnitWhereInput>? Function(
              Iterable<CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
          _fn);
  TRes hasCourseWith(
      Iterable<Input$CourseWhereInput>? Function(
              Iterable<
                  CopyWith$Input$CourseWhereInput<Input$CourseWhereInput>>?)
          _fn);
  TRes hasLessonsWith(
      Iterable<Input$LessonWhereInput>? Function(
              Iterable<
                  CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$UnitWhereInput<TRes>
    implements CopyWith$Input$UnitWhereInput<TRes> {
  _CopyWithImpl$Input$UnitWhereInput(
    this._instance,
    this._then,
  );

  final Input$UnitWhereInput _instance;

  final TRes Function(Input$UnitWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? courseID = _undefined,
    Object? courseIDNEQ = _undefined,
    Object? courseIDIn = _undefined,
    Object? courseIDNotIn = _undefined,
    Object? iconimage = _undefined,
    Object? iconimageNEQ = _undefined,
    Object? iconimageIn = _undefined,
    Object? iconimageNotIn = _undefined,
    Object? iconimageGT = _undefined,
    Object? iconimageGTE = _undefined,
    Object? iconimageLT = _undefined,
    Object? iconimageLTE = _undefined,
    Object? iconimageContains = _undefined,
    Object? iconimageHasPrefix = _undefined,
    Object? iconimageHasSuffix = _undefined,
    Object? iconimageEqualFold = _undefined,
    Object? iconimageContainsFold = _undefined,
    Object? coverimage = _undefined,
    Object? coverimageNEQ = _undefined,
    Object? coverimageIn = _undefined,
    Object? coverimageNotIn = _undefined,
    Object? coverimageGT = _undefined,
    Object? coverimageGTE = _undefined,
    Object? coverimageLT = _undefined,
    Object? coverimageLTE = _undefined,
    Object? coverimageContains = _undefined,
    Object? coverimageHasPrefix = _undefined,
    Object? coverimageHasSuffix = _undefined,
    Object? coverimageEqualFold = _undefined,
    Object? coverimageContainsFold = _undefined,
    Object? title = _undefined,
    Object? titleNEQ = _undefined,
    Object? titleIn = _undefined,
    Object? titleNotIn = _undefined,
    Object? titleGT = _undefined,
    Object? titleGTE = _undefined,
    Object? titleLT = _undefined,
    Object? titleLTE = _undefined,
    Object? titleContains = _undefined,
    Object? titleHasPrefix = _undefined,
    Object? titleHasSuffix = _undefined,
    Object? titleEqualFold = _undefined,
    Object? titleContainsFold = _undefined,
    Object? subtitle = _undefined,
    Object? subtitleNEQ = _undefined,
    Object? subtitleIn = _undefined,
    Object? subtitleNotIn = _undefined,
    Object? subtitleGT = _undefined,
    Object? subtitleGTE = _undefined,
    Object? subtitleLT = _undefined,
    Object? subtitleLTE = _undefined,
    Object? subtitleContains = _undefined,
    Object? subtitleHasPrefix = _undefined,
    Object? subtitleHasSuffix = _undefined,
    Object? subtitleEqualFold = _undefined,
    Object? subtitleContainsFold = _undefined,
    Object? description = _undefined,
    Object? descriptionNEQ = _undefined,
    Object? descriptionIn = _undefined,
    Object? descriptionNotIn = _undefined,
    Object? descriptionGT = _undefined,
    Object? descriptionGTE = _undefined,
    Object? descriptionLT = _undefined,
    Object? descriptionLTE = _undefined,
    Object? descriptionContains = _undefined,
    Object? descriptionHasPrefix = _undefined,
    Object? descriptionHasSuffix = _undefined,
    Object? descriptionEqualFold = _undefined,
    Object? descriptionContainsFold = _undefined,
    Object? mastering = _undefined,
    Object? masteringNEQ = _undefined,
    Object? masteringIn = _undefined,
    Object? masteringNotIn = _undefined,
    Object? masteringGT = _undefined,
    Object? masteringGTE = _undefined,
    Object? masteringLT = _undefined,
    Object? masteringLTE = _undefined,
    Object? masteringContains = _undefined,
    Object? masteringHasPrefix = _undefined,
    Object? masteringHasSuffix = _undefined,
    Object? masteringEqualFold = _undefined,
    Object? masteringContainsFold = _undefined,
    Object? days = _undefined,
    Object? daysNEQ = _undefined,
    Object? daysIn = _undefined,
    Object? daysNotIn = _undefined,
    Object? daysGT = _undefined,
    Object? daysGTE = _undefined,
    Object? daysLT = _undefined,
    Object? daysLTE = _undefined,
    Object? color = _undefined,
    Object? colorNEQ = _undefined,
    Object? colorIn = _undefined,
    Object? colorNotIn = _undefined,
    Object? colorGT = _undefined,
    Object? colorGTE = _undefined,
    Object? colorLT = _undefined,
    Object? colorLTE = _undefined,
    Object? colorContains = _undefined,
    Object? colorHasPrefix = _undefined,
    Object? colorHasSuffix = _undefined,
    Object? colorEqualFold = _undefined,
    Object? colorContainsFold = _undefined,
    Object? order = _undefined,
    Object? orderNEQ = _undefined,
    Object? orderIn = _undefined,
    Object? orderNotIn = _undefined,
    Object? orderGT = _undefined,
    Object? orderGTE = _undefined,
    Object? orderLT = _undefined,
    Object? orderLTE = _undefined,
    Object? hasCourse = _undefined,
    Object? hasCourseWith = _undefined,
    Object? hasLessons = _undefined,
    Object? hasLessonsWith = _undefined,
  }) =>
      _then(Input$UnitWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$UnitWhereInput?),
        if (and != _undefined) 'and': (and as List<Input$UnitWhereInput>?),
        if (or != _undefined) 'or': (or as List<Input$UnitWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (courseID != _undefined) 'courseID': (courseID as String?),
        if (courseIDNEQ != _undefined) 'courseIDNEQ': (courseIDNEQ as String?),
        if (courseIDIn != _undefined)
          'courseIDIn': (courseIDIn as List<String>?),
        if (courseIDNotIn != _undefined)
          'courseIDNotIn': (courseIDNotIn as List<String>?),
        if (iconimage != _undefined) 'iconimage': (iconimage as String?),
        if (iconimageNEQ != _undefined)
          'iconimageNEQ': (iconimageNEQ as String?),
        if (iconimageIn != _undefined)
          'iconimageIn': (iconimageIn as List<String>?),
        if (iconimageNotIn != _undefined)
          'iconimageNotIn': (iconimageNotIn as List<String>?),
        if (iconimageGT != _undefined) 'iconimageGT': (iconimageGT as String?),
        if (iconimageGTE != _undefined)
          'iconimageGTE': (iconimageGTE as String?),
        if (iconimageLT != _undefined) 'iconimageLT': (iconimageLT as String?),
        if (iconimageLTE != _undefined)
          'iconimageLTE': (iconimageLTE as String?),
        if (iconimageContains != _undefined)
          'iconimageContains': (iconimageContains as String?),
        if (iconimageHasPrefix != _undefined)
          'iconimageHasPrefix': (iconimageHasPrefix as String?),
        if (iconimageHasSuffix != _undefined)
          'iconimageHasSuffix': (iconimageHasSuffix as String?),
        if (iconimageEqualFold != _undefined)
          'iconimageEqualFold': (iconimageEqualFold as String?),
        if (iconimageContainsFold != _undefined)
          'iconimageContainsFold': (iconimageContainsFold as String?),
        if (coverimage != _undefined) 'coverimage': (coverimage as String?),
        if (coverimageNEQ != _undefined)
          'coverimageNEQ': (coverimageNEQ as String?),
        if (coverimageIn != _undefined)
          'coverimageIn': (coverimageIn as List<String>?),
        if (coverimageNotIn != _undefined)
          'coverimageNotIn': (coverimageNotIn as List<String>?),
        if (coverimageGT != _undefined)
          'coverimageGT': (coverimageGT as String?),
        if (coverimageGTE != _undefined)
          'coverimageGTE': (coverimageGTE as String?),
        if (coverimageLT != _undefined)
          'coverimageLT': (coverimageLT as String?),
        if (coverimageLTE != _undefined)
          'coverimageLTE': (coverimageLTE as String?),
        if (coverimageContains != _undefined)
          'coverimageContains': (coverimageContains as String?),
        if (coverimageHasPrefix != _undefined)
          'coverimageHasPrefix': (coverimageHasPrefix as String?),
        if (coverimageHasSuffix != _undefined)
          'coverimageHasSuffix': (coverimageHasSuffix as String?),
        if (coverimageEqualFold != _undefined)
          'coverimageEqualFold': (coverimageEqualFold as String?),
        if (coverimageContainsFold != _undefined)
          'coverimageContainsFold': (coverimageContainsFold as String?),
        if (title != _undefined) 'title': (title as String?),
        if (titleNEQ != _undefined) 'titleNEQ': (titleNEQ as String?),
        if (titleIn != _undefined) 'titleIn': (titleIn as List<String>?),
        if (titleNotIn != _undefined)
          'titleNotIn': (titleNotIn as List<String>?),
        if (titleGT != _undefined) 'titleGT': (titleGT as String?),
        if (titleGTE != _undefined) 'titleGTE': (titleGTE as String?),
        if (titleLT != _undefined) 'titleLT': (titleLT as String?),
        if (titleLTE != _undefined) 'titleLTE': (titleLTE as String?),
        if (titleContains != _undefined)
          'titleContains': (titleContains as String?),
        if (titleHasPrefix != _undefined)
          'titleHasPrefix': (titleHasPrefix as String?),
        if (titleHasSuffix != _undefined)
          'titleHasSuffix': (titleHasSuffix as String?),
        if (titleEqualFold != _undefined)
          'titleEqualFold': (titleEqualFold as String?),
        if (titleContainsFold != _undefined)
          'titleContainsFold': (titleContainsFold as String?),
        if (subtitle != _undefined) 'subtitle': (subtitle as String?),
        if (subtitleNEQ != _undefined) 'subtitleNEQ': (subtitleNEQ as String?),
        if (subtitleIn != _undefined)
          'subtitleIn': (subtitleIn as List<String>?),
        if (subtitleNotIn != _undefined)
          'subtitleNotIn': (subtitleNotIn as List<String>?),
        if (subtitleGT != _undefined) 'subtitleGT': (subtitleGT as String?),
        if (subtitleGTE != _undefined) 'subtitleGTE': (subtitleGTE as String?),
        if (subtitleLT != _undefined) 'subtitleLT': (subtitleLT as String?),
        if (subtitleLTE != _undefined) 'subtitleLTE': (subtitleLTE as String?),
        if (subtitleContains != _undefined)
          'subtitleContains': (subtitleContains as String?),
        if (subtitleHasPrefix != _undefined)
          'subtitleHasPrefix': (subtitleHasPrefix as String?),
        if (subtitleHasSuffix != _undefined)
          'subtitleHasSuffix': (subtitleHasSuffix as String?),
        if (subtitleEqualFold != _undefined)
          'subtitleEqualFold': (subtitleEqualFold as String?),
        if (subtitleContainsFold != _undefined)
          'subtitleContainsFold': (subtitleContainsFold as String?),
        if (description != _undefined) 'description': (description as String?),
        if (descriptionNEQ != _undefined)
          'descriptionNEQ': (descriptionNEQ as String?),
        if (descriptionIn != _undefined)
          'descriptionIn': (descriptionIn as List<String>?),
        if (descriptionNotIn != _undefined)
          'descriptionNotIn': (descriptionNotIn as List<String>?),
        if (descriptionGT != _undefined)
          'descriptionGT': (descriptionGT as String?),
        if (descriptionGTE != _undefined)
          'descriptionGTE': (descriptionGTE as String?),
        if (descriptionLT != _undefined)
          'descriptionLT': (descriptionLT as String?),
        if (descriptionLTE != _undefined)
          'descriptionLTE': (descriptionLTE as String?),
        if (descriptionContains != _undefined)
          'descriptionContains': (descriptionContains as String?),
        if (descriptionHasPrefix != _undefined)
          'descriptionHasPrefix': (descriptionHasPrefix as String?),
        if (descriptionHasSuffix != _undefined)
          'descriptionHasSuffix': (descriptionHasSuffix as String?),
        if (descriptionEqualFold != _undefined)
          'descriptionEqualFold': (descriptionEqualFold as String?),
        if (descriptionContainsFold != _undefined)
          'descriptionContainsFold': (descriptionContainsFold as String?),
        if (mastering != _undefined) 'mastering': (mastering as String?),
        if (masteringNEQ != _undefined)
          'masteringNEQ': (masteringNEQ as String?),
        if (masteringIn != _undefined)
          'masteringIn': (masteringIn as List<String>?),
        if (masteringNotIn != _undefined)
          'masteringNotIn': (masteringNotIn as List<String>?),
        if (masteringGT != _undefined) 'masteringGT': (masteringGT as String?),
        if (masteringGTE != _undefined)
          'masteringGTE': (masteringGTE as String?),
        if (masteringLT != _undefined) 'masteringLT': (masteringLT as String?),
        if (masteringLTE != _undefined)
          'masteringLTE': (masteringLTE as String?),
        if (masteringContains != _undefined)
          'masteringContains': (masteringContains as String?),
        if (masteringHasPrefix != _undefined)
          'masteringHasPrefix': (masteringHasPrefix as String?),
        if (masteringHasSuffix != _undefined)
          'masteringHasSuffix': (masteringHasSuffix as String?),
        if (masteringEqualFold != _undefined)
          'masteringEqualFold': (masteringEqualFold as String?),
        if (masteringContainsFold != _undefined)
          'masteringContainsFold': (masteringContainsFold as String?),
        if (days != _undefined) 'days': (days as int?),
        if (daysNEQ != _undefined) 'daysNEQ': (daysNEQ as int?),
        if (daysIn != _undefined) 'daysIn': (daysIn as List<int>?),
        if (daysNotIn != _undefined) 'daysNotIn': (daysNotIn as List<int>?),
        if (daysGT != _undefined) 'daysGT': (daysGT as int?),
        if (daysGTE != _undefined) 'daysGTE': (daysGTE as int?),
        if (daysLT != _undefined) 'daysLT': (daysLT as int?),
        if (daysLTE != _undefined) 'daysLTE': (daysLTE as int?),
        if (color != _undefined) 'color': (color as String?),
        if (colorNEQ != _undefined) 'colorNEQ': (colorNEQ as String?),
        if (colorIn != _undefined) 'colorIn': (colorIn as List<String>?),
        if (colorNotIn != _undefined)
          'colorNotIn': (colorNotIn as List<String>?),
        if (colorGT != _undefined) 'colorGT': (colorGT as String?),
        if (colorGTE != _undefined) 'colorGTE': (colorGTE as String?),
        if (colorLT != _undefined) 'colorLT': (colorLT as String?),
        if (colorLTE != _undefined) 'colorLTE': (colorLTE as String?),
        if (colorContains != _undefined)
          'colorContains': (colorContains as String?),
        if (colorHasPrefix != _undefined)
          'colorHasPrefix': (colorHasPrefix as String?),
        if (colorHasSuffix != _undefined)
          'colorHasSuffix': (colorHasSuffix as String?),
        if (colorEqualFold != _undefined)
          'colorEqualFold': (colorEqualFold as String?),
        if (colorContainsFold != _undefined)
          'colorContainsFold': (colorContainsFold as String?),
        if (order != _undefined) 'order': (order as int?),
        if (orderNEQ != _undefined) 'orderNEQ': (orderNEQ as int?),
        if (orderIn != _undefined) 'orderIn': (orderIn as List<int>?),
        if (orderNotIn != _undefined) 'orderNotIn': (orderNotIn as List<int>?),
        if (orderGT != _undefined) 'orderGT': (orderGT as int?),
        if (orderGTE != _undefined) 'orderGTE': (orderGTE as int?),
        if (orderLT != _undefined) 'orderLT': (orderLT as int?),
        if (orderLTE != _undefined) 'orderLTE': (orderLTE as int?),
        if (hasCourse != _undefined) 'hasCourse': (hasCourse as bool?),
        if (hasCourseWith != _undefined)
          'hasCourseWith': (hasCourseWith as List<Input$CourseWhereInput>?),
        if (hasLessons != _undefined) 'hasLessons': (hasLessons as bool?),
        if (hasLessonsWith != _undefined)
          'hasLessonsWith': (hasLessonsWith as List<Input$LessonWhereInput>?),
      }));

  CopyWith$Input$UnitWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$UnitWhereInput.stub(_then(_instance))
        : CopyWith$Input$UnitWhereInput(local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$UnitWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
              _fn) =>
      call(
          and: _fn(_instance.and?.map((e) => CopyWith$Input$UnitWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes or(
          Iterable<Input$UnitWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
              _fn) =>
      call(
          or: _fn(_instance.or?.map((e) => CopyWith$Input$UnitWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes hasCourseWith(
          Iterable<Input$CourseWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$CourseWhereInput<Input$CourseWhereInput>>?)
              _fn) =>
      call(
          hasCourseWith: _fn(_instance.hasCourseWith
              ?.map((e) => CopyWith$Input$CourseWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasLessonsWith(
          Iterable<Input$LessonWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
              _fn) =>
      call(
          hasLessonsWith: _fn(_instance.hasLessonsWith
              ?.map((e) => CopyWith$Input$LessonWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$UnitWhereInput<TRes>
    implements CopyWith$Input$UnitWhereInput<TRes> {
  _CopyWithStubImpl$Input$UnitWhereInput(this._res);

  TRes _res;

  call({
    Input$UnitWhereInput? not,
    List<Input$UnitWhereInput>? and,
    List<Input$UnitWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? courseID,
    String? courseIDNEQ,
    List<String>? courseIDIn,
    List<String>? courseIDNotIn,
    String? iconimage,
    String? iconimageNEQ,
    List<String>? iconimageIn,
    List<String>? iconimageNotIn,
    String? iconimageGT,
    String? iconimageGTE,
    String? iconimageLT,
    String? iconimageLTE,
    String? iconimageContains,
    String? iconimageHasPrefix,
    String? iconimageHasSuffix,
    String? iconimageEqualFold,
    String? iconimageContainsFold,
    String? coverimage,
    String? coverimageNEQ,
    List<String>? coverimageIn,
    List<String>? coverimageNotIn,
    String? coverimageGT,
    String? coverimageGTE,
    String? coverimageLT,
    String? coverimageLTE,
    String? coverimageContains,
    String? coverimageHasPrefix,
    String? coverimageHasSuffix,
    String? coverimageEqualFold,
    String? coverimageContainsFold,
    String? title,
    String? titleNEQ,
    List<String>? titleIn,
    List<String>? titleNotIn,
    String? titleGT,
    String? titleGTE,
    String? titleLT,
    String? titleLTE,
    String? titleContains,
    String? titleHasPrefix,
    String? titleHasSuffix,
    String? titleEqualFold,
    String? titleContainsFold,
    String? subtitle,
    String? subtitleNEQ,
    List<String>? subtitleIn,
    List<String>? subtitleNotIn,
    String? subtitleGT,
    String? subtitleGTE,
    String? subtitleLT,
    String? subtitleLTE,
    String? subtitleContains,
    String? subtitleHasPrefix,
    String? subtitleHasSuffix,
    String? subtitleEqualFold,
    String? subtitleContainsFold,
    String? description,
    String? descriptionNEQ,
    List<String>? descriptionIn,
    List<String>? descriptionNotIn,
    String? descriptionGT,
    String? descriptionGTE,
    String? descriptionLT,
    String? descriptionLTE,
    String? descriptionContains,
    String? descriptionHasPrefix,
    String? descriptionHasSuffix,
    String? descriptionEqualFold,
    String? descriptionContainsFold,
    String? mastering,
    String? masteringNEQ,
    List<String>? masteringIn,
    List<String>? masteringNotIn,
    String? masteringGT,
    String? masteringGTE,
    String? masteringLT,
    String? masteringLTE,
    String? masteringContains,
    String? masteringHasPrefix,
    String? masteringHasSuffix,
    String? masteringEqualFold,
    String? masteringContainsFold,
    int? days,
    int? daysNEQ,
    List<int>? daysIn,
    List<int>? daysNotIn,
    int? daysGT,
    int? daysGTE,
    int? daysLT,
    int? daysLTE,
    String? color,
    String? colorNEQ,
    List<String>? colorIn,
    List<String>? colorNotIn,
    String? colorGT,
    String? colorGTE,
    String? colorLT,
    String? colorLTE,
    String? colorContains,
    String? colorHasPrefix,
    String? colorHasSuffix,
    String? colorEqualFold,
    String? colorContainsFold,
    int? order,
    int? orderNEQ,
    List<int>? orderIn,
    List<int>? orderNotIn,
    int? orderGT,
    int? orderGTE,
    int? orderLT,
    int? orderLTE,
    bool? hasCourse,
    List<Input$CourseWhereInput>? hasCourseWith,
    bool? hasLessons,
    List<Input$LessonWhereInput>? hasLessonsWith,
  }) =>
      _res;

  CopyWith$Input$UnitWhereInput<TRes> get not =>
      CopyWith$Input$UnitWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;

  hasCourseWith(_fn) => _res;

  hasLessonsWith(_fn) => _res;
}

class Input$UserOrder {
  factory Input$UserOrder({
    Enum$OrderDirection? direction,
    required Enum$UserOrderField field,
  }) =>
      Input$UserOrder._({
        if (direction != null) r'direction': direction,
        r'field': field,
      });

  Input$UserOrder._(this._$data);

  factory Input$UserOrder.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('direction')) {
      final l$direction = data['direction'];
      result$data['direction'] =
          fromJson$Enum$OrderDirection((l$direction as String));
    }
    final l$field = data['field'];
    result$data['field'] = fromJson$Enum$UserOrderField((l$field as String));
    return Input$UserOrder._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderDirection? get direction =>
      (_$data['direction'] as Enum$OrderDirection?);

  Enum$UserOrderField get field => (_$data['field'] as Enum$UserOrderField);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('direction')) {
      final l$direction = direction;
      result$data['direction'] =
          toJson$Enum$OrderDirection((l$direction as Enum$OrderDirection));
    }
    final l$field = field;
    result$data['field'] = toJson$Enum$UserOrderField(l$field);
    return result$data;
  }

  CopyWith$Input$UserOrder<Input$UserOrder> get copyWith =>
      CopyWith$Input$UserOrder(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$UserOrder) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$direction = direction;
    final lOther$direction = other.direction;
    if (_$data.containsKey('direction') !=
        other._$data.containsKey('direction')) {
      return false;
    }
    if (l$direction != lOther$direction) {
      return false;
    }
    final l$field = field;
    final lOther$field = other.field;
    if (l$field != lOther$field) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$direction = direction;
    final l$field = field;
    return Object.hashAll([
      _$data.containsKey('direction') ? l$direction : const {},
      l$field,
    ]);
  }
}

abstract class CopyWith$Input$UserOrder<TRes> {
  factory CopyWith$Input$UserOrder(
    Input$UserOrder instance,
    TRes Function(Input$UserOrder) then,
  ) = _CopyWithImpl$Input$UserOrder;

  factory CopyWith$Input$UserOrder.stub(TRes res) =
      _CopyWithStubImpl$Input$UserOrder;

  TRes call({
    Enum$OrderDirection? direction,
    Enum$UserOrderField? field,
  });
}

class _CopyWithImpl$Input$UserOrder<TRes>
    implements CopyWith$Input$UserOrder<TRes> {
  _CopyWithImpl$Input$UserOrder(
    this._instance,
    this._then,
  );

  final Input$UserOrder _instance;

  final TRes Function(Input$UserOrder) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? direction = _undefined,
    Object? field = _undefined,
  }) =>
      _then(Input$UserOrder._({
        ..._instance._$data,
        if (direction != _undefined && direction != null)
          'direction': (direction as Enum$OrderDirection),
        if (field != _undefined && field != null)
          'field': (field as Enum$UserOrderField),
      }));
}

class _CopyWithStubImpl$Input$UserOrder<TRes>
    implements CopyWith$Input$UserOrder<TRes> {
  _CopyWithStubImpl$Input$UserOrder(this._res);

  TRes _res;

  call({
    Enum$OrderDirection? direction,
    Enum$UserOrderField? field,
  }) =>
      _res;
}

class Input$UserProgressOrder {
  factory Input$UserProgressOrder({
    Enum$OrderDirection? direction,
    required Enum$UserProgressOrderField field,
  }) =>
      Input$UserProgressOrder._({
        if (direction != null) r'direction': direction,
        r'field': field,
      });

  Input$UserProgressOrder._(this._$data);

  factory Input$UserProgressOrder.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('direction')) {
      final l$direction = data['direction'];
      result$data['direction'] =
          fromJson$Enum$OrderDirection((l$direction as String));
    }
    final l$field = data['field'];
    result$data['field'] =
        fromJson$Enum$UserProgressOrderField((l$field as String));
    return Input$UserProgressOrder._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderDirection? get direction =>
      (_$data['direction'] as Enum$OrderDirection?);

  Enum$UserProgressOrderField get field =>
      (_$data['field'] as Enum$UserProgressOrderField);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('direction')) {
      final l$direction = direction;
      result$data['direction'] =
          toJson$Enum$OrderDirection((l$direction as Enum$OrderDirection));
    }
    final l$field = field;
    result$data['field'] = toJson$Enum$UserProgressOrderField(l$field);
    return result$data;
  }

  CopyWith$Input$UserProgressOrder<Input$UserProgressOrder> get copyWith =>
      CopyWith$Input$UserProgressOrder(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$UserProgressOrder) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$direction = direction;
    final lOther$direction = other.direction;
    if (_$data.containsKey('direction') !=
        other._$data.containsKey('direction')) {
      return false;
    }
    if (l$direction != lOther$direction) {
      return false;
    }
    final l$field = field;
    final lOther$field = other.field;
    if (l$field != lOther$field) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$direction = direction;
    final l$field = field;
    return Object.hashAll([
      _$data.containsKey('direction') ? l$direction : const {},
      l$field,
    ]);
  }
}

abstract class CopyWith$Input$UserProgressOrder<TRes> {
  factory CopyWith$Input$UserProgressOrder(
    Input$UserProgressOrder instance,
    TRes Function(Input$UserProgressOrder) then,
  ) = _CopyWithImpl$Input$UserProgressOrder;

  factory CopyWith$Input$UserProgressOrder.stub(TRes res) =
      _CopyWithStubImpl$Input$UserProgressOrder;

  TRes call({
    Enum$OrderDirection? direction,
    Enum$UserProgressOrderField? field,
  });
}

class _CopyWithImpl$Input$UserProgressOrder<TRes>
    implements CopyWith$Input$UserProgressOrder<TRes> {
  _CopyWithImpl$Input$UserProgressOrder(
    this._instance,
    this._then,
  );

  final Input$UserProgressOrder _instance;

  final TRes Function(Input$UserProgressOrder) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? direction = _undefined,
    Object? field = _undefined,
  }) =>
      _then(Input$UserProgressOrder._({
        ..._instance._$data,
        if (direction != _undefined && direction != null)
          'direction': (direction as Enum$OrderDirection),
        if (field != _undefined && field != null)
          'field': (field as Enum$UserProgressOrderField),
      }));
}

class _CopyWithStubImpl$Input$UserProgressOrder<TRes>
    implements CopyWith$Input$UserProgressOrder<TRes> {
  _CopyWithStubImpl$Input$UserProgressOrder(this._res);

  TRes _res;

  call({
    Enum$OrderDirection? direction,
    Enum$UserProgressOrderField? field,
  }) =>
      _res;
}

class Input$UserProgressWhereInput {
  factory Input$UserProgressWhereInput({
    Input$UserProgressWhereInput? not,
    List<Input$UserProgressWhereInput>? and,
    List<Input$UserProgressWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? userID,
    String? userIDNEQ,
    List<String>? userIDIn,
    List<String>? userIDNotIn,
    String? courseID,
    String? courseIDNEQ,
    List<String>? courseIDIn,
    List<String>? courseIDNotIn,
    String? unitID,
    String? unitIDNEQ,
    List<String>? unitIDIn,
    List<String>? unitIDNotIn,
    String? lessonID,
    String? lessonIDNEQ,
    List<String>? lessonIDIn,
    List<String>? lessonIDNotIn,
    Enum$UserProgressLessonType? lessonType,
    Enum$UserProgressLessonType? lessonTypeNEQ,
    List<Enum$UserProgressLessonType>? lessonTypeIn,
    List<Enum$UserProgressLessonType>? lessonTypeNotIn,
    bool? islast,
    bool? islastNEQ,
    bool? isnext,
    bool? isnextNEQ,
    int? progress,
    int? progressNEQ,
    List<int>? progressIn,
    List<int>? progressNotIn,
    int? progressGT,
    int? progressGTE,
    int? progressLT,
    int? progressLTE,
    String? finishedat,
    String? finishedatNEQ,
    List<String>? finishedatIn,
    List<String>? finishedatNotIn,
    String? finishedatGT,
    String? finishedatGTE,
    String? finishedatLT,
    String? finishedatLTE,
    bool? finishedatIsNil,
    bool? finishedatNotNil,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    bool? hasUser,
    List<Input$UserWhereInput>? hasUserWith,
    bool? hasCourse,
    List<Input$CourseWhereInput>? hasCourseWith,
    bool? hasUnit,
    List<Input$UnitWhereInput>? hasUnitWith,
    bool? hasLesson,
    List<Input$LessonWhereInput>? hasLessonWith,
  }) =>
      Input$UserProgressWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (userID != null) r'userID': userID,
        if (userIDNEQ != null) r'userIDNEQ': userIDNEQ,
        if (userIDIn != null) r'userIDIn': userIDIn,
        if (userIDNotIn != null) r'userIDNotIn': userIDNotIn,
        if (courseID != null) r'courseID': courseID,
        if (courseIDNEQ != null) r'courseIDNEQ': courseIDNEQ,
        if (courseIDIn != null) r'courseIDIn': courseIDIn,
        if (courseIDNotIn != null) r'courseIDNotIn': courseIDNotIn,
        if (unitID != null) r'unitID': unitID,
        if (unitIDNEQ != null) r'unitIDNEQ': unitIDNEQ,
        if (unitIDIn != null) r'unitIDIn': unitIDIn,
        if (unitIDNotIn != null) r'unitIDNotIn': unitIDNotIn,
        if (lessonID != null) r'lessonID': lessonID,
        if (lessonIDNEQ != null) r'lessonIDNEQ': lessonIDNEQ,
        if (lessonIDIn != null) r'lessonIDIn': lessonIDIn,
        if (lessonIDNotIn != null) r'lessonIDNotIn': lessonIDNotIn,
        if (lessonType != null) r'lessonType': lessonType,
        if (lessonTypeNEQ != null) r'lessonTypeNEQ': lessonTypeNEQ,
        if (lessonTypeIn != null) r'lessonTypeIn': lessonTypeIn,
        if (lessonTypeNotIn != null) r'lessonTypeNotIn': lessonTypeNotIn,
        if (islast != null) r'islast': islast,
        if (islastNEQ != null) r'islastNEQ': islastNEQ,
        if (isnext != null) r'isnext': isnext,
        if (isnextNEQ != null) r'isnextNEQ': isnextNEQ,
        if (progress != null) r'progress': progress,
        if (progressNEQ != null) r'progressNEQ': progressNEQ,
        if (progressIn != null) r'progressIn': progressIn,
        if (progressNotIn != null) r'progressNotIn': progressNotIn,
        if (progressGT != null) r'progressGT': progressGT,
        if (progressGTE != null) r'progressGTE': progressGTE,
        if (progressLT != null) r'progressLT': progressLT,
        if (progressLTE != null) r'progressLTE': progressLTE,
        if (finishedat != null) r'finishedat': finishedat,
        if (finishedatNEQ != null) r'finishedatNEQ': finishedatNEQ,
        if (finishedatIn != null) r'finishedatIn': finishedatIn,
        if (finishedatNotIn != null) r'finishedatNotIn': finishedatNotIn,
        if (finishedatGT != null) r'finishedatGT': finishedatGT,
        if (finishedatGTE != null) r'finishedatGTE': finishedatGTE,
        if (finishedatLT != null) r'finishedatLT': finishedatLT,
        if (finishedatLTE != null) r'finishedatLTE': finishedatLTE,
        if (finishedatIsNil != null) r'finishedatIsNil': finishedatIsNil,
        if (finishedatNotNil != null) r'finishedatNotNil': finishedatNotNil,
        if (createdat != null) r'createdat': createdat,
        if (createdatNEQ != null) r'createdatNEQ': createdatNEQ,
        if (createdatIn != null) r'createdatIn': createdatIn,
        if (createdatNotIn != null) r'createdatNotIn': createdatNotIn,
        if (createdatGT != null) r'createdatGT': createdatGT,
        if (createdatGTE != null) r'createdatGTE': createdatGTE,
        if (createdatLT != null) r'createdatLT': createdatLT,
        if (createdatLTE != null) r'createdatLTE': createdatLTE,
        if (updatedat != null) r'updatedat': updatedat,
        if (updatedatNEQ != null) r'updatedatNEQ': updatedatNEQ,
        if (updatedatIn != null) r'updatedatIn': updatedatIn,
        if (updatedatNotIn != null) r'updatedatNotIn': updatedatNotIn,
        if (updatedatGT != null) r'updatedatGT': updatedatGT,
        if (updatedatGTE != null) r'updatedatGTE': updatedatGTE,
        if (updatedatLT != null) r'updatedatLT': updatedatLT,
        if (updatedatLTE != null) r'updatedatLTE': updatedatLTE,
        if (hasUser != null) r'hasUser': hasUser,
        if (hasUserWith != null) r'hasUserWith': hasUserWith,
        if (hasCourse != null) r'hasCourse': hasCourse,
        if (hasCourseWith != null) r'hasCourseWith': hasCourseWith,
        if (hasUnit != null) r'hasUnit': hasUnit,
        if (hasUnitWith != null) r'hasUnitWith': hasUnitWith,
        if (hasLesson != null) r'hasLesson': hasLesson,
        if (hasLessonWith != null) r'hasLessonWith': hasLessonWith,
      });

  Input$UserProgressWhereInput._(this._$data);

  factory Input$UserProgressWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$UserProgressWhereInput.fromJson(
              (l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map((e) => Input$UserProgressWhereInput.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map((e) => Input$UserProgressWhereInput.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('userID')) {
      final l$userID = data['userID'];
      result$data['userID'] = (l$userID as String?);
    }
    if (data.containsKey('userIDNEQ')) {
      final l$userIDNEQ = data['userIDNEQ'];
      result$data['userIDNEQ'] = (l$userIDNEQ as String?);
    }
    if (data.containsKey('userIDIn')) {
      final l$userIDIn = data['userIDIn'];
      result$data['userIDIn'] =
          (l$userIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('userIDNotIn')) {
      final l$userIDNotIn = data['userIDNotIn'];
      result$data['userIDNotIn'] =
          (l$userIDNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('courseID')) {
      final l$courseID = data['courseID'];
      result$data['courseID'] = (l$courseID as String?);
    }
    if (data.containsKey('courseIDNEQ')) {
      final l$courseIDNEQ = data['courseIDNEQ'];
      result$data['courseIDNEQ'] = (l$courseIDNEQ as String?);
    }
    if (data.containsKey('courseIDIn')) {
      final l$courseIDIn = data['courseIDIn'];
      result$data['courseIDIn'] =
          (l$courseIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('courseIDNotIn')) {
      final l$courseIDNotIn = data['courseIDNotIn'];
      result$data['courseIDNotIn'] = (l$courseIDNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('unitID')) {
      final l$unitID = data['unitID'];
      result$data['unitID'] = (l$unitID as String?);
    }
    if (data.containsKey('unitIDNEQ')) {
      final l$unitIDNEQ = data['unitIDNEQ'];
      result$data['unitIDNEQ'] = (l$unitIDNEQ as String?);
    }
    if (data.containsKey('unitIDIn')) {
      final l$unitIDIn = data['unitIDIn'];
      result$data['unitIDIn'] =
          (l$unitIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('unitIDNotIn')) {
      final l$unitIDNotIn = data['unitIDNotIn'];
      result$data['unitIDNotIn'] =
          (l$unitIDNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('lessonID')) {
      final l$lessonID = data['lessonID'];
      result$data['lessonID'] = (l$lessonID as String?);
    }
    if (data.containsKey('lessonIDNEQ')) {
      final l$lessonIDNEQ = data['lessonIDNEQ'];
      result$data['lessonIDNEQ'] = (l$lessonIDNEQ as String?);
    }
    if (data.containsKey('lessonIDIn')) {
      final l$lessonIDIn = data['lessonIDIn'];
      result$data['lessonIDIn'] =
          (l$lessonIDIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('lessonIDNotIn')) {
      final l$lessonIDNotIn = data['lessonIDNotIn'];
      result$data['lessonIDNotIn'] = (l$lessonIDNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('lessonType')) {
      final l$lessonType = data['lessonType'];
      result$data['lessonType'] = l$lessonType == null
          ? null
          : fromJson$Enum$UserProgressLessonType((l$lessonType as String));
    }
    if (data.containsKey('lessonTypeNEQ')) {
      final l$lessonTypeNEQ = data['lessonTypeNEQ'];
      result$data['lessonTypeNEQ'] = l$lessonTypeNEQ == null
          ? null
          : fromJson$Enum$UserProgressLessonType((l$lessonTypeNEQ as String));
    }
    if (data.containsKey('lessonTypeIn')) {
      final l$lessonTypeIn = data['lessonTypeIn'];
      result$data['lessonTypeIn'] = (l$lessonTypeIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$UserProgressLessonType((e as String)))
          .toList();
    }
    if (data.containsKey('lessonTypeNotIn')) {
      final l$lessonTypeNotIn = data['lessonTypeNotIn'];
      result$data['lessonTypeNotIn'] = (l$lessonTypeNotIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$UserProgressLessonType((e as String)))
          .toList();
    }
    if (data.containsKey('islast')) {
      final l$islast = data['islast'];
      result$data['islast'] = (l$islast as bool?);
    }
    if (data.containsKey('islastNEQ')) {
      final l$islastNEQ = data['islastNEQ'];
      result$data['islastNEQ'] = (l$islastNEQ as bool?);
    }
    if (data.containsKey('isnext')) {
      final l$isnext = data['isnext'];
      result$data['isnext'] = (l$isnext as bool?);
    }
    if (data.containsKey('isnextNEQ')) {
      final l$isnextNEQ = data['isnextNEQ'];
      result$data['isnextNEQ'] = (l$isnextNEQ as bool?);
    }
    if (data.containsKey('progress')) {
      final l$progress = data['progress'];
      result$data['progress'] = (l$progress as int?);
    }
    if (data.containsKey('progressNEQ')) {
      final l$progressNEQ = data['progressNEQ'];
      result$data['progressNEQ'] = (l$progressNEQ as int?);
    }
    if (data.containsKey('progressIn')) {
      final l$progressIn = data['progressIn'];
      result$data['progressIn'] =
          (l$progressIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('progressNotIn')) {
      final l$progressNotIn = data['progressNotIn'];
      result$data['progressNotIn'] =
          (l$progressNotIn as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('progressGT')) {
      final l$progressGT = data['progressGT'];
      result$data['progressGT'] = (l$progressGT as int?);
    }
    if (data.containsKey('progressGTE')) {
      final l$progressGTE = data['progressGTE'];
      result$data['progressGTE'] = (l$progressGTE as int?);
    }
    if (data.containsKey('progressLT')) {
      final l$progressLT = data['progressLT'];
      result$data['progressLT'] = (l$progressLT as int?);
    }
    if (data.containsKey('progressLTE')) {
      final l$progressLTE = data['progressLTE'];
      result$data['progressLTE'] = (l$progressLTE as int?);
    }
    if (data.containsKey('finishedat')) {
      final l$finishedat = data['finishedat'];
      result$data['finishedat'] = (l$finishedat as String?);
    }
    if (data.containsKey('finishedatNEQ')) {
      final l$finishedatNEQ = data['finishedatNEQ'];
      result$data['finishedatNEQ'] = (l$finishedatNEQ as String?);
    }
    if (data.containsKey('finishedatIn')) {
      final l$finishedatIn = data['finishedatIn'];
      result$data['finishedatIn'] = (l$finishedatIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('finishedatNotIn')) {
      final l$finishedatNotIn = data['finishedatNotIn'];
      result$data['finishedatNotIn'] = (l$finishedatNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('finishedatGT')) {
      final l$finishedatGT = data['finishedatGT'];
      result$data['finishedatGT'] = (l$finishedatGT as String?);
    }
    if (data.containsKey('finishedatGTE')) {
      final l$finishedatGTE = data['finishedatGTE'];
      result$data['finishedatGTE'] = (l$finishedatGTE as String?);
    }
    if (data.containsKey('finishedatLT')) {
      final l$finishedatLT = data['finishedatLT'];
      result$data['finishedatLT'] = (l$finishedatLT as String?);
    }
    if (data.containsKey('finishedatLTE')) {
      final l$finishedatLTE = data['finishedatLTE'];
      result$data['finishedatLTE'] = (l$finishedatLTE as String?);
    }
    if (data.containsKey('finishedatIsNil')) {
      final l$finishedatIsNil = data['finishedatIsNil'];
      result$data['finishedatIsNil'] = (l$finishedatIsNil as bool?);
    }
    if (data.containsKey('finishedatNotNil')) {
      final l$finishedatNotNil = data['finishedatNotNil'];
      result$data['finishedatNotNil'] = (l$finishedatNotNil as bool?);
    }
    if (data.containsKey('createdat')) {
      final l$createdat = data['createdat'];
      result$data['createdat'] = (l$createdat as String?);
    }
    if (data.containsKey('createdatNEQ')) {
      final l$createdatNEQ = data['createdatNEQ'];
      result$data['createdatNEQ'] = (l$createdatNEQ as String?);
    }
    if (data.containsKey('createdatIn')) {
      final l$createdatIn = data['createdatIn'];
      result$data['createdatIn'] =
          (l$createdatIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('createdatNotIn')) {
      final l$createdatNotIn = data['createdatNotIn'];
      result$data['createdatNotIn'] = (l$createdatNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('createdatGT')) {
      final l$createdatGT = data['createdatGT'];
      result$data['createdatGT'] = (l$createdatGT as String?);
    }
    if (data.containsKey('createdatGTE')) {
      final l$createdatGTE = data['createdatGTE'];
      result$data['createdatGTE'] = (l$createdatGTE as String?);
    }
    if (data.containsKey('createdatLT')) {
      final l$createdatLT = data['createdatLT'];
      result$data['createdatLT'] = (l$createdatLT as String?);
    }
    if (data.containsKey('createdatLTE')) {
      final l$createdatLTE = data['createdatLTE'];
      result$data['createdatLTE'] = (l$createdatLTE as String?);
    }
    if (data.containsKey('updatedat')) {
      final l$updatedat = data['updatedat'];
      result$data['updatedat'] = (l$updatedat as String?);
    }
    if (data.containsKey('updatedatNEQ')) {
      final l$updatedatNEQ = data['updatedatNEQ'];
      result$data['updatedatNEQ'] = (l$updatedatNEQ as String?);
    }
    if (data.containsKey('updatedatIn')) {
      final l$updatedatIn = data['updatedatIn'];
      result$data['updatedatIn'] =
          (l$updatedatIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('updatedatNotIn')) {
      final l$updatedatNotIn = data['updatedatNotIn'];
      result$data['updatedatNotIn'] = (l$updatedatNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('updatedatGT')) {
      final l$updatedatGT = data['updatedatGT'];
      result$data['updatedatGT'] = (l$updatedatGT as String?);
    }
    if (data.containsKey('updatedatGTE')) {
      final l$updatedatGTE = data['updatedatGTE'];
      result$data['updatedatGTE'] = (l$updatedatGTE as String?);
    }
    if (data.containsKey('updatedatLT')) {
      final l$updatedatLT = data['updatedatLT'];
      result$data['updatedatLT'] = (l$updatedatLT as String?);
    }
    if (data.containsKey('updatedatLTE')) {
      final l$updatedatLTE = data['updatedatLTE'];
      result$data['updatedatLTE'] = (l$updatedatLTE as String?);
    }
    if (data.containsKey('hasUser')) {
      final l$hasUser = data['hasUser'];
      result$data['hasUser'] = (l$hasUser as bool?);
    }
    if (data.containsKey('hasUserWith')) {
      final l$hasUserWith = data['hasUserWith'];
      result$data['hasUserWith'] = (l$hasUserWith as List<dynamic>?)
          ?.map(
              (e) => Input$UserWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('hasCourse')) {
      final l$hasCourse = data['hasCourse'];
      result$data['hasCourse'] = (l$hasCourse as bool?);
    }
    if (data.containsKey('hasCourseWith')) {
      final l$hasCourseWith = data['hasCourseWith'];
      result$data['hasCourseWith'] = (l$hasCourseWith as List<dynamic>?)
          ?.map((e) =>
              Input$CourseWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('hasUnit')) {
      final l$hasUnit = data['hasUnit'];
      result$data['hasUnit'] = (l$hasUnit as bool?);
    }
    if (data.containsKey('hasUnitWith')) {
      final l$hasUnitWith = data['hasUnitWith'];
      result$data['hasUnitWith'] = (l$hasUnitWith as List<dynamic>?)
          ?.map(
              (e) => Input$UnitWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('hasLesson')) {
      final l$hasLesson = data['hasLesson'];
      result$data['hasLesson'] = (l$hasLesson as bool?);
    }
    if (data.containsKey('hasLessonWith')) {
      final l$hasLessonWith = data['hasLessonWith'];
      result$data['hasLessonWith'] = (l$hasLessonWith as List<dynamic>?)
          ?.map((e) =>
              Input$LessonWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    return Input$UserProgressWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$UserProgressWhereInput? get not =>
      (_$data['not'] as Input$UserProgressWhereInput?);

  List<Input$UserProgressWhereInput>? get and =>
      (_$data['and'] as List<Input$UserProgressWhereInput>?);

  List<Input$UserProgressWhereInput>? get or =>
      (_$data['or'] as List<Input$UserProgressWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  String? get userID => (_$data['userID'] as String?);

  String? get userIDNEQ => (_$data['userIDNEQ'] as String?);

  List<String>? get userIDIn => (_$data['userIDIn'] as List<String>?);

  List<String>? get userIDNotIn => (_$data['userIDNotIn'] as List<String>?);

  String? get courseID => (_$data['courseID'] as String?);

  String? get courseIDNEQ => (_$data['courseIDNEQ'] as String?);

  List<String>? get courseIDIn => (_$data['courseIDIn'] as List<String>?);

  List<String>? get courseIDNotIn => (_$data['courseIDNotIn'] as List<String>?);

  String? get unitID => (_$data['unitID'] as String?);

  String? get unitIDNEQ => (_$data['unitIDNEQ'] as String?);

  List<String>? get unitIDIn => (_$data['unitIDIn'] as List<String>?);

  List<String>? get unitIDNotIn => (_$data['unitIDNotIn'] as List<String>?);

  String? get lessonID => (_$data['lessonID'] as String?);

  String? get lessonIDNEQ => (_$data['lessonIDNEQ'] as String?);

  List<String>? get lessonIDIn => (_$data['lessonIDIn'] as List<String>?);

  List<String>? get lessonIDNotIn => (_$data['lessonIDNotIn'] as List<String>?);

  Enum$UserProgressLessonType? get lessonType =>
      (_$data['lessonType'] as Enum$UserProgressLessonType?);

  Enum$UserProgressLessonType? get lessonTypeNEQ =>
      (_$data['lessonTypeNEQ'] as Enum$UserProgressLessonType?);

  List<Enum$UserProgressLessonType>? get lessonTypeIn =>
      (_$data['lessonTypeIn'] as List<Enum$UserProgressLessonType>?);

  List<Enum$UserProgressLessonType>? get lessonTypeNotIn =>
      (_$data['lessonTypeNotIn'] as List<Enum$UserProgressLessonType>?);

  bool? get islast => (_$data['islast'] as bool?);

  bool? get islastNEQ => (_$data['islastNEQ'] as bool?);

  bool? get isnext => (_$data['isnext'] as bool?);

  bool? get isnextNEQ => (_$data['isnextNEQ'] as bool?);

  int? get progress => (_$data['progress'] as int?);

  int? get progressNEQ => (_$data['progressNEQ'] as int?);

  List<int>? get progressIn => (_$data['progressIn'] as List<int>?);

  List<int>? get progressNotIn => (_$data['progressNotIn'] as List<int>?);

  int? get progressGT => (_$data['progressGT'] as int?);

  int? get progressGTE => (_$data['progressGTE'] as int?);

  int? get progressLT => (_$data['progressLT'] as int?);

  int? get progressLTE => (_$data['progressLTE'] as int?);

  String? get finishedat => (_$data['finishedat'] as String?);

  String? get finishedatNEQ => (_$data['finishedatNEQ'] as String?);

  List<String>? get finishedatIn => (_$data['finishedatIn'] as List<String>?);

  List<String>? get finishedatNotIn =>
      (_$data['finishedatNotIn'] as List<String>?);

  String? get finishedatGT => (_$data['finishedatGT'] as String?);

  String? get finishedatGTE => (_$data['finishedatGTE'] as String?);

  String? get finishedatLT => (_$data['finishedatLT'] as String?);

  String? get finishedatLTE => (_$data['finishedatLTE'] as String?);

  bool? get finishedatIsNil => (_$data['finishedatIsNil'] as bool?);

  bool? get finishedatNotNil => (_$data['finishedatNotNil'] as bool?);

  String? get createdat => (_$data['createdat'] as String?);

  String? get createdatNEQ => (_$data['createdatNEQ'] as String?);

  List<String>? get createdatIn => (_$data['createdatIn'] as List<String>?);

  List<String>? get createdatNotIn =>
      (_$data['createdatNotIn'] as List<String>?);

  String? get createdatGT => (_$data['createdatGT'] as String?);

  String? get createdatGTE => (_$data['createdatGTE'] as String?);

  String? get createdatLT => (_$data['createdatLT'] as String?);

  String? get createdatLTE => (_$data['createdatLTE'] as String?);

  String? get updatedat => (_$data['updatedat'] as String?);

  String? get updatedatNEQ => (_$data['updatedatNEQ'] as String?);

  List<String>? get updatedatIn => (_$data['updatedatIn'] as List<String>?);

  List<String>? get updatedatNotIn =>
      (_$data['updatedatNotIn'] as List<String>?);

  String? get updatedatGT => (_$data['updatedatGT'] as String?);

  String? get updatedatGTE => (_$data['updatedatGTE'] as String?);

  String? get updatedatLT => (_$data['updatedatLT'] as String?);

  String? get updatedatLTE => (_$data['updatedatLTE'] as String?);

  bool? get hasUser => (_$data['hasUser'] as bool?);

  List<Input$UserWhereInput>? get hasUserWith =>
      (_$data['hasUserWith'] as List<Input$UserWhereInput>?);

  bool? get hasCourse => (_$data['hasCourse'] as bool?);

  List<Input$CourseWhereInput>? get hasCourseWith =>
      (_$data['hasCourseWith'] as List<Input$CourseWhereInput>?);

  bool? get hasUnit => (_$data['hasUnit'] as bool?);

  List<Input$UnitWhereInput>? get hasUnitWith =>
      (_$data['hasUnitWith'] as List<Input$UnitWhereInput>?);

  bool? get hasLesson => (_$data['hasLesson'] as bool?);

  List<Input$LessonWhereInput>? get hasLessonWith =>
      (_$data['hasLessonWith'] as List<Input$LessonWhereInput>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('userID')) {
      final l$userID = userID;
      result$data['userID'] = l$userID;
    }
    if (_$data.containsKey('userIDNEQ')) {
      final l$userIDNEQ = userIDNEQ;
      result$data['userIDNEQ'] = l$userIDNEQ;
    }
    if (_$data.containsKey('userIDIn')) {
      final l$userIDIn = userIDIn;
      result$data['userIDIn'] = l$userIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('userIDNotIn')) {
      final l$userIDNotIn = userIDNotIn;
      result$data['userIDNotIn'] = l$userIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('courseID')) {
      final l$courseID = courseID;
      result$data['courseID'] = l$courseID;
    }
    if (_$data.containsKey('courseIDNEQ')) {
      final l$courseIDNEQ = courseIDNEQ;
      result$data['courseIDNEQ'] = l$courseIDNEQ;
    }
    if (_$data.containsKey('courseIDIn')) {
      final l$courseIDIn = courseIDIn;
      result$data['courseIDIn'] = l$courseIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('courseIDNotIn')) {
      final l$courseIDNotIn = courseIDNotIn;
      result$data['courseIDNotIn'] = l$courseIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('unitID')) {
      final l$unitID = unitID;
      result$data['unitID'] = l$unitID;
    }
    if (_$data.containsKey('unitIDNEQ')) {
      final l$unitIDNEQ = unitIDNEQ;
      result$data['unitIDNEQ'] = l$unitIDNEQ;
    }
    if (_$data.containsKey('unitIDIn')) {
      final l$unitIDIn = unitIDIn;
      result$data['unitIDIn'] = l$unitIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('unitIDNotIn')) {
      final l$unitIDNotIn = unitIDNotIn;
      result$data['unitIDNotIn'] = l$unitIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('lessonID')) {
      final l$lessonID = lessonID;
      result$data['lessonID'] = l$lessonID;
    }
    if (_$data.containsKey('lessonIDNEQ')) {
      final l$lessonIDNEQ = lessonIDNEQ;
      result$data['lessonIDNEQ'] = l$lessonIDNEQ;
    }
    if (_$data.containsKey('lessonIDIn')) {
      final l$lessonIDIn = lessonIDIn;
      result$data['lessonIDIn'] = l$lessonIDIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('lessonIDNotIn')) {
      final l$lessonIDNotIn = lessonIDNotIn;
      result$data['lessonIDNotIn'] = l$lessonIDNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('lessonType')) {
      final l$lessonType = lessonType;
      result$data['lessonType'] = l$lessonType == null
          ? null
          : toJson$Enum$UserProgressLessonType(l$lessonType);
    }
    if (_$data.containsKey('lessonTypeNEQ')) {
      final l$lessonTypeNEQ = lessonTypeNEQ;
      result$data['lessonTypeNEQ'] = l$lessonTypeNEQ == null
          ? null
          : toJson$Enum$UserProgressLessonType(l$lessonTypeNEQ);
    }
    if (_$data.containsKey('lessonTypeIn')) {
      final l$lessonTypeIn = lessonTypeIn;
      result$data['lessonTypeIn'] = l$lessonTypeIn
          ?.map((e) => toJson$Enum$UserProgressLessonType(e))
          .toList();
    }
    if (_$data.containsKey('lessonTypeNotIn')) {
      final l$lessonTypeNotIn = lessonTypeNotIn;
      result$data['lessonTypeNotIn'] = l$lessonTypeNotIn
          ?.map((e) => toJson$Enum$UserProgressLessonType(e))
          .toList();
    }
    if (_$data.containsKey('islast')) {
      final l$islast = islast;
      result$data['islast'] = l$islast;
    }
    if (_$data.containsKey('islastNEQ')) {
      final l$islastNEQ = islastNEQ;
      result$data['islastNEQ'] = l$islastNEQ;
    }
    if (_$data.containsKey('isnext')) {
      final l$isnext = isnext;
      result$data['isnext'] = l$isnext;
    }
    if (_$data.containsKey('isnextNEQ')) {
      final l$isnextNEQ = isnextNEQ;
      result$data['isnextNEQ'] = l$isnextNEQ;
    }
    if (_$data.containsKey('progress')) {
      final l$progress = progress;
      result$data['progress'] = l$progress;
    }
    if (_$data.containsKey('progressNEQ')) {
      final l$progressNEQ = progressNEQ;
      result$data['progressNEQ'] = l$progressNEQ;
    }
    if (_$data.containsKey('progressIn')) {
      final l$progressIn = progressIn;
      result$data['progressIn'] = l$progressIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('progressNotIn')) {
      final l$progressNotIn = progressNotIn;
      result$data['progressNotIn'] = l$progressNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('progressGT')) {
      final l$progressGT = progressGT;
      result$data['progressGT'] = l$progressGT;
    }
    if (_$data.containsKey('progressGTE')) {
      final l$progressGTE = progressGTE;
      result$data['progressGTE'] = l$progressGTE;
    }
    if (_$data.containsKey('progressLT')) {
      final l$progressLT = progressLT;
      result$data['progressLT'] = l$progressLT;
    }
    if (_$data.containsKey('progressLTE')) {
      final l$progressLTE = progressLTE;
      result$data['progressLTE'] = l$progressLTE;
    }
    if (_$data.containsKey('finishedat')) {
      final l$finishedat = finishedat;
      result$data['finishedat'] = l$finishedat;
    }
    if (_$data.containsKey('finishedatNEQ')) {
      final l$finishedatNEQ = finishedatNEQ;
      result$data['finishedatNEQ'] = l$finishedatNEQ;
    }
    if (_$data.containsKey('finishedatIn')) {
      final l$finishedatIn = finishedatIn;
      result$data['finishedatIn'] = l$finishedatIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('finishedatNotIn')) {
      final l$finishedatNotIn = finishedatNotIn;
      result$data['finishedatNotIn'] =
          l$finishedatNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('finishedatGT')) {
      final l$finishedatGT = finishedatGT;
      result$data['finishedatGT'] = l$finishedatGT;
    }
    if (_$data.containsKey('finishedatGTE')) {
      final l$finishedatGTE = finishedatGTE;
      result$data['finishedatGTE'] = l$finishedatGTE;
    }
    if (_$data.containsKey('finishedatLT')) {
      final l$finishedatLT = finishedatLT;
      result$data['finishedatLT'] = l$finishedatLT;
    }
    if (_$data.containsKey('finishedatLTE')) {
      final l$finishedatLTE = finishedatLTE;
      result$data['finishedatLTE'] = l$finishedatLTE;
    }
    if (_$data.containsKey('finishedatIsNil')) {
      final l$finishedatIsNil = finishedatIsNil;
      result$data['finishedatIsNil'] = l$finishedatIsNil;
    }
    if (_$data.containsKey('finishedatNotNil')) {
      final l$finishedatNotNil = finishedatNotNil;
      result$data['finishedatNotNil'] = l$finishedatNotNil;
    }
    if (_$data.containsKey('createdat')) {
      final l$createdat = createdat;
      result$data['createdat'] = l$createdat;
    }
    if (_$data.containsKey('createdatNEQ')) {
      final l$createdatNEQ = createdatNEQ;
      result$data['createdatNEQ'] = l$createdatNEQ;
    }
    if (_$data.containsKey('createdatIn')) {
      final l$createdatIn = createdatIn;
      result$data['createdatIn'] = l$createdatIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('createdatNotIn')) {
      final l$createdatNotIn = createdatNotIn;
      result$data['createdatNotIn'] = l$createdatNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('createdatGT')) {
      final l$createdatGT = createdatGT;
      result$data['createdatGT'] = l$createdatGT;
    }
    if (_$data.containsKey('createdatGTE')) {
      final l$createdatGTE = createdatGTE;
      result$data['createdatGTE'] = l$createdatGTE;
    }
    if (_$data.containsKey('createdatLT')) {
      final l$createdatLT = createdatLT;
      result$data['createdatLT'] = l$createdatLT;
    }
    if (_$data.containsKey('createdatLTE')) {
      final l$createdatLTE = createdatLTE;
      result$data['createdatLTE'] = l$createdatLTE;
    }
    if (_$data.containsKey('updatedat')) {
      final l$updatedat = updatedat;
      result$data['updatedat'] = l$updatedat;
    }
    if (_$data.containsKey('updatedatNEQ')) {
      final l$updatedatNEQ = updatedatNEQ;
      result$data['updatedatNEQ'] = l$updatedatNEQ;
    }
    if (_$data.containsKey('updatedatIn')) {
      final l$updatedatIn = updatedatIn;
      result$data['updatedatIn'] = l$updatedatIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('updatedatNotIn')) {
      final l$updatedatNotIn = updatedatNotIn;
      result$data['updatedatNotIn'] = l$updatedatNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('updatedatGT')) {
      final l$updatedatGT = updatedatGT;
      result$data['updatedatGT'] = l$updatedatGT;
    }
    if (_$data.containsKey('updatedatGTE')) {
      final l$updatedatGTE = updatedatGTE;
      result$data['updatedatGTE'] = l$updatedatGTE;
    }
    if (_$data.containsKey('updatedatLT')) {
      final l$updatedatLT = updatedatLT;
      result$data['updatedatLT'] = l$updatedatLT;
    }
    if (_$data.containsKey('updatedatLTE')) {
      final l$updatedatLTE = updatedatLTE;
      result$data['updatedatLTE'] = l$updatedatLTE;
    }
    if (_$data.containsKey('hasUser')) {
      final l$hasUser = hasUser;
      result$data['hasUser'] = l$hasUser;
    }
    if (_$data.containsKey('hasUserWith')) {
      final l$hasUserWith = hasUserWith;
      result$data['hasUserWith'] =
          l$hasUserWith?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('hasCourse')) {
      final l$hasCourse = hasCourse;
      result$data['hasCourse'] = l$hasCourse;
    }
    if (_$data.containsKey('hasCourseWith')) {
      final l$hasCourseWith = hasCourseWith;
      result$data['hasCourseWith'] =
          l$hasCourseWith?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('hasUnit')) {
      final l$hasUnit = hasUnit;
      result$data['hasUnit'] = l$hasUnit;
    }
    if (_$data.containsKey('hasUnitWith')) {
      final l$hasUnitWith = hasUnitWith;
      result$data['hasUnitWith'] =
          l$hasUnitWith?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('hasLesson')) {
      final l$hasLesson = hasLesson;
      result$data['hasLesson'] = l$hasLesson;
    }
    if (_$data.containsKey('hasLessonWith')) {
      final l$hasLessonWith = hasLessonWith;
      result$data['hasLessonWith'] =
          l$hasLessonWith?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$UserProgressWhereInput<Input$UserProgressWhereInput>
      get copyWith => CopyWith$Input$UserProgressWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$UserProgressWhereInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$userID = userID;
    final lOther$userID = other.userID;
    if (_$data.containsKey('userID') != other._$data.containsKey('userID')) {
      return false;
    }
    if (l$userID != lOther$userID) {
      return false;
    }
    final l$userIDNEQ = userIDNEQ;
    final lOther$userIDNEQ = other.userIDNEQ;
    if (_$data.containsKey('userIDNEQ') !=
        other._$data.containsKey('userIDNEQ')) {
      return false;
    }
    if (l$userIDNEQ != lOther$userIDNEQ) {
      return false;
    }
    final l$userIDIn = userIDIn;
    final lOther$userIDIn = other.userIDIn;
    if (_$data.containsKey('userIDIn') !=
        other._$data.containsKey('userIDIn')) {
      return false;
    }
    if (l$userIDIn != null && lOther$userIDIn != null) {
      if (l$userIDIn.length != lOther$userIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$userIDIn.length; i++) {
        final l$userIDIn$entry = l$userIDIn[i];
        final lOther$userIDIn$entry = lOther$userIDIn[i];
        if (l$userIDIn$entry != lOther$userIDIn$entry) {
          return false;
        }
      }
    } else if (l$userIDIn != lOther$userIDIn) {
      return false;
    }
    final l$userIDNotIn = userIDNotIn;
    final lOther$userIDNotIn = other.userIDNotIn;
    if (_$data.containsKey('userIDNotIn') !=
        other._$data.containsKey('userIDNotIn')) {
      return false;
    }
    if (l$userIDNotIn != null && lOther$userIDNotIn != null) {
      if (l$userIDNotIn.length != lOther$userIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$userIDNotIn.length; i++) {
        final l$userIDNotIn$entry = l$userIDNotIn[i];
        final lOther$userIDNotIn$entry = lOther$userIDNotIn[i];
        if (l$userIDNotIn$entry != lOther$userIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$userIDNotIn != lOther$userIDNotIn) {
      return false;
    }
    final l$courseID = courseID;
    final lOther$courseID = other.courseID;
    if (_$data.containsKey('courseID') !=
        other._$data.containsKey('courseID')) {
      return false;
    }
    if (l$courseID != lOther$courseID) {
      return false;
    }
    final l$courseIDNEQ = courseIDNEQ;
    final lOther$courseIDNEQ = other.courseIDNEQ;
    if (_$data.containsKey('courseIDNEQ') !=
        other._$data.containsKey('courseIDNEQ')) {
      return false;
    }
    if (l$courseIDNEQ != lOther$courseIDNEQ) {
      return false;
    }
    final l$courseIDIn = courseIDIn;
    final lOther$courseIDIn = other.courseIDIn;
    if (_$data.containsKey('courseIDIn') !=
        other._$data.containsKey('courseIDIn')) {
      return false;
    }
    if (l$courseIDIn != null && lOther$courseIDIn != null) {
      if (l$courseIDIn.length != lOther$courseIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$courseIDIn.length; i++) {
        final l$courseIDIn$entry = l$courseIDIn[i];
        final lOther$courseIDIn$entry = lOther$courseIDIn[i];
        if (l$courseIDIn$entry != lOther$courseIDIn$entry) {
          return false;
        }
      }
    } else if (l$courseIDIn != lOther$courseIDIn) {
      return false;
    }
    final l$courseIDNotIn = courseIDNotIn;
    final lOther$courseIDNotIn = other.courseIDNotIn;
    if (_$data.containsKey('courseIDNotIn') !=
        other._$data.containsKey('courseIDNotIn')) {
      return false;
    }
    if (l$courseIDNotIn != null && lOther$courseIDNotIn != null) {
      if (l$courseIDNotIn.length != lOther$courseIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$courseIDNotIn.length; i++) {
        final l$courseIDNotIn$entry = l$courseIDNotIn[i];
        final lOther$courseIDNotIn$entry = lOther$courseIDNotIn[i];
        if (l$courseIDNotIn$entry != lOther$courseIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$courseIDNotIn != lOther$courseIDNotIn) {
      return false;
    }
    final l$unitID = unitID;
    final lOther$unitID = other.unitID;
    if (_$data.containsKey('unitID') != other._$data.containsKey('unitID')) {
      return false;
    }
    if (l$unitID != lOther$unitID) {
      return false;
    }
    final l$unitIDNEQ = unitIDNEQ;
    final lOther$unitIDNEQ = other.unitIDNEQ;
    if (_$data.containsKey('unitIDNEQ') !=
        other._$data.containsKey('unitIDNEQ')) {
      return false;
    }
    if (l$unitIDNEQ != lOther$unitIDNEQ) {
      return false;
    }
    final l$unitIDIn = unitIDIn;
    final lOther$unitIDIn = other.unitIDIn;
    if (_$data.containsKey('unitIDIn') !=
        other._$data.containsKey('unitIDIn')) {
      return false;
    }
    if (l$unitIDIn != null && lOther$unitIDIn != null) {
      if (l$unitIDIn.length != lOther$unitIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$unitIDIn.length; i++) {
        final l$unitIDIn$entry = l$unitIDIn[i];
        final lOther$unitIDIn$entry = lOther$unitIDIn[i];
        if (l$unitIDIn$entry != lOther$unitIDIn$entry) {
          return false;
        }
      }
    } else if (l$unitIDIn != lOther$unitIDIn) {
      return false;
    }
    final l$unitIDNotIn = unitIDNotIn;
    final lOther$unitIDNotIn = other.unitIDNotIn;
    if (_$data.containsKey('unitIDNotIn') !=
        other._$data.containsKey('unitIDNotIn')) {
      return false;
    }
    if (l$unitIDNotIn != null && lOther$unitIDNotIn != null) {
      if (l$unitIDNotIn.length != lOther$unitIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$unitIDNotIn.length; i++) {
        final l$unitIDNotIn$entry = l$unitIDNotIn[i];
        final lOther$unitIDNotIn$entry = lOther$unitIDNotIn[i];
        if (l$unitIDNotIn$entry != lOther$unitIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$unitIDNotIn != lOther$unitIDNotIn) {
      return false;
    }
    final l$lessonID = lessonID;
    final lOther$lessonID = other.lessonID;
    if (_$data.containsKey('lessonID') !=
        other._$data.containsKey('lessonID')) {
      return false;
    }
    if (l$lessonID != lOther$lessonID) {
      return false;
    }
    final l$lessonIDNEQ = lessonIDNEQ;
    final lOther$lessonIDNEQ = other.lessonIDNEQ;
    if (_$data.containsKey('lessonIDNEQ') !=
        other._$data.containsKey('lessonIDNEQ')) {
      return false;
    }
    if (l$lessonIDNEQ != lOther$lessonIDNEQ) {
      return false;
    }
    final l$lessonIDIn = lessonIDIn;
    final lOther$lessonIDIn = other.lessonIDIn;
    if (_$data.containsKey('lessonIDIn') !=
        other._$data.containsKey('lessonIDIn')) {
      return false;
    }
    if (l$lessonIDIn != null && lOther$lessonIDIn != null) {
      if (l$lessonIDIn.length != lOther$lessonIDIn.length) {
        return false;
      }
      for (int i = 0; i < l$lessonIDIn.length; i++) {
        final l$lessonIDIn$entry = l$lessonIDIn[i];
        final lOther$lessonIDIn$entry = lOther$lessonIDIn[i];
        if (l$lessonIDIn$entry != lOther$lessonIDIn$entry) {
          return false;
        }
      }
    } else if (l$lessonIDIn != lOther$lessonIDIn) {
      return false;
    }
    final l$lessonIDNotIn = lessonIDNotIn;
    final lOther$lessonIDNotIn = other.lessonIDNotIn;
    if (_$data.containsKey('lessonIDNotIn') !=
        other._$data.containsKey('lessonIDNotIn')) {
      return false;
    }
    if (l$lessonIDNotIn != null && lOther$lessonIDNotIn != null) {
      if (l$lessonIDNotIn.length != lOther$lessonIDNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$lessonIDNotIn.length; i++) {
        final l$lessonIDNotIn$entry = l$lessonIDNotIn[i];
        final lOther$lessonIDNotIn$entry = lOther$lessonIDNotIn[i];
        if (l$lessonIDNotIn$entry != lOther$lessonIDNotIn$entry) {
          return false;
        }
      }
    } else if (l$lessonIDNotIn != lOther$lessonIDNotIn) {
      return false;
    }
    final l$lessonType = lessonType;
    final lOther$lessonType = other.lessonType;
    if (_$data.containsKey('lessonType') !=
        other._$data.containsKey('lessonType')) {
      return false;
    }
    if (l$lessonType != lOther$lessonType) {
      return false;
    }
    final l$lessonTypeNEQ = lessonTypeNEQ;
    final lOther$lessonTypeNEQ = other.lessonTypeNEQ;
    if (_$data.containsKey('lessonTypeNEQ') !=
        other._$data.containsKey('lessonTypeNEQ')) {
      return false;
    }
    if (l$lessonTypeNEQ != lOther$lessonTypeNEQ) {
      return false;
    }
    final l$lessonTypeIn = lessonTypeIn;
    final lOther$lessonTypeIn = other.lessonTypeIn;
    if (_$data.containsKey('lessonTypeIn') !=
        other._$data.containsKey('lessonTypeIn')) {
      return false;
    }
    if (l$lessonTypeIn != null && lOther$lessonTypeIn != null) {
      if (l$lessonTypeIn.length != lOther$lessonTypeIn.length) {
        return false;
      }
      for (int i = 0; i < l$lessonTypeIn.length; i++) {
        final l$lessonTypeIn$entry = l$lessonTypeIn[i];
        final lOther$lessonTypeIn$entry = lOther$lessonTypeIn[i];
        if (l$lessonTypeIn$entry != lOther$lessonTypeIn$entry) {
          return false;
        }
      }
    } else if (l$lessonTypeIn != lOther$lessonTypeIn) {
      return false;
    }
    final l$lessonTypeNotIn = lessonTypeNotIn;
    final lOther$lessonTypeNotIn = other.lessonTypeNotIn;
    if (_$data.containsKey('lessonTypeNotIn') !=
        other._$data.containsKey('lessonTypeNotIn')) {
      return false;
    }
    if (l$lessonTypeNotIn != null && lOther$lessonTypeNotIn != null) {
      if (l$lessonTypeNotIn.length != lOther$lessonTypeNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$lessonTypeNotIn.length; i++) {
        final l$lessonTypeNotIn$entry = l$lessonTypeNotIn[i];
        final lOther$lessonTypeNotIn$entry = lOther$lessonTypeNotIn[i];
        if (l$lessonTypeNotIn$entry != lOther$lessonTypeNotIn$entry) {
          return false;
        }
      }
    } else if (l$lessonTypeNotIn != lOther$lessonTypeNotIn) {
      return false;
    }
    final l$islast = islast;
    final lOther$islast = other.islast;
    if (_$data.containsKey('islast') != other._$data.containsKey('islast')) {
      return false;
    }
    if (l$islast != lOther$islast) {
      return false;
    }
    final l$islastNEQ = islastNEQ;
    final lOther$islastNEQ = other.islastNEQ;
    if (_$data.containsKey('islastNEQ') !=
        other._$data.containsKey('islastNEQ')) {
      return false;
    }
    if (l$islastNEQ != lOther$islastNEQ) {
      return false;
    }
    final l$isnext = isnext;
    final lOther$isnext = other.isnext;
    if (_$data.containsKey('isnext') != other._$data.containsKey('isnext')) {
      return false;
    }
    if (l$isnext != lOther$isnext) {
      return false;
    }
    final l$isnextNEQ = isnextNEQ;
    final lOther$isnextNEQ = other.isnextNEQ;
    if (_$data.containsKey('isnextNEQ') !=
        other._$data.containsKey('isnextNEQ')) {
      return false;
    }
    if (l$isnextNEQ != lOther$isnextNEQ) {
      return false;
    }
    final l$progress = progress;
    final lOther$progress = other.progress;
    if (_$data.containsKey('progress') !=
        other._$data.containsKey('progress')) {
      return false;
    }
    if (l$progress != lOther$progress) {
      return false;
    }
    final l$progressNEQ = progressNEQ;
    final lOther$progressNEQ = other.progressNEQ;
    if (_$data.containsKey('progressNEQ') !=
        other._$data.containsKey('progressNEQ')) {
      return false;
    }
    if (l$progressNEQ != lOther$progressNEQ) {
      return false;
    }
    final l$progressIn = progressIn;
    final lOther$progressIn = other.progressIn;
    if (_$data.containsKey('progressIn') !=
        other._$data.containsKey('progressIn')) {
      return false;
    }
    if (l$progressIn != null && lOther$progressIn != null) {
      if (l$progressIn.length != lOther$progressIn.length) {
        return false;
      }
      for (int i = 0; i < l$progressIn.length; i++) {
        final l$progressIn$entry = l$progressIn[i];
        final lOther$progressIn$entry = lOther$progressIn[i];
        if (l$progressIn$entry != lOther$progressIn$entry) {
          return false;
        }
      }
    } else if (l$progressIn != lOther$progressIn) {
      return false;
    }
    final l$progressNotIn = progressNotIn;
    final lOther$progressNotIn = other.progressNotIn;
    if (_$data.containsKey('progressNotIn') !=
        other._$data.containsKey('progressNotIn')) {
      return false;
    }
    if (l$progressNotIn != null && lOther$progressNotIn != null) {
      if (l$progressNotIn.length != lOther$progressNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$progressNotIn.length; i++) {
        final l$progressNotIn$entry = l$progressNotIn[i];
        final lOther$progressNotIn$entry = lOther$progressNotIn[i];
        if (l$progressNotIn$entry != lOther$progressNotIn$entry) {
          return false;
        }
      }
    } else if (l$progressNotIn != lOther$progressNotIn) {
      return false;
    }
    final l$progressGT = progressGT;
    final lOther$progressGT = other.progressGT;
    if (_$data.containsKey('progressGT') !=
        other._$data.containsKey('progressGT')) {
      return false;
    }
    if (l$progressGT != lOther$progressGT) {
      return false;
    }
    final l$progressGTE = progressGTE;
    final lOther$progressGTE = other.progressGTE;
    if (_$data.containsKey('progressGTE') !=
        other._$data.containsKey('progressGTE')) {
      return false;
    }
    if (l$progressGTE != lOther$progressGTE) {
      return false;
    }
    final l$progressLT = progressLT;
    final lOther$progressLT = other.progressLT;
    if (_$data.containsKey('progressLT') !=
        other._$data.containsKey('progressLT')) {
      return false;
    }
    if (l$progressLT != lOther$progressLT) {
      return false;
    }
    final l$progressLTE = progressLTE;
    final lOther$progressLTE = other.progressLTE;
    if (_$data.containsKey('progressLTE') !=
        other._$data.containsKey('progressLTE')) {
      return false;
    }
    if (l$progressLTE != lOther$progressLTE) {
      return false;
    }
    final l$finishedat = finishedat;
    final lOther$finishedat = other.finishedat;
    if (_$data.containsKey('finishedat') !=
        other._$data.containsKey('finishedat')) {
      return false;
    }
    if (l$finishedat != lOther$finishedat) {
      return false;
    }
    final l$finishedatNEQ = finishedatNEQ;
    final lOther$finishedatNEQ = other.finishedatNEQ;
    if (_$data.containsKey('finishedatNEQ') !=
        other._$data.containsKey('finishedatNEQ')) {
      return false;
    }
    if (l$finishedatNEQ != lOther$finishedatNEQ) {
      return false;
    }
    final l$finishedatIn = finishedatIn;
    final lOther$finishedatIn = other.finishedatIn;
    if (_$data.containsKey('finishedatIn') !=
        other._$data.containsKey('finishedatIn')) {
      return false;
    }
    if (l$finishedatIn != null && lOther$finishedatIn != null) {
      if (l$finishedatIn.length != lOther$finishedatIn.length) {
        return false;
      }
      for (int i = 0; i < l$finishedatIn.length; i++) {
        final l$finishedatIn$entry = l$finishedatIn[i];
        final lOther$finishedatIn$entry = lOther$finishedatIn[i];
        if (l$finishedatIn$entry != lOther$finishedatIn$entry) {
          return false;
        }
      }
    } else if (l$finishedatIn != lOther$finishedatIn) {
      return false;
    }
    final l$finishedatNotIn = finishedatNotIn;
    final lOther$finishedatNotIn = other.finishedatNotIn;
    if (_$data.containsKey('finishedatNotIn') !=
        other._$data.containsKey('finishedatNotIn')) {
      return false;
    }
    if (l$finishedatNotIn != null && lOther$finishedatNotIn != null) {
      if (l$finishedatNotIn.length != lOther$finishedatNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$finishedatNotIn.length; i++) {
        final l$finishedatNotIn$entry = l$finishedatNotIn[i];
        final lOther$finishedatNotIn$entry = lOther$finishedatNotIn[i];
        if (l$finishedatNotIn$entry != lOther$finishedatNotIn$entry) {
          return false;
        }
      }
    } else if (l$finishedatNotIn != lOther$finishedatNotIn) {
      return false;
    }
    final l$finishedatGT = finishedatGT;
    final lOther$finishedatGT = other.finishedatGT;
    if (_$data.containsKey('finishedatGT') !=
        other._$data.containsKey('finishedatGT')) {
      return false;
    }
    if (l$finishedatGT != lOther$finishedatGT) {
      return false;
    }
    final l$finishedatGTE = finishedatGTE;
    final lOther$finishedatGTE = other.finishedatGTE;
    if (_$data.containsKey('finishedatGTE') !=
        other._$data.containsKey('finishedatGTE')) {
      return false;
    }
    if (l$finishedatGTE != lOther$finishedatGTE) {
      return false;
    }
    final l$finishedatLT = finishedatLT;
    final lOther$finishedatLT = other.finishedatLT;
    if (_$data.containsKey('finishedatLT') !=
        other._$data.containsKey('finishedatLT')) {
      return false;
    }
    if (l$finishedatLT != lOther$finishedatLT) {
      return false;
    }
    final l$finishedatLTE = finishedatLTE;
    final lOther$finishedatLTE = other.finishedatLTE;
    if (_$data.containsKey('finishedatLTE') !=
        other._$data.containsKey('finishedatLTE')) {
      return false;
    }
    if (l$finishedatLTE != lOther$finishedatLTE) {
      return false;
    }
    final l$finishedatIsNil = finishedatIsNil;
    final lOther$finishedatIsNil = other.finishedatIsNil;
    if (_$data.containsKey('finishedatIsNil') !=
        other._$data.containsKey('finishedatIsNil')) {
      return false;
    }
    if (l$finishedatIsNil != lOther$finishedatIsNil) {
      return false;
    }
    final l$finishedatNotNil = finishedatNotNil;
    final lOther$finishedatNotNil = other.finishedatNotNil;
    if (_$data.containsKey('finishedatNotNil') !=
        other._$data.containsKey('finishedatNotNil')) {
      return false;
    }
    if (l$finishedatNotNil != lOther$finishedatNotNil) {
      return false;
    }
    final l$createdat = createdat;
    final lOther$createdat = other.createdat;
    if (_$data.containsKey('createdat') !=
        other._$data.containsKey('createdat')) {
      return false;
    }
    if (l$createdat != lOther$createdat) {
      return false;
    }
    final l$createdatNEQ = createdatNEQ;
    final lOther$createdatNEQ = other.createdatNEQ;
    if (_$data.containsKey('createdatNEQ') !=
        other._$data.containsKey('createdatNEQ')) {
      return false;
    }
    if (l$createdatNEQ != lOther$createdatNEQ) {
      return false;
    }
    final l$createdatIn = createdatIn;
    final lOther$createdatIn = other.createdatIn;
    if (_$data.containsKey('createdatIn') !=
        other._$data.containsKey('createdatIn')) {
      return false;
    }
    if (l$createdatIn != null && lOther$createdatIn != null) {
      if (l$createdatIn.length != lOther$createdatIn.length) {
        return false;
      }
      for (int i = 0; i < l$createdatIn.length; i++) {
        final l$createdatIn$entry = l$createdatIn[i];
        final lOther$createdatIn$entry = lOther$createdatIn[i];
        if (l$createdatIn$entry != lOther$createdatIn$entry) {
          return false;
        }
      }
    } else if (l$createdatIn != lOther$createdatIn) {
      return false;
    }
    final l$createdatNotIn = createdatNotIn;
    final lOther$createdatNotIn = other.createdatNotIn;
    if (_$data.containsKey('createdatNotIn') !=
        other._$data.containsKey('createdatNotIn')) {
      return false;
    }
    if (l$createdatNotIn != null && lOther$createdatNotIn != null) {
      if (l$createdatNotIn.length != lOther$createdatNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$createdatNotIn.length; i++) {
        final l$createdatNotIn$entry = l$createdatNotIn[i];
        final lOther$createdatNotIn$entry = lOther$createdatNotIn[i];
        if (l$createdatNotIn$entry != lOther$createdatNotIn$entry) {
          return false;
        }
      }
    } else if (l$createdatNotIn != lOther$createdatNotIn) {
      return false;
    }
    final l$createdatGT = createdatGT;
    final lOther$createdatGT = other.createdatGT;
    if (_$data.containsKey('createdatGT') !=
        other._$data.containsKey('createdatGT')) {
      return false;
    }
    if (l$createdatGT != lOther$createdatGT) {
      return false;
    }
    final l$createdatGTE = createdatGTE;
    final lOther$createdatGTE = other.createdatGTE;
    if (_$data.containsKey('createdatGTE') !=
        other._$data.containsKey('createdatGTE')) {
      return false;
    }
    if (l$createdatGTE != lOther$createdatGTE) {
      return false;
    }
    final l$createdatLT = createdatLT;
    final lOther$createdatLT = other.createdatLT;
    if (_$data.containsKey('createdatLT') !=
        other._$data.containsKey('createdatLT')) {
      return false;
    }
    if (l$createdatLT != lOther$createdatLT) {
      return false;
    }
    final l$createdatLTE = createdatLTE;
    final lOther$createdatLTE = other.createdatLTE;
    if (_$data.containsKey('createdatLTE') !=
        other._$data.containsKey('createdatLTE')) {
      return false;
    }
    if (l$createdatLTE != lOther$createdatLTE) {
      return false;
    }
    final l$updatedat = updatedat;
    final lOther$updatedat = other.updatedat;
    if (_$data.containsKey('updatedat') !=
        other._$data.containsKey('updatedat')) {
      return false;
    }
    if (l$updatedat != lOther$updatedat) {
      return false;
    }
    final l$updatedatNEQ = updatedatNEQ;
    final lOther$updatedatNEQ = other.updatedatNEQ;
    if (_$data.containsKey('updatedatNEQ') !=
        other._$data.containsKey('updatedatNEQ')) {
      return false;
    }
    if (l$updatedatNEQ != lOther$updatedatNEQ) {
      return false;
    }
    final l$updatedatIn = updatedatIn;
    final lOther$updatedatIn = other.updatedatIn;
    if (_$data.containsKey('updatedatIn') !=
        other._$data.containsKey('updatedatIn')) {
      return false;
    }
    if (l$updatedatIn != null && lOther$updatedatIn != null) {
      if (l$updatedatIn.length != lOther$updatedatIn.length) {
        return false;
      }
      for (int i = 0; i < l$updatedatIn.length; i++) {
        final l$updatedatIn$entry = l$updatedatIn[i];
        final lOther$updatedatIn$entry = lOther$updatedatIn[i];
        if (l$updatedatIn$entry != lOther$updatedatIn$entry) {
          return false;
        }
      }
    } else if (l$updatedatIn != lOther$updatedatIn) {
      return false;
    }
    final l$updatedatNotIn = updatedatNotIn;
    final lOther$updatedatNotIn = other.updatedatNotIn;
    if (_$data.containsKey('updatedatNotIn') !=
        other._$data.containsKey('updatedatNotIn')) {
      return false;
    }
    if (l$updatedatNotIn != null && lOther$updatedatNotIn != null) {
      if (l$updatedatNotIn.length != lOther$updatedatNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$updatedatNotIn.length; i++) {
        final l$updatedatNotIn$entry = l$updatedatNotIn[i];
        final lOther$updatedatNotIn$entry = lOther$updatedatNotIn[i];
        if (l$updatedatNotIn$entry != lOther$updatedatNotIn$entry) {
          return false;
        }
      }
    } else if (l$updatedatNotIn != lOther$updatedatNotIn) {
      return false;
    }
    final l$updatedatGT = updatedatGT;
    final lOther$updatedatGT = other.updatedatGT;
    if (_$data.containsKey('updatedatGT') !=
        other._$data.containsKey('updatedatGT')) {
      return false;
    }
    if (l$updatedatGT != lOther$updatedatGT) {
      return false;
    }
    final l$updatedatGTE = updatedatGTE;
    final lOther$updatedatGTE = other.updatedatGTE;
    if (_$data.containsKey('updatedatGTE') !=
        other._$data.containsKey('updatedatGTE')) {
      return false;
    }
    if (l$updatedatGTE != lOther$updatedatGTE) {
      return false;
    }
    final l$updatedatLT = updatedatLT;
    final lOther$updatedatLT = other.updatedatLT;
    if (_$data.containsKey('updatedatLT') !=
        other._$data.containsKey('updatedatLT')) {
      return false;
    }
    if (l$updatedatLT != lOther$updatedatLT) {
      return false;
    }
    final l$updatedatLTE = updatedatLTE;
    final lOther$updatedatLTE = other.updatedatLTE;
    if (_$data.containsKey('updatedatLTE') !=
        other._$data.containsKey('updatedatLTE')) {
      return false;
    }
    if (l$updatedatLTE != lOther$updatedatLTE) {
      return false;
    }
    final l$hasUser = hasUser;
    final lOther$hasUser = other.hasUser;
    if (_$data.containsKey('hasUser') != other._$data.containsKey('hasUser')) {
      return false;
    }
    if (l$hasUser != lOther$hasUser) {
      return false;
    }
    final l$hasUserWith = hasUserWith;
    final lOther$hasUserWith = other.hasUserWith;
    if (_$data.containsKey('hasUserWith') !=
        other._$data.containsKey('hasUserWith')) {
      return false;
    }
    if (l$hasUserWith != null && lOther$hasUserWith != null) {
      if (l$hasUserWith.length != lOther$hasUserWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasUserWith.length; i++) {
        final l$hasUserWith$entry = l$hasUserWith[i];
        final lOther$hasUserWith$entry = lOther$hasUserWith[i];
        if (l$hasUserWith$entry != lOther$hasUserWith$entry) {
          return false;
        }
      }
    } else if (l$hasUserWith != lOther$hasUserWith) {
      return false;
    }
    final l$hasCourse = hasCourse;
    final lOther$hasCourse = other.hasCourse;
    if (_$data.containsKey('hasCourse') !=
        other._$data.containsKey('hasCourse')) {
      return false;
    }
    if (l$hasCourse != lOther$hasCourse) {
      return false;
    }
    final l$hasCourseWith = hasCourseWith;
    final lOther$hasCourseWith = other.hasCourseWith;
    if (_$data.containsKey('hasCourseWith') !=
        other._$data.containsKey('hasCourseWith')) {
      return false;
    }
    if (l$hasCourseWith != null && lOther$hasCourseWith != null) {
      if (l$hasCourseWith.length != lOther$hasCourseWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasCourseWith.length; i++) {
        final l$hasCourseWith$entry = l$hasCourseWith[i];
        final lOther$hasCourseWith$entry = lOther$hasCourseWith[i];
        if (l$hasCourseWith$entry != lOther$hasCourseWith$entry) {
          return false;
        }
      }
    } else if (l$hasCourseWith != lOther$hasCourseWith) {
      return false;
    }
    final l$hasUnit = hasUnit;
    final lOther$hasUnit = other.hasUnit;
    if (_$data.containsKey('hasUnit') != other._$data.containsKey('hasUnit')) {
      return false;
    }
    if (l$hasUnit != lOther$hasUnit) {
      return false;
    }
    final l$hasUnitWith = hasUnitWith;
    final lOther$hasUnitWith = other.hasUnitWith;
    if (_$data.containsKey('hasUnitWith') !=
        other._$data.containsKey('hasUnitWith')) {
      return false;
    }
    if (l$hasUnitWith != null && lOther$hasUnitWith != null) {
      if (l$hasUnitWith.length != lOther$hasUnitWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasUnitWith.length; i++) {
        final l$hasUnitWith$entry = l$hasUnitWith[i];
        final lOther$hasUnitWith$entry = lOther$hasUnitWith[i];
        if (l$hasUnitWith$entry != lOther$hasUnitWith$entry) {
          return false;
        }
      }
    } else if (l$hasUnitWith != lOther$hasUnitWith) {
      return false;
    }
    final l$hasLesson = hasLesson;
    final lOther$hasLesson = other.hasLesson;
    if (_$data.containsKey('hasLesson') !=
        other._$data.containsKey('hasLesson')) {
      return false;
    }
    if (l$hasLesson != lOther$hasLesson) {
      return false;
    }
    final l$hasLessonWith = hasLessonWith;
    final lOther$hasLessonWith = other.hasLessonWith;
    if (_$data.containsKey('hasLessonWith') !=
        other._$data.containsKey('hasLessonWith')) {
      return false;
    }
    if (l$hasLessonWith != null && lOther$hasLessonWith != null) {
      if (l$hasLessonWith.length != lOther$hasLessonWith.length) {
        return false;
      }
      for (int i = 0; i < l$hasLessonWith.length; i++) {
        final l$hasLessonWith$entry = l$hasLessonWith[i];
        final lOther$hasLessonWith$entry = lOther$hasLessonWith[i];
        if (l$hasLessonWith$entry != lOther$hasLessonWith$entry) {
          return false;
        }
      }
    } else if (l$hasLessonWith != lOther$hasLessonWith) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$userID = userID;
    final l$userIDNEQ = userIDNEQ;
    final l$userIDIn = userIDIn;
    final l$userIDNotIn = userIDNotIn;
    final l$courseID = courseID;
    final l$courseIDNEQ = courseIDNEQ;
    final l$courseIDIn = courseIDIn;
    final l$courseIDNotIn = courseIDNotIn;
    final l$unitID = unitID;
    final l$unitIDNEQ = unitIDNEQ;
    final l$unitIDIn = unitIDIn;
    final l$unitIDNotIn = unitIDNotIn;
    final l$lessonID = lessonID;
    final l$lessonIDNEQ = lessonIDNEQ;
    final l$lessonIDIn = lessonIDIn;
    final l$lessonIDNotIn = lessonIDNotIn;
    final l$lessonType = lessonType;
    final l$lessonTypeNEQ = lessonTypeNEQ;
    final l$lessonTypeIn = lessonTypeIn;
    final l$lessonTypeNotIn = lessonTypeNotIn;
    final l$islast = islast;
    final l$islastNEQ = islastNEQ;
    final l$isnext = isnext;
    final l$isnextNEQ = isnextNEQ;
    final l$progress = progress;
    final l$progressNEQ = progressNEQ;
    final l$progressIn = progressIn;
    final l$progressNotIn = progressNotIn;
    final l$progressGT = progressGT;
    final l$progressGTE = progressGTE;
    final l$progressLT = progressLT;
    final l$progressLTE = progressLTE;
    final l$finishedat = finishedat;
    final l$finishedatNEQ = finishedatNEQ;
    final l$finishedatIn = finishedatIn;
    final l$finishedatNotIn = finishedatNotIn;
    final l$finishedatGT = finishedatGT;
    final l$finishedatGTE = finishedatGTE;
    final l$finishedatLT = finishedatLT;
    final l$finishedatLTE = finishedatLTE;
    final l$finishedatIsNil = finishedatIsNil;
    final l$finishedatNotNil = finishedatNotNil;
    final l$createdat = createdat;
    final l$createdatNEQ = createdatNEQ;
    final l$createdatIn = createdatIn;
    final l$createdatNotIn = createdatNotIn;
    final l$createdatGT = createdatGT;
    final l$createdatGTE = createdatGTE;
    final l$createdatLT = createdatLT;
    final l$createdatLTE = createdatLTE;
    final l$updatedat = updatedat;
    final l$updatedatNEQ = updatedatNEQ;
    final l$updatedatIn = updatedatIn;
    final l$updatedatNotIn = updatedatNotIn;
    final l$updatedatGT = updatedatGT;
    final l$updatedatGTE = updatedatGTE;
    final l$updatedatLT = updatedatLT;
    final l$updatedatLTE = updatedatLTE;
    final l$hasUser = hasUser;
    final l$hasUserWith = hasUserWith;
    final l$hasCourse = hasCourse;
    final l$hasCourseWith = hasCourseWith;
    final l$hasUnit = hasUnit;
    final l$hasUnitWith = hasUnitWith;
    final l$hasLesson = hasLesson;
    final l$hasLessonWith = hasLessonWith;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('userID') ? l$userID : const {},
      _$data.containsKey('userIDNEQ') ? l$userIDNEQ : const {},
      _$data.containsKey('userIDIn')
          ? l$userIDIn == null
              ? null
              : Object.hashAll(l$userIDIn.map((v) => v))
          : const {},
      _$data.containsKey('userIDNotIn')
          ? l$userIDNotIn == null
              ? null
              : Object.hashAll(l$userIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('courseID') ? l$courseID : const {},
      _$data.containsKey('courseIDNEQ') ? l$courseIDNEQ : const {},
      _$data.containsKey('courseIDIn')
          ? l$courseIDIn == null
              ? null
              : Object.hashAll(l$courseIDIn.map((v) => v))
          : const {},
      _$data.containsKey('courseIDNotIn')
          ? l$courseIDNotIn == null
              ? null
              : Object.hashAll(l$courseIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('unitID') ? l$unitID : const {},
      _$data.containsKey('unitIDNEQ') ? l$unitIDNEQ : const {},
      _$data.containsKey('unitIDIn')
          ? l$unitIDIn == null
              ? null
              : Object.hashAll(l$unitIDIn.map((v) => v))
          : const {},
      _$data.containsKey('unitIDNotIn')
          ? l$unitIDNotIn == null
              ? null
              : Object.hashAll(l$unitIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('lessonID') ? l$lessonID : const {},
      _$data.containsKey('lessonIDNEQ') ? l$lessonIDNEQ : const {},
      _$data.containsKey('lessonIDIn')
          ? l$lessonIDIn == null
              ? null
              : Object.hashAll(l$lessonIDIn.map((v) => v))
          : const {},
      _$data.containsKey('lessonIDNotIn')
          ? l$lessonIDNotIn == null
              ? null
              : Object.hashAll(l$lessonIDNotIn.map((v) => v))
          : const {},
      _$data.containsKey('lessonType') ? l$lessonType : const {},
      _$data.containsKey('lessonTypeNEQ') ? l$lessonTypeNEQ : const {},
      _$data.containsKey('lessonTypeIn')
          ? l$lessonTypeIn == null
              ? null
              : Object.hashAll(l$lessonTypeIn.map((v) => v))
          : const {},
      _$data.containsKey('lessonTypeNotIn')
          ? l$lessonTypeNotIn == null
              ? null
              : Object.hashAll(l$lessonTypeNotIn.map((v) => v))
          : const {},
      _$data.containsKey('islast') ? l$islast : const {},
      _$data.containsKey('islastNEQ') ? l$islastNEQ : const {},
      _$data.containsKey('isnext') ? l$isnext : const {},
      _$data.containsKey('isnextNEQ') ? l$isnextNEQ : const {},
      _$data.containsKey('progress') ? l$progress : const {},
      _$data.containsKey('progressNEQ') ? l$progressNEQ : const {},
      _$data.containsKey('progressIn')
          ? l$progressIn == null
              ? null
              : Object.hashAll(l$progressIn.map((v) => v))
          : const {},
      _$data.containsKey('progressNotIn')
          ? l$progressNotIn == null
              ? null
              : Object.hashAll(l$progressNotIn.map((v) => v))
          : const {},
      _$data.containsKey('progressGT') ? l$progressGT : const {},
      _$data.containsKey('progressGTE') ? l$progressGTE : const {},
      _$data.containsKey('progressLT') ? l$progressLT : const {},
      _$data.containsKey('progressLTE') ? l$progressLTE : const {},
      _$data.containsKey('finishedat') ? l$finishedat : const {},
      _$data.containsKey('finishedatNEQ') ? l$finishedatNEQ : const {},
      _$data.containsKey('finishedatIn')
          ? l$finishedatIn == null
              ? null
              : Object.hashAll(l$finishedatIn.map((v) => v))
          : const {},
      _$data.containsKey('finishedatNotIn')
          ? l$finishedatNotIn == null
              ? null
              : Object.hashAll(l$finishedatNotIn.map((v) => v))
          : const {},
      _$data.containsKey('finishedatGT') ? l$finishedatGT : const {},
      _$data.containsKey('finishedatGTE') ? l$finishedatGTE : const {},
      _$data.containsKey('finishedatLT') ? l$finishedatLT : const {},
      _$data.containsKey('finishedatLTE') ? l$finishedatLTE : const {},
      _$data.containsKey('finishedatIsNil') ? l$finishedatIsNil : const {},
      _$data.containsKey('finishedatNotNil') ? l$finishedatNotNil : const {},
      _$data.containsKey('createdat') ? l$createdat : const {},
      _$data.containsKey('createdatNEQ') ? l$createdatNEQ : const {},
      _$data.containsKey('createdatIn')
          ? l$createdatIn == null
              ? null
              : Object.hashAll(l$createdatIn.map((v) => v))
          : const {},
      _$data.containsKey('createdatNotIn')
          ? l$createdatNotIn == null
              ? null
              : Object.hashAll(l$createdatNotIn.map((v) => v))
          : const {},
      _$data.containsKey('createdatGT') ? l$createdatGT : const {},
      _$data.containsKey('createdatGTE') ? l$createdatGTE : const {},
      _$data.containsKey('createdatLT') ? l$createdatLT : const {},
      _$data.containsKey('createdatLTE') ? l$createdatLTE : const {},
      _$data.containsKey('updatedat') ? l$updatedat : const {},
      _$data.containsKey('updatedatNEQ') ? l$updatedatNEQ : const {},
      _$data.containsKey('updatedatIn')
          ? l$updatedatIn == null
              ? null
              : Object.hashAll(l$updatedatIn.map((v) => v))
          : const {},
      _$data.containsKey('updatedatNotIn')
          ? l$updatedatNotIn == null
              ? null
              : Object.hashAll(l$updatedatNotIn.map((v) => v))
          : const {},
      _$data.containsKey('updatedatGT') ? l$updatedatGT : const {},
      _$data.containsKey('updatedatGTE') ? l$updatedatGTE : const {},
      _$data.containsKey('updatedatLT') ? l$updatedatLT : const {},
      _$data.containsKey('updatedatLTE') ? l$updatedatLTE : const {},
      _$data.containsKey('hasUser') ? l$hasUser : const {},
      _$data.containsKey('hasUserWith')
          ? l$hasUserWith == null
              ? null
              : Object.hashAll(l$hasUserWith.map((v) => v))
          : const {},
      _$data.containsKey('hasCourse') ? l$hasCourse : const {},
      _$data.containsKey('hasCourseWith')
          ? l$hasCourseWith == null
              ? null
              : Object.hashAll(l$hasCourseWith.map((v) => v))
          : const {},
      _$data.containsKey('hasUnit') ? l$hasUnit : const {},
      _$data.containsKey('hasUnitWith')
          ? l$hasUnitWith == null
              ? null
              : Object.hashAll(l$hasUnitWith.map((v) => v))
          : const {},
      _$data.containsKey('hasLesson') ? l$hasLesson : const {},
      _$data.containsKey('hasLessonWith')
          ? l$hasLessonWith == null
              ? null
              : Object.hashAll(l$hasLessonWith.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$UserProgressWhereInput<TRes> {
  factory CopyWith$Input$UserProgressWhereInput(
    Input$UserProgressWhereInput instance,
    TRes Function(Input$UserProgressWhereInput) then,
  ) = _CopyWithImpl$Input$UserProgressWhereInput;

  factory CopyWith$Input$UserProgressWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$UserProgressWhereInput;

  TRes call({
    Input$UserProgressWhereInput? not,
    List<Input$UserProgressWhereInput>? and,
    List<Input$UserProgressWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? userID,
    String? userIDNEQ,
    List<String>? userIDIn,
    List<String>? userIDNotIn,
    String? courseID,
    String? courseIDNEQ,
    List<String>? courseIDIn,
    List<String>? courseIDNotIn,
    String? unitID,
    String? unitIDNEQ,
    List<String>? unitIDIn,
    List<String>? unitIDNotIn,
    String? lessonID,
    String? lessonIDNEQ,
    List<String>? lessonIDIn,
    List<String>? lessonIDNotIn,
    Enum$UserProgressLessonType? lessonType,
    Enum$UserProgressLessonType? lessonTypeNEQ,
    List<Enum$UserProgressLessonType>? lessonTypeIn,
    List<Enum$UserProgressLessonType>? lessonTypeNotIn,
    bool? islast,
    bool? islastNEQ,
    bool? isnext,
    bool? isnextNEQ,
    int? progress,
    int? progressNEQ,
    List<int>? progressIn,
    List<int>? progressNotIn,
    int? progressGT,
    int? progressGTE,
    int? progressLT,
    int? progressLTE,
    String? finishedat,
    String? finishedatNEQ,
    List<String>? finishedatIn,
    List<String>? finishedatNotIn,
    String? finishedatGT,
    String? finishedatGTE,
    String? finishedatLT,
    String? finishedatLTE,
    bool? finishedatIsNil,
    bool? finishedatNotNil,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    bool? hasUser,
    List<Input$UserWhereInput>? hasUserWith,
    bool? hasCourse,
    List<Input$CourseWhereInput>? hasCourseWith,
    bool? hasUnit,
    List<Input$UnitWhereInput>? hasUnitWith,
    bool? hasLesson,
    List<Input$LessonWhereInput>? hasLessonWith,
  });
  CopyWith$Input$UserProgressWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$UserProgressWhereInput>? Function(
              Iterable<
                  CopyWith$Input$UserProgressWhereInput<
                      Input$UserProgressWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$UserProgressWhereInput>? Function(
              Iterable<
                  CopyWith$Input$UserProgressWhereInput<
                      Input$UserProgressWhereInput>>?)
          _fn);
  TRes hasUserWith(
      Iterable<Input$UserWhereInput>? Function(
              Iterable<CopyWith$Input$UserWhereInput<Input$UserWhereInput>>?)
          _fn);
  TRes hasCourseWith(
      Iterable<Input$CourseWhereInput>? Function(
              Iterable<
                  CopyWith$Input$CourseWhereInput<Input$CourseWhereInput>>?)
          _fn);
  TRes hasUnitWith(
      Iterable<Input$UnitWhereInput>? Function(
              Iterable<CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
          _fn);
  TRes hasLessonWith(
      Iterable<Input$LessonWhereInput>? Function(
              Iterable<
                  CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$UserProgressWhereInput<TRes>
    implements CopyWith$Input$UserProgressWhereInput<TRes> {
  _CopyWithImpl$Input$UserProgressWhereInput(
    this._instance,
    this._then,
  );

  final Input$UserProgressWhereInput _instance;

  final TRes Function(Input$UserProgressWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? userID = _undefined,
    Object? userIDNEQ = _undefined,
    Object? userIDIn = _undefined,
    Object? userIDNotIn = _undefined,
    Object? courseID = _undefined,
    Object? courseIDNEQ = _undefined,
    Object? courseIDIn = _undefined,
    Object? courseIDNotIn = _undefined,
    Object? unitID = _undefined,
    Object? unitIDNEQ = _undefined,
    Object? unitIDIn = _undefined,
    Object? unitIDNotIn = _undefined,
    Object? lessonID = _undefined,
    Object? lessonIDNEQ = _undefined,
    Object? lessonIDIn = _undefined,
    Object? lessonIDNotIn = _undefined,
    Object? lessonType = _undefined,
    Object? lessonTypeNEQ = _undefined,
    Object? lessonTypeIn = _undefined,
    Object? lessonTypeNotIn = _undefined,
    Object? islast = _undefined,
    Object? islastNEQ = _undefined,
    Object? isnext = _undefined,
    Object? isnextNEQ = _undefined,
    Object? progress = _undefined,
    Object? progressNEQ = _undefined,
    Object? progressIn = _undefined,
    Object? progressNotIn = _undefined,
    Object? progressGT = _undefined,
    Object? progressGTE = _undefined,
    Object? progressLT = _undefined,
    Object? progressLTE = _undefined,
    Object? finishedat = _undefined,
    Object? finishedatNEQ = _undefined,
    Object? finishedatIn = _undefined,
    Object? finishedatNotIn = _undefined,
    Object? finishedatGT = _undefined,
    Object? finishedatGTE = _undefined,
    Object? finishedatLT = _undefined,
    Object? finishedatLTE = _undefined,
    Object? finishedatIsNil = _undefined,
    Object? finishedatNotNil = _undefined,
    Object? createdat = _undefined,
    Object? createdatNEQ = _undefined,
    Object? createdatIn = _undefined,
    Object? createdatNotIn = _undefined,
    Object? createdatGT = _undefined,
    Object? createdatGTE = _undefined,
    Object? createdatLT = _undefined,
    Object? createdatLTE = _undefined,
    Object? updatedat = _undefined,
    Object? updatedatNEQ = _undefined,
    Object? updatedatIn = _undefined,
    Object? updatedatNotIn = _undefined,
    Object? updatedatGT = _undefined,
    Object? updatedatGTE = _undefined,
    Object? updatedatLT = _undefined,
    Object? updatedatLTE = _undefined,
    Object? hasUser = _undefined,
    Object? hasUserWith = _undefined,
    Object? hasCourse = _undefined,
    Object? hasCourseWith = _undefined,
    Object? hasUnit = _undefined,
    Object? hasUnitWith = _undefined,
    Object? hasLesson = _undefined,
    Object? hasLessonWith = _undefined,
  }) =>
      _then(Input$UserProgressWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$UserProgressWhereInput?),
        if (and != _undefined)
          'and': (and as List<Input$UserProgressWhereInput>?),
        if (or != _undefined) 'or': (or as List<Input$UserProgressWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (userID != _undefined) 'userID': (userID as String?),
        if (userIDNEQ != _undefined) 'userIDNEQ': (userIDNEQ as String?),
        if (userIDIn != _undefined) 'userIDIn': (userIDIn as List<String>?),
        if (userIDNotIn != _undefined)
          'userIDNotIn': (userIDNotIn as List<String>?),
        if (courseID != _undefined) 'courseID': (courseID as String?),
        if (courseIDNEQ != _undefined) 'courseIDNEQ': (courseIDNEQ as String?),
        if (courseIDIn != _undefined)
          'courseIDIn': (courseIDIn as List<String>?),
        if (courseIDNotIn != _undefined)
          'courseIDNotIn': (courseIDNotIn as List<String>?),
        if (unitID != _undefined) 'unitID': (unitID as String?),
        if (unitIDNEQ != _undefined) 'unitIDNEQ': (unitIDNEQ as String?),
        if (unitIDIn != _undefined) 'unitIDIn': (unitIDIn as List<String>?),
        if (unitIDNotIn != _undefined)
          'unitIDNotIn': (unitIDNotIn as List<String>?),
        if (lessonID != _undefined) 'lessonID': (lessonID as String?),
        if (lessonIDNEQ != _undefined) 'lessonIDNEQ': (lessonIDNEQ as String?),
        if (lessonIDIn != _undefined)
          'lessonIDIn': (lessonIDIn as List<String>?),
        if (lessonIDNotIn != _undefined)
          'lessonIDNotIn': (lessonIDNotIn as List<String>?),
        if (lessonType != _undefined)
          'lessonType': (lessonType as Enum$UserProgressLessonType?),
        if (lessonTypeNEQ != _undefined)
          'lessonTypeNEQ': (lessonTypeNEQ as Enum$UserProgressLessonType?),
        if (lessonTypeIn != _undefined)
          'lessonTypeIn': (lessonTypeIn as List<Enum$UserProgressLessonType>?),
        if (lessonTypeNotIn != _undefined)
          'lessonTypeNotIn':
              (lessonTypeNotIn as List<Enum$UserProgressLessonType>?),
        if (islast != _undefined) 'islast': (islast as bool?),
        if (islastNEQ != _undefined) 'islastNEQ': (islastNEQ as bool?),
        if (isnext != _undefined) 'isnext': (isnext as bool?),
        if (isnextNEQ != _undefined) 'isnextNEQ': (isnextNEQ as bool?),
        if (progress != _undefined) 'progress': (progress as int?),
        if (progressNEQ != _undefined) 'progressNEQ': (progressNEQ as int?),
        if (progressIn != _undefined) 'progressIn': (progressIn as List<int>?),
        if (progressNotIn != _undefined)
          'progressNotIn': (progressNotIn as List<int>?),
        if (progressGT != _undefined) 'progressGT': (progressGT as int?),
        if (progressGTE != _undefined) 'progressGTE': (progressGTE as int?),
        if (progressLT != _undefined) 'progressLT': (progressLT as int?),
        if (progressLTE != _undefined) 'progressLTE': (progressLTE as int?),
        if (finishedat != _undefined) 'finishedat': (finishedat as String?),
        if (finishedatNEQ != _undefined)
          'finishedatNEQ': (finishedatNEQ as String?),
        if (finishedatIn != _undefined)
          'finishedatIn': (finishedatIn as List<String>?),
        if (finishedatNotIn != _undefined)
          'finishedatNotIn': (finishedatNotIn as List<String>?),
        if (finishedatGT != _undefined)
          'finishedatGT': (finishedatGT as String?),
        if (finishedatGTE != _undefined)
          'finishedatGTE': (finishedatGTE as String?),
        if (finishedatLT != _undefined)
          'finishedatLT': (finishedatLT as String?),
        if (finishedatLTE != _undefined)
          'finishedatLTE': (finishedatLTE as String?),
        if (finishedatIsNil != _undefined)
          'finishedatIsNil': (finishedatIsNil as bool?),
        if (finishedatNotNil != _undefined)
          'finishedatNotNil': (finishedatNotNil as bool?),
        if (createdat != _undefined) 'createdat': (createdat as String?),
        if (createdatNEQ != _undefined)
          'createdatNEQ': (createdatNEQ as String?),
        if (createdatIn != _undefined)
          'createdatIn': (createdatIn as List<String>?),
        if (createdatNotIn != _undefined)
          'createdatNotIn': (createdatNotIn as List<String>?),
        if (createdatGT != _undefined) 'createdatGT': (createdatGT as String?),
        if (createdatGTE != _undefined)
          'createdatGTE': (createdatGTE as String?),
        if (createdatLT != _undefined) 'createdatLT': (createdatLT as String?),
        if (createdatLTE != _undefined)
          'createdatLTE': (createdatLTE as String?),
        if (updatedat != _undefined) 'updatedat': (updatedat as String?),
        if (updatedatNEQ != _undefined)
          'updatedatNEQ': (updatedatNEQ as String?),
        if (updatedatIn != _undefined)
          'updatedatIn': (updatedatIn as List<String>?),
        if (updatedatNotIn != _undefined)
          'updatedatNotIn': (updatedatNotIn as List<String>?),
        if (updatedatGT != _undefined) 'updatedatGT': (updatedatGT as String?),
        if (updatedatGTE != _undefined)
          'updatedatGTE': (updatedatGTE as String?),
        if (updatedatLT != _undefined) 'updatedatLT': (updatedatLT as String?),
        if (updatedatLTE != _undefined)
          'updatedatLTE': (updatedatLTE as String?),
        if (hasUser != _undefined) 'hasUser': (hasUser as bool?),
        if (hasUserWith != _undefined)
          'hasUserWith': (hasUserWith as List<Input$UserWhereInput>?),
        if (hasCourse != _undefined) 'hasCourse': (hasCourse as bool?),
        if (hasCourseWith != _undefined)
          'hasCourseWith': (hasCourseWith as List<Input$CourseWhereInput>?),
        if (hasUnit != _undefined) 'hasUnit': (hasUnit as bool?),
        if (hasUnitWith != _undefined)
          'hasUnitWith': (hasUnitWith as List<Input$UnitWhereInput>?),
        if (hasLesson != _undefined) 'hasLesson': (hasLesson as bool?),
        if (hasLessonWith != _undefined)
          'hasLessonWith': (hasLessonWith as List<Input$LessonWhereInput>?),
      }));

  CopyWith$Input$UserProgressWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$UserProgressWhereInput.stub(_then(_instance))
        : CopyWith$Input$UserProgressWhereInput(local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$UserProgressWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UserProgressWhereInput<
                          Input$UserProgressWhereInput>>?)
              _fn) =>
      call(
          and: _fn(
              _instance.and?.map((e) => CopyWith$Input$UserProgressWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes or(
          Iterable<Input$UserProgressWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UserProgressWhereInput<
                          Input$UserProgressWhereInput>>?)
              _fn) =>
      call(
          or: _fn(
              _instance.or?.map((e) => CopyWith$Input$UserProgressWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasUserWith(
          Iterable<Input$UserWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UserWhereInput<Input$UserWhereInput>>?)
              _fn) =>
      call(
          hasUserWith: _fn(
              _instance.hasUserWith?.map((e) => CopyWith$Input$UserWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasCourseWith(
          Iterable<Input$CourseWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$CourseWhereInput<Input$CourseWhereInput>>?)
              _fn) =>
      call(
          hasCourseWith: _fn(_instance.hasCourseWith
              ?.map((e) => CopyWith$Input$CourseWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasUnitWith(
          Iterable<Input$UnitWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UnitWhereInput<Input$UnitWhereInput>>?)
              _fn) =>
      call(
          hasUnitWith: _fn(
              _instance.hasUnitWith?.map((e) => CopyWith$Input$UnitWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());

  TRes hasLessonWith(
          Iterable<Input$LessonWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$LessonWhereInput<Input$LessonWhereInput>>?)
              _fn) =>
      call(
          hasLessonWith: _fn(_instance.hasLessonWith
              ?.map((e) => CopyWith$Input$LessonWhereInput(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$UserProgressWhereInput<TRes>
    implements CopyWith$Input$UserProgressWhereInput<TRes> {
  _CopyWithStubImpl$Input$UserProgressWhereInput(this._res);

  TRes _res;

  call({
    Input$UserProgressWhereInput? not,
    List<Input$UserProgressWhereInput>? and,
    List<Input$UserProgressWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? userID,
    String? userIDNEQ,
    List<String>? userIDIn,
    List<String>? userIDNotIn,
    String? courseID,
    String? courseIDNEQ,
    List<String>? courseIDIn,
    List<String>? courseIDNotIn,
    String? unitID,
    String? unitIDNEQ,
    List<String>? unitIDIn,
    List<String>? unitIDNotIn,
    String? lessonID,
    String? lessonIDNEQ,
    List<String>? lessonIDIn,
    List<String>? lessonIDNotIn,
    Enum$UserProgressLessonType? lessonType,
    Enum$UserProgressLessonType? lessonTypeNEQ,
    List<Enum$UserProgressLessonType>? lessonTypeIn,
    List<Enum$UserProgressLessonType>? lessonTypeNotIn,
    bool? islast,
    bool? islastNEQ,
    bool? isnext,
    bool? isnextNEQ,
    int? progress,
    int? progressNEQ,
    List<int>? progressIn,
    List<int>? progressNotIn,
    int? progressGT,
    int? progressGTE,
    int? progressLT,
    int? progressLTE,
    String? finishedat,
    String? finishedatNEQ,
    List<String>? finishedatIn,
    List<String>? finishedatNotIn,
    String? finishedatGT,
    String? finishedatGTE,
    String? finishedatLT,
    String? finishedatLTE,
    bool? finishedatIsNil,
    bool? finishedatNotNil,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    bool? hasUser,
    List<Input$UserWhereInput>? hasUserWith,
    bool? hasCourse,
    List<Input$CourseWhereInput>? hasCourseWith,
    bool? hasUnit,
    List<Input$UnitWhereInput>? hasUnitWith,
    bool? hasLesson,
    List<Input$LessonWhereInput>? hasLessonWith,
  }) =>
      _res;

  CopyWith$Input$UserProgressWhereInput<TRes> get not =>
      CopyWith$Input$UserProgressWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;

  hasUserWith(_fn) => _res;

  hasCourseWith(_fn) => _res;

  hasUnitWith(_fn) => _res;

  hasLessonWith(_fn) => _res;
}

class Input$UserWhereInput {
  factory Input$UserWhereInput({
    Input$UserWhereInput? not,
    List<Input$UserWhereInput>? and,
    List<Input$UserWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? firebaseuid,
    String? firebaseuidNEQ,
    List<String>? firebaseuidIn,
    List<String>? firebaseuidNotIn,
    String? firebaseuidGT,
    String? firebaseuidGTE,
    String? firebaseuidLT,
    String? firebaseuidLTE,
    String? firebaseuidContains,
    String? firebaseuidHasPrefix,
    String? firebaseuidHasSuffix,
    bool? firebaseuidIsNil,
    bool? firebaseuidNotNil,
    String? firebaseuidEqualFold,
    String? firebaseuidContainsFold,
    String? displayname,
    String? displaynameNEQ,
    List<String>? displaynameIn,
    List<String>? displaynameNotIn,
    String? displaynameGT,
    String? displaynameGTE,
    String? displaynameLT,
    String? displaynameLTE,
    String? displaynameContains,
    String? displaynameHasPrefix,
    String? displaynameHasSuffix,
    String? displaynameEqualFold,
    String? displaynameContainsFold,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    Enum$UserAuthMethod? authMethod,
    Enum$UserAuthMethod? authMethodNEQ,
    List<Enum$UserAuthMethod>? authMethodIn,
    List<Enum$UserAuthMethod>? authMethodNotIn,
    String? email,
    String? emailNEQ,
    List<String>? emailIn,
    List<String>? emailNotIn,
    String? emailGT,
    String? emailGTE,
    String? emailLT,
    String? emailLTE,
    String? emailContains,
    String? emailHasPrefix,
    String? emailHasSuffix,
    bool? emailIsNil,
    bool? emailNotNil,
    String? emailEqualFold,
    String? emailContainsFold,
    bool? emailVerified,
    bool? emailVerifiedNEQ,
  }) =>
      Input$UserWhereInput._({
        if (not != null) r'not': not,
        if (and != null) r'and': and,
        if (or != null) r'or': or,
        if (id != null) r'id': id,
        if (idNEQ != null) r'idNEQ': idNEQ,
        if (idIn != null) r'idIn': idIn,
        if (idNotIn != null) r'idNotIn': idNotIn,
        if (idGT != null) r'idGT': idGT,
        if (idGTE != null) r'idGTE': idGTE,
        if (idLT != null) r'idLT': idLT,
        if (idLTE != null) r'idLTE': idLTE,
        if (firebaseuid != null) r'firebaseuid': firebaseuid,
        if (firebaseuidNEQ != null) r'firebaseuidNEQ': firebaseuidNEQ,
        if (firebaseuidIn != null) r'firebaseuidIn': firebaseuidIn,
        if (firebaseuidNotIn != null) r'firebaseuidNotIn': firebaseuidNotIn,
        if (firebaseuidGT != null) r'firebaseuidGT': firebaseuidGT,
        if (firebaseuidGTE != null) r'firebaseuidGTE': firebaseuidGTE,
        if (firebaseuidLT != null) r'firebaseuidLT': firebaseuidLT,
        if (firebaseuidLTE != null) r'firebaseuidLTE': firebaseuidLTE,
        if (firebaseuidContains != null)
          r'firebaseuidContains': firebaseuidContains,
        if (firebaseuidHasPrefix != null)
          r'firebaseuidHasPrefix': firebaseuidHasPrefix,
        if (firebaseuidHasSuffix != null)
          r'firebaseuidHasSuffix': firebaseuidHasSuffix,
        if (firebaseuidIsNil != null) r'firebaseuidIsNil': firebaseuidIsNil,
        if (firebaseuidNotNil != null) r'firebaseuidNotNil': firebaseuidNotNil,
        if (firebaseuidEqualFold != null)
          r'firebaseuidEqualFold': firebaseuidEqualFold,
        if (firebaseuidContainsFold != null)
          r'firebaseuidContainsFold': firebaseuidContainsFold,
        if (displayname != null) r'displayname': displayname,
        if (displaynameNEQ != null) r'displaynameNEQ': displaynameNEQ,
        if (displaynameIn != null) r'displaynameIn': displaynameIn,
        if (displaynameNotIn != null) r'displaynameNotIn': displaynameNotIn,
        if (displaynameGT != null) r'displaynameGT': displaynameGT,
        if (displaynameGTE != null) r'displaynameGTE': displaynameGTE,
        if (displaynameLT != null) r'displaynameLT': displaynameLT,
        if (displaynameLTE != null) r'displaynameLTE': displaynameLTE,
        if (displaynameContains != null)
          r'displaynameContains': displaynameContains,
        if (displaynameHasPrefix != null)
          r'displaynameHasPrefix': displaynameHasPrefix,
        if (displaynameHasSuffix != null)
          r'displaynameHasSuffix': displaynameHasSuffix,
        if (displaynameEqualFold != null)
          r'displaynameEqualFold': displaynameEqualFold,
        if (displaynameContainsFold != null)
          r'displaynameContainsFold': displaynameContainsFold,
        if (createdat != null) r'createdat': createdat,
        if (createdatNEQ != null) r'createdatNEQ': createdatNEQ,
        if (createdatIn != null) r'createdatIn': createdatIn,
        if (createdatNotIn != null) r'createdatNotIn': createdatNotIn,
        if (createdatGT != null) r'createdatGT': createdatGT,
        if (createdatGTE != null) r'createdatGTE': createdatGTE,
        if (createdatLT != null) r'createdatLT': createdatLT,
        if (createdatLTE != null) r'createdatLTE': createdatLTE,
        if (updatedat != null) r'updatedat': updatedat,
        if (updatedatNEQ != null) r'updatedatNEQ': updatedatNEQ,
        if (updatedatIn != null) r'updatedatIn': updatedatIn,
        if (updatedatNotIn != null) r'updatedatNotIn': updatedatNotIn,
        if (updatedatGT != null) r'updatedatGT': updatedatGT,
        if (updatedatGTE != null) r'updatedatGTE': updatedatGTE,
        if (updatedatLT != null) r'updatedatLT': updatedatLT,
        if (updatedatLTE != null) r'updatedatLTE': updatedatLTE,
        if (authMethod != null) r'authMethod': authMethod,
        if (authMethodNEQ != null) r'authMethodNEQ': authMethodNEQ,
        if (authMethodIn != null) r'authMethodIn': authMethodIn,
        if (authMethodNotIn != null) r'authMethodNotIn': authMethodNotIn,
        if (email != null) r'email': email,
        if (emailNEQ != null) r'emailNEQ': emailNEQ,
        if (emailIn != null) r'emailIn': emailIn,
        if (emailNotIn != null) r'emailNotIn': emailNotIn,
        if (emailGT != null) r'emailGT': emailGT,
        if (emailGTE != null) r'emailGTE': emailGTE,
        if (emailLT != null) r'emailLT': emailLT,
        if (emailLTE != null) r'emailLTE': emailLTE,
        if (emailContains != null) r'emailContains': emailContains,
        if (emailHasPrefix != null) r'emailHasPrefix': emailHasPrefix,
        if (emailHasSuffix != null) r'emailHasSuffix': emailHasSuffix,
        if (emailIsNil != null) r'emailIsNil': emailIsNil,
        if (emailNotNil != null) r'emailNotNil': emailNotNil,
        if (emailEqualFold != null) r'emailEqualFold': emailEqualFold,
        if (emailContainsFold != null) r'emailContainsFold': emailContainsFold,
        if (emailVerified != null) r'emailVerified': emailVerified,
        if (emailVerifiedNEQ != null) r'emailVerifiedNEQ': emailVerifiedNEQ,
      });

  Input$UserWhereInput._(this._$data);

  factory Input$UserWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('not')) {
      final l$not = data['not'];
      result$data['not'] = l$not == null
          ? null
          : Input$UserWhereInput.fromJson((l$not as Map<String, dynamic>));
    }
    if (data.containsKey('and')) {
      final l$and = data['and'];
      result$data['and'] = (l$and as List<dynamic>?)
          ?.map(
              (e) => Input$UserWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('or')) {
      final l$or = data['or'];
      result$data['or'] = (l$or as List<dynamic>?)
          ?.map(
              (e) => Input$UserWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('idNEQ')) {
      final l$idNEQ = data['idNEQ'];
      result$data['idNEQ'] = (l$idNEQ as String?);
    }
    if (data.containsKey('idIn')) {
      final l$idIn = data['idIn'];
      result$data['idIn'] =
          (l$idIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idNotIn')) {
      final l$idNotIn = data['idNotIn'];
      result$data['idNotIn'] =
          (l$idNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('idGT')) {
      final l$idGT = data['idGT'];
      result$data['idGT'] = (l$idGT as String?);
    }
    if (data.containsKey('idGTE')) {
      final l$idGTE = data['idGTE'];
      result$data['idGTE'] = (l$idGTE as String?);
    }
    if (data.containsKey('idLT')) {
      final l$idLT = data['idLT'];
      result$data['idLT'] = (l$idLT as String?);
    }
    if (data.containsKey('idLTE')) {
      final l$idLTE = data['idLTE'];
      result$data['idLTE'] = (l$idLTE as String?);
    }
    if (data.containsKey('firebaseuid')) {
      final l$firebaseuid = data['firebaseuid'];
      result$data['firebaseuid'] = (l$firebaseuid as String?);
    }
    if (data.containsKey('firebaseuidNEQ')) {
      final l$firebaseuidNEQ = data['firebaseuidNEQ'];
      result$data['firebaseuidNEQ'] = (l$firebaseuidNEQ as String?);
    }
    if (data.containsKey('firebaseuidIn')) {
      final l$firebaseuidIn = data['firebaseuidIn'];
      result$data['firebaseuidIn'] = (l$firebaseuidIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('firebaseuidNotIn')) {
      final l$firebaseuidNotIn = data['firebaseuidNotIn'];
      result$data['firebaseuidNotIn'] = (l$firebaseuidNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('firebaseuidGT')) {
      final l$firebaseuidGT = data['firebaseuidGT'];
      result$data['firebaseuidGT'] = (l$firebaseuidGT as String?);
    }
    if (data.containsKey('firebaseuidGTE')) {
      final l$firebaseuidGTE = data['firebaseuidGTE'];
      result$data['firebaseuidGTE'] = (l$firebaseuidGTE as String?);
    }
    if (data.containsKey('firebaseuidLT')) {
      final l$firebaseuidLT = data['firebaseuidLT'];
      result$data['firebaseuidLT'] = (l$firebaseuidLT as String?);
    }
    if (data.containsKey('firebaseuidLTE')) {
      final l$firebaseuidLTE = data['firebaseuidLTE'];
      result$data['firebaseuidLTE'] = (l$firebaseuidLTE as String?);
    }
    if (data.containsKey('firebaseuidContains')) {
      final l$firebaseuidContains = data['firebaseuidContains'];
      result$data['firebaseuidContains'] = (l$firebaseuidContains as String?);
    }
    if (data.containsKey('firebaseuidHasPrefix')) {
      final l$firebaseuidHasPrefix = data['firebaseuidHasPrefix'];
      result$data['firebaseuidHasPrefix'] = (l$firebaseuidHasPrefix as String?);
    }
    if (data.containsKey('firebaseuidHasSuffix')) {
      final l$firebaseuidHasSuffix = data['firebaseuidHasSuffix'];
      result$data['firebaseuidHasSuffix'] = (l$firebaseuidHasSuffix as String?);
    }
    if (data.containsKey('firebaseuidIsNil')) {
      final l$firebaseuidIsNil = data['firebaseuidIsNil'];
      result$data['firebaseuidIsNil'] = (l$firebaseuidIsNil as bool?);
    }
    if (data.containsKey('firebaseuidNotNil')) {
      final l$firebaseuidNotNil = data['firebaseuidNotNil'];
      result$data['firebaseuidNotNil'] = (l$firebaseuidNotNil as bool?);
    }
    if (data.containsKey('firebaseuidEqualFold')) {
      final l$firebaseuidEqualFold = data['firebaseuidEqualFold'];
      result$data['firebaseuidEqualFold'] = (l$firebaseuidEqualFold as String?);
    }
    if (data.containsKey('firebaseuidContainsFold')) {
      final l$firebaseuidContainsFold = data['firebaseuidContainsFold'];
      result$data['firebaseuidContainsFold'] =
          (l$firebaseuidContainsFold as String?);
    }
    if (data.containsKey('displayname')) {
      final l$displayname = data['displayname'];
      result$data['displayname'] = (l$displayname as String?);
    }
    if (data.containsKey('displaynameNEQ')) {
      final l$displaynameNEQ = data['displaynameNEQ'];
      result$data['displaynameNEQ'] = (l$displaynameNEQ as String?);
    }
    if (data.containsKey('displaynameIn')) {
      final l$displaynameIn = data['displaynameIn'];
      result$data['displaynameIn'] = (l$displaynameIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('displaynameNotIn')) {
      final l$displaynameNotIn = data['displaynameNotIn'];
      result$data['displaynameNotIn'] = (l$displaynameNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('displaynameGT')) {
      final l$displaynameGT = data['displaynameGT'];
      result$data['displaynameGT'] = (l$displaynameGT as String?);
    }
    if (data.containsKey('displaynameGTE')) {
      final l$displaynameGTE = data['displaynameGTE'];
      result$data['displaynameGTE'] = (l$displaynameGTE as String?);
    }
    if (data.containsKey('displaynameLT')) {
      final l$displaynameLT = data['displaynameLT'];
      result$data['displaynameLT'] = (l$displaynameLT as String?);
    }
    if (data.containsKey('displaynameLTE')) {
      final l$displaynameLTE = data['displaynameLTE'];
      result$data['displaynameLTE'] = (l$displaynameLTE as String?);
    }
    if (data.containsKey('displaynameContains')) {
      final l$displaynameContains = data['displaynameContains'];
      result$data['displaynameContains'] = (l$displaynameContains as String?);
    }
    if (data.containsKey('displaynameHasPrefix')) {
      final l$displaynameHasPrefix = data['displaynameHasPrefix'];
      result$data['displaynameHasPrefix'] = (l$displaynameHasPrefix as String?);
    }
    if (data.containsKey('displaynameHasSuffix')) {
      final l$displaynameHasSuffix = data['displaynameHasSuffix'];
      result$data['displaynameHasSuffix'] = (l$displaynameHasSuffix as String?);
    }
    if (data.containsKey('displaynameEqualFold')) {
      final l$displaynameEqualFold = data['displaynameEqualFold'];
      result$data['displaynameEqualFold'] = (l$displaynameEqualFold as String?);
    }
    if (data.containsKey('displaynameContainsFold')) {
      final l$displaynameContainsFold = data['displaynameContainsFold'];
      result$data['displaynameContainsFold'] =
          (l$displaynameContainsFold as String?);
    }
    if (data.containsKey('createdat')) {
      final l$createdat = data['createdat'];
      result$data['createdat'] = (l$createdat as String?);
    }
    if (data.containsKey('createdatNEQ')) {
      final l$createdatNEQ = data['createdatNEQ'];
      result$data['createdatNEQ'] = (l$createdatNEQ as String?);
    }
    if (data.containsKey('createdatIn')) {
      final l$createdatIn = data['createdatIn'];
      result$data['createdatIn'] =
          (l$createdatIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('createdatNotIn')) {
      final l$createdatNotIn = data['createdatNotIn'];
      result$data['createdatNotIn'] = (l$createdatNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('createdatGT')) {
      final l$createdatGT = data['createdatGT'];
      result$data['createdatGT'] = (l$createdatGT as String?);
    }
    if (data.containsKey('createdatGTE')) {
      final l$createdatGTE = data['createdatGTE'];
      result$data['createdatGTE'] = (l$createdatGTE as String?);
    }
    if (data.containsKey('createdatLT')) {
      final l$createdatLT = data['createdatLT'];
      result$data['createdatLT'] = (l$createdatLT as String?);
    }
    if (data.containsKey('createdatLTE')) {
      final l$createdatLTE = data['createdatLTE'];
      result$data['createdatLTE'] = (l$createdatLTE as String?);
    }
    if (data.containsKey('updatedat')) {
      final l$updatedat = data['updatedat'];
      result$data['updatedat'] = (l$updatedat as String?);
    }
    if (data.containsKey('updatedatNEQ')) {
      final l$updatedatNEQ = data['updatedatNEQ'];
      result$data['updatedatNEQ'] = (l$updatedatNEQ as String?);
    }
    if (data.containsKey('updatedatIn')) {
      final l$updatedatIn = data['updatedatIn'];
      result$data['updatedatIn'] =
          (l$updatedatIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('updatedatNotIn')) {
      final l$updatedatNotIn = data['updatedatNotIn'];
      result$data['updatedatNotIn'] = (l$updatedatNotIn as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('updatedatGT')) {
      final l$updatedatGT = data['updatedatGT'];
      result$data['updatedatGT'] = (l$updatedatGT as String?);
    }
    if (data.containsKey('updatedatGTE')) {
      final l$updatedatGTE = data['updatedatGTE'];
      result$data['updatedatGTE'] = (l$updatedatGTE as String?);
    }
    if (data.containsKey('updatedatLT')) {
      final l$updatedatLT = data['updatedatLT'];
      result$data['updatedatLT'] = (l$updatedatLT as String?);
    }
    if (data.containsKey('updatedatLTE')) {
      final l$updatedatLTE = data['updatedatLTE'];
      result$data['updatedatLTE'] = (l$updatedatLTE as String?);
    }
    if (data.containsKey('authMethod')) {
      final l$authMethod = data['authMethod'];
      result$data['authMethod'] = l$authMethod == null
          ? null
          : fromJson$Enum$UserAuthMethod((l$authMethod as String));
    }
    if (data.containsKey('authMethodNEQ')) {
      final l$authMethodNEQ = data['authMethodNEQ'];
      result$data['authMethodNEQ'] = l$authMethodNEQ == null
          ? null
          : fromJson$Enum$UserAuthMethod((l$authMethodNEQ as String));
    }
    if (data.containsKey('authMethodIn')) {
      final l$authMethodIn = data['authMethodIn'];
      result$data['authMethodIn'] = (l$authMethodIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$UserAuthMethod((e as String)))
          .toList();
    }
    if (data.containsKey('authMethodNotIn')) {
      final l$authMethodNotIn = data['authMethodNotIn'];
      result$data['authMethodNotIn'] = (l$authMethodNotIn as List<dynamic>?)
          ?.map((e) => fromJson$Enum$UserAuthMethod((e as String)))
          .toList();
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = (l$email as String?);
    }
    if (data.containsKey('emailNEQ')) {
      final l$emailNEQ = data['emailNEQ'];
      result$data['emailNEQ'] = (l$emailNEQ as String?);
    }
    if (data.containsKey('emailIn')) {
      final l$emailIn = data['emailIn'];
      result$data['emailIn'] =
          (l$emailIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('emailNotIn')) {
      final l$emailNotIn = data['emailNotIn'];
      result$data['emailNotIn'] =
          (l$emailNotIn as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('emailGT')) {
      final l$emailGT = data['emailGT'];
      result$data['emailGT'] = (l$emailGT as String?);
    }
    if (data.containsKey('emailGTE')) {
      final l$emailGTE = data['emailGTE'];
      result$data['emailGTE'] = (l$emailGTE as String?);
    }
    if (data.containsKey('emailLT')) {
      final l$emailLT = data['emailLT'];
      result$data['emailLT'] = (l$emailLT as String?);
    }
    if (data.containsKey('emailLTE')) {
      final l$emailLTE = data['emailLTE'];
      result$data['emailLTE'] = (l$emailLTE as String?);
    }
    if (data.containsKey('emailContains')) {
      final l$emailContains = data['emailContains'];
      result$data['emailContains'] = (l$emailContains as String?);
    }
    if (data.containsKey('emailHasPrefix')) {
      final l$emailHasPrefix = data['emailHasPrefix'];
      result$data['emailHasPrefix'] = (l$emailHasPrefix as String?);
    }
    if (data.containsKey('emailHasSuffix')) {
      final l$emailHasSuffix = data['emailHasSuffix'];
      result$data['emailHasSuffix'] = (l$emailHasSuffix as String?);
    }
    if (data.containsKey('emailIsNil')) {
      final l$emailIsNil = data['emailIsNil'];
      result$data['emailIsNil'] = (l$emailIsNil as bool?);
    }
    if (data.containsKey('emailNotNil')) {
      final l$emailNotNil = data['emailNotNil'];
      result$data['emailNotNil'] = (l$emailNotNil as bool?);
    }
    if (data.containsKey('emailEqualFold')) {
      final l$emailEqualFold = data['emailEqualFold'];
      result$data['emailEqualFold'] = (l$emailEqualFold as String?);
    }
    if (data.containsKey('emailContainsFold')) {
      final l$emailContainsFold = data['emailContainsFold'];
      result$data['emailContainsFold'] = (l$emailContainsFold as String?);
    }
    if (data.containsKey('emailVerified')) {
      final l$emailVerified = data['emailVerified'];
      result$data['emailVerified'] = (l$emailVerified as bool?);
    }
    if (data.containsKey('emailVerifiedNEQ')) {
      final l$emailVerifiedNEQ = data['emailVerifiedNEQ'];
      result$data['emailVerifiedNEQ'] = (l$emailVerifiedNEQ as bool?);
    }
    return Input$UserWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$UserWhereInput? get not => (_$data['not'] as Input$UserWhereInput?);

  List<Input$UserWhereInput>? get and =>
      (_$data['and'] as List<Input$UserWhereInput>?);

  List<Input$UserWhereInput>? get or =>
      (_$data['or'] as List<Input$UserWhereInput>?);

  String? get id => (_$data['id'] as String?);

  String? get idNEQ => (_$data['idNEQ'] as String?);

  List<String>? get idIn => (_$data['idIn'] as List<String>?);

  List<String>? get idNotIn => (_$data['idNotIn'] as List<String>?);

  String? get idGT => (_$data['idGT'] as String?);

  String? get idGTE => (_$data['idGTE'] as String?);

  String? get idLT => (_$data['idLT'] as String?);

  String? get idLTE => (_$data['idLTE'] as String?);

  String? get firebaseuid => (_$data['firebaseuid'] as String?);

  String? get firebaseuidNEQ => (_$data['firebaseuidNEQ'] as String?);

  List<String>? get firebaseuidIn => (_$data['firebaseuidIn'] as List<String>?);

  List<String>? get firebaseuidNotIn =>
      (_$data['firebaseuidNotIn'] as List<String>?);

  String? get firebaseuidGT => (_$data['firebaseuidGT'] as String?);

  String? get firebaseuidGTE => (_$data['firebaseuidGTE'] as String?);

  String? get firebaseuidLT => (_$data['firebaseuidLT'] as String?);

  String? get firebaseuidLTE => (_$data['firebaseuidLTE'] as String?);

  String? get firebaseuidContains => (_$data['firebaseuidContains'] as String?);

  String? get firebaseuidHasPrefix =>
      (_$data['firebaseuidHasPrefix'] as String?);

  String? get firebaseuidHasSuffix =>
      (_$data['firebaseuidHasSuffix'] as String?);

  bool? get firebaseuidIsNil => (_$data['firebaseuidIsNil'] as bool?);

  bool? get firebaseuidNotNil => (_$data['firebaseuidNotNil'] as bool?);

  String? get firebaseuidEqualFold =>
      (_$data['firebaseuidEqualFold'] as String?);

  String? get firebaseuidContainsFold =>
      (_$data['firebaseuidContainsFold'] as String?);

  String? get displayname => (_$data['displayname'] as String?);

  String? get displaynameNEQ => (_$data['displaynameNEQ'] as String?);

  List<String>? get displaynameIn => (_$data['displaynameIn'] as List<String>?);

  List<String>? get displaynameNotIn =>
      (_$data['displaynameNotIn'] as List<String>?);

  String? get displaynameGT => (_$data['displaynameGT'] as String?);

  String? get displaynameGTE => (_$data['displaynameGTE'] as String?);

  String? get displaynameLT => (_$data['displaynameLT'] as String?);

  String? get displaynameLTE => (_$data['displaynameLTE'] as String?);

  String? get displaynameContains => (_$data['displaynameContains'] as String?);

  String? get displaynameHasPrefix =>
      (_$data['displaynameHasPrefix'] as String?);

  String? get displaynameHasSuffix =>
      (_$data['displaynameHasSuffix'] as String?);

  String? get displaynameEqualFold =>
      (_$data['displaynameEqualFold'] as String?);

  String? get displaynameContainsFold =>
      (_$data['displaynameContainsFold'] as String?);

  String? get createdat => (_$data['createdat'] as String?);

  String? get createdatNEQ => (_$data['createdatNEQ'] as String?);

  List<String>? get createdatIn => (_$data['createdatIn'] as List<String>?);

  List<String>? get createdatNotIn =>
      (_$data['createdatNotIn'] as List<String>?);

  String? get createdatGT => (_$data['createdatGT'] as String?);

  String? get createdatGTE => (_$data['createdatGTE'] as String?);

  String? get createdatLT => (_$data['createdatLT'] as String?);

  String? get createdatLTE => (_$data['createdatLTE'] as String?);

  String? get updatedat => (_$data['updatedat'] as String?);

  String? get updatedatNEQ => (_$data['updatedatNEQ'] as String?);

  List<String>? get updatedatIn => (_$data['updatedatIn'] as List<String>?);

  List<String>? get updatedatNotIn =>
      (_$data['updatedatNotIn'] as List<String>?);

  String? get updatedatGT => (_$data['updatedatGT'] as String?);

  String? get updatedatGTE => (_$data['updatedatGTE'] as String?);

  String? get updatedatLT => (_$data['updatedatLT'] as String?);

  String? get updatedatLTE => (_$data['updatedatLTE'] as String?);

  Enum$UserAuthMethod? get authMethod =>
      (_$data['authMethod'] as Enum$UserAuthMethod?);

  Enum$UserAuthMethod? get authMethodNEQ =>
      (_$data['authMethodNEQ'] as Enum$UserAuthMethod?);

  List<Enum$UserAuthMethod>? get authMethodIn =>
      (_$data['authMethodIn'] as List<Enum$UserAuthMethod>?);

  List<Enum$UserAuthMethod>? get authMethodNotIn =>
      (_$data['authMethodNotIn'] as List<Enum$UserAuthMethod>?);

  String? get email => (_$data['email'] as String?);

  String? get emailNEQ => (_$data['emailNEQ'] as String?);

  List<String>? get emailIn => (_$data['emailIn'] as List<String>?);

  List<String>? get emailNotIn => (_$data['emailNotIn'] as List<String>?);

  String? get emailGT => (_$data['emailGT'] as String?);

  String? get emailGTE => (_$data['emailGTE'] as String?);

  String? get emailLT => (_$data['emailLT'] as String?);

  String? get emailLTE => (_$data['emailLTE'] as String?);

  String? get emailContains => (_$data['emailContains'] as String?);

  String? get emailHasPrefix => (_$data['emailHasPrefix'] as String?);

  String? get emailHasSuffix => (_$data['emailHasSuffix'] as String?);

  bool? get emailIsNil => (_$data['emailIsNil'] as bool?);

  bool? get emailNotNil => (_$data['emailNotNil'] as bool?);

  String? get emailEqualFold => (_$data['emailEqualFold'] as String?);

  String? get emailContainsFold => (_$data['emailContainsFold'] as String?);

  bool? get emailVerified => (_$data['emailVerified'] as bool?);

  bool? get emailVerifiedNEQ => (_$data['emailVerifiedNEQ'] as bool?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('not')) {
      final l$not = not;
      result$data['not'] = l$not?.toJson();
    }
    if (_$data.containsKey('and')) {
      final l$and = and;
      result$data['and'] = l$and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('or')) {
      final l$or = or;
      result$data['or'] = l$or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('idNEQ')) {
      final l$idNEQ = idNEQ;
      result$data['idNEQ'] = l$idNEQ;
    }
    if (_$data.containsKey('idIn')) {
      final l$idIn = idIn;
      result$data['idIn'] = l$idIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idNotIn')) {
      final l$idNotIn = idNotIn;
      result$data['idNotIn'] = l$idNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('idGT')) {
      final l$idGT = idGT;
      result$data['idGT'] = l$idGT;
    }
    if (_$data.containsKey('idGTE')) {
      final l$idGTE = idGTE;
      result$data['idGTE'] = l$idGTE;
    }
    if (_$data.containsKey('idLT')) {
      final l$idLT = idLT;
      result$data['idLT'] = l$idLT;
    }
    if (_$data.containsKey('idLTE')) {
      final l$idLTE = idLTE;
      result$data['idLTE'] = l$idLTE;
    }
    if (_$data.containsKey('firebaseuid')) {
      final l$firebaseuid = firebaseuid;
      result$data['firebaseuid'] = l$firebaseuid;
    }
    if (_$data.containsKey('firebaseuidNEQ')) {
      final l$firebaseuidNEQ = firebaseuidNEQ;
      result$data['firebaseuidNEQ'] = l$firebaseuidNEQ;
    }
    if (_$data.containsKey('firebaseuidIn')) {
      final l$firebaseuidIn = firebaseuidIn;
      result$data['firebaseuidIn'] = l$firebaseuidIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('firebaseuidNotIn')) {
      final l$firebaseuidNotIn = firebaseuidNotIn;
      result$data['firebaseuidNotIn'] =
          l$firebaseuidNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('firebaseuidGT')) {
      final l$firebaseuidGT = firebaseuidGT;
      result$data['firebaseuidGT'] = l$firebaseuidGT;
    }
    if (_$data.containsKey('firebaseuidGTE')) {
      final l$firebaseuidGTE = firebaseuidGTE;
      result$data['firebaseuidGTE'] = l$firebaseuidGTE;
    }
    if (_$data.containsKey('firebaseuidLT')) {
      final l$firebaseuidLT = firebaseuidLT;
      result$data['firebaseuidLT'] = l$firebaseuidLT;
    }
    if (_$data.containsKey('firebaseuidLTE')) {
      final l$firebaseuidLTE = firebaseuidLTE;
      result$data['firebaseuidLTE'] = l$firebaseuidLTE;
    }
    if (_$data.containsKey('firebaseuidContains')) {
      final l$firebaseuidContains = firebaseuidContains;
      result$data['firebaseuidContains'] = l$firebaseuidContains;
    }
    if (_$data.containsKey('firebaseuidHasPrefix')) {
      final l$firebaseuidHasPrefix = firebaseuidHasPrefix;
      result$data['firebaseuidHasPrefix'] = l$firebaseuidHasPrefix;
    }
    if (_$data.containsKey('firebaseuidHasSuffix')) {
      final l$firebaseuidHasSuffix = firebaseuidHasSuffix;
      result$data['firebaseuidHasSuffix'] = l$firebaseuidHasSuffix;
    }
    if (_$data.containsKey('firebaseuidIsNil')) {
      final l$firebaseuidIsNil = firebaseuidIsNil;
      result$data['firebaseuidIsNil'] = l$firebaseuidIsNil;
    }
    if (_$data.containsKey('firebaseuidNotNil')) {
      final l$firebaseuidNotNil = firebaseuidNotNil;
      result$data['firebaseuidNotNil'] = l$firebaseuidNotNil;
    }
    if (_$data.containsKey('firebaseuidEqualFold')) {
      final l$firebaseuidEqualFold = firebaseuidEqualFold;
      result$data['firebaseuidEqualFold'] = l$firebaseuidEqualFold;
    }
    if (_$data.containsKey('firebaseuidContainsFold')) {
      final l$firebaseuidContainsFold = firebaseuidContainsFold;
      result$data['firebaseuidContainsFold'] = l$firebaseuidContainsFold;
    }
    if (_$data.containsKey('displayname')) {
      final l$displayname = displayname;
      result$data['displayname'] = l$displayname;
    }
    if (_$data.containsKey('displaynameNEQ')) {
      final l$displaynameNEQ = displaynameNEQ;
      result$data['displaynameNEQ'] = l$displaynameNEQ;
    }
    if (_$data.containsKey('displaynameIn')) {
      final l$displaynameIn = displaynameIn;
      result$data['displaynameIn'] = l$displaynameIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('displaynameNotIn')) {
      final l$displaynameNotIn = displaynameNotIn;
      result$data['displaynameNotIn'] =
          l$displaynameNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('displaynameGT')) {
      final l$displaynameGT = displaynameGT;
      result$data['displaynameGT'] = l$displaynameGT;
    }
    if (_$data.containsKey('displaynameGTE')) {
      final l$displaynameGTE = displaynameGTE;
      result$data['displaynameGTE'] = l$displaynameGTE;
    }
    if (_$data.containsKey('displaynameLT')) {
      final l$displaynameLT = displaynameLT;
      result$data['displaynameLT'] = l$displaynameLT;
    }
    if (_$data.containsKey('displaynameLTE')) {
      final l$displaynameLTE = displaynameLTE;
      result$data['displaynameLTE'] = l$displaynameLTE;
    }
    if (_$data.containsKey('displaynameContains')) {
      final l$displaynameContains = displaynameContains;
      result$data['displaynameContains'] = l$displaynameContains;
    }
    if (_$data.containsKey('displaynameHasPrefix')) {
      final l$displaynameHasPrefix = displaynameHasPrefix;
      result$data['displaynameHasPrefix'] = l$displaynameHasPrefix;
    }
    if (_$data.containsKey('displaynameHasSuffix')) {
      final l$displaynameHasSuffix = displaynameHasSuffix;
      result$data['displaynameHasSuffix'] = l$displaynameHasSuffix;
    }
    if (_$data.containsKey('displaynameEqualFold')) {
      final l$displaynameEqualFold = displaynameEqualFold;
      result$data['displaynameEqualFold'] = l$displaynameEqualFold;
    }
    if (_$data.containsKey('displaynameContainsFold')) {
      final l$displaynameContainsFold = displaynameContainsFold;
      result$data['displaynameContainsFold'] = l$displaynameContainsFold;
    }
    if (_$data.containsKey('createdat')) {
      final l$createdat = createdat;
      result$data['createdat'] = l$createdat;
    }
    if (_$data.containsKey('createdatNEQ')) {
      final l$createdatNEQ = createdatNEQ;
      result$data['createdatNEQ'] = l$createdatNEQ;
    }
    if (_$data.containsKey('createdatIn')) {
      final l$createdatIn = createdatIn;
      result$data['createdatIn'] = l$createdatIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('createdatNotIn')) {
      final l$createdatNotIn = createdatNotIn;
      result$data['createdatNotIn'] = l$createdatNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('createdatGT')) {
      final l$createdatGT = createdatGT;
      result$data['createdatGT'] = l$createdatGT;
    }
    if (_$data.containsKey('createdatGTE')) {
      final l$createdatGTE = createdatGTE;
      result$data['createdatGTE'] = l$createdatGTE;
    }
    if (_$data.containsKey('createdatLT')) {
      final l$createdatLT = createdatLT;
      result$data['createdatLT'] = l$createdatLT;
    }
    if (_$data.containsKey('createdatLTE')) {
      final l$createdatLTE = createdatLTE;
      result$data['createdatLTE'] = l$createdatLTE;
    }
    if (_$data.containsKey('updatedat')) {
      final l$updatedat = updatedat;
      result$data['updatedat'] = l$updatedat;
    }
    if (_$data.containsKey('updatedatNEQ')) {
      final l$updatedatNEQ = updatedatNEQ;
      result$data['updatedatNEQ'] = l$updatedatNEQ;
    }
    if (_$data.containsKey('updatedatIn')) {
      final l$updatedatIn = updatedatIn;
      result$data['updatedatIn'] = l$updatedatIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('updatedatNotIn')) {
      final l$updatedatNotIn = updatedatNotIn;
      result$data['updatedatNotIn'] = l$updatedatNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('updatedatGT')) {
      final l$updatedatGT = updatedatGT;
      result$data['updatedatGT'] = l$updatedatGT;
    }
    if (_$data.containsKey('updatedatGTE')) {
      final l$updatedatGTE = updatedatGTE;
      result$data['updatedatGTE'] = l$updatedatGTE;
    }
    if (_$data.containsKey('updatedatLT')) {
      final l$updatedatLT = updatedatLT;
      result$data['updatedatLT'] = l$updatedatLT;
    }
    if (_$data.containsKey('updatedatLTE')) {
      final l$updatedatLTE = updatedatLTE;
      result$data['updatedatLTE'] = l$updatedatLTE;
    }
    if (_$data.containsKey('authMethod')) {
      final l$authMethod = authMethod;
      result$data['authMethod'] = l$authMethod == null
          ? null
          : toJson$Enum$UserAuthMethod(l$authMethod);
    }
    if (_$data.containsKey('authMethodNEQ')) {
      final l$authMethodNEQ = authMethodNEQ;
      result$data['authMethodNEQ'] = l$authMethodNEQ == null
          ? null
          : toJson$Enum$UserAuthMethod(l$authMethodNEQ);
    }
    if (_$data.containsKey('authMethodIn')) {
      final l$authMethodIn = authMethodIn;
      result$data['authMethodIn'] =
          l$authMethodIn?.map((e) => toJson$Enum$UserAuthMethod(e)).toList();
    }
    if (_$data.containsKey('authMethodNotIn')) {
      final l$authMethodNotIn = authMethodNotIn;
      result$data['authMethodNotIn'] =
          l$authMethodNotIn?.map((e) => toJson$Enum$UserAuthMethod(e)).toList();
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email;
    }
    if (_$data.containsKey('emailNEQ')) {
      final l$emailNEQ = emailNEQ;
      result$data['emailNEQ'] = l$emailNEQ;
    }
    if (_$data.containsKey('emailIn')) {
      final l$emailIn = emailIn;
      result$data['emailIn'] = l$emailIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('emailNotIn')) {
      final l$emailNotIn = emailNotIn;
      result$data['emailNotIn'] = l$emailNotIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('emailGT')) {
      final l$emailGT = emailGT;
      result$data['emailGT'] = l$emailGT;
    }
    if (_$data.containsKey('emailGTE')) {
      final l$emailGTE = emailGTE;
      result$data['emailGTE'] = l$emailGTE;
    }
    if (_$data.containsKey('emailLT')) {
      final l$emailLT = emailLT;
      result$data['emailLT'] = l$emailLT;
    }
    if (_$data.containsKey('emailLTE')) {
      final l$emailLTE = emailLTE;
      result$data['emailLTE'] = l$emailLTE;
    }
    if (_$data.containsKey('emailContains')) {
      final l$emailContains = emailContains;
      result$data['emailContains'] = l$emailContains;
    }
    if (_$data.containsKey('emailHasPrefix')) {
      final l$emailHasPrefix = emailHasPrefix;
      result$data['emailHasPrefix'] = l$emailHasPrefix;
    }
    if (_$data.containsKey('emailHasSuffix')) {
      final l$emailHasSuffix = emailHasSuffix;
      result$data['emailHasSuffix'] = l$emailHasSuffix;
    }
    if (_$data.containsKey('emailIsNil')) {
      final l$emailIsNil = emailIsNil;
      result$data['emailIsNil'] = l$emailIsNil;
    }
    if (_$data.containsKey('emailNotNil')) {
      final l$emailNotNil = emailNotNil;
      result$data['emailNotNil'] = l$emailNotNil;
    }
    if (_$data.containsKey('emailEqualFold')) {
      final l$emailEqualFold = emailEqualFold;
      result$data['emailEqualFold'] = l$emailEqualFold;
    }
    if (_$data.containsKey('emailContainsFold')) {
      final l$emailContainsFold = emailContainsFold;
      result$data['emailContainsFold'] = l$emailContainsFold;
    }
    if (_$data.containsKey('emailVerified')) {
      final l$emailVerified = emailVerified;
      result$data['emailVerified'] = l$emailVerified;
    }
    if (_$data.containsKey('emailVerifiedNEQ')) {
      final l$emailVerifiedNEQ = emailVerifiedNEQ;
      result$data['emailVerifiedNEQ'] = l$emailVerifiedNEQ;
    }
    return result$data;
  }

  CopyWith$Input$UserWhereInput<Input$UserWhereInput> get copyWith =>
      CopyWith$Input$UserWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$UserWhereInput) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$not = not;
    final lOther$not = other.not;
    if (_$data.containsKey('not') != other._$data.containsKey('not')) {
      return false;
    }
    if (l$not != lOther$not) {
      return false;
    }
    final l$and = and;
    final lOther$and = other.and;
    if (_$data.containsKey('and') != other._$data.containsKey('and')) {
      return false;
    }
    if (l$and != null && lOther$and != null) {
      if (l$and.length != lOther$and.length) {
        return false;
      }
      for (int i = 0; i < l$and.length; i++) {
        final l$and$entry = l$and[i];
        final lOther$and$entry = lOther$and[i];
        if (l$and$entry != lOther$and$entry) {
          return false;
        }
      }
    } else if (l$and != lOther$and) {
      return false;
    }
    final l$or = or;
    final lOther$or = other.or;
    if (_$data.containsKey('or') != other._$data.containsKey('or')) {
      return false;
    }
    if (l$or != null && lOther$or != null) {
      if (l$or.length != lOther$or.length) {
        return false;
      }
      for (int i = 0; i < l$or.length; i++) {
        final l$or$entry = l$or[i];
        final lOther$or$entry = lOther$or[i];
        if (l$or$entry != lOther$or$entry) {
          return false;
        }
      }
    } else if (l$or != lOther$or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$idNEQ = idNEQ;
    final lOther$idNEQ = other.idNEQ;
    if (_$data.containsKey('idNEQ') != other._$data.containsKey('idNEQ')) {
      return false;
    }
    if (l$idNEQ != lOther$idNEQ) {
      return false;
    }
    final l$idIn = idIn;
    final lOther$idIn = other.idIn;
    if (_$data.containsKey('idIn') != other._$data.containsKey('idIn')) {
      return false;
    }
    if (l$idIn != null && lOther$idIn != null) {
      if (l$idIn.length != lOther$idIn.length) {
        return false;
      }
      for (int i = 0; i < l$idIn.length; i++) {
        final l$idIn$entry = l$idIn[i];
        final lOther$idIn$entry = lOther$idIn[i];
        if (l$idIn$entry != lOther$idIn$entry) {
          return false;
        }
      }
    } else if (l$idIn != lOther$idIn) {
      return false;
    }
    final l$idNotIn = idNotIn;
    final lOther$idNotIn = other.idNotIn;
    if (_$data.containsKey('idNotIn') != other._$data.containsKey('idNotIn')) {
      return false;
    }
    if (l$idNotIn != null && lOther$idNotIn != null) {
      if (l$idNotIn.length != lOther$idNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$idNotIn.length; i++) {
        final l$idNotIn$entry = l$idNotIn[i];
        final lOther$idNotIn$entry = lOther$idNotIn[i];
        if (l$idNotIn$entry != lOther$idNotIn$entry) {
          return false;
        }
      }
    } else if (l$idNotIn != lOther$idNotIn) {
      return false;
    }
    final l$idGT = idGT;
    final lOther$idGT = other.idGT;
    if (_$data.containsKey('idGT') != other._$data.containsKey('idGT')) {
      return false;
    }
    if (l$idGT != lOther$idGT) {
      return false;
    }
    final l$idGTE = idGTE;
    final lOther$idGTE = other.idGTE;
    if (_$data.containsKey('idGTE') != other._$data.containsKey('idGTE')) {
      return false;
    }
    if (l$idGTE != lOther$idGTE) {
      return false;
    }
    final l$idLT = idLT;
    final lOther$idLT = other.idLT;
    if (_$data.containsKey('idLT') != other._$data.containsKey('idLT')) {
      return false;
    }
    if (l$idLT != lOther$idLT) {
      return false;
    }
    final l$idLTE = idLTE;
    final lOther$idLTE = other.idLTE;
    if (_$data.containsKey('idLTE') != other._$data.containsKey('idLTE')) {
      return false;
    }
    if (l$idLTE != lOther$idLTE) {
      return false;
    }
    final l$firebaseuid = firebaseuid;
    final lOther$firebaseuid = other.firebaseuid;
    if (_$data.containsKey('firebaseuid') !=
        other._$data.containsKey('firebaseuid')) {
      return false;
    }
    if (l$firebaseuid != lOther$firebaseuid) {
      return false;
    }
    final l$firebaseuidNEQ = firebaseuidNEQ;
    final lOther$firebaseuidNEQ = other.firebaseuidNEQ;
    if (_$data.containsKey('firebaseuidNEQ') !=
        other._$data.containsKey('firebaseuidNEQ')) {
      return false;
    }
    if (l$firebaseuidNEQ != lOther$firebaseuidNEQ) {
      return false;
    }
    final l$firebaseuidIn = firebaseuidIn;
    final lOther$firebaseuidIn = other.firebaseuidIn;
    if (_$data.containsKey('firebaseuidIn') !=
        other._$data.containsKey('firebaseuidIn')) {
      return false;
    }
    if (l$firebaseuidIn != null && lOther$firebaseuidIn != null) {
      if (l$firebaseuidIn.length != lOther$firebaseuidIn.length) {
        return false;
      }
      for (int i = 0; i < l$firebaseuidIn.length; i++) {
        final l$firebaseuidIn$entry = l$firebaseuidIn[i];
        final lOther$firebaseuidIn$entry = lOther$firebaseuidIn[i];
        if (l$firebaseuidIn$entry != lOther$firebaseuidIn$entry) {
          return false;
        }
      }
    } else if (l$firebaseuidIn != lOther$firebaseuidIn) {
      return false;
    }
    final l$firebaseuidNotIn = firebaseuidNotIn;
    final lOther$firebaseuidNotIn = other.firebaseuidNotIn;
    if (_$data.containsKey('firebaseuidNotIn') !=
        other._$data.containsKey('firebaseuidNotIn')) {
      return false;
    }
    if (l$firebaseuidNotIn != null && lOther$firebaseuidNotIn != null) {
      if (l$firebaseuidNotIn.length != lOther$firebaseuidNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$firebaseuidNotIn.length; i++) {
        final l$firebaseuidNotIn$entry = l$firebaseuidNotIn[i];
        final lOther$firebaseuidNotIn$entry = lOther$firebaseuidNotIn[i];
        if (l$firebaseuidNotIn$entry != lOther$firebaseuidNotIn$entry) {
          return false;
        }
      }
    } else if (l$firebaseuidNotIn != lOther$firebaseuidNotIn) {
      return false;
    }
    final l$firebaseuidGT = firebaseuidGT;
    final lOther$firebaseuidGT = other.firebaseuidGT;
    if (_$data.containsKey('firebaseuidGT') !=
        other._$data.containsKey('firebaseuidGT')) {
      return false;
    }
    if (l$firebaseuidGT != lOther$firebaseuidGT) {
      return false;
    }
    final l$firebaseuidGTE = firebaseuidGTE;
    final lOther$firebaseuidGTE = other.firebaseuidGTE;
    if (_$data.containsKey('firebaseuidGTE') !=
        other._$data.containsKey('firebaseuidGTE')) {
      return false;
    }
    if (l$firebaseuidGTE != lOther$firebaseuidGTE) {
      return false;
    }
    final l$firebaseuidLT = firebaseuidLT;
    final lOther$firebaseuidLT = other.firebaseuidLT;
    if (_$data.containsKey('firebaseuidLT') !=
        other._$data.containsKey('firebaseuidLT')) {
      return false;
    }
    if (l$firebaseuidLT != lOther$firebaseuidLT) {
      return false;
    }
    final l$firebaseuidLTE = firebaseuidLTE;
    final lOther$firebaseuidLTE = other.firebaseuidLTE;
    if (_$data.containsKey('firebaseuidLTE') !=
        other._$data.containsKey('firebaseuidLTE')) {
      return false;
    }
    if (l$firebaseuidLTE != lOther$firebaseuidLTE) {
      return false;
    }
    final l$firebaseuidContains = firebaseuidContains;
    final lOther$firebaseuidContains = other.firebaseuidContains;
    if (_$data.containsKey('firebaseuidContains') !=
        other._$data.containsKey('firebaseuidContains')) {
      return false;
    }
    if (l$firebaseuidContains != lOther$firebaseuidContains) {
      return false;
    }
    final l$firebaseuidHasPrefix = firebaseuidHasPrefix;
    final lOther$firebaseuidHasPrefix = other.firebaseuidHasPrefix;
    if (_$data.containsKey('firebaseuidHasPrefix') !=
        other._$data.containsKey('firebaseuidHasPrefix')) {
      return false;
    }
    if (l$firebaseuidHasPrefix != lOther$firebaseuidHasPrefix) {
      return false;
    }
    final l$firebaseuidHasSuffix = firebaseuidHasSuffix;
    final lOther$firebaseuidHasSuffix = other.firebaseuidHasSuffix;
    if (_$data.containsKey('firebaseuidHasSuffix') !=
        other._$data.containsKey('firebaseuidHasSuffix')) {
      return false;
    }
    if (l$firebaseuidHasSuffix != lOther$firebaseuidHasSuffix) {
      return false;
    }
    final l$firebaseuidIsNil = firebaseuidIsNil;
    final lOther$firebaseuidIsNil = other.firebaseuidIsNil;
    if (_$data.containsKey('firebaseuidIsNil') !=
        other._$data.containsKey('firebaseuidIsNil')) {
      return false;
    }
    if (l$firebaseuidIsNil != lOther$firebaseuidIsNil) {
      return false;
    }
    final l$firebaseuidNotNil = firebaseuidNotNil;
    final lOther$firebaseuidNotNil = other.firebaseuidNotNil;
    if (_$data.containsKey('firebaseuidNotNil') !=
        other._$data.containsKey('firebaseuidNotNil')) {
      return false;
    }
    if (l$firebaseuidNotNil != lOther$firebaseuidNotNil) {
      return false;
    }
    final l$firebaseuidEqualFold = firebaseuidEqualFold;
    final lOther$firebaseuidEqualFold = other.firebaseuidEqualFold;
    if (_$data.containsKey('firebaseuidEqualFold') !=
        other._$data.containsKey('firebaseuidEqualFold')) {
      return false;
    }
    if (l$firebaseuidEqualFold != lOther$firebaseuidEqualFold) {
      return false;
    }
    final l$firebaseuidContainsFold = firebaseuidContainsFold;
    final lOther$firebaseuidContainsFold = other.firebaseuidContainsFold;
    if (_$data.containsKey('firebaseuidContainsFold') !=
        other._$data.containsKey('firebaseuidContainsFold')) {
      return false;
    }
    if (l$firebaseuidContainsFold != lOther$firebaseuidContainsFold) {
      return false;
    }
    final l$displayname = displayname;
    final lOther$displayname = other.displayname;
    if (_$data.containsKey('displayname') !=
        other._$data.containsKey('displayname')) {
      return false;
    }
    if (l$displayname != lOther$displayname) {
      return false;
    }
    final l$displaynameNEQ = displaynameNEQ;
    final lOther$displaynameNEQ = other.displaynameNEQ;
    if (_$data.containsKey('displaynameNEQ') !=
        other._$data.containsKey('displaynameNEQ')) {
      return false;
    }
    if (l$displaynameNEQ != lOther$displaynameNEQ) {
      return false;
    }
    final l$displaynameIn = displaynameIn;
    final lOther$displaynameIn = other.displaynameIn;
    if (_$data.containsKey('displaynameIn') !=
        other._$data.containsKey('displaynameIn')) {
      return false;
    }
    if (l$displaynameIn != null && lOther$displaynameIn != null) {
      if (l$displaynameIn.length != lOther$displaynameIn.length) {
        return false;
      }
      for (int i = 0; i < l$displaynameIn.length; i++) {
        final l$displaynameIn$entry = l$displaynameIn[i];
        final lOther$displaynameIn$entry = lOther$displaynameIn[i];
        if (l$displaynameIn$entry != lOther$displaynameIn$entry) {
          return false;
        }
      }
    } else if (l$displaynameIn != lOther$displaynameIn) {
      return false;
    }
    final l$displaynameNotIn = displaynameNotIn;
    final lOther$displaynameNotIn = other.displaynameNotIn;
    if (_$data.containsKey('displaynameNotIn') !=
        other._$data.containsKey('displaynameNotIn')) {
      return false;
    }
    if (l$displaynameNotIn != null && lOther$displaynameNotIn != null) {
      if (l$displaynameNotIn.length != lOther$displaynameNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$displaynameNotIn.length; i++) {
        final l$displaynameNotIn$entry = l$displaynameNotIn[i];
        final lOther$displaynameNotIn$entry = lOther$displaynameNotIn[i];
        if (l$displaynameNotIn$entry != lOther$displaynameNotIn$entry) {
          return false;
        }
      }
    } else if (l$displaynameNotIn != lOther$displaynameNotIn) {
      return false;
    }
    final l$displaynameGT = displaynameGT;
    final lOther$displaynameGT = other.displaynameGT;
    if (_$data.containsKey('displaynameGT') !=
        other._$data.containsKey('displaynameGT')) {
      return false;
    }
    if (l$displaynameGT != lOther$displaynameGT) {
      return false;
    }
    final l$displaynameGTE = displaynameGTE;
    final lOther$displaynameGTE = other.displaynameGTE;
    if (_$data.containsKey('displaynameGTE') !=
        other._$data.containsKey('displaynameGTE')) {
      return false;
    }
    if (l$displaynameGTE != lOther$displaynameGTE) {
      return false;
    }
    final l$displaynameLT = displaynameLT;
    final lOther$displaynameLT = other.displaynameLT;
    if (_$data.containsKey('displaynameLT') !=
        other._$data.containsKey('displaynameLT')) {
      return false;
    }
    if (l$displaynameLT != lOther$displaynameLT) {
      return false;
    }
    final l$displaynameLTE = displaynameLTE;
    final lOther$displaynameLTE = other.displaynameLTE;
    if (_$data.containsKey('displaynameLTE') !=
        other._$data.containsKey('displaynameLTE')) {
      return false;
    }
    if (l$displaynameLTE != lOther$displaynameLTE) {
      return false;
    }
    final l$displaynameContains = displaynameContains;
    final lOther$displaynameContains = other.displaynameContains;
    if (_$data.containsKey('displaynameContains') !=
        other._$data.containsKey('displaynameContains')) {
      return false;
    }
    if (l$displaynameContains != lOther$displaynameContains) {
      return false;
    }
    final l$displaynameHasPrefix = displaynameHasPrefix;
    final lOther$displaynameHasPrefix = other.displaynameHasPrefix;
    if (_$data.containsKey('displaynameHasPrefix') !=
        other._$data.containsKey('displaynameHasPrefix')) {
      return false;
    }
    if (l$displaynameHasPrefix != lOther$displaynameHasPrefix) {
      return false;
    }
    final l$displaynameHasSuffix = displaynameHasSuffix;
    final lOther$displaynameHasSuffix = other.displaynameHasSuffix;
    if (_$data.containsKey('displaynameHasSuffix') !=
        other._$data.containsKey('displaynameHasSuffix')) {
      return false;
    }
    if (l$displaynameHasSuffix != lOther$displaynameHasSuffix) {
      return false;
    }
    final l$displaynameEqualFold = displaynameEqualFold;
    final lOther$displaynameEqualFold = other.displaynameEqualFold;
    if (_$data.containsKey('displaynameEqualFold') !=
        other._$data.containsKey('displaynameEqualFold')) {
      return false;
    }
    if (l$displaynameEqualFold != lOther$displaynameEqualFold) {
      return false;
    }
    final l$displaynameContainsFold = displaynameContainsFold;
    final lOther$displaynameContainsFold = other.displaynameContainsFold;
    if (_$data.containsKey('displaynameContainsFold') !=
        other._$data.containsKey('displaynameContainsFold')) {
      return false;
    }
    if (l$displaynameContainsFold != lOther$displaynameContainsFold) {
      return false;
    }
    final l$createdat = createdat;
    final lOther$createdat = other.createdat;
    if (_$data.containsKey('createdat') !=
        other._$data.containsKey('createdat')) {
      return false;
    }
    if (l$createdat != lOther$createdat) {
      return false;
    }
    final l$createdatNEQ = createdatNEQ;
    final lOther$createdatNEQ = other.createdatNEQ;
    if (_$data.containsKey('createdatNEQ') !=
        other._$data.containsKey('createdatNEQ')) {
      return false;
    }
    if (l$createdatNEQ != lOther$createdatNEQ) {
      return false;
    }
    final l$createdatIn = createdatIn;
    final lOther$createdatIn = other.createdatIn;
    if (_$data.containsKey('createdatIn') !=
        other._$data.containsKey('createdatIn')) {
      return false;
    }
    if (l$createdatIn != null && lOther$createdatIn != null) {
      if (l$createdatIn.length != lOther$createdatIn.length) {
        return false;
      }
      for (int i = 0; i < l$createdatIn.length; i++) {
        final l$createdatIn$entry = l$createdatIn[i];
        final lOther$createdatIn$entry = lOther$createdatIn[i];
        if (l$createdatIn$entry != lOther$createdatIn$entry) {
          return false;
        }
      }
    } else if (l$createdatIn != lOther$createdatIn) {
      return false;
    }
    final l$createdatNotIn = createdatNotIn;
    final lOther$createdatNotIn = other.createdatNotIn;
    if (_$data.containsKey('createdatNotIn') !=
        other._$data.containsKey('createdatNotIn')) {
      return false;
    }
    if (l$createdatNotIn != null && lOther$createdatNotIn != null) {
      if (l$createdatNotIn.length != lOther$createdatNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$createdatNotIn.length; i++) {
        final l$createdatNotIn$entry = l$createdatNotIn[i];
        final lOther$createdatNotIn$entry = lOther$createdatNotIn[i];
        if (l$createdatNotIn$entry != lOther$createdatNotIn$entry) {
          return false;
        }
      }
    } else if (l$createdatNotIn != lOther$createdatNotIn) {
      return false;
    }
    final l$createdatGT = createdatGT;
    final lOther$createdatGT = other.createdatGT;
    if (_$data.containsKey('createdatGT') !=
        other._$data.containsKey('createdatGT')) {
      return false;
    }
    if (l$createdatGT != lOther$createdatGT) {
      return false;
    }
    final l$createdatGTE = createdatGTE;
    final lOther$createdatGTE = other.createdatGTE;
    if (_$data.containsKey('createdatGTE') !=
        other._$data.containsKey('createdatGTE')) {
      return false;
    }
    if (l$createdatGTE != lOther$createdatGTE) {
      return false;
    }
    final l$createdatLT = createdatLT;
    final lOther$createdatLT = other.createdatLT;
    if (_$data.containsKey('createdatLT') !=
        other._$data.containsKey('createdatLT')) {
      return false;
    }
    if (l$createdatLT != lOther$createdatLT) {
      return false;
    }
    final l$createdatLTE = createdatLTE;
    final lOther$createdatLTE = other.createdatLTE;
    if (_$data.containsKey('createdatLTE') !=
        other._$data.containsKey('createdatLTE')) {
      return false;
    }
    if (l$createdatLTE != lOther$createdatLTE) {
      return false;
    }
    final l$updatedat = updatedat;
    final lOther$updatedat = other.updatedat;
    if (_$data.containsKey('updatedat') !=
        other._$data.containsKey('updatedat')) {
      return false;
    }
    if (l$updatedat != lOther$updatedat) {
      return false;
    }
    final l$updatedatNEQ = updatedatNEQ;
    final lOther$updatedatNEQ = other.updatedatNEQ;
    if (_$data.containsKey('updatedatNEQ') !=
        other._$data.containsKey('updatedatNEQ')) {
      return false;
    }
    if (l$updatedatNEQ != lOther$updatedatNEQ) {
      return false;
    }
    final l$updatedatIn = updatedatIn;
    final lOther$updatedatIn = other.updatedatIn;
    if (_$data.containsKey('updatedatIn') !=
        other._$data.containsKey('updatedatIn')) {
      return false;
    }
    if (l$updatedatIn != null && lOther$updatedatIn != null) {
      if (l$updatedatIn.length != lOther$updatedatIn.length) {
        return false;
      }
      for (int i = 0; i < l$updatedatIn.length; i++) {
        final l$updatedatIn$entry = l$updatedatIn[i];
        final lOther$updatedatIn$entry = lOther$updatedatIn[i];
        if (l$updatedatIn$entry != lOther$updatedatIn$entry) {
          return false;
        }
      }
    } else if (l$updatedatIn != lOther$updatedatIn) {
      return false;
    }
    final l$updatedatNotIn = updatedatNotIn;
    final lOther$updatedatNotIn = other.updatedatNotIn;
    if (_$data.containsKey('updatedatNotIn') !=
        other._$data.containsKey('updatedatNotIn')) {
      return false;
    }
    if (l$updatedatNotIn != null && lOther$updatedatNotIn != null) {
      if (l$updatedatNotIn.length != lOther$updatedatNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$updatedatNotIn.length; i++) {
        final l$updatedatNotIn$entry = l$updatedatNotIn[i];
        final lOther$updatedatNotIn$entry = lOther$updatedatNotIn[i];
        if (l$updatedatNotIn$entry != lOther$updatedatNotIn$entry) {
          return false;
        }
      }
    } else if (l$updatedatNotIn != lOther$updatedatNotIn) {
      return false;
    }
    final l$updatedatGT = updatedatGT;
    final lOther$updatedatGT = other.updatedatGT;
    if (_$data.containsKey('updatedatGT') !=
        other._$data.containsKey('updatedatGT')) {
      return false;
    }
    if (l$updatedatGT != lOther$updatedatGT) {
      return false;
    }
    final l$updatedatGTE = updatedatGTE;
    final lOther$updatedatGTE = other.updatedatGTE;
    if (_$data.containsKey('updatedatGTE') !=
        other._$data.containsKey('updatedatGTE')) {
      return false;
    }
    if (l$updatedatGTE != lOther$updatedatGTE) {
      return false;
    }
    final l$updatedatLT = updatedatLT;
    final lOther$updatedatLT = other.updatedatLT;
    if (_$data.containsKey('updatedatLT') !=
        other._$data.containsKey('updatedatLT')) {
      return false;
    }
    if (l$updatedatLT != lOther$updatedatLT) {
      return false;
    }
    final l$updatedatLTE = updatedatLTE;
    final lOther$updatedatLTE = other.updatedatLTE;
    if (_$data.containsKey('updatedatLTE') !=
        other._$data.containsKey('updatedatLTE')) {
      return false;
    }
    if (l$updatedatLTE != lOther$updatedatLTE) {
      return false;
    }
    final l$authMethod = authMethod;
    final lOther$authMethod = other.authMethod;
    if (_$data.containsKey('authMethod') !=
        other._$data.containsKey('authMethod')) {
      return false;
    }
    if (l$authMethod != lOther$authMethod) {
      return false;
    }
    final l$authMethodNEQ = authMethodNEQ;
    final lOther$authMethodNEQ = other.authMethodNEQ;
    if (_$data.containsKey('authMethodNEQ') !=
        other._$data.containsKey('authMethodNEQ')) {
      return false;
    }
    if (l$authMethodNEQ != lOther$authMethodNEQ) {
      return false;
    }
    final l$authMethodIn = authMethodIn;
    final lOther$authMethodIn = other.authMethodIn;
    if (_$data.containsKey('authMethodIn') !=
        other._$data.containsKey('authMethodIn')) {
      return false;
    }
    if (l$authMethodIn != null && lOther$authMethodIn != null) {
      if (l$authMethodIn.length != lOther$authMethodIn.length) {
        return false;
      }
      for (int i = 0; i < l$authMethodIn.length; i++) {
        final l$authMethodIn$entry = l$authMethodIn[i];
        final lOther$authMethodIn$entry = lOther$authMethodIn[i];
        if (l$authMethodIn$entry != lOther$authMethodIn$entry) {
          return false;
        }
      }
    } else if (l$authMethodIn != lOther$authMethodIn) {
      return false;
    }
    final l$authMethodNotIn = authMethodNotIn;
    final lOther$authMethodNotIn = other.authMethodNotIn;
    if (_$data.containsKey('authMethodNotIn') !=
        other._$data.containsKey('authMethodNotIn')) {
      return false;
    }
    if (l$authMethodNotIn != null && lOther$authMethodNotIn != null) {
      if (l$authMethodNotIn.length != lOther$authMethodNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$authMethodNotIn.length; i++) {
        final l$authMethodNotIn$entry = l$authMethodNotIn[i];
        final lOther$authMethodNotIn$entry = lOther$authMethodNotIn[i];
        if (l$authMethodNotIn$entry != lOther$authMethodNotIn$entry) {
          return false;
        }
      }
    } else if (l$authMethodNotIn != lOther$authMethodNotIn) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$emailNEQ = emailNEQ;
    final lOther$emailNEQ = other.emailNEQ;
    if (_$data.containsKey('emailNEQ') !=
        other._$data.containsKey('emailNEQ')) {
      return false;
    }
    if (l$emailNEQ != lOther$emailNEQ) {
      return false;
    }
    final l$emailIn = emailIn;
    final lOther$emailIn = other.emailIn;
    if (_$data.containsKey('emailIn') != other._$data.containsKey('emailIn')) {
      return false;
    }
    if (l$emailIn != null && lOther$emailIn != null) {
      if (l$emailIn.length != lOther$emailIn.length) {
        return false;
      }
      for (int i = 0; i < l$emailIn.length; i++) {
        final l$emailIn$entry = l$emailIn[i];
        final lOther$emailIn$entry = lOther$emailIn[i];
        if (l$emailIn$entry != lOther$emailIn$entry) {
          return false;
        }
      }
    } else if (l$emailIn != lOther$emailIn) {
      return false;
    }
    final l$emailNotIn = emailNotIn;
    final lOther$emailNotIn = other.emailNotIn;
    if (_$data.containsKey('emailNotIn') !=
        other._$data.containsKey('emailNotIn')) {
      return false;
    }
    if (l$emailNotIn != null && lOther$emailNotIn != null) {
      if (l$emailNotIn.length != lOther$emailNotIn.length) {
        return false;
      }
      for (int i = 0; i < l$emailNotIn.length; i++) {
        final l$emailNotIn$entry = l$emailNotIn[i];
        final lOther$emailNotIn$entry = lOther$emailNotIn[i];
        if (l$emailNotIn$entry != lOther$emailNotIn$entry) {
          return false;
        }
      }
    } else if (l$emailNotIn != lOther$emailNotIn) {
      return false;
    }
    final l$emailGT = emailGT;
    final lOther$emailGT = other.emailGT;
    if (_$data.containsKey('emailGT') != other._$data.containsKey('emailGT')) {
      return false;
    }
    if (l$emailGT != lOther$emailGT) {
      return false;
    }
    final l$emailGTE = emailGTE;
    final lOther$emailGTE = other.emailGTE;
    if (_$data.containsKey('emailGTE') !=
        other._$data.containsKey('emailGTE')) {
      return false;
    }
    if (l$emailGTE != lOther$emailGTE) {
      return false;
    }
    final l$emailLT = emailLT;
    final lOther$emailLT = other.emailLT;
    if (_$data.containsKey('emailLT') != other._$data.containsKey('emailLT')) {
      return false;
    }
    if (l$emailLT != lOther$emailLT) {
      return false;
    }
    final l$emailLTE = emailLTE;
    final lOther$emailLTE = other.emailLTE;
    if (_$data.containsKey('emailLTE') !=
        other._$data.containsKey('emailLTE')) {
      return false;
    }
    if (l$emailLTE != lOther$emailLTE) {
      return false;
    }
    final l$emailContains = emailContains;
    final lOther$emailContains = other.emailContains;
    if (_$data.containsKey('emailContains') !=
        other._$data.containsKey('emailContains')) {
      return false;
    }
    if (l$emailContains != lOther$emailContains) {
      return false;
    }
    final l$emailHasPrefix = emailHasPrefix;
    final lOther$emailHasPrefix = other.emailHasPrefix;
    if (_$data.containsKey('emailHasPrefix') !=
        other._$data.containsKey('emailHasPrefix')) {
      return false;
    }
    if (l$emailHasPrefix != lOther$emailHasPrefix) {
      return false;
    }
    final l$emailHasSuffix = emailHasSuffix;
    final lOther$emailHasSuffix = other.emailHasSuffix;
    if (_$data.containsKey('emailHasSuffix') !=
        other._$data.containsKey('emailHasSuffix')) {
      return false;
    }
    if (l$emailHasSuffix != lOther$emailHasSuffix) {
      return false;
    }
    final l$emailIsNil = emailIsNil;
    final lOther$emailIsNil = other.emailIsNil;
    if (_$data.containsKey('emailIsNil') !=
        other._$data.containsKey('emailIsNil')) {
      return false;
    }
    if (l$emailIsNil != lOther$emailIsNil) {
      return false;
    }
    final l$emailNotNil = emailNotNil;
    final lOther$emailNotNil = other.emailNotNil;
    if (_$data.containsKey('emailNotNil') !=
        other._$data.containsKey('emailNotNil')) {
      return false;
    }
    if (l$emailNotNil != lOther$emailNotNil) {
      return false;
    }
    final l$emailEqualFold = emailEqualFold;
    final lOther$emailEqualFold = other.emailEqualFold;
    if (_$data.containsKey('emailEqualFold') !=
        other._$data.containsKey('emailEqualFold')) {
      return false;
    }
    if (l$emailEqualFold != lOther$emailEqualFold) {
      return false;
    }
    final l$emailContainsFold = emailContainsFold;
    final lOther$emailContainsFold = other.emailContainsFold;
    if (_$data.containsKey('emailContainsFold') !=
        other._$data.containsKey('emailContainsFold')) {
      return false;
    }
    if (l$emailContainsFold != lOther$emailContainsFold) {
      return false;
    }
    final l$emailVerified = emailVerified;
    final lOther$emailVerified = other.emailVerified;
    if (_$data.containsKey('emailVerified') !=
        other._$data.containsKey('emailVerified')) {
      return false;
    }
    if (l$emailVerified != lOther$emailVerified) {
      return false;
    }
    final l$emailVerifiedNEQ = emailVerifiedNEQ;
    final lOther$emailVerifiedNEQ = other.emailVerifiedNEQ;
    if (_$data.containsKey('emailVerifiedNEQ') !=
        other._$data.containsKey('emailVerifiedNEQ')) {
      return false;
    }
    if (l$emailVerifiedNEQ != lOther$emailVerifiedNEQ) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$not = not;
    final l$and = and;
    final l$or = or;
    final l$id = id;
    final l$idNEQ = idNEQ;
    final l$idIn = idIn;
    final l$idNotIn = idNotIn;
    final l$idGT = idGT;
    final l$idGTE = idGTE;
    final l$idLT = idLT;
    final l$idLTE = idLTE;
    final l$firebaseuid = firebaseuid;
    final l$firebaseuidNEQ = firebaseuidNEQ;
    final l$firebaseuidIn = firebaseuidIn;
    final l$firebaseuidNotIn = firebaseuidNotIn;
    final l$firebaseuidGT = firebaseuidGT;
    final l$firebaseuidGTE = firebaseuidGTE;
    final l$firebaseuidLT = firebaseuidLT;
    final l$firebaseuidLTE = firebaseuidLTE;
    final l$firebaseuidContains = firebaseuidContains;
    final l$firebaseuidHasPrefix = firebaseuidHasPrefix;
    final l$firebaseuidHasSuffix = firebaseuidHasSuffix;
    final l$firebaseuidIsNil = firebaseuidIsNil;
    final l$firebaseuidNotNil = firebaseuidNotNil;
    final l$firebaseuidEqualFold = firebaseuidEqualFold;
    final l$firebaseuidContainsFold = firebaseuidContainsFold;
    final l$displayname = displayname;
    final l$displaynameNEQ = displaynameNEQ;
    final l$displaynameIn = displaynameIn;
    final l$displaynameNotIn = displaynameNotIn;
    final l$displaynameGT = displaynameGT;
    final l$displaynameGTE = displaynameGTE;
    final l$displaynameLT = displaynameLT;
    final l$displaynameLTE = displaynameLTE;
    final l$displaynameContains = displaynameContains;
    final l$displaynameHasPrefix = displaynameHasPrefix;
    final l$displaynameHasSuffix = displaynameHasSuffix;
    final l$displaynameEqualFold = displaynameEqualFold;
    final l$displaynameContainsFold = displaynameContainsFold;
    final l$createdat = createdat;
    final l$createdatNEQ = createdatNEQ;
    final l$createdatIn = createdatIn;
    final l$createdatNotIn = createdatNotIn;
    final l$createdatGT = createdatGT;
    final l$createdatGTE = createdatGTE;
    final l$createdatLT = createdatLT;
    final l$createdatLTE = createdatLTE;
    final l$updatedat = updatedat;
    final l$updatedatNEQ = updatedatNEQ;
    final l$updatedatIn = updatedatIn;
    final l$updatedatNotIn = updatedatNotIn;
    final l$updatedatGT = updatedatGT;
    final l$updatedatGTE = updatedatGTE;
    final l$updatedatLT = updatedatLT;
    final l$updatedatLTE = updatedatLTE;
    final l$authMethod = authMethod;
    final l$authMethodNEQ = authMethodNEQ;
    final l$authMethodIn = authMethodIn;
    final l$authMethodNotIn = authMethodNotIn;
    final l$email = email;
    final l$emailNEQ = emailNEQ;
    final l$emailIn = emailIn;
    final l$emailNotIn = emailNotIn;
    final l$emailGT = emailGT;
    final l$emailGTE = emailGTE;
    final l$emailLT = emailLT;
    final l$emailLTE = emailLTE;
    final l$emailContains = emailContains;
    final l$emailHasPrefix = emailHasPrefix;
    final l$emailHasSuffix = emailHasSuffix;
    final l$emailIsNil = emailIsNil;
    final l$emailNotNil = emailNotNil;
    final l$emailEqualFold = emailEqualFold;
    final l$emailContainsFold = emailContainsFold;
    final l$emailVerified = emailVerified;
    final l$emailVerifiedNEQ = emailVerifiedNEQ;
    return Object.hashAll([
      _$data.containsKey('not') ? l$not : const {},
      _$data.containsKey('and')
          ? l$and == null
              ? null
              : Object.hashAll(l$and.map((v) => v))
          : const {},
      _$data.containsKey('or')
          ? l$or == null
              ? null
              : Object.hashAll(l$or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('idNEQ') ? l$idNEQ : const {},
      _$data.containsKey('idIn')
          ? l$idIn == null
              ? null
              : Object.hashAll(l$idIn.map((v) => v))
          : const {},
      _$data.containsKey('idNotIn')
          ? l$idNotIn == null
              ? null
              : Object.hashAll(l$idNotIn.map((v) => v))
          : const {},
      _$data.containsKey('idGT') ? l$idGT : const {},
      _$data.containsKey('idGTE') ? l$idGTE : const {},
      _$data.containsKey('idLT') ? l$idLT : const {},
      _$data.containsKey('idLTE') ? l$idLTE : const {},
      _$data.containsKey('firebaseuid') ? l$firebaseuid : const {},
      _$data.containsKey('firebaseuidNEQ') ? l$firebaseuidNEQ : const {},
      _$data.containsKey('firebaseuidIn')
          ? l$firebaseuidIn == null
              ? null
              : Object.hashAll(l$firebaseuidIn.map((v) => v))
          : const {},
      _$data.containsKey('firebaseuidNotIn')
          ? l$firebaseuidNotIn == null
              ? null
              : Object.hashAll(l$firebaseuidNotIn.map((v) => v))
          : const {},
      _$data.containsKey('firebaseuidGT') ? l$firebaseuidGT : const {},
      _$data.containsKey('firebaseuidGTE') ? l$firebaseuidGTE : const {},
      _$data.containsKey('firebaseuidLT') ? l$firebaseuidLT : const {},
      _$data.containsKey('firebaseuidLTE') ? l$firebaseuidLTE : const {},
      _$data.containsKey('firebaseuidContains')
          ? l$firebaseuidContains
          : const {},
      _$data.containsKey('firebaseuidHasPrefix')
          ? l$firebaseuidHasPrefix
          : const {},
      _$data.containsKey('firebaseuidHasSuffix')
          ? l$firebaseuidHasSuffix
          : const {},
      _$data.containsKey('firebaseuidIsNil') ? l$firebaseuidIsNil : const {},
      _$data.containsKey('firebaseuidNotNil') ? l$firebaseuidNotNil : const {},
      _$data.containsKey('firebaseuidEqualFold')
          ? l$firebaseuidEqualFold
          : const {},
      _$data.containsKey('firebaseuidContainsFold')
          ? l$firebaseuidContainsFold
          : const {},
      _$data.containsKey('displayname') ? l$displayname : const {},
      _$data.containsKey('displaynameNEQ') ? l$displaynameNEQ : const {},
      _$data.containsKey('displaynameIn')
          ? l$displaynameIn == null
              ? null
              : Object.hashAll(l$displaynameIn.map((v) => v))
          : const {},
      _$data.containsKey('displaynameNotIn')
          ? l$displaynameNotIn == null
              ? null
              : Object.hashAll(l$displaynameNotIn.map((v) => v))
          : const {},
      _$data.containsKey('displaynameGT') ? l$displaynameGT : const {},
      _$data.containsKey('displaynameGTE') ? l$displaynameGTE : const {},
      _$data.containsKey('displaynameLT') ? l$displaynameLT : const {},
      _$data.containsKey('displaynameLTE') ? l$displaynameLTE : const {},
      _$data.containsKey('displaynameContains')
          ? l$displaynameContains
          : const {},
      _$data.containsKey('displaynameHasPrefix')
          ? l$displaynameHasPrefix
          : const {},
      _$data.containsKey('displaynameHasSuffix')
          ? l$displaynameHasSuffix
          : const {},
      _$data.containsKey('displaynameEqualFold')
          ? l$displaynameEqualFold
          : const {},
      _$data.containsKey('displaynameContainsFold')
          ? l$displaynameContainsFold
          : const {},
      _$data.containsKey('createdat') ? l$createdat : const {},
      _$data.containsKey('createdatNEQ') ? l$createdatNEQ : const {},
      _$data.containsKey('createdatIn')
          ? l$createdatIn == null
              ? null
              : Object.hashAll(l$createdatIn.map((v) => v))
          : const {},
      _$data.containsKey('createdatNotIn')
          ? l$createdatNotIn == null
              ? null
              : Object.hashAll(l$createdatNotIn.map((v) => v))
          : const {},
      _$data.containsKey('createdatGT') ? l$createdatGT : const {},
      _$data.containsKey('createdatGTE') ? l$createdatGTE : const {},
      _$data.containsKey('createdatLT') ? l$createdatLT : const {},
      _$data.containsKey('createdatLTE') ? l$createdatLTE : const {},
      _$data.containsKey('updatedat') ? l$updatedat : const {},
      _$data.containsKey('updatedatNEQ') ? l$updatedatNEQ : const {},
      _$data.containsKey('updatedatIn')
          ? l$updatedatIn == null
              ? null
              : Object.hashAll(l$updatedatIn.map((v) => v))
          : const {},
      _$data.containsKey('updatedatNotIn')
          ? l$updatedatNotIn == null
              ? null
              : Object.hashAll(l$updatedatNotIn.map((v) => v))
          : const {},
      _$data.containsKey('updatedatGT') ? l$updatedatGT : const {},
      _$data.containsKey('updatedatGTE') ? l$updatedatGTE : const {},
      _$data.containsKey('updatedatLT') ? l$updatedatLT : const {},
      _$data.containsKey('updatedatLTE') ? l$updatedatLTE : const {},
      _$data.containsKey('authMethod') ? l$authMethod : const {},
      _$data.containsKey('authMethodNEQ') ? l$authMethodNEQ : const {},
      _$data.containsKey('authMethodIn')
          ? l$authMethodIn == null
              ? null
              : Object.hashAll(l$authMethodIn.map((v) => v))
          : const {},
      _$data.containsKey('authMethodNotIn')
          ? l$authMethodNotIn == null
              ? null
              : Object.hashAll(l$authMethodNotIn.map((v) => v))
          : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('emailNEQ') ? l$emailNEQ : const {},
      _$data.containsKey('emailIn')
          ? l$emailIn == null
              ? null
              : Object.hashAll(l$emailIn.map((v) => v))
          : const {},
      _$data.containsKey('emailNotIn')
          ? l$emailNotIn == null
              ? null
              : Object.hashAll(l$emailNotIn.map((v) => v))
          : const {},
      _$data.containsKey('emailGT') ? l$emailGT : const {},
      _$data.containsKey('emailGTE') ? l$emailGTE : const {},
      _$data.containsKey('emailLT') ? l$emailLT : const {},
      _$data.containsKey('emailLTE') ? l$emailLTE : const {},
      _$data.containsKey('emailContains') ? l$emailContains : const {},
      _$data.containsKey('emailHasPrefix') ? l$emailHasPrefix : const {},
      _$data.containsKey('emailHasSuffix') ? l$emailHasSuffix : const {},
      _$data.containsKey('emailIsNil') ? l$emailIsNil : const {},
      _$data.containsKey('emailNotNil') ? l$emailNotNil : const {},
      _$data.containsKey('emailEqualFold') ? l$emailEqualFold : const {},
      _$data.containsKey('emailContainsFold') ? l$emailContainsFold : const {},
      _$data.containsKey('emailVerified') ? l$emailVerified : const {},
      _$data.containsKey('emailVerifiedNEQ') ? l$emailVerifiedNEQ : const {},
    ]);
  }
}

abstract class CopyWith$Input$UserWhereInput<TRes> {
  factory CopyWith$Input$UserWhereInput(
    Input$UserWhereInput instance,
    TRes Function(Input$UserWhereInput) then,
  ) = _CopyWithImpl$Input$UserWhereInput;

  factory CopyWith$Input$UserWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$UserWhereInput;

  TRes call({
    Input$UserWhereInput? not,
    List<Input$UserWhereInput>? and,
    List<Input$UserWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? firebaseuid,
    String? firebaseuidNEQ,
    List<String>? firebaseuidIn,
    List<String>? firebaseuidNotIn,
    String? firebaseuidGT,
    String? firebaseuidGTE,
    String? firebaseuidLT,
    String? firebaseuidLTE,
    String? firebaseuidContains,
    String? firebaseuidHasPrefix,
    String? firebaseuidHasSuffix,
    bool? firebaseuidIsNil,
    bool? firebaseuidNotNil,
    String? firebaseuidEqualFold,
    String? firebaseuidContainsFold,
    String? displayname,
    String? displaynameNEQ,
    List<String>? displaynameIn,
    List<String>? displaynameNotIn,
    String? displaynameGT,
    String? displaynameGTE,
    String? displaynameLT,
    String? displaynameLTE,
    String? displaynameContains,
    String? displaynameHasPrefix,
    String? displaynameHasSuffix,
    String? displaynameEqualFold,
    String? displaynameContainsFold,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    Enum$UserAuthMethod? authMethod,
    Enum$UserAuthMethod? authMethodNEQ,
    List<Enum$UserAuthMethod>? authMethodIn,
    List<Enum$UserAuthMethod>? authMethodNotIn,
    String? email,
    String? emailNEQ,
    List<String>? emailIn,
    List<String>? emailNotIn,
    String? emailGT,
    String? emailGTE,
    String? emailLT,
    String? emailLTE,
    String? emailContains,
    String? emailHasPrefix,
    String? emailHasSuffix,
    bool? emailIsNil,
    bool? emailNotNil,
    String? emailEqualFold,
    String? emailContainsFold,
    bool? emailVerified,
    bool? emailVerifiedNEQ,
  });
  CopyWith$Input$UserWhereInput<TRes> get not;
  TRes and(
      Iterable<Input$UserWhereInput>? Function(
              Iterable<CopyWith$Input$UserWhereInput<Input$UserWhereInput>>?)
          _fn);
  TRes or(
      Iterable<Input$UserWhereInput>? Function(
              Iterable<CopyWith$Input$UserWhereInput<Input$UserWhereInput>>?)
          _fn);
}

class _CopyWithImpl$Input$UserWhereInput<TRes>
    implements CopyWith$Input$UserWhereInput<TRes> {
  _CopyWithImpl$Input$UserWhereInput(
    this._instance,
    this._then,
  );

  final Input$UserWhereInput _instance;

  final TRes Function(Input$UserWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? not = _undefined,
    Object? and = _undefined,
    Object? or = _undefined,
    Object? id = _undefined,
    Object? idNEQ = _undefined,
    Object? idIn = _undefined,
    Object? idNotIn = _undefined,
    Object? idGT = _undefined,
    Object? idGTE = _undefined,
    Object? idLT = _undefined,
    Object? idLTE = _undefined,
    Object? firebaseuid = _undefined,
    Object? firebaseuidNEQ = _undefined,
    Object? firebaseuidIn = _undefined,
    Object? firebaseuidNotIn = _undefined,
    Object? firebaseuidGT = _undefined,
    Object? firebaseuidGTE = _undefined,
    Object? firebaseuidLT = _undefined,
    Object? firebaseuidLTE = _undefined,
    Object? firebaseuidContains = _undefined,
    Object? firebaseuidHasPrefix = _undefined,
    Object? firebaseuidHasSuffix = _undefined,
    Object? firebaseuidIsNil = _undefined,
    Object? firebaseuidNotNil = _undefined,
    Object? firebaseuidEqualFold = _undefined,
    Object? firebaseuidContainsFold = _undefined,
    Object? displayname = _undefined,
    Object? displaynameNEQ = _undefined,
    Object? displaynameIn = _undefined,
    Object? displaynameNotIn = _undefined,
    Object? displaynameGT = _undefined,
    Object? displaynameGTE = _undefined,
    Object? displaynameLT = _undefined,
    Object? displaynameLTE = _undefined,
    Object? displaynameContains = _undefined,
    Object? displaynameHasPrefix = _undefined,
    Object? displaynameHasSuffix = _undefined,
    Object? displaynameEqualFold = _undefined,
    Object? displaynameContainsFold = _undefined,
    Object? createdat = _undefined,
    Object? createdatNEQ = _undefined,
    Object? createdatIn = _undefined,
    Object? createdatNotIn = _undefined,
    Object? createdatGT = _undefined,
    Object? createdatGTE = _undefined,
    Object? createdatLT = _undefined,
    Object? createdatLTE = _undefined,
    Object? updatedat = _undefined,
    Object? updatedatNEQ = _undefined,
    Object? updatedatIn = _undefined,
    Object? updatedatNotIn = _undefined,
    Object? updatedatGT = _undefined,
    Object? updatedatGTE = _undefined,
    Object? updatedatLT = _undefined,
    Object? updatedatLTE = _undefined,
    Object? authMethod = _undefined,
    Object? authMethodNEQ = _undefined,
    Object? authMethodIn = _undefined,
    Object? authMethodNotIn = _undefined,
    Object? email = _undefined,
    Object? emailNEQ = _undefined,
    Object? emailIn = _undefined,
    Object? emailNotIn = _undefined,
    Object? emailGT = _undefined,
    Object? emailGTE = _undefined,
    Object? emailLT = _undefined,
    Object? emailLTE = _undefined,
    Object? emailContains = _undefined,
    Object? emailHasPrefix = _undefined,
    Object? emailHasSuffix = _undefined,
    Object? emailIsNil = _undefined,
    Object? emailNotNil = _undefined,
    Object? emailEqualFold = _undefined,
    Object? emailContainsFold = _undefined,
    Object? emailVerified = _undefined,
    Object? emailVerifiedNEQ = _undefined,
  }) =>
      _then(Input$UserWhereInput._({
        ..._instance._$data,
        if (not != _undefined) 'not': (not as Input$UserWhereInput?),
        if (and != _undefined) 'and': (and as List<Input$UserWhereInput>?),
        if (or != _undefined) 'or': (or as List<Input$UserWhereInput>?),
        if (id != _undefined) 'id': (id as String?),
        if (idNEQ != _undefined) 'idNEQ': (idNEQ as String?),
        if (idIn != _undefined) 'idIn': (idIn as List<String>?),
        if (idNotIn != _undefined) 'idNotIn': (idNotIn as List<String>?),
        if (idGT != _undefined) 'idGT': (idGT as String?),
        if (idGTE != _undefined) 'idGTE': (idGTE as String?),
        if (idLT != _undefined) 'idLT': (idLT as String?),
        if (idLTE != _undefined) 'idLTE': (idLTE as String?),
        if (firebaseuid != _undefined) 'firebaseuid': (firebaseuid as String?),
        if (firebaseuidNEQ != _undefined)
          'firebaseuidNEQ': (firebaseuidNEQ as String?),
        if (firebaseuidIn != _undefined)
          'firebaseuidIn': (firebaseuidIn as List<String>?),
        if (firebaseuidNotIn != _undefined)
          'firebaseuidNotIn': (firebaseuidNotIn as List<String>?),
        if (firebaseuidGT != _undefined)
          'firebaseuidGT': (firebaseuidGT as String?),
        if (firebaseuidGTE != _undefined)
          'firebaseuidGTE': (firebaseuidGTE as String?),
        if (firebaseuidLT != _undefined)
          'firebaseuidLT': (firebaseuidLT as String?),
        if (firebaseuidLTE != _undefined)
          'firebaseuidLTE': (firebaseuidLTE as String?),
        if (firebaseuidContains != _undefined)
          'firebaseuidContains': (firebaseuidContains as String?),
        if (firebaseuidHasPrefix != _undefined)
          'firebaseuidHasPrefix': (firebaseuidHasPrefix as String?),
        if (firebaseuidHasSuffix != _undefined)
          'firebaseuidHasSuffix': (firebaseuidHasSuffix as String?),
        if (firebaseuidIsNil != _undefined)
          'firebaseuidIsNil': (firebaseuidIsNil as bool?),
        if (firebaseuidNotNil != _undefined)
          'firebaseuidNotNil': (firebaseuidNotNil as bool?),
        if (firebaseuidEqualFold != _undefined)
          'firebaseuidEqualFold': (firebaseuidEqualFold as String?),
        if (firebaseuidContainsFold != _undefined)
          'firebaseuidContainsFold': (firebaseuidContainsFold as String?),
        if (displayname != _undefined) 'displayname': (displayname as String?),
        if (displaynameNEQ != _undefined)
          'displaynameNEQ': (displaynameNEQ as String?),
        if (displaynameIn != _undefined)
          'displaynameIn': (displaynameIn as List<String>?),
        if (displaynameNotIn != _undefined)
          'displaynameNotIn': (displaynameNotIn as List<String>?),
        if (displaynameGT != _undefined)
          'displaynameGT': (displaynameGT as String?),
        if (displaynameGTE != _undefined)
          'displaynameGTE': (displaynameGTE as String?),
        if (displaynameLT != _undefined)
          'displaynameLT': (displaynameLT as String?),
        if (displaynameLTE != _undefined)
          'displaynameLTE': (displaynameLTE as String?),
        if (displaynameContains != _undefined)
          'displaynameContains': (displaynameContains as String?),
        if (displaynameHasPrefix != _undefined)
          'displaynameHasPrefix': (displaynameHasPrefix as String?),
        if (displaynameHasSuffix != _undefined)
          'displaynameHasSuffix': (displaynameHasSuffix as String?),
        if (displaynameEqualFold != _undefined)
          'displaynameEqualFold': (displaynameEqualFold as String?),
        if (displaynameContainsFold != _undefined)
          'displaynameContainsFold': (displaynameContainsFold as String?),
        if (createdat != _undefined) 'createdat': (createdat as String?),
        if (createdatNEQ != _undefined)
          'createdatNEQ': (createdatNEQ as String?),
        if (createdatIn != _undefined)
          'createdatIn': (createdatIn as List<String>?),
        if (createdatNotIn != _undefined)
          'createdatNotIn': (createdatNotIn as List<String>?),
        if (createdatGT != _undefined) 'createdatGT': (createdatGT as String?),
        if (createdatGTE != _undefined)
          'createdatGTE': (createdatGTE as String?),
        if (createdatLT != _undefined) 'createdatLT': (createdatLT as String?),
        if (createdatLTE != _undefined)
          'createdatLTE': (createdatLTE as String?),
        if (updatedat != _undefined) 'updatedat': (updatedat as String?),
        if (updatedatNEQ != _undefined)
          'updatedatNEQ': (updatedatNEQ as String?),
        if (updatedatIn != _undefined)
          'updatedatIn': (updatedatIn as List<String>?),
        if (updatedatNotIn != _undefined)
          'updatedatNotIn': (updatedatNotIn as List<String>?),
        if (updatedatGT != _undefined) 'updatedatGT': (updatedatGT as String?),
        if (updatedatGTE != _undefined)
          'updatedatGTE': (updatedatGTE as String?),
        if (updatedatLT != _undefined) 'updatedatLT': (updatedatLT as String?),
        if (updatedatLTE != _undefined)
          'updatedatLTE': (updatedatLTE as String?),
        if (authMethod != _undefined)
          'authMethod': (authMethod as Enum$UserAuthMethod?),
        if (authMethodNEQ != _undefined)
          'authMethodNEQ': (authMethodNEQ as Enum$UserAuthMethod?),
        if (authMethodIn != _undefined)
          'authMethodIn': (authMethodIn as List<Enum$UserAuthMethod>?),
        if (authMethodNotIn != _undefined)
          'authMethodNotIn': (authMethodNotIn as List<Enum$UserAuthMethod>?),
        if (email != _undefined) 'email': (email as String?),
        if (emailNEQ != _undefined) 'emailNEQ': (emailNEQ as String?),
        if (emailIn != _undefined) 'emailIn': (emailIn as List<String>?),
        if (emailNotIn != _undefined)
          'emailNotIn': (emailNotIn as List<String>?),
        if (emailGT != _undefined) 'emailGT': (emailGT as String?),
        if (emailGTE != _undefined) 'emailGTE': (emailGTE as String?),
        if (emailLT != _undefined) 'emailLT': (emailLT as String?),
        if (emailLTE != _undefined) 'emailLTE': (emailLTE as String?),
        if (emailContains != _undefined)
          'emailContains': (emailContains as String?),
        if (emailHasPrefix != _undefined)
          'emailHasPrefix': (emailHasPrefix as String?),
        if (emailHasSuffix != _undefined)
          'emailHasSuffix': (emailHasSuffix as String?),
        if (emailIsNil != _undefined) 'emailIsNil': (emailIsNil as bool?),
        if (emailNotNil != _undefined) 'emailNotNil': (emailNotNil as bool?),
        if (emailEqualFold != _undefined)
          'emailEqualFold': (emailEqualFold as String?),
        if (emailContainsFold != _undefined)
          'emailContainsFold': (emailContainsFold as String?),
        if (emailVerified != _undefined)
          'emailVerified': (emailVerified as bool?),
        if (emailVerifiedNEQ != _undefined)
          'emailVerifiedNEQ': (emailVerifiedNEQ as bool?),
      }));

  CopyWith$Input$UserWhereInput<TRes> get not {
    final local$not = _instance.not;
    return local$not == null
        ? CopyWith$Input$UserWhereInput.stub(_then(_instance))
        : CopyWith$Input$UserWhereInput(local$not, (e) => call(not: e));
  }

  TRes and(
          Iterable<Input$UserWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UserWhereInput<Input$UserWhereInput>>?)
              _fn) =>
      call(
          and: _fn(_instance.and?.map((e) => CopyWith$Input$UserWhereInput(
                e,
                (i) => i,
              )))?.toList());

  TRes or(
          Iterable<Input$UserWhereInput>? Function(
                  Iterable<
                      CopyWith$Input$UserWhereInput<Input$UserWhereInput>>?)
              _fn) =>
      call(
          or: _fn(_instance.or?.map((e) => CopyWith$Input$UserWhereInput(
                e,
                (i) => i,
              )))?.toList());
}

class _CopyWithStubImpl$Input$UserWhereInput<TRes>
    implements CopyWith$Input$UserWhereInput<TRes> {
  _CopyWithStubImpl$Input$UserWhereInput(this._res);

  TRes _res;

  call({
    Input$UserWhereInput? not,
    List<Input$UserWhereInput>? and,
    List<Input$UserWhereInput>? or,
    String? id,
    String? idNEQ,
    List<String>? idIn,
    List<String>? idNotIn,
    String? idGT,
    String? idGTE,
    String? idLT,
    String? idLTE,
    String? firebaseuid,
    String? firebaseuidNEQ,
    List<String>? firebaseuidIn,
    List<String>? firebaseuidNotIn,
    String? firebaseuidGT,
    String? firebaseuidGTE,
    String? firebaseuidLT,
    String? firebaseuidLTE,
    String? firebaseuidContains,
    String? firebaseuidHasPrefix,
    String? firebaseuidHasSuffix,
    bool? firebaseuidIsNil,
    bool? firebaseuidNotNil,
    String? firebaseuidEqualFold,
    String? firebaseuidContainsFold,
    String? displayname,
    String? displaynameNEQ,
    List<String>? displaynameIn,
    List<String>? displaynameNotIn,
    String? displaynameGT,
    String? displaynameGTE,
    String? displaynameLT,
    String? displaynameLTE,
    String? displaynameContains,
    String? displaynameHasPrefix,
    String? displaynameHasSuffix,
    String? displaynameEqualFold,
    String? displaynameContainsFold,
    String? createdat,
    String? createdatNEQ,
    List<String>? createdatIn,
    List<String>? createdatNotIn,
    String? createdatGT,
    String? createdatGTE,
    String? createdatLT,
    String? createdatLTE,
    String? updatedat,
    String? updatedatNEQ,
    List<String>? updatedatIn,
    List<String>? updatedatNotIn,
    String? updatedatGT,
    String? updatedatGTE,
    String? updatedatLT,
    String? updatedatLTE,
    Enum$UserAuthMethod? authMethod,
    Enum$UserAuthMethod? authMethodNEQ,
    List<Enum$UserAuthMethod>? authMethodIn,
    List<Enum$UserAuthMethod>? authMethodNotIn,
    String? email,
    String? emailNEQ,
    List<String>? emailIn,
    List<String>? emailNotIn,
    String? emailGT,
    String? emailGTE,
    String? emailLT,
    String? emailLTE,
    String? emailContains,
    String? emailHasPrefix,
    String? emailHasSuffix,
    bool? emailIsNil,
    bool? emailNotNil,
    String? emailEqualFold,
    String? emailContainsFold,
    bool? emailVerified,
    bool? emailVerifiedNEQ,
  }) =>
      _res;

  CopyWith$Input$UserWhereInput<TRes> get not =>
      CopyWith$Input$UserWhereInput.stub(_res);

  and(_fn) => _res;

  or(_fn) => _res;
}

class Input$CreateJournalRecordInput {
  factory Input$CreateJournalRecordInput({
    String? datetime,
    required int duration,
    required String note,
  }) =>
      Input$CreateJournalRecordInput._({
        if (datetime != null) r'datetime': datetime,
        r'duration': duration,
        r'note': note,
      });

  Input$CreateJournalRecordInput._(this._$data);

  factory Input$CreateJournalRecordInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('datetime')) {
      final l$datetime = data['datetime'];
      result$data['datetime'] = (l$datetime as String?);
    }
    final l$duration = data['duration'];
    result$data['duration'] = (l$duration as int);
    final l$note = data['note'];
    result$data['note'] = (l$note as String);
    return Input$CreateJournalRecordInput._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get datetime => (_$data['datetime'] as String?);

  int get duration => (_$data['duration'] as int);

  String get note => (_$data['note'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('datetime')) {
      final l$datetime = datetime;
      result$data['datetime'] = l$datetime;
    }
    final l$duration = duration;
    result$data['duration'] = l$duration;
    final l$note = note;
    result$data['note'] = l$note;
    return result$data;
  }

  CopyWith$Input$CreateJournalRecordInput<Input$CreateJournalRecordInput>
      get copyWith => CopyWith$Input$CreateJournalRecordInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$CreateJournalRecordInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$datetime = datetime;
    final lOther$datetime = other.datetime;
    if (_$data.containsKey('datetime') !=
        other._$data.containsKey('datetime')) {
      return false;
    }
    if (l$datetime != lOther$datetime) {
      return false;
    }
    final l$duration = duration;
    final lOther$duration = other.duration;
    if (l$duration != lOther$duration) {
      return false;
    }
    final l$note = note;
    final lOther$note = other.note;
    if (l$note != lOther$note) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$datetime = datetime;
    final l$duration = duration;
    final l$note = note;
    return Object.hashAll([
      _$data.containsKey('datetime') ? l$datetime : const {},
      l$duration,
      l$note,
    ]);
  }
}

abstract class CopyWith$Input$CreateJournalRecordInput<TRes> {
  factory CopyWith$Input$CreateJournalRecordInput(
    Input$CreateJournalRecordInput instance,
    TRes Function(Input$CreateJournalRecordInput) then,
  ) = _CopyWithImpl$Input$CreateJournalRecordInput;

  factory CopyWith$Input$CreateJournalRecordInput.stub(TRes res) =
      _CopyWithStubImpl$Input$CreateJournalRecordInput;

  TRes call({
    String? datetime,
    int? duration,
    String? note,
  });
}

class _CopyWithImpl$Input$CreateJournalRecordInput<TRes>
    implements CopyWith$Input$CreateJournalRecordInput<TRes> {
  _CopyWithImpl$Input$CreateJournalRecordInput(
    this._instance,
    this._then,
  );

  final Input$CreateJournalRecordInput _instance;

  final TRes Function(Input$CreateJournalRecordInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? datetime = _undefined,
    Object? duration = _undefined,
    Object? note = _undefined,
  }) =>
      _then(Input$CreateJournalRecordInput._({
        ..._instance._$data,
        if (datetime != _undefined) 'datetime': (datetime as String?),
        if (duration != _undefined && duration != null)
          'duration': (duration as int),
        if (note != _undefined && note != null) 'note': (note as String),
      }));
}

class _CopyWithStubImpl$Input$CreateJournalRecordInput<TRes>
    implements CopyWith$Input$CreateJournalRecordInput<TRes> {
  _CopyWithStubImpl$Input$CreateJournalRecordInput(this._res);

  TRes _res;

  call({
    String? datetime,
    int? duration,
    String? note,
  }) =>
      _res;
}

class Input$UpdateJournalRecordInput {
  factory Input$UpdateJournalRecordInput({
    String? datetime,
    int? duration,
    String? note,
  }) =>
      Input$UpdateJournalRecordInput._({
        if (datetime != null) r'datetime': datetime,
        if (duration != null) r'duration': duration,
        if (note != null) r'note': note,
      });

  Input$UpdateJournalRecordInput._(this._$data);

  factory Input$UpdateJournalRecordInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('datetime')) {
      final l$datetime = data['datetime'];
      result$data['datetime'] = (l$datetime as String?);
    }
    if (data.containsKey('duration')) {
      final l$duration = data['duration'];
      result$data['duration'] = (l$duration as int?);
    }
    if (data.containsKey('note')) {
      final l$note = data['note'];
      result$data['note'] = (l$note as String?);
    }
    return Input$UpdateJournalRecordInput._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get datetime => (_$data['datetime'] as String?);

  int? get duration => (_$data['duration'] as int?);

  String? get note => (_$data['note'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('datetime')) {
      final l$datetime = datetime;
      result$data['datetime'] = l$datetime;
    }
    if (_$data.containsKey('duration')) {
      final l$duration = duration;
      result$data['duration'] = l$duration;
    }
    if (_$data.containsKey('note')) {
      final l$note = note;
      result$data['note'] = l$note;
    }
    return result$data;
  }

  CopyWith$Input$UpdateJournalRecordInput<Input$UpdateJournalRecordInput>
      get copyWith => CopyWith$Input$UpdateJournalRecordInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$UpdateJournalRecordInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$datetime = datetime;
    final lOther$datetime = other.datetime;
    if (_$data.containsKey('datetime') !=
        other._$data.containsKey('datetime')) {
      return false;
    }
    if (l$datetime != lOther$datetime) {
      return false;
    }
    final l$duration = duration;
    final lOther$duration = other.duration;
    if (_$data.containsKey('duration') !=
        other._$data.containsKey('duration')) {
      return false;
    }
    if (l$duration != lOther$duration) {
      return false;
    }
    final l$note = note;
    final lOther$note = other.note;
    if (_$data.containsKey('note') != other._$data.containsKey('note')) {
      return false;
    }
    if (l$note != lOther$note) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$datetime = datetime;
    final l$duration = duration;
    final l$note = note;
    return Object.hashAll([
      _$data.containsKey('datetime') ? l$datetime : const {},
      _$data.containsKey('duration') ? l$duration : const {},
      _$data.containsKey('note') ? l$note : const {},
    ]);
  }
}

abstract class CopyWith$Input$UpdateJournalRecordInput<TRes> {
  factory CopyWith$Input$UpdateJournalRecordInput(
    Input$UpdateJournalRecordInput instance,
    TRes Function(Input$UpdateJournalRecordInput) then,
  ) = _CopyWithImpl$Input$UpdateJournalRecordInput;

  factory CopyWith$Input$UpdateJournalRecordInput.stub(TRes res) =
      _CopyWithStubImpl$Input$UpdateJournalRecordInput;

  TRes call({
    String? datetime,
    int? duration,
    String? note,
  });
}

class _CopyWithImpl$Input$UpdateJournalRecordInput<TRes>
    implements CopyWith$Input$UpdateJournalRecordInput<TRes> {
  _CopyWithImpl$Input$UpdateJournalRecordInput(
    this._instance,
    this._then,
  );

  final Input$UpdateJournalRecordInput _instance;

  final TRes Function(Input$UpdateJournalRecordInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? datetime = _undefined,
    Object? duration = _undefined,
    Object? note = _undefined,
  }) =>
      _then(Input$UpdateJournalRecordInput._({
        ..._instance._$data,
        if (datetime != _undefined) 'datetime': (datetime as String?),
        if (duration != _undefined) 'duration': (duration as int?),
        if (note != _undefined) 'note': (note as String?),
      }));
}

class _CopyWithStubImpl$Input$UpdateJournalRecordInput<TRes>
    implements CopyWith$Input$UpdateJournalRecordInput<TRes> {
  _CopyWithStubImpl$Input$UpdateJournalRecordInput(this._res);

  TRes _res;

  call({
    String? datetime,
    int? duration,
    String? note,
  }) =>
      _res;
}

class Input$FinishLessonInput {
  factory Input$FinishLessonInput({
    required String datetime,
    required int duration,
    required String note,
  }) =>
      Input$FinishLessonInput._({
        r'datetime': datetime,
        r'duration': duration,
        r'note': note,
      });

  Input$FinishLessonInput._(this._$data);

  factory Input$FinishLessonInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$datetime = data['datetime'];
    result$data['datetime'] = (l$datetime as String);
    final l$duration = data['duration'];
    result$data['duration'] = (l$duration as int);
    final l$note = data['note'];
    result$data['note'] = (l$note as String);
    return Input$FinishLessonInput._(result$data);
  }

  Map<String, dynamic> _$data;

  String get datetime => (_$data['datetime'] as String);

  int get duration => (_$data['duration'] as int);

  String get note => (_$data['note'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$datetime = datetime;
    result$data['datetime'] = l$datetime;
    final l$duration = duration;
    result$data['duration'] = l$duration;
    final l$note = note;
    result$data['note'] = l$note;
    return result$data;
  }

  CopyWith$Input$FinishLessonInput<Input$FinishLessonInput> get copyWith =>
      CopyWith$Input$FinishLessonInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$FinishLessonInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$datetime = datetime;
    final lOther$datetime = other.datetime;
    if (l$datetime != lOther$datetime) {
      return false;
    }
    final l$duration = duration;
    final lOther$duration = other.duration;
    if (l$duration != lOther$duration) {
      return false;
    }
    final l$note = note;
    final lOther$note = other.note;
    if (l$note != lOther$note) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$datetime = datetime;
    final l$duration = duration;
    final l$note = note;
    return Object.hashAll([
      l$datetime,
      l$duration,
      l$note,
    ]);
  }
}

abstract class CopyWith$Input$FinishLessonInput<TRes> {
  factory CopyWith$Input$FinishLessonInput(
    Input$FinishLessonInput instance,
    TRes Function(Input$FinishLessonInput) then,
  ) = _CopyWithImpl$Input$FinishLessonInput;

  factory CopyWith$Input$FinishLessonInput.stub(TRes res) =
      _CopyWithStubImpl$Input$FinishLessonInput;

  TRes call({
    String? datetime,
    int? duration,
    String? note,
  });
}

class _CopyWithImpl$Input$FinishLessonInput<TRes>
    implements CopyWith$Input$FinishLessonInput<TRes> {
  _CopyWithImpl$Input$FinishLessonInput(
    this._instance,
    this._then,
  );

  final Input$FinishLessonInput _instance;

  final TRes Function(Input$FinishLessonInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? datetime = _undefined,
    Object? duration = _undefined,
    Object? note = _undefined,
  }) =>
      _then(Input$FinishLessonInput._({
        ..._instance._$data,
        if (datetime != _undefined && datetime != null)
          'datetime': (datetime as String),
        if (duration != _undefined && duration != null)
          'duration': (duration as int),
        if (note != _undefined && note != null) 'note': (note as String),
      }));
}

class _CopyWithStubImpl$Input$FinishLessonInput<TRes>
    implements CopyWith$Input$FinishLessonInput<TRes> {
  _CopyWithStubImpl$Input$FinishLessonInput(this._res);

  TRes _res;

  call({
    String? datetime,
    int? duration,
    String? note,
  }) =>
      _res;
}

class Input$SaveLessonProgressInput {
  factory Input$SaveLessonProgressInput({required int progress}) =>
      Input$SaveLessonProgressInput._({
        r'progress': progress,
      });

  Input$SaveLessonProgressInput._(this._$data);

  factory Input$SaveLessonProgressInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$progress = data['progress'];
    result$data['progress'] = (l$progress as int);
    return Input$SaveLessonProgressInput._(result$data);
  }

  Map<String, dynamic> _$data;

  int get progress => (_$data['progress'] as int);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$progress = progress;
    result$data['progress'] = l$progress;
    return result$data;
  }

  CopyWith$Input$SaveLessonProgressInput<Input$SaveLessonProgressInput>
      get copyWith => CopyWith$Input$SaveLessonProgressInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SaveLessonProgressInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$progress = progress;
    final lOther$progress = other.progress;
    if (l$progress != lOther$progress) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$progress = progress;
    return Object.hashAll([l$progress]);
  }
}

abstract class CopyWith$Input$SaveLessonProgressInput<TRes> {
  factory CopyWith$Input$SaveLessonProgressInput(
    Input$SaveLessonProgressInput instance,
    TRes Function(Input$SaveLessonProgressInput) then,
  ) = _CopyWithImpl$Input$SaveLessonProgressInput;

  factory CopyWith$Input$SaveLessonProgressInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SaveLessonProgressInput;

  TRes call({int? progress});
}

class _CopyWithImpl$Input$SaveLessonProgressInput<TRes>
    implements CopyWith$Input$SaveLessonProgressInput<TRes> {
  _CopyWithImpl$Input$SaveLessonProgressInput(
    this._instance,
    this._then,
  );

  final Input$SaveLessonProgressInput _instance;

  final TRes Function(Input$SaveLessonProgressInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? progress = _undefined}) =>
      _then(Input$SaveLessonProgressInput._({
        ..._instance._$data,
        if (progress != _undefined && progress != null)
          'progress': (progress as int),
      }));
}

class _CopyWithStubImpl$Input$SaveLessonProgressInput<TRes>
    implements CopyWith$Input$SaveLessonProgressInput<TRes> {
  _CopyWithStubImpl$Input$SaveLessonProgressInput(this._res);

  TRes _res;

  call({int? progress}) => _res;
}

class Input$ResetLessonProgressInput {
  factory Input$ResetLessonProgressInput({required bool confirm}) =>
      Input$ResetLessonProgressInput._({
        r'confirm': confirm,
      });

  Input$ResetLessonProgressInput._(this._$data);

  factory Input$ResetLessonProgressInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$confirm = data['confirm'];
    result$data['confirm'] = (l$confirm as bool);
    return Input$ResetLessonProgressInput._(result$data);
  }

  Map<String, dynamic> _$data;

  bool get confirm => (_$data['confirm'] as bool);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$confirm = confirm;
    result$data['confirm'] = l$confirm;
    return result$data;
  }

  CopyWith$Input$ResetLessonProgressInput<Input$ResetLessonProgressInput>
      get copyWith => CopyWith$Input$ResetLessonProgressInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$ResetLessonProgressInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$confirm = confirm;
    final lOther$confirm = other.confirm;
    if (l$confirm != lOther$confirm) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$confirm = confirm;
    return Object.hashAll([l$confirm]);
  }
}

abstract class CopyWith$Input$ResetLessonProgressInput<TRes> {
  factory CopyWith$Input$ResetLessonProgressInput(
    Input$ResetLessonProgressInput instance,
    TRes Function(Input$ResetLessonProgressInput) then,
  ) = _CopyWithImpl$Input$ResetLessonProgressInput;

  factory CopyWith$Input$ResetLessonProgressInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ResetLessonProgressInput;

  TRes call({bool? confirm});
}

class _CopyWithImpl$Input$ResetLessonProgressInput<TRes>
    implements CopyWith$Input$ResetLessonProgressInput<TRes> {
  _CopyWithImpl$Input$ResetLessonProgressInput(
    this._instance,
    this._then,
  );

  final Input$ResetLessonProgressInput _instance;

  final TRes Function(Input$ResetLessonProgressInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? confirm = _undefined}) =>
      _then(Input$ResetLessonProgressInput._({
        ..._instance._$data,
        if (confirm != _undefined && confirm != null)
          'confirm': (confirm as bool),
      }));
}

class _CopyWithStubImpl$Input$ResetLessonProgressInput<TRes>
    implements CopyWith$Input$ResetLessonProgressInput<TRes> {
  _CopyWithStubImpl$Input$ResetLessonProgressInput(this._res);

  TRes _res;

  call({bool? confirm}) => _res;
}

class Input$DownloadLessonInput {
  factory Input$DownloadLessonInput({required bool finished}) =>
      Input$DownloadLessonInput._({
        r'finished': finished,
      });

  Input$DownloadLessonInput._(this._$data);

  factory Input$DownloadLessonInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$finished = data['finished'];
    result$data['finished'] = (l$finished as bool);
    return Input$DownloadLessonInput._(result$data);
  }

  Map<String, dynamic> _$data;

  bool get finished => (_$data['finished'] as bool);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$finished = finished;
    result$data['finished'] = l$finished;
    return result$data;
  }

  CopyWith$Input$DownloadLessonInput<Input$DownloadLessonInput> get copyWith =>
      CopyWith$Input$DownloadLessonInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$DownloadLessonInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$finished = finished;
    final lOther$finished = other.finished;
    if (l$finished != lOther$finished) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$finished = finished;
    return Object.hashAll([l$finished]);
  }
}

abstract class CopyWith$Input$DownloadLessonInput<TRes> {
  factory CopyWith$Input$DownloadLessonInput(
    Input$DownloadLessonInput instance,
    TRes Function(Input$DownloadLessonInput) then,
  ) = _CopyWithImpl$Input$DownloadLessonInput;

  factory CopyWith$Input$DownloadLessonInput.stub(TRes res) =
      _CopyWithStubImpl$Input$DownloadLessonInput;

  TRes call({bool? finished});
}

class _CopyWithImpl$Input$DownloadLessonInput<TRes>
    implements CopyWith$Input$DownloadLessonInput<TRes> {
  _CopyWithImpl$Input$DownloadLessonInput(
    this._instance,
    this._then,
  );

  final Input$DownloadLessonInput _instance;

  final TRes Function(Input$DownloadLessonInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? finished = _undefined}) =>
      _then(Input$DownloadLessonInput._({
        ..._instance._$data,
        if (finished != _undefined && finished != null)
          'finished': (finished as bool),
      }));
}

class _CopyWithStubImpl$Input$DownloadLessonInput<TRes>
    implements CopyWith$Input$DownloadLessonInput<TRes> {
  _CopyWithStubImpl$Input$DownloadLessonInput(this._res);

  TRes _res;

  call({bool? finished}) => _res;
}

class Input$MeditationsStatsInput {
  factory Input$MeditationsStatsInput({required String userTimezone}) =>
      Input$MeditationsStatsInput._({
        r'userTimezone': userTimezone,
      });

  Input$MeditationsStatsInput._(this._$data);

  factory Input$MeditationsStatsInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$userTimezone = data['userTimezone'];
    result$data['userTimezone'] = (l$userTimezone as String);
    return Input$MeditationsStatsInput._(result$data);
  }

  Map<String, dynamic> _$data;

  String get userTimezone => (_$data['userTimezone'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$userTimezone = userTimezone;
    result$data['userTimezone'] = l$userTimezone;
    return result$data;
  }

  CopyWith$Input$MeditationsStatsInput<Input$MeditationsStatsInput>
      get copyWith => CopyWith$Input$MeditationsStatsInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MeditationsStatsInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userTimezone = userTimezone;
    final lOther$userTimezone = other.userTimezone;
    if (l$userTimezone != lOther$userTimezone) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$userTimezone = userTimezone;
    return Object.hashAll([l$userTimezone]);
  }
}

abstract class CopyWith$Input$MeditationsStatsInput<TRes> {
  factory CopyWith$Input$MeditationsStatsInput(
    Input$MeditationsStatsInput instance,
    TRes Function(Input$MeditationsStatsInput) then,
  ) = _CopyWithImpl$Input$MeditationsStatsInput;

  factory CopyWith$Input$MeditationsStatsInput.stub(TRes res) =
      _CopyWithStubImpl$Input$MeditationsStatsInput;

  TRes call({String? userTimezone});
}

class _CopyWithImpl$Input$MeditationsStatsInput<TRes>
    implements CopyWith$Input$MeditationsStatsInput<TRes> {
  _CopyWithImpl$Input$MeditationsStatsInput(
    this._instance,
    this._then,
  );

  final Input$MeditationsStatsInput _instance;

  final TRes Function(Input$MeditationsStatsInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? userTimezone = _undefined}) =>
      _then(Input$MeditationsStatsInput._({
        ..._instance._$data,
        if (userTimezone != _undefined && userTimezone != null)
          'userTimezone': (userTimezone as String),
      }));
}

class _CopyWithStubImpl$Input$MeditationsStatsInput<TRes>
    implements CopyWith$Input$MeditationsStatsInput<TRes> {
  _CopyWithStubImpl$Input$MeditationsStatsInput(this._res);

  TRes _res;

  call({String? userTimezone}) => _res;
}

class Input$ResetUnitProgressInput {
  factory Input$ResetUnitProgressInput({required bool confirm}) =>
      Input$ResetUnitProgressInput._({
        r'confirm': confirm,
      });

  Input$ResetUnitProgressInput._(this._$data);

  factory Input$ResetUnitProgressInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$confirm = data['confirm'];
    result$data['confirm'] = (l$confirm as bool);
    return Input$ResetUnitProgressInput._(result$data);
  }

  Map<String, dynamic> _$data;

  bool get confirm => (_$data['confirm'] as bool);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$confirm = confirm;
    result$data['confirm'] = l$confirm;
    return result$data;
  }

  CopyWith$Input$ResetUnitProgressInput<Input$ResetUnitProgressInput>
      get copyWith => CopyWith$Input$ResetUnitProgressInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$ResetUnitProgressInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$confirm = confirm;
    final lOther$confirm = other.confirm;
    if (l$confirm != lOther$confirm) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$confirm = confirm;
    return Object.hashAll([l$confirm]);
  }
}

abstract class CopyWith$Input$ResetUnitProgressInput<TRes> {
  factory CopyWith$Input$ResetUnitProgressInput(
    Input$ResetUnitProgressInput instance,
    TRes Function(Input$ResetUnitProgressInput) then,
  ) = _CopyWithImpl$Input$ResetUnitProgressInput;

  factory CopyWith$Input$ResetUnitProgressInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ResetUnitProgressInput;

  TRes call({bool? confirm});
}

class _CopyWithImpl$Input$ResetUnitProgressInput<TRes>
    implements CopyWith$Input$ResetUnitProgressInput<TRes> {
  _CopyWithImpl$Input$ResetUnitProgressInput(
    this._instance,
    this._then,
  );

  final Input$ResetUnitProgressInput _instance;

  final TRes Function(Input$ResetUnitProgressInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? confirm = _undefined}) =>
      _then(Input$ResetUnitProgressInput._({
        ..._instance._$data,
        if (confirm != _undefined && confirm != null)
          'confirm': (confirm as bool),
      }));
}

class _CopyWithStubImpl$Input$ResetUnitProgressInput<TRes>
    implements CopyWith$Input$ResetUnitProgressInput<TRes> {
  _CopyWithStubImpl$Input$ResetUnitProgressInput(this._res);

  TRes _res;

  call({bool? confirm}) => _res;
}

class Input$DownloadUnitInput {
  factory Input$DownloadUnitInput({required bool finished}) =>
      Input$DownloadUnitInput._({
        r'finished': finished,
      });

  Input$DownloadUnitInput._(this._$data);

  factory Input$DownloadUnitInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$finished = data['finished'];
    result$data['finished'] = (l$finished as bool);
    return Input$DownloadUnitInput._(result$data);
  }

  Map<String, dynamic> _$data;

  bool get finished => (_$data['finished'] as bool);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$finished = finished;
    result$data['finished'] = l$finished;
    return result$data;
  }

  CopyWith$Input$DownloadUnitInput<Input$DownloadUnitInput> get copyWith =>
      CopyWith$Input$DownloadUnitInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$DownloadUnitInput) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$finished = finished;
    final lOther$finished = other.finished;
    if (l$finished != lOther$finished) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$finished = finished;
    return Object.hashAll([l$finished]);
  }
}

abstract class CopyWith$Input$DownloadUnitInput<TRes> {
  factory CopyWith$Input$DownloadUnitInput(
    Input$DownloadUnitInput instance,
    TRes Function(Input$DownloadUnitInput) then,
  ) = _CopyWithImpl$Input$DownloadUnitInput;

  factory CopyWith$Input$DownloadUnitInput.stub(TRes res) =
      _CopyWithStubImpl$Input$DownloadUnitInput;

  TRes call({bool? finished});
}

class _CopyWithImpl$Input$DownloadUnitInput<TRes>
    implements CopyWith$Input$DownloadUnitInput<TRes> {
  _CopyWithImpl$Input$DownloadUnitInput(
    this._instance,
    this._then,
  );

  final Input$DownloadUnitInput _instance;

  final TRes Function(Input$DownloadUnitInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? finished = _undefined}) =>
      _then(Input$DownloadUnitInput._({
        ..._instance._$data,
        if (finished != _undefined && finished != null)
          'finished': (finished as bool),
      }));
}

class _CopyWithStubImpl$Input$DownloadUnitInput<TRes>
    implements CopyWith$Input$DownloadUnitInput<TRes> {
  _CopyWithStubImpl$Input$DownloadUnitInput(this._res);

  TRes _res;

  call({bool? finished}) => _res;
}

enum Enum$ContentContentType { audio, video, text, $unknown }

String toJson$Enum$ContentContentType(Enum$ContentContentType e) {
  switch (e) {
    case Enum$ContentContentType.audio:
      return r'audio';
    case Enum$ContentContentType.video:
      return r'video';
    case Enum$ContentContentType.text:
      return r'text';
    case Enum$ContentContentType.$unknown:
      return r'$unknown';
  }
}

Enum$ContentContentType fromJson$Enum$ContentContentType(String value) {
  switch (value) {
    case r'audio':
      return Enum$ContentContentType.audio;
    case r'video':
      return Enum$ContentContentType.video;
    case r'text':
      return Enum$ContentContentType.text;
    default:
      return Enum$ContentContentType.$unknown;
  }
}

enum Enum$ContentEpisodeContentType { audio, video, text, $unknown }

String toJson$Enum$ContentEpisodeContentType(Enum$ContentEpisodeContentType e) {
  switch (e) {
    case Enum$ContentEpisodeContentType.audio:
      return r'audio';
    case Enum$ContentEpisodeContentType.video:
      return r'video';
    case Enum$ContentEpisodeContentType.text:
      return r'text';
    case Enum$ContentEpisodeContentType.$unknown:
      return r'$unknown';
  }
}

Enum$ContentEpisodeContentType fromJson$Enum$ContentEpisodeContentType(
    String value) {
  switch (value) {
    case r'audio':
      return Enum$ContentEpisodeContentType.audio;
    case r'video':
      return Enum$ContentEpisodeContentType.video;
    case r'text':
      return Enum$ContentEpisodeContentType.text;
    default:
      return Enum$ContentEpisodeContentType.$unknown;
  }
}

enum Enum$ContentEpisodeOrderField { ORDER, $unknown }

String toJson$Enum$ContentEpisodeOrderField(Enum$ContentEpisodeOrderField e) {
  switch (e) {
    case Enum$ContentEpisodeOrderField.ORDER:
      return r'ORDER';
    case Enum$ContentEpisodeOrderField.$unknown:
      return r'$unknown';
  }
}

Enum$ContentEpisodeOrderField fromJson$Enum$ContentEpisodeOrderField(
    String value) {
  switch (value) {
    case r'ORDER':
      return Enum$ContentEpisodeOrderField.ORDER;
    default:
      return Enum$ContentEpisodeOrderField.$unknown;
  }
}

enum Enum$ContentOrderField { ORDER, $unknown }

String toJson$Enum$ContentOrderField(Enum$ContentOrderField e) {
  switch (e) {
    case Enum$ContentOrderField.ORDER:
      return r'ORDER';
    case Enum$ContentOrderField.$unknown:
      return r'$unknown';
  }
}

Enum$ContentOrderField fromJson$Enum$ContentOrderField(String value) {
  switch (value) {
    case r'ORDER':
      return Enum$ContentOrderField.ORDER;
    default:
      return Enum$ContentOrderField.$unknown;
  }
}

enum Enum$ContentProgressContentType { audio, video, text, $unknown }

String toJson$Enum$ContentProgressContentType(
    Enum$ContentProgressContentType e) {
  switch (e) {
    case Enum$ContentProgressContentType.audio:
      return r'audio';
    case Enum$ContentProgressContentType.video:
      return r'video';
    case Enum$ContentProgressContentType.text:
      return r'text';
    case Enum$ContentProgressContentType.$unknown:
      return r'$unknown';
  }
}

Enum$ContentProgressContentType fromJson$Enum$ContentProgressContentType(
    String value) {
  switch (value) {
    case r'audio':
      return Enum$ContentProgressContentType.audio;
    case r'video':
      return Enum$ContentProgressContentType.video;
    case r'text':
      return Enum$ContentProgressContentType.text;
    default:
      return Enum$ContentProgressContentType.$unknown;
  }
}

enum Enum$CourseOrderField { ORDER, $unknown }

String toJson$Enum$CourseOrderField(Enum$CourseOrderField e) {
  switch (e) {
    case Enum$CourseOrderField.ORDER:
      return r'ORDER';
    case Enum$CourseOrderField.$unknown:
      return r'$unknown';
  }
}

Enum$CourseOrderField fromJson$Enum$CourseOrderField(String value) {
  switch (value) {
    case r'ORDER':
      return Enum$CourseOrderField.ORDER;
    default:
      return Enum$CourseOrderField.$unknown;
  }
}

enum Enum$JournalRecordOrderField { DATE_TIME, CREATED_AT, $unknown }

String toJson$Enum$JournalRecordOrderField(Enum$JournalRecordOrderField e) {
  switch (e) {
    case Enum$JournalRecordOrderField.DATE_TIME:
      return r'DATE_TIME';
    case Enum$JournalRecordOrderField.CREATED_AT:
      return r'CREATED_AT';
    case Enum$JournalRecordOrderField.$unknown:
      return r'$unknown';
  }
}

Enum$JournalRecordOrderField fromJson$Enum$JournalRecordOrderField(
    String value) {
  switch (value) {
    case r'DATE_TIME':
      return Enum$JournalRecordOrderField.DATE_TIME;
    case r'CREATED_AT':
      return Enum$JournalRecordOrderField.CREATED_AT;
    default:
      return Enum$JournalRecordOrderField.$unknown;
  }
}

enum Enum$LessonAudioOrderField { DURATION, $unknown }

String toJson$Enum$LessonAudioOrderField(Enum$LessonAudioOrderField e) {
  switch (e) {
    case Enum$LessonAudioOrderField.DURATION:
      return r'DURATION';
    case Enum$LessonAudioOrderField.$unknown:
      return r'$unknown';
  }
}

Enum$LessonAudioOrderField fromJson$Enum$LessonAudioOrderField(String value) {
  switch (value) {
    case r'DURATION':
      return Enum$LessonAudioOrderField.DURATION;
    default:
      return Enum$LessonAudioOrderField.$unknown;
  }
}

enum Enum$LessonLessonType { guided, mastery, $unknown }

String toJson$Enum$LessonLessonType(Enum$LessonLessonType e) {
  switch (e) {
    case Enum$LessonLessonType.guided:
      return r'guided';
    case Enum$LessonLessonType.mastery:
      return r'mastery';
    case Enum$LessonLessonType.$unknown:
      return r'$unknown';
  }
}

Enum$LessonLessonType fromJson$Enum$LessonLessonType(String value) {
  switch (value) {
    case r'guided':
      return Enum$LessonLessonType.guided;
    case r'mastery':
      return Enum$LessonLessonType.mastery;
    default:
      return Enum$LessonLessonType.$unknown;
  }
}

enum Enum$LessonOrderField { ORDER, $unknown }

String toJson$Enum$LessonOrderField(Enum$LessonOrderField e) {
  switch (e) {
    case Enum$LessonOrderField.ORDER:
      return r'ORDER';
    case Enum$LessonOrderField.$unknown:
      return r'$unknown';
  }
}

Enum$LessonOrderField fromJson$Enum$LessonOrderField(String value) {
  switch (value) {
    case r'ORDER':
      return Enum$LessonOrderField.ORDER;
    default:
      return Enum$LessonOrderField.$unknown;
  }
}

enum Enum$OrderDirection { ASC, DESC, $unknown }

String toJson$Enum$OrderDirection(Enum$OrderDirection e) {
  switch (e) {
    case Enum$OrderDirection.ASC:
      return r'ASC';
    case Enum$OrderDirection.DESC:
      return r'DESC';
    case Enum$OrderDirection.$unknown:
      return r'$unknown';
  }
}

Enum$OrderDirection fromJson$Enum$OrderDirection(String value) {
  switch (value) {
    case r'ASC':
      return Enum$OrderDirection.ASC;
    case r'DESC':
      return Enum$OrderDirection.DESC;
    default:
      return Enum$OrderDirection.$unknown;
  }
}

enum Enum$TechniqueOrderField { ORDER, $unknown }

String toJson$Enum$TechniqueOrderField(Enum$TechniqueOrderField e) {
  switch (e) {
    case Enum$TechniqueOrderField.ORDER:
      return r'ORDER';
    case Enum$TechniqueOrderField.$unknown:
      return r'$unknown';
  }
}

Enum$TechniqueOrderField fromJson$Enum$TechniqueOrderField(String value) {
  switch (value) {
    case r'ORDER':
      return Enum$TechniqueOrderField.ORDER;
    default:
      return Enum$TechniqueOrderField.$unknown;
  }
}

enum Enum$UnitOrderField { ORDER, $unknown }

String toJson$Enum$UnitOrderField(Enum$UnitOrderField e) {
  switch (e) {
    case Enum$UnitOrderField.ORDER:
      return r'ORDER';
    case Enum$UnitOrderField.$unknown:
      return r'$unknown';
  }
}

Enum$UnitOrderField fromJson$Enum$UnitOrderField(String value) {
  switch (value) {
    case r'ORDER':
      return Enum$UnitOrderField.ORDER;
    default:
      return Enum$UnitOrderField.$unknown;
  }
}

enum Enum$UserAuthMethod { local, firebase, $unknown }

String toJson$Enum$UserAuthMethod(Enum$UserAuthMethod e) {
  switch (e) {
    case Enum$UserAuthMethod.local:
      return r'local';
    case Enum$UserAuthMethod.firebase:
      return r'firebase';
    case Enum$UserAuthMethod.$unknown:
      return r'$unknown';
  }
}

Enum$UserAuthMethod fromJson$Enum$UserAuthMethod(String value) {
  switch (value) {
    case r'local':
      return Enum$UserAuthMethod.local;
    case r'firebase':
      return Enum$UserAuthMethod.firebase;
    default:
      return Enum$UserAuthMethod.$unknown;
  }
}

enum Enum$UserOrderField { CREATED_AT, $unknown }

String toJson$Enum$UserOrderField(Enum$UserOrderField e) {
  switch (e) {
    case Enum$UserOrderField.CREATED_AT:
      return r'CREATED_AT';
    case Enum$UserOrderField.$unknown:
      return r'$unknown';
  }
}

Enum$UserOrderField fromJson$Enum$UserOrderField(String value) {
  switch (value) {
    case r'CREATED_AT':
      return Enum$UserOrderField.CREATED_AT;
    default:
      return Enum$UserOrderField.$unknown;
  }
}

enum Enum$UserProgressLessonType { guided, mastery, $unknown }

String toJson$Enum$UserProgressLessonType(Enum$UserProgressLessonType e) {
  switch (e) {
    case Enum$UserProgressLessonType.guided:
      return r'guided';
    case Enum$UserProgressLessonType.mastery:
      return r'mastery';
    case Enum$UserProgressLessonType.$unknown:
      return r'$unknown';
  }
}

Enum$UserProgressLessonType fromJson$Enum$UserProgressLessonType(String value) {
  switch (value) {
    case r'guided':
      return Enum$UserProgressLessonType.guided;
    case r'mastery':
      return Enum$UserProgressLessonType.mastery;
    default:
      return Enum$UserProgressLessonType.$unknown;
  }
}

enum Enum$UserProgressOrderField { FINISHED_AT, CREATED_AT, $unknown }

String toJson$Enum$UserProgressOrderField(Enum$UserProgressOrderField e) {
  switch (e) {
    case Enum$UserProgressOrderField.FINISHED_AT:
      return r'FINISHED_AT';
    case Enum$UserProgressOrderField.CREATED_AT:
      return r'CREATED_AT';
    case Enum$UserProgressOrderField.$unknown:
      return r'$unknown';
  }
}

Enum$UserProgressOrderField fromJson$Enum$UserProgressOrderField(String value) {
  switch (value) {
    case r'FINISHED_AT':
      return Enum$UserProgressOrderField.FINISHED_AT;
    case r'CREATED_AT':
      return Enum$UserProgressOrderField.CREATED_AT;
    default:
      return Enum$UserProgressOrderField.$unknown;
  }
}

enum Enum$__TypeKind {
  SCALAR,
  OBJECT,
  INTERFACE,
  UNION,
  ENUM,
  INPUT_OBJECT,
  LIST,
  NON_NULL,
  $unknown
}

String toJson$Enum$__TypeKind(Enum$__TypeKind e) {
  switch (e) {
    case Enum$__TypeKind.SCALAR:
      return r'SCALAR';
    case Enum$__TypeKind.OBJECT:
      return r'OBJECT';
    case Enum$__TypeKind.INTERFACE:
      return r'INTERFACE';
    case Enum$__TypeKind.UNION:
      return r'UNION';
    case Enum$__TypeKind.ENUM:
      return r'ENUM';
    case Enum$__TypeKind.INPUT_OBJECT:
      return r'INPUT_OBJECT';
    case Enum$__TypeKind.LIST:
      return r'LIST';
    case Enum$__TypeKind.NON_NULL:
      return r'NON_NULL';
    case Enum$__TypeKind.$unknown:
      return r'$unknown';
  }
}

Enum$__TypeKind fromJson$Enum$__TypeKind(String value) {
  switch (value) {
    case r'SCALAR':
      return Enum$__TypeKind.SCALAR;
    case r'OBJECT':
      return Enum$__TypeKind.OBJECT;
    case r'INTERFACE':
      return Enum$__TypeKind.INTERFACE;
    case r'UNION':
      return Enum$__TypeKind.UNION;
    case r'ENUM':
      return Enum$__TypeKind.ENUM;
    case r'INPUT_OBJECT':
      return Enum$__TypeKind.INPUT_OBJECT;
    case r'LIST':
      return Enum$__TypeKind.LIST;
    case r'NON_NULL':
      return Enum$__TypeKind.NON_NULL;
    default:
      return Enum$__TypeKind.$unknown;
  }
}

enum Enum$__DirectiveLocation {
  QUERY,
  MUTATION,
  SUBSCRIPTION,
  FIELD,
  FRAGMENT_DEFINITION,
  FRAGMENT_SPREAD,
  INLINE_FRAGMENT,
  VARIABLE_DEFINITION,
  SCHEMA,
  SCALAR,
  OBJECT,
  FIELD_DEFINITION,
  ARGUMENT_DEFINITION,
  INTERFACE,
  UNION,
  ENUM,
  ENUM_VALUE,
  INPUT_OBJECT,
  INPUT_FIELD_DEFINITION,
  $unknown
}

String toJson$Enum$__DirectiveLocation(Enum$__DirectiveLocation e) {
  switch (e) {
    case Enum$__DirectiveLocation.QUERY:
      return r'QUERY';
    case Enum$__DirectiveLocation.MUTATION:
      return r'MUTATION';
    case Enum$__DirectiveLocation.SUBSCRIPTION:
      return r'SUBSCRIPTION';
    case Enum$__DirectiveLocation.FIELD:
      return r'FIELD';
    case Enum$__DirectiveLocation.FRAGMENT_DEFINITION:
      return r'FRAGMENT_DEFINITION';
    case Enum$__DirectiveLocation.FRAGMENT_SPREAD:
      return r'FRAGMENT_SPREAD';
    case Enum$__DirectiveLocation.INLINE_FRAGMENT:
      return r'INLINE_FRAGMENT';
    case Enum$__DirectiveLocation.VARIABLE_DEFINITION:
      return r'VARIABLE_DEFINITION';
    case Enum$__DirectiveLocation.SCHEMA:
      return r'SCHEMA';
    case Enum$__DirectiveLocation.SCALAR:
      return r'SCALAR';
    case Enum$__DirectiveLocation.OBJECT:
      return r'OBJECT';
    case Enum$__DirectiveLocation.FIELD_DEFINITION:
      return r'FIELD_DEFINITION';
    case Enum$__DirectiveLocation.ARGUMENT_DEFINITION:
      return r'ARGUMENT_DEFINITION';
    case Enum$__DirectiveLocation.INTERFACE:
      return r'INTERFACE';
    case Enum$__DirectiveLocation.UNION:
      return r'UNION';
    case Enum$__DirectiveLocation.ENUM:
      return r'ENUM';
    case Enum$__DirectiveLocation.ENUM_VALUE:
      return r'ENUM_VALUE';
    case Enum$__DirectiveLocation.INPUT_OBJECT:
      return r'INPUT_OBJECT';
    case Enum$__DirectiveLocation.INPUT_FIELD_DEFINITION:
      return r'INPUT_FIELD_DEFINITION';
    case Enum$__DirectiveLocation.$unknown:
      return r'$unknown';
  }
}

Enum$__DirectiveLocation fromJson$Enum$__DirectiveLocation(String value) {
  switch (value) {
    case r'QUERY':
      return Enum$__DirectiveLocation.QUERY;
    case r'MUTATION':
      return Enum$__DirectiveLocation.MUTATION;
    case r'SUBSCRIPTION':
      return Enum$__DirectiveLocation.SUBSCRIPTION;
    case r'FIELD':
      return Enum$__DirectiveLocation.FIELD;
    case r'FRAGMENT_DEFINITION':
      return Enum$__DirectiveLocation.FRAGMENT_DEFINITION;
    case r'FRAGMENT_SPREAD':
      return Enum$__DirectiveLocation.FRAGMENT_SPREAD;
    case r'INLINE_FRAGMENT':
      return Enum$__DirectiveLocation.INLINE_FRAGMENT;
    case r'VARIABLE_DEFINITION':
      return Enum$__DirectiveLocation.VARIABLE_DEFINITION;
    case r'SCHEMA':
      return Enum$__DirectiveLocation.SCHEMA;
    case r'SCALAR':
      return Enum$__DirectiveLocation.SCALAR;
    case r'OBJECT':
      return Enum$__DirectiveLocation.OBJECT;
    case r'FIELD_DEFINITION':
      return Enum$__DirectiveLocation.FIELD_DEFINITION;
    case r'ARGUMENT_DEFINITION':
      return Enum$__DirectiveLocation.ARGUMENT_DEFINITION;
    case r'INTERFACE':
      return Enum$__DirectiveLocation.INTERFACE;
    case r'UNION':
      return Enum$__DirectiveLocation.UNION;
    case r'ENUM':
      return Enum$__DirectiveLocation.ENUM;
    case r'ENUM_VALUE':
      return Enum$__DirectiveLocation.ENUM_VALUE;
    case r'INPUT_OBJECT':
      return Enum$__DirectiveLocation.INPUT_OBJECT;
    case r'INPUT_FIELD_DEFINITION':
      return Enum$__DirectiveLocation.INPUT_FIELD_DEFINITION;
    default:
      return Enum$__DirectiveLocation.$unknown;
  }
}

const possibleTypesMap = <String, Set<String>>{
  'Node': {
    'Content',
    'ContentEpisode',
    'ContentProgress',
    'Course',
    'JournalRecord',
    'Lesson',
    'LessonAudio',
    'Technique',
    'Unit',
    'User',
    'UserProgress',
  }
};
